
pdm-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006884  08006884  00007884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b4  080068b4  00008044  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080068b4  080068b4  00008044  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080068b4  080068b4  00008044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b4  080068b4  000078b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068b8  080068b8  000078b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  080068bc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000044  08006900  00008044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08006900  00008420  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d5e1  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202a  00000000  00000000  0001564d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00017678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b25  00000000  00000000  000184b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ba2  00000000  00000000  00018fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001001b  00000000  00000000  00031b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091672  00000000  00000000  00041b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d320c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b4  00000000  00000000  000d3250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d6704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800686c 	.word	0x0800686c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	0800686c 	.word	0x0800686c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_dmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	46de      	mov	lr, fp
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	001f      	movs	r7, r3
 800022e:	030b      	lsls	r3, r1, #12
 8000230:	0b1b      	lsrs	r3, r3, #12
 8000232:	0016      	movs	r6, r2
 8000234:	469a      	mov	sl, r3
 8000236:	0fca      	lsrs	r2, r1, #31
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	0004      	movs	r4, r0
 800023c:	4691      	mov	r9, r2
 800023e:	b085      	sub	sp, #20
 8000240:	0d5b      	lsrs	r3, r3, #21
 8000242:	d100      	bne.n	8000246 <__aeabi_dmul+0x26>
 8000244:	e1cf      	b.n	80005e6 <__aeabi_dmul+0x3c6>
 8000246:	4acd      	ldr	r2, [pc, #820]	@ (800057c <__aeabi_dmul+0x35c>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d055      	beq.n	80002f8 <__aeabi_dmul+0xd8>
 800024c:	4651      	mov	r1, sl
 800024e:	0f42      	lsrs	r2, r0, #29
 8000250:	00c9      	lsls	r1, r1, #3
 8000252:	430a      	orrs	r2, r1
 8000254:	2180      	movs	r1, #128	@ 0x80
 8000256:	0409      	lsls	r1, r1, #16
 8000258:	4311      	orrs	r1, r2
 800025a:	00c2      	lsls	r2, r0, #3
 800025c:	4690      	mov	r8, r2
 800025e:	4ac8      	ldr	r2, [pc, #800]	@ (8000580 <__aeabi_dmul+0x360>)
 8000260:	468a      	mov	sl, r1
 8000262:	4693      	mov	fp, r2
 8000264:	449b      	add	fp, r3
 8000266:	2300      	movs	r3, #0
 8000268:	2500      	movs	r5, #0
 800026a:	9302      	str	r3, [sp, #8]
 800026c:	033c      	lsls	r4, r7, #12
 800026e:	007b      	lsls	r3, r7, #1
 8000270:	0ffa      	lsrs	r2, r7, #31
 8000272:	9601      	str	r6, [sp, #4]
 8000274:	0b24      	lsrs	r4, r4, #12
 8000276:	0d5b      	lsrs	r3, r3, #21
 8000278:	9200      	str	r2, [sp, #0]
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x5e>
 800027c:	e188      	b.n	8000590 <__aeabi_dmul+0x370>
 800027e:	4abf      	ldr	r2, [pc, #764]	@ (800057c <__aeabi_dmul+0x35c>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x66>
 8000284:	e092      	b.n	80003ac <__aeabi_dmul+0x18c>
 8000286:	4abe      	ldr	r2, [pc, #760]	@ (8000580 <__aeabi_dmul+0x360>)
 8000288:	4694      	mov	ip, r2
 800028a:	4463      	add	r3, ip
 800028c:	449b      	add	fp, r3
 800028e:	2d0a      	cmp	r5, #10
 8000290:	dc42      	bgt.n	8000318 <__aeabi_dmul+0xf8>
 8000292:	00e4      	lsls	r4, r4, #3
 8000294:	0f73      	lsrs	r3, r6, #29
 8000296:	4323      	orrs	r3, r4
 8000298:	2480      	movs	r4, #128	@ 0x80
 800029a:	4649      	mov	r1, r9
 800029c:	0424      	lsls	r4, r4, #16
 800029e:	431c      	orrs	r4, r3
 80002a0:	00f3      	lsls	r3, r6, #3
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	9b00      	ldr	r3, [sp, #0]
 80002a6:	2000      	movs	r0, #0
 80002a8:	4059      	eors	r1, r3
 80002aa:	b2cb      	uxtb	r3, r1
 80002ac:	9303      	str	r3, [sp, #12]
 80002ae:	2d02      	cmp	r5, #2
 80002b0:	dc00      	bgt.n	80002b4 <__aeabi_dmul+0x94>
 80002b2:	e094      	b.n	80003de <__aeabi_dmul+0x1be>
 80002b4:	2301      	movs	r3, #1
 80002b6:	40ab      	lsls	r3, r5
 80002b8:	001d      	movs	r5, r3
 80002ba:	23a6      	movs	r3, #166	@ 0xa6
 80002bc:	002a      	movs	r2, r5
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	401a      	ands	r2, r3
 80002c2:	421d      	tst	r5, r3
 80002c4:	d000      	beq.n	80002c8 <__aeabi_dmul+0xa8>
 80002c6:	e229      	b.n	800071c <__aeabi_dmul+0x4fc>
 80002c8:	2390      	movs	r3, #144	@ 0x90
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	421d      	tst	r5, r3
 80002ce:	d100      	bne.n	80002d2 <__aeabi_dmul+0xb2>
 80002d0:	e24d      	b.n	800076e <__aeabi_dmul+0x54e>
 80002d2:	2300      	movs	r3, #0
 80002d4:	2480      	movs	r4, #128	@ 0x80
 80002d6:	4699      	mov	r9, r3
 80002d8:	0324      	lsls	r4, r4, #12
 80002da:	4ba8      	ldr	r3, [pc, #672]	@ (800057c <__aeabi_dmul+0x35c>)
 80002dc:	0010      	movs	r0, r2
 80002de:	464a      	mov	r2, r9
 80002e0:	051b      	lsls	r3, r3, #20
 80002e2:	4323      	orrs	r3, r4
 80002e4:	07d2      	lsls	r2, r2, #31
 80002e6:	4313      	orrs	r3, r2
 80002e8:	0019      	movs	r1, r3
 80002ea:	b005      	add	sp, #20
 80002ec:	bcf0      	pop	{r4, r5, r6, r7}
 80002ee:	46bb      	mov	fp, r7
 80002f0:	46b2      	mov	sl, r6
 80002f2:	46a9      	mov	r9, r5
 80002f4:	46a0      	mov	r8, r4
 80002f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f8:	4652      	mov	r2, sl
 80002fa:	4302      	orrs	r2, r0
 80002fc:	4690      	mov	r8, r2
 80002fe:	d000      	beq.n	8000302 <__aeabi_dmul+0xe2>
 8000300:	e1ac      	b.n	800065c <__aeabi_dmul+0x43c>
 8000302:	469b      	mov	fp, r3
 8000304:	2302      	movs	r3, #2
 8000306:	4692      	mov	sl, r2
 8000308:	2508      	movs	r5, #8
 800030a:	9302      	str	r3, [sp, #8]
 800030c:	e7ae      	b.n	800026c <__aeabi_dmul+0x4c>
 800030e:	9b00      	ldr	r3, [sp, #0]
 8000310:	46a2      	mov	sl, r4
 8000312:	4699      	mov	r9, r3
 8000314:	9b01      	ldr	r3, [sp, #4]
 8000316:	4698      	mov	r8, r3
 8000318:	9b02      	ldr	r3, [sp, #8]
 800031a:	2b02      	cmp	r3, #2
 800031c:	d100      	bne.n	8000320 <__aeabi_dmul+0x100>
 800031e:	e1ca      	b.n	80006b6 <__aeabi_dmul+0x496>
 8000320:	2b03      	cmp	r3, #3
 8000322:	d100      	bne.n	8000326 <__aeabi_dmul+0x106>
 8000324:	e192      	b.n	800064c <__aeabi_dmul+0x42c>
 8000326:	2b01      	cmp	r3, #1
 8000328:	d110      	bne.n	800034c <__aeabi_dmul+0x12c>
 800032a:	2300      	movs	r3, #0
 800032c:	2400      	movs	r4, #0
 800032e:	2200      	movs	r2, #0
 8000330:	e7d4      	b.n	80002dc <__aeabi_dmul+0xbc>
 8000332:	2201      	movs	r2, #1
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	403a      	ands	r2, r7
 8000338:	4313      	orrs	r3, r2
 800033a:	4652      	mov	r2, sl
 800033c:	07d2      	lsls	r2, r2, #31
 800033e:	4313      	orrs	r3, r2
 8000340:	4698      	mov	r8, r3
 8000342:	4653      	mov	r3, sl
 8000344:	085b      	lsrs	r3, r3, #1
 8000346:	469a      	mov	sl, r3
 8000348:	9b03      	ldr	r3, [sp, #12]
 800034a:	4699      	mov	r9, r3
 800034c:	465b      	mov	r3, fp
 800034e:	1c58      	adds	r0, r3, #1
 8000350:	2380      	movs	r3, #128	@ 0x80
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	445b      	add	r3, fp
 8000356:	2b00      	cmp	r3, #0
 8000358:	dc00      	bgt.n	800035c <__aeabi_dmul+0x13c>
 800035a:	e1b1      	b.n	80006c0 <__aeabi_dmul+0x4a0>
 800035c:	4642      	mov	r2, r8
 800035e:	0752      	lsls	r2, r2, #29
 8000360:	d00b      	beq.n	800037a <__aeabi_dmul+0x15a>
 8000362:	220f      	movs	r2, #15
 8000364:	4641      	mov	r1, r8
 8000366:	400a      	ands	r2, r1
 8000368:	2a04      	cmp	r2, #4
 800036a:	d006      	beq.n	800037a <__aeabi_dmul+0x15a>
 800036c:	4642      	mov	r2, r8
 800036e:	1d11      	adds	r1, r2, #4
 8000370:	4541      	cmp	r1, r8
 8000372:	4192      	sbcs	r2, r2
 8000374:	4688      	mov	r8, r1
 8000376:	4252      	negs	r2, r2
 8000378:	4492      	add	sl, r2
 800037a:	4652      	mov	r2, sl
 800037c:	01d2      	lsls	r2, r2, #7
 800037e:	d506      	bpl.n	800038e <__aeabi_dmul+0x16e>
 8000380:	4652      	mov	r2, sl
 8000382:	4b80      	ldr	r3, [pc, #512]	@ (8000584 <__aeabi_dmul+0x364>)
 8000384:	401a      	ands	r2, r3
 8000386:	2380      	movs	r3, #128	@ 0x80
 8000388:	4692      	mov	sl, r2
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	18c3      	adds	r3, r0, r3
 800038e:	4a7e      	ldr	r2, [pc, #504]	@ (8000588 <__aeabi_dmul+0x368>)
 8000390:	4293      	cmp	r3, r2
 8000392:	dd00      	ble.n	8000396 <__aeabi_dmul+0x176>
 8000394:	e18f      	b.n	80006b6 <__aeabi_dmul+0x496>
 8000396:	4642      	mov	r2, r8
 8000398:	08d1      	lsrs	r1, r2, #3
 800039a:	4652      	mov	r2, sl
 800039c:	0752      	lsls	r2, r2, #29
 800039e:	430a      	orrs	r2, r1
 80003a0:	4651      	mov	r1, sl
 80003a2:	055b      	lsls	r3, r3, #21
 80003a4:	024c      	lsls	r4, r1, #9
 80003a6:	0b24      	lsrs	r4, r4, #12
 80003a8:	0d5b      	lsrs	r3, r3, #21
 80003aa:	e797      	b.n	80002dc <__aeabi_dmul+0xbc>
 80003ac:	4b73      	ldr	r3, [pc, #460]	@ (800057c <__aeabi_dmul+0x35c>)
 80003ae:	4326      	orrs	r6, r4
 80003b0:	469c      	mov	ip, r3
 80003b2:	44e3      	add	fp, ip
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d100      	bne.n	80003ba <__aeabi_dmul+0x19a>
 80003b8:	e16f      	b.n	800069a <__aeabi_dmul+0x47a>
 80003ba:	2303      	movs	r3, #3
 80003bc:	4649      	mov	r1, r9
 80003be:	431d      	orrs	r5, r3
 80003c0:	9b00      	ldr	r3, [sp, #0]
 80003c2:	4059      	eors	r1, r3
 80003c4:	b2cb      	uxtb	r3, r1
 80003c6:	9303      	str	r3, [sp, #12]
 80003c8:	2d0a      	cmp	r5, #10
 80003ca:	dd00      	ble.n	80003ce <__aeabi_dmul+0x1ae>
 80003cc:	e133      	b.n	8000636 <__aeabi_dmul+0x416>
 80003ce:	2301      	movs	r3, #1
 80003d0:	40ab      	lsls	r3, r5
 80003d2:	001d      	movs	r5, r3
 80003d4:	2303      	movs	r3, #3
 80003d6:	9302      	str	r3, [sp, #8]
 80003d8:	2288      	movs	r2, #136	@ 0x88
 80003da:	422a      	tst	r2, r5
 80003dc:	d197      	bne.n	800030e <__aeabi_dmul+0xee>
 80003de:	4642      	mov	r2, r8
 80003e0:	4643      	mov	r3, r8
 80003e2:	0412      	lsls	r2, r2, #16
 80003e4:	0c12      	lsrs	r2, r2, #16
 80003e6:	0016      	movs	r6, r2
 80003e8:	9801      	ldr	r0, [sp, #4]
 80003ea:	0c1d      	lsrs	r5, r3, #16
 80003ec:	0c03      	lsrs	r3, r0, #16
 80003ee:	0400      	lsls	r0, r0, #16
 80003f0:	0c00      	lsrs	r0, r0, #16
 80003f2:	4346      	muls	r6, r0
 80003f4:	46b4      	mov	ip, r6
 80003f6:	001e      	movs	r6, r3
 80003f8:	436e      	muls	r6, r5
 80003fa:	9600      	str	r6, [sp, #0]
 80003fc:	0016      	movs	r6, r2
 80003fe:	0007      	movs	r7, r0
 8000400:	435e      	muls	r6, r3
 8000402:	4661      	mov	r1, ip
 8000404:	46b0      	mov	r8, r6
 8000406:	436f      	muls	r7, r5
 8000408:	0c0e      	lsrs	r6, r1, #16
 800040a:	44b8      	add	r8, r7
 800040c:	4446      	add	r6, r8
 800040e:	42b7      	cmp	r7, r6
 8000410:	d905      	bls.n	800041e <__aeabi_dmul+0x1fe>
 8000412:	2180      	movs	r1, #128	@ 0x80
 8000414:	0249      	lsls	r1, r1, #9
 8000416:	4688      	mov	r8, r1
 8000418:	9f00      	ldr	r7, [sp, #0]
 800041a:	4447      	add	r7, r8
 800041c:	9700      	str	r7, [sp, #0]
 800041e:	4661      	mov	r1, ip
 8000420:	0409      	lsls	r1, r1, #16
 8000422:	0c09      	lsrs	r1, r1, #16
 8000424:	0c37      	lsrs	r7, r6, #16
 8000426:	0436      	lsls	r6, r6, #16
 8000428:	468c      	mov	ip, r1
 800042a:	0031      	movs	r1, r6
 800042c:	4461      	add	r1, ip
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	0011      	movs	r1, r2
 8000432:	0c26      	lsrs	r6, r4, #16
 8000434:	0424      	lsls	r4, r4, #16
 8000436:	0c24      	lsrs	r4, r4, #16
 8000438:	4361      	muls	r1, r4
 800043a:	468c      	mov	ip, r1
 800043c:	0021      	movs	r1, r4
 800043e:	4369      	muls	r1, r5
 8000440:	4689      	mov	r9, r1
 8000442:	4661      	mov	r1, ip
 8000444:	0c09      	lsrs	r1, r1, #16
 8000446:	4688      	mov	r8, r1
 8000448:	4372      	muls	r2, r6
 800044a:	444a      	add	r2, r9
 800044c:	4442      	add	r2, r8
 800044e:	4375      	muls	r5, r6
 8000450:	4591      	cmp	r9, r2
 8000452:	d903      	bls.n	800045c <__aeabi_dmul+0x23c>
 8000454:	2180      	movs	r1, #128	@ 0x80
 8000456:	0249      	lsls	r1, r1, #9
 8000458:	4688      	mov	r8, r1
 800045a:	4445      	add	r5, r8
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	4688      	mov	r8, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0409      	lsls	r1, r1, #16
 8000464:	0c09      	lsrs	r1, r1, #16
 8000466:	468c      	mov	ip, r1
 8000468:	0412      	lsls	r2, r2, #16
 800046a:	4462      	add	r2, ip
 800046c:	18b9      	adds	r1, r7, r2
 800046e:	9102      	str	r1, [sp, #8]
 8000470:	4651      	mov	r1, sl
 8000472:	0c09      	lsrs	r1, r1, #16
 8000474:	468c      	mov	ip, r1
 8000476:	4651      	mov	r1, sl
 8000478:	040f      	lsls	r7, r1, #16
 800047a:	0c3f      	lsrs	r7, r7, #16
 800047c:	0039      	movs	r1, r7
 800047e:	4341      	muls	r1, r0
 8000480:	4445      	add	r5, r8
 8000482:	4688      	mov	r8, r1
 8000484:	4661      	mov	r1, ip
 8000486:	4341      	muls	r1, r0
 8000488:	468a      	mov	sl, r1
 800048a:	4641      	mov	r1, r8
 800048c:	4660      	mov	r0, ip
 800048e:	0c09      	lsrs	r1, r1, #16
 8000490:	4689      	mov	r9, r1
 8000492:	4358      	muls	r0, r3
 8000494:	437b      	muls	r3, r7
 8000496:	4453      	add	r3, sl
 8000498:	444b      	add	r3, r9
 800049a:	459a      	cmp	sl, r3
 800049c:	d903      	bls.n	80004a6 <__aeabi_dmul+0x286>
 800049e:	2180      	movs	r1, #128	@ 0x80
 80004a0:	0249      	lsls	r1, r1, #9
 80004a2:	4689      	mov	r9, r1
 80004a4:	4448      	add	r0, r9
 80004a6:	0c19      	lsrs	r1, r3, #16
 80004a8:	4689      	mov	r9, r1
 80004aa:	4641      	mov	r1, r8
 80004ac:	0409      	lsls	r1, r1, #16
 80004ae:	0c09      	lsrs	r1, r1, #16
 80004b0:	4688      	mov	r8, r1
 80004b2:	0039      	movs	r1, r7
 80004b4:	4361      	muls	r1, r4
 80004b6:	041b      	lsls	r3, r3, #16
 80004b8:	4443      	add	r3, r8
 80004ba:	4688      	mov	r8, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	434c      	muls	r4, r1
 80004c0:	4371      	muls	r1, r6
 80004c2:	468c      	mov	ip, r1
 80004c4:	4641      	mov	r1, r8
 80004c6:	4377      	muls	r7, r6
 80004c8:	0c0e      	lsrs	r6, r1, #16
 80004ca:	193f      	adds	r7, r7, r4
 80004cc:	19f6      	adds	r6, r6, r7
 80004ce:	4448      	add	r0, r9
 80004d0:	42b4      	cmp	r4, r6
 80004d2:	d903      	bls.n	80004dc <__aeabi_dmul+0x2bc>
 80004d4:	2180      	movs	r1, #128	@ 0x80
 80004d6:	0249      	lsls	r1, r1, #9
 80004d8:	4689      	mov	r9, r1
 80004da:	44cc      	add	ip, r9
 80004dc:	9902      	ldr	r1, [sp, #8]
 80004de:	9f00      	ldr	r7, [sp, #0]
 80004e0:	4689      	mov	r9, r1
 80004e2:	0431      	lsls	r1, r6, #16
 80004e4:	444f      	add	r7, r9
 80004e6:	4689      	mov	r9, r1
 80004e8:	4641      	mov	r1, r8
 80004ea:	4297      	cmp	r7, r2
 80004ec:	4192      	sbcs	r2, r2
 80004ee:	040c      	lsls	r4, r1, #16
 80004f0:	0c24      	lsrs	r4, r4, #16
 80004f2:	444c      	add	r4, r9
 80004f4:	18ff      	adds	r7, r7, r3
 80004f6:	4252      	negs	r2, r2
 80004f8:	1964      	adds	r4, r4, r5
 80004fa:	18a1      	adds	r1, r4, r2
 80004fc:	429f      	cmp	r7, r3
 80004fe:	419b      	sbcs	r3, r3
 8000500:	4688      	mov	r8, r1
 8000502:	4682      	mov	sl, r0
 8000504:	425b      	negs	r3, r3
 8000506:	4699      	mov	r9, r3
 8000508:	4590      	cmp	r8, r2
 800050a:	4192      	sbcs	r2, r2
 800050c:	42ac      	cmp	r4, r5
 800050e:	41a4      	sbcs	r4, r4
 8000510:	44c2      	add	sl, r8
 8000512:	44d1      	add	r9, sl
 8000514:	4252      	negs	r2, r2
 8000516:	4264      	negs	r4, r4
 8000518:	4314      	orrs	r4, r2
 800051a:	4599      	cmp	r9, r3
 800051c:	419b      	sbcs	r3, r3
 800051e:	4582      	cmp	sl, r0
 8000520:	4192      	sbcs	r2, r2
 8000522:	425b      	negs	r3, r3
 8000524:	4252      	negs	r2, r2
 8000526:	4313      	orrs	r3, r2
 8000528:	464a      	mov	r2, r9
 800052a:	0c36      	lsrs	r6, r6, #16
 800052c:	19a4      	adds	r4, r4, r6
 800052e:	18e3      	adds	r3, r4, r3
 8000530:	4463      	add	r3, ip
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	0dd2      	lsrs	r2, r2, #23
 8000536:	431a      	orrs	r2, r3
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	4692      	mov	sl, r2
 800053c:	027a      	lsls	r2, r7, #9
 800053e:	430a      	orrs	r2, r1
 8000540:	1e50      	subs	r0, r2, #1
 8000542:	4182      	sbcs	r2, r0
 8000544:	0dff      	lsrs	r7, r7, #23
 8000546:	4317      	orrs	r7, r2
 8000548:	464a      	mov	r2, r9
 800054a:	0252      	lsls	r2, r2, #9
 800054c:	4317      	orrs	r7, r2
 800054e:	46b8      	mov	r8, r7
 8000550:	01db      	lsls	r3, r3, #7
 8000552:	d500      	bpl.n	8000556 <__aeabi_dmul+0x336>
 8000554:	e6ed      	b.n	8000332 <__aeabi_dmul+0x112>
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <__aeabi_dmul+0x36c>)
 8000558:	9a03      	ldr	r2, [sp, #12]
 800055a:	445b      	add	r3, fp
 800055c:	4691      	mov	r9, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	dc00      	bgt.n	8000564 <__aeabi_dmul+0x344>
 8000562:	e0ac      	b.n	80006be <__aeabi_dmul+0x49e>
 8000564:	003a      	movs	r2, r7
 8000566:	0752      	lsls	r2, r2, #29
 8000568:	d100      	bne.n	800056c <__aeabi_dmul+0x34c>
 800056a:	e710      	b.n	800038e <__aeabi_dmul+0x16e>
 800056c:	220f      	movs	r2, #15
 800056e:	4658      	mov	r0, fp
 8000570:	403a      	ands	r2, r7
 8000572:	2a04      	cmp	r2, #4
 8000574:	d000      	beq.n	8000578 <__aeabi_dmul+0x358>
 8000576:	e6f9      	b.n	800036c <__aeabi_dmul+0x14c>
 8000578:	e709      	b.n	800038e <__aeabi_dmul+0x16e>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	000007ff 	.word	0x000007ff
 8000580:	fffffc01 	.word	0xfffffc01
 8000584:	feffffff 	.word	0xfeffffff
 8000588:	000007fe 	.word	0x000007fe
 800058c:	000003ff 	.word	0x000003ff
 8000590:	0022      	movs	r2, r4
 8000592:	4332      	orrs	r2, r6
 8000594:	d06f      	beq.n	8000676 <__aeabi_dmul+0x456>
 8000596:	2c00      	cmp	r4, #0
 8000598:	d100      	bne.n	800059c <__aeabi_dmul+0x37c>
 800059a:	e0c2      	b.n	8000722 <__aeabi_dmul+0x502>
 800059c:	0020      	movs	r0, r4
 800059e:	f000 fd99 	bl	80010d4 <__clzsi2>
 80005a2:	0002      	movs	r2, r0
 80005a4:	0003      	movs	r3, r0
 80005a6:	3a0b      	subs	r2, #11
 80005a8:	201d      	movs	r0, #29
 80005aa:	1a82      	subs	r2, r0, r2
 80005ac:	0030      	movs	r0, r6
 80005ae:	0019      	movs	r1, r3
 80005b0:	40d0      	lsrs	r0, r2
 80005b2:	3908      	subs	r1, #8
 80005b4:	408c      	lsls	r4, r1
 80005b6:	0002      	movs	r2, r0
 80005b8:	4322      	orrs	r2, r4
 80005ba:	0034      	movs	r4, r6
 80005bc:	408c      	lsls	r4, r1
 80005be:	4659      	mov	r1, fp
 80005c0:	1acb      	subs	r3, r1, r3
 80005c2:	4986      	ldr	r1, [pc, #536]	@ (80007dc <__aeabi_dmul+0x5bc>)
 80005c4:	468b      	mov	fp, r1
 80005c6:	449b      	add	fp, r3
 80005c8:	2d0a      	cmp	r5, #10
 80005ca:	dd00      	ble.n	80005ce <__aeabi_dmul+0x3ae>
 80005cc:	e6a4      	b.n	8000318 <__aeabi_dmul+0xf8>
 80005ce:	4649      	mov	r1, r9
 80005d0:	9b00      	ldr	r3, [sp, #0]
 80005d2:	9401      	str	r4, [sp, #4]
 80005d4:	4059      	eors	r1, r3
 80005d6:	b2cb      	uxtb	r3, r1
 80005d8:	0014      	movs	r4, r2
 80005da:	2000      	movs	r0, #0
 80005dc:	9303      	str	r3, [sp, #12]
 80005de:	2d02      	cmp	r5, #2
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_dmul+0x3c4>
 80005e2:	e667      	b.n	80002b4 <__aeabi_dmul+0x94>
 80005e4:	e6fb      	b.n	80003de <__aeabi_dmul+0x1be>
 80005e6:	4653      	mov	r3, sl
 80005e8:	4303      	orrs	r3, r0
 80005ea:	4698      	mov	r8, r3
 80005ec:	d03c      	beq.n	8000668 <__aeabi_dmul+0x448>
 80005ee:	4653      	mov	r3, sl
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dmul+0x3d6>
 80005f4:	e0a3      	b.n	800073e <__aeabi_dmul+0x51e>
 80005f6:	4650      	mov	r0, sl
 80005f8:	f000 fd6c 	bl	80010d4 <__clzsi2>
 80005fc:	230b      	movs	r3, #11
 80005fe:	425b      	negs	r3, r3
 8000600:	469c      	mov	ip, r3
 8000602:	0002      	movs	r2, r0
 8000604:	4484      	add	ip, r0
 8000606:	0011      	movs	r1, r2
 8000608:	4650      	mov	r0, sl
 800060a:	3908      	subs	r1, #8
 800060c:	4088      	lsls	r0, r1
 800060e:	231d      	movs	r3, #29
 8000610:	4680      	mov	r8, r0
 8000612:	4660      	mov	r0, ip
 8000614:	1a1b      	subs	r3, r3, r0
 8000616:	0020      	movs	r0, r4
 8000618:	40d8      	lsrs	r0, r3
 800061a:	0003      	movs	r3, r0
 800061c:	4640      	mov	r0, r8
 800061e:	4303      	orrs	r3, r0
 8000620:	469a      	mov	sl, r3
 8000622:	0023      	movs	r3, r4
 8000624:	408b      	lsls	r3, r1
 8000626:	4698      	mov	r8, r3
 8000628:	4b6c      	ldr	r3, [pc, #432]	@ (80007dc <__aeabi_dmul+0x5bc>)
 800062a:	2500      	movs	r5, #0
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	469b      	mov	fp, r3
 8000630:	2300      	movs	r3, #0
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	e61a      	b.n	800026c <__aeabi_dmul+0x4c>
 8000636:	2d0f      	cmp	r5, #15
 8000638:	d000      	beq.n	800063c <__aeabi_dmul+0x41c>
 800063a:	e0c9      	b.n	80007d0 <__aeabi_dmul+0x5b0>
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	4652      	mov	r2, sl
 8000640:	031b      	lsls	r3, r3, #12
 8000642:	421a      	tst	r2, r3
 8000644:	d002      	beq.n	800064c <__aeabi_dmul+0x42c>
 8000646:	421c      	tst	r4, r3
 8000648:	d100      	bne.n	800064c <__aeabi_dmul+0x42c>
 800064a:	e092      	b.n	8000772 <__aeabi_dmul+0x552>
 800064c:	2480      	movs	r4, #128	@ 0x80
 800064e:	4653      	mov	r3, sl
 8000650:	0324      	lsls	r4, r4, #12
 8000652:	431c      	orrs	r4, r3
 8000654:	0324      	lsls	r4, r4, #12
 8000656:	4642      	mov	r2, r8
 8000658:	0b24      	lsrs	r4, r4, #12
 800065a:	e63e      	b.n	80002da <__aeabi_dmul+0xba>
 800065c:	469b      	mov	fp, r3
 800065e:	2303      	movs	r3, #3
 8000660:	4680      	mov	r8, r0
 8000662:	250c      	movs	r5, #12
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	e601      	b.n	800026c <__aeabi_dmul+0x4c>
 8000668:	2300      	movs	r3, #0
 800066a:	469a      	mov	sl, r3
 800066c:	469b      	mov	fp, r3
 800066e:	3301      	adds	r3, #1
 8000670:	2504      	movs	r5, #4
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	e5fa      	b.n	800026c <__aeabi_dmul+0x4c>
 8000676:	2101      	movs	r1, #1
 8000678:	430d      	orrs	r5, r1
 800067a:	2d0a      	cmp	r5, #10
 800067c:	dd00      	ble.n	8000680 <__aeabi_dmul+0x460>
 800067e:	e64b      	b.n	8000318 <__aeabi_dmul+0xf8>
 8000680:	4649      	mov	r1, r9
 8000682:	9800      	ldr	r0, [sp, #0]
 8000684:	4041      	eors	r1, r0
 8000686:	b2c9      	uxtb	r1, r1
 8000688:	9103      	str	r1, [sp, #12]
 800068a:	2d02      	cmp	r5, #2
 800068c:	dc00      	bgt.n	8000690 <__aeabi_dmul+0x470>
 800068e:	e096      	b.n	80007be <__aeabi_dmul+0x59e>
 8000690:	2300      	movs	r3, #0
 8000692:	2400      	movs	r4, #0
 8000694:	2001      	movs	r0, #1
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	e60c      	b.n	80002b4 <__aeabi_dmul+0x94>
 800069a:	4649      	mov	r1, r9
 800069c:	2302      	movs	r3, #2
 800069e:	9a00      	ldr	r2, [sp, #0]
 80006a0:	432b      	orrs	r3, r5
 80006a2:	4051      	eors	r1, r2
 80006a4:	b2ca      	uxtb	r2, r1
 80006a6:	9203      	str	r2, [sp, #12]
 80006a8:	2b0a      	cmp	r3, #10
 80006aa:	dd00      	ble.n	80006ae <__aeabi_dmul+0x48e>
 80006ac:	e634      	b.n	8000318 <__aeabi_dmul+0xf8>
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d157      	bne.n	8000762 <__aeabi_dmul+0x542>
 80006b2:	9b03      	ldr	r3, [sp, #12]
 80006b4:	4699      	mov	r9, r3
 80006b6:	2400      	movs	r4, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	4b49      	ldr	r3, [pc, #292]	@ (80007e0 <__aeabi_dmul+0x5c0>)
 80006bc:	e60e      	b.n	80002dc <__aeabi_dmul+0xbc>
 80006be:	4658      	mov	r0, fp
 80006c0:	2101      	movs	r1, #1
 80006c2:	1ac9      	subs	r1, r1, r3
 80006c4:	2938      	cmp	r1, #56	@ 0x38
 80006c6:	dd00      	ble.n	80006ca <__aeabi_dmul+0x4aa>
 80006c8:	e62f      	b.n	800032a <__aeabi_dmul+0x10a>
 80006ca:	291f      	cmp	r1, #31
 80006cc:	dd56      	ble.n	800077c <__aeabi_dmul+0x55c>
 80006ce:	221f      	movs	r2, #31
 80006d0:	4654      	mov	r4, sl
 80006d2:	4252      	negs	r2, r2
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	40dc      	lsrs	r4, r3
 80006d8:	2920      	cmp	r1, #32
 80006da:	d007      	beq.n	80006ec <__aeabi_dmul+0x4cc>
 80006dc:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <__aeabi_dmul+0x5c4>)
 80006de:	4642      	mov	r2, r8
 80006e0:	469c      	mov	ip, r3
 80006e2:	4653      	mov	r3, sl
 80006e4:	4460      	add	r0, ip
 80006e6:	4083      	lsls	r3, r0
 80006e8:	431a      	orrs	r2, r3
 80006ea:	4690      	mov	r8, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	2107      	movs	r1, #7
 80006f0:	1e53      	subs	r3, r2, #1
 80006f2:	419a      	sbcs	r2, r3
 80006f4:	000b      	movs	r3, r1
 80006f6:	4322      	orrs	r2, r4
 80006f8:	4013      	ands	r3, r2
 80006fa:	2400      	movs	r4, #0
 80006fc:	4211      	tst	r1, r2
 80006fe:	d009      	beq.n	8000714 <__aeabi_dmul+0x4f4>
 8000700:	230f      	movs	r3, #15
 8000702:	4013      	ands	r3, r2
 8000704:	2b04      	cmp	r3, #4
 8000706:	d05d      	beq.n	80007c4 <__aeabi_dmul+0x5a4>
 8000708:	1d11      	adds	r1, r2, #4
 800070a:	4291      	cmp	r1, r2
 800070c:	419b      	sbcs	r3, r3
 800070e:	000a      	movs	r2, r1
 8000710:	425b      	negs	r3, r3
 8000712:	075b      	lsls	r3, r3, #29
 8000714:	08d2      	lsrs	r2, r2, #3
 8000716:	431a      	orrs	r2, r3
 8000718:	2300      	movs	r3, #0
 800071a:	e5df      	b.n	80002dc <__aeabi_dmul+0xbc>
 800071c:	9b03      	ldr	r3, [sp, #12]
 800071e:	4699      	mov	r9, r3
 8000720:	e5fa      	b.n	8000318 <__aeabi_dmul+0xf8>
 8000722:	9801      	ldr	r0, [sp, #4]
 8000724:	f000 fcd6 	bl	80010d4 <__clzsi2>
 8000728:	0002      	movs	r2, r0
 800072a:	0003      	movs	r3, r0
 800072c:	3215      	adds	r2, #21
 800072e:	3320      	adds	r3, #32
 8000730:	2a1c      	cmp	r2, #28
 8000732:	dc00      	bgt.n	8000736 <__aeabi_dmul+0x516>
 8000734:	e738      	b.n	80005a8 <__aeabi_dmul+0x388>
 8000736:	9a01      	ldr	r2, [sp, #4]
 8000738:	3808      	subs	r0, #8
 800073a:	4082      	lsls	r2, r0
 800073c:	e73f      	b.n	80005be <__aeabi_dmul+0x39e>
 800073e:	f000 fcc9 	bl	80010d4 <__clzsi2>
 8000742:	2315      	movs	r3, #21
 8000744:	469c      	mov	ip, r3
 8000746:	4484      	add	ip, r0
 8000748:	0002      	movs	r2, r0
 800074a:	4663      	mov	r3, ip
 800074c:	3220      	adds	r2, #32
 800074e:	2b1c      	cmp	r3, #28
 8000750:	dc00      	bgt.n	8000754 <__aeabi_dmul+0x534>
 8000752:	e758      	b.n	8000606 <__aeabi_dmul+0x3e6>
 8000754:	2300      	movs	r3, #0
 8000756:	4698      	mov	r8, r3
 8000758:	0023      	movs	r3, r4
 800075a:	3808      	subs	r0, #8
 800075c:	4083      	lsls	r3, r0
 800075e:	469a      	mov	sl, r3
 8000760:	e762      	b.n	8000628 <__aeabi_dmul+0x408>
 8000762:	001d      	movs	r5, r3
 8000764:	2300      	movs	r3, #0
 8000766:	2400      	movs	r4, #0
 8000768:	2002      	movs	r0, #2
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	e5a2      	b.n	80002b4 <__aeabi_dmul+0x94>
 800076e:	9002      	str	r0, [sp, #8]
 8000770:	e632      	b.n	80003d8 <__aeabi_dmul+0x1b8>
 8000772:	431c      	orrs	r4, r3
 8000774:	9b00      	ldr	r3, [sp, #0]
 8000776:	9a01      	ldr	r2, [sp, #4]
 8000778:	4699      	mov	r9, r3
 800077a:	e5ae      	b.n	80002da <__aeabi_dmul+0xba>
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <__aeabi_dmul+0x5c8>)
 800077e:	4652      	mov	r2, sl
 8000780:	18c3      	adds	r3, r0, r3
 8000782:	4640      	mov	r0, r8
 8000784:	409a      	lsls	r2, r3
 8000786:	40c8      	lsrs	r0, r1
 8000788:	4302      	orrs	r2, r0
 800078a:	4640      	mov	r0, r8
 800078c:	4098      	lsls	r0, r3
 800078e:	0003      	movs	r3, r0
 8000790:	1e58      	subs	r0, r3, #1
 8000792:	4183      	sbcs	r3, r0
 8000794:	4654      	mov	r4, sl
 8000796:	431a      	orrs	r2, r3
 8000798:	40cc      	lsrs	r4, r1
 800079a:	0753      	lsls	r3, r2, #29
 800079c:	d009      	beq.n	80007b2 <__aeabi_dmul+0x592>
 800079e:	230f      	movs	r3, #15
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d005      	beq.n	80007b2 <__aeabi_dmul+0x592>
 80007a6:	1d13      	adds	r3, r2, #4
 80007a8:	4293      	cmp	r3, r2
 80007aa:	4192      	sbcs	r2, r2
 80007ac:	4252      	negs	r2, r2
 80007ae:	18a4      	adds	r4, r4, r2
 80007b0:	001a      	movs	r2, r3
 80007b2:	0223      	lsls	r3, r4, #8
 80007b4:	d508      	bpl.n	80007c8 <__aeabi_dmul+0x5a8>
 80007b6:	2301      	movs	r3, #1
 80007b8:	2400      	movs	r4, #0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e58e      	b.n	80002dc <__aeabi_dmul+0xbc>
 80007be:	4689      	mov	r9, r1
 80007c0:	2400      	movs	r4, #0
 80007c2:	e58b      	b.n	80002dc <__aeabi_dmul+0xbc>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e7a5      	b.n	8000714 <__aeabi_dmul+0x4f4>
 80007c8:	0763      	lsls	r3, r4, #29
 80007ca:	0264      	lsls	r4, r4, #9
 80007cc:	0b24      	lsrs	r4, r4, #12
 80007ce:	e7a1      	b.n	8000714 <__aeabi_dmul+0x4f4>
 80007d0:	9b00      	ldr	r3, [sp, #0]
 80007d2:	46a2      	mov	sl, r4
 80007d4:	4699      	mov	r9, r3
 80007d6:	9b01      	ldr	r3, [sp, #4]
 80007d8:	4698      	mov	r8, r3
 80007da:	e737      	b.n	800064c <__aeabi_dmul+0x42c>
 80007dc:	fffffc0d 	.word	0xfffffc0d
 80007e0:	000007ff 	.word	0x000007ff
 80007e4:	0000043e 	.word	0x0000043e
 80007e8:	0000041e 	.word	0x0000041e

080007ec <__aeabi_dsub>:
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	4657      	mov	r7, sl
 80007f0:	464e      	mov	r6, r9
 80007f2:	4645      	mov	r5, r8
 80007f4:	46de      	mov	lr, fp
 80007f6:	b5e0      	push	{r5, r6, r7, lr}
 80007f8:	b083      	sub	sp, #12
 80007fa:	9000      	str	r0, [sp, #0]
 80007fc:	9101      	str	r1, [sp, #4]
 80007fe:	030c      	lsls	r4, r1, #12
 8000800:	004d      	lsls	r5, r1, #1
 8000802:	0fce      	lsrs	r6, r1, #31
 8000804:	0a61      	lsrs	r1, r4, #9
 8000806:	9c00      	ldr	r4, [sp, #0]
 8000808:	005f      	lsls	r7, r3, #1
 800080a:	0f64      	lsrs	r4, r4, #29
 800080c:	430c      	orrs	r4, r1
 800080e:	9900      	ldr	r1, [sp, #0]
 8000810:	9200      	str	r2, [sp, #0]
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	00c8      	lsls	r0, r1, #3
 8000816:	0319      	lsls	r1, r3, #12
 8000818:	0d7b      	lsrs	r3, r7, #21
 800081a:	4699      	mov	r9, r3
 800081c:	9b01      	ldr	r3, [sp, #4]
 800081e:	4fcc      	ldr	r7, [pc, #816]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000820:	0fdb      	lsrs	r3, r3, #31
 8000822:	469c      	mov	ip, r3
 8000824:	0a4b      	lsrs	r3, r1, #9
 8000826:	9900      	ldr	r1, [sp, #0]
 8000828:	4680      	mov	r8, r0
 800082a:	0f49      	lsrs	r1, r1, #29
 800082c:	4319      	orrs	r1, r3
 800082e:	9b00      	ldr	r3, [sp, #0]
 8000830:	468b      	mov	fp, r1
 8000832:	00da      	lsls	r2, r3, #3
 8000834:	4692      	mov	sl, r2
 8000836:	0d6d      	lsrs	r5, r5, #21
 8000838:	45b9      	cmp	r9, r7
 800083a:	d100      	bne.n	800083e <__aeabi_dsub+0x52>
 800083c:	e0bf      	b.n	80009be <__aeabi_dsub+0x1d2>
 800083e:	2301      	movs	r3, #1
 8000840:	4661      	mov	r1, ip
 8000842:	4059      	eors	r1, r3
 8000844:	464b      	mov	r3, r9
 8000846:	468c      	mov	ip, r1
 8000848:	1aeb      	subs	r3, r5, r3
 800084a:	428e      	cmp	r6, r1
 800084c:	d075      	beq.n	800093a <__aeabi_dsub+0x14e>
 800084e:	2b00      	cmp	r3, #0
 8000850:	dc00      	bgt.n	8000854 <__aeabi_dsub+0x68>
 8000852:	e2a3      	b.n	8000d9c <__aeabi_dsub+0x5b0>
 8000854:	4649      	mov	r1, r9
 8000856:	2900      	cmp	r1, #0
 8000858:	d100      	bne.n	800085c <__aeabi_dsub+0x70>
 800085a:	e0ce      	b.n	80009fa <__aeabi_dsub+0x20e>
 800085c:	42bd      	cmp	r5, r7
 800085e:	d100      	bne.n	8000862 <__aeabi_dsub+0x76>
 8000860:	e200      	b.n	8000c64 <__aeabi_dsub+0x478>
 8000862:	2701      	movs	r7, #1
 8000864:	2b38      	cmp	r3, #56	@ 0x38
 8000866:	dc19      	bgt.n	800089c <__aeabi_dsub+0xb0>
 8000868:	2780      	movs	r7, #128	@ 0x80
 800086a:	4659      	mov	r1, fp
 800086c:	043f      	lsls	r7, r7, #16
 800086e:	4339      	orrs	r1, r7
 8000870:	468b      	mov	fp, r1
 8000872:	2b1f      	cmp	r3, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dsub+0x8c>
 8000876:	e1fa      	b.n	8000c6e <__aeabi_dsub+0x482>
 8000878:	2720      	movs	r7, #32
 800087a:	1af9      	subs	r1, r7, r3
 800087c:	468c      	mov	ip, r1
 800087e:	4659      	mov	r1, fp
 8000880:	4667      	mov	r7, ip
 8000882:	40b9      	lsls	r1, r7
 8000884:	000f      	movs	r7, r1
 8000886:	0011      	movs	r1, r2
 8000888:	40d9      	lsrs	r1, r3
 800088a:	430f      	orrs	r7, r1
 800088c:	4661      	mov	r1, ip
 800088e:	408a      	lsls	r2, r1
 8000890:	1e51      	subs	r1, r2, #1
 8000892:	418a      	sbcs	r2, r1
 8000894:	4659      	mov	r1, fp
 8000896:	40d9      	lsrs	r1, r3
 8000898:	4317      	orrs	r7, r2
 800089a:	1a64      	subs	r4, r4, r1
 800089c:	1bc7      	subs	r7, r0, r7
 800089e:	42b8      	cmp	r0, r7
 80008a0:	4180      	sbcs	r0, r0
 80008a2:	4240      	negs	r0, r0
 80008a4:	1a24      	subs	r4, r4, r0
 80008a6:	0223      	lsls	r3, r4, #8
 80008a8:	d400      	bmi.n	80008ac <__aeabi_dsub+0xc0>
 80008aa:	e140      	b.n	8000b2e <__aeabi_dsub+0x342>
 80008ac:	0264      	lsls	r4, r4, #9
 80008ae:	0a64      	lsrs	r4, r4, #9
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dsub+0xca>
 80008b4:	e154      	b.n	8000b60 <__aeabi_dsub+0x374>
 80008b6:	0020      	movs	r0, r4
 80008b8:	f000 fc0c 	bl	80010d4 <__clzsi2>
 80008bc:	0003      	movs	r3, r0
 80008be:	3b08      	subs	r3, #8
 80008c0:	2120      	movs	r1, #32
 80008c2:	0038      	movs	r0, r7
 80008c4:	1aca      	subs	r2, r1, r3
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	409c      	lsls	r4, r3
 80008ca:	0002      	movs	r2, r0
 80008cc:	409f      	lsls	r7, r3
 80008ce:	4322      	orrs	r2, r4
 80008d0:	429d      	cmp	r5, r3
 80008d2:	dd00      	ble.n	80008d6 <__aeabi_dsub+0xea>
 80008d4:	e1a6      	b.n	8000c24 <__aeabi_dsub+0x438>
 80008d6:	1b58      	subs	r0, r3, r5
 80008d8:	3001      	adds	r0, #1
 80008da:	1a09      	subs	r1, r1, r0
 80008dc:	003c      	movs	r4, r7
 80008de:	408f      	lsls	r7, r1
 80008e0:	40c4      	lsrs	r4, r0
 80008e2:	1e7b      	subs	r3, r7, #1
 80008e4:	419f      	sbcs	r7, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	408b      	lsls	r3, r1
 80008ea:	4327      	orrs	r7, r4
 80008ec:	431f      	orrs	r7, r3
 80008ee:	40c2      	lsrs	r2, r0
 80008f0:	003b      	movs	r3, r7
 80008f2:	0014      	movs	r4, r2
 80008f4:	2500      	movs	r5, #0
 80008f6:	4313      	orrs	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_dsub+0x110>
 80008fa:	e1f7      	b.n	8000cec <__aeabi_dsub+0x500>
 80008fc:	077b      	lsls	r3, r7, #29
 80008fe:	d100      	bne.n	8000902 <__aeabi_dsub+0x116>
 8000900:	e377      	b.n	8000ff2 <__aeabi_dsub+0x806>
 8000902:	230f      	movs	r3, #15
 8000904:	0038      	movs	r0, r7
 8000906:	403b      	ands	r3, r7
 8000908:	2b04      	cmp	r3, #4
 800090a:	d004      	beq.n	8000916 <__aeabi_dsub+0x12a>
 800090c:	1d38      	adds	r0, r7, #4
 800090e:	42b8      	cmp	r0, r7
 8000910:	41bf      	sbcs	r7, r7
 8000912:	427f      	negs	r7, r7
 8000914:	19e4      	adds	r4, r4, r7
 8000916:	0223      	lsls	r3, r4, #8
 8000918:	d400      	bmi.n	800091c <__aeabi_dsub+0x130>
 800091a:	e368      	b.n	8000fee <__aeabi_dsub+0x802>
 800091c:	4b8c      	ldr	r3, [pc, #560]	@ (8000b50 <__aeabi_dsub+0x364>)
 800091e:	3501      	adds	r5, #1
 8000920:	429d      	cmp	r5, r3
 8000922:	d100      	bne.n	8000926 <__aeabi_dsub+0x13a>
 8000924:	e0f4      	b.n	8000b10 <__aeabi_dsub+0x324>
 8000926:	4b8b      	ldr	r3, [pc, #556]	@ (8000b54 <__aeabi_dsub+0x368>)
 8000928:	056d      	lsls	r5, r5, #21
 800092a:	401c      	ands	r4, r3
 800092c:	0d6d      	lsrs	r5, r5, #21
 800092e:	0767      	lsls	r7, r4, #29
 8000930:	08c0      	lsrs	r0, r0, #3
 8000932:	0264      	lsls	r4, r4, #9
 8000934:	4307      	orrs	r7, r0
 8000936:	0b24      	lsrs	r4, r4, #12
 8000938:	e0ec      	b.n	8000b14 <__aeabi_dsub+0x328>
 800093a:	2b00      	cmp	r3, #0
 800093c:	dc00      	bgt.n	8000940 <__aeabi_dsub+0x154>
 800093e:	e329      	b.n	8000f94 <__aeabi_dsub+0x7a8>
 8000940:	4649      	mov	r1, r9
 8000942:	2900      	cmp	r1, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_dsub+0x15c>
 8000946:	e0d6      	b.n	8000af6 <__aeabi_dsub+0x30a>
 8000948:	4659      	mov	r1, fp
 800094a:	4311      	orrs	r1, r2
 800094c:	d100      	bne.n	8000950 <__aeabi_dsub+0x164>
 800094e:	e12e      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000950:	1e59      	subs	r1, r3, #1
 8000952:	2b01      	cmp	r3, #1
 8000954:	d100      	bne.n	8000958 <__aeabi_dsub+0x16c>
 8000956:	e1e6      	b.n	8000d26 <__aeabi_dsub+0x53a>
 8000958:	42bb      	cmp	r3, r7
 800095a:	d100      	bne.n	800095e <__aeabi_dsub+0x172>
 800095c:	e182      	b.n	8000c64 <__aeabi_dsub+0x478>
 800095e:	2701      	movs	r7, #1
 8000960:	000b      	movs	r3, r1
 8000962:	2938      	cmp	r1, #56	@ 0x38
 8000964:	dc14      	bgt.n	8000990 <__aeabi_dsub+0x1a4>
 8000966:	2b1f      	cmp	r3, #31
 8000968:	dd00      	ble.n	800096c <__aeabi_dsub+0x180>
 800096a:	e23c      	b.n	8000de6 <__aeabi_dsub+0x5fa>
 800096c:	2720      	movs	r7, #32
 800096e:	1af9      	subs	r1, r7, r3
 8000970:	468c      	mov	ip, r1
 8000972:	4659      	mov	r1, fp
 8000974:	4667      	mov	r7, ip
 8000976:	40b9      	lsls	r1, r7
 8000978:	000f      	movs	r7, r1
 800097a:	0011      	movs	r1, r2
 800097c:	40d9      	lsrs	r1, r3
 800097e:	430f      	orrs	r7, r1
 8000980:	4661      	mov	r1, ip
 8000982:	408a      	lsls	r2, r1
 8000984:	1e51      	subs	r1, r2, #1
 8000986:	418a      	sbcs	r2, r1
 8000988:	4659      	mov	r1, fp
 800098a:	40d9      	lsrs	r1, r3
 800098c:	4317      	orrs	r7, r2
 800098e:	1864      	adds	r4, r4, r1
 8000990:	183f      	adds	r7, r7, r0
 8000992:	4287      	cmp	r7, r0
 8000994:	4180      	sbcs	r0, r0
 8000996:	4240      	negs	r0, r0
 8000998:	1824      	adds	r4, r4, r0
 800099a:	0223      	lsls	r3, r4, #8
 800099c:	d400      	bmi.n	80009a0 <__aeabi_dsub+0x1b4>
 800099e:	e0c6      	b.n	8000b2e <__aeabi_dsub+0x342>
 80009a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000b50 <__aeabi_dsub+0x364>)
 80009a2:	3501      	adds	r5, #1
 80009a4:	429d      	cmp	r5, r3
 80009a6:	d100      	bne.n	80009aa <__aeabi_dsub+0x1be>
 80009a8:	e0b2      	b.n	8000b10 <__aeabi_dsub+0x324>
 80009aa:	2101      	movs	r1, #1
 80009ac:	4b69      	ldr	r3, [pc, #420]	@ (8000b54 <__aeabi_dsub+0x368>)
 80009ae:	087a      	lsrs	r2, r7, #1
 80009b0:	401c      	ands	r4, r3
 80009b2:	4039      	ands	r1, r7
 80009b4:	430a      	orrs	r2, r1
 80009b6:	07e7      	lsls	r7, r4, #31
 80009b8:	4317      	orrs	r7, r2
 80009ba:	0864      	lsrs	r4, r4, #1
 80009bc:	e79e      	b.n	80008fc <__aeabi_dsub+0x110>
 80009be:	4b66      	ldr	r3, [pc, #408]	@ (8000b58 <__aeabi_dsub+0x36c>)
 80009c0:	4311      	orrs	r1, r2
 80009c2:	468a      	mov	sl, r1
 80009c4:	18eb      	adds	r3, r5, r3
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d028      	beq.n	8000a1c <__aeabi_dsub+0x230>
 80009ca:	4566      	cmp	r6, ip
 80009cc:	d02c      	beq.n	8000a28 <__aeabi_dsub+0x23c>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d05b      	beq.n	8000a8a <__aeabi_dsub+0x29e>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dsub+0x1ec>
 80009d6:	e12c      	b.n	8000c32 <__aeabi_dsub+0x446>
 80009d8:	465b      	mov	r3, fp
 80009da:	4666      	mov	r6, ip
 80009dc:	075f      	lsls	r7, r3, #29
 80009de:	08d2      	lsrs	r2, r2, #3
 80009e0:	4317      	orrs	r7, r2
 80009e2:	08dd      	lsrs	r5, r3, #3
 80009e4:	003b      	movs	r3, r7
 80009e6:	432b      	orrs	r3, r5
 80009e8:	d100      	bne.n	80009ec <__aeabi_dsub+0x200>
 80009ea:	e0e2      	b.n	8000bb2 <__aeabi_dsub+0x3c6>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	0324      	lsls	r4, r4, #12
 80009f0:	432c      	orrs	r4, r5
 80009f2:	0324      	lsls	r4, r4, #12
 80009f4:	4d56      	ldr	r5, [pc, #344]	@ (8000b50 <__aeabi_dsub+0x364>)
 80009f6:	0b24      	lsrs	r4, r4, #12
 80009f8:	e08c      	b.n	8000b14 <__aeabi_dsub+0x328>
 80009fa:	4659      	mov	r1, fp
 80009fc:	4311      	orrs	r1, r2
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dsub+0x216>
 8000a00:	e0d5      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000a02:	1e59      	subs	r1, r3, #1
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dsub+0x21e>
 8000a08:	e1b9      	b.n	8000d7e <__aeabi_dsub+0x592>
 8000a0a:	42bb      	cmp	r3, r7
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dsub+0x224>
 8000a0e:	e1b1      	b.n	8000d74 <__aeabi_dsub+0x588>
 8000a10:	2701      	movs	r7, #1
 8000a12:	000b      	movs	r3, r1
 8000a14:	2938      	cmp	r1, #56	@ 0x38
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dsub+0x22e>
 8000a18:	e740      	b.n	800089c <__aeabi_dsub+0xb0>
 8000a1a:	e72a      	b.n	8000872 <__aeabi_dsub+0x86>
 8000a1c:	4661      	mov	r1, ip
 8000a1e:	2701      	movs	r7, #1
 8000a20:	4079      	eors	r1, r7
 8000a22:	468c      	mov	ip, r1
 8000a24:	4566      	cmp	r6, ip
 8000a26:	d1d2      	bne.n	80009ce <__aeabi_dsub+0x1e2>
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dsub+0x242>
 8000a2c:	e0c5      	b.n	8000bba <__aeabi_dsub+0x3ce>
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dsub+0x248>
 8000a32:	e155      	b.n	8000ce0 <__aeabi_dsub+0x4f4>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0025      	movs	r5, r4
 8000a38:	4305      	orrs	r5, r0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dsub+0x252>
 8000a3c:	e212      	b.n	8000e64 <__aeabi_dsub+0x678>
 8000a3e:	1e59      	subs	r1, r3, #1
 8000a40:	468c      	mov	ip, r1
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dsub+0x25c>
 8000a46:	e249      	b.n	8000edc <__aeabi_dsub+0x6f0>
 8000a48:	4d41      	ldr	r5, [pc, #260]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000a4a:	42ab      	cmp	r3, r5
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dsub+0x264>
 8000a4e:	e28f      	b.n	8000f70 <__aeabi_dsub+0x784>
 8000a50:	2701      	movs	r7, #1
 8000a52:	2938      	cmp	r1, #56	@ 0x38
 8000a54:	dc11      	bgt.n	8000a7a <__aeabi_dsub+0x28e>
 8000a56:	4663      	mov	r3, ip
 8000a58:	2b1f      	cmp	r3, #31
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dsub+0x272>
 8000a5c:	e25b      	b.n	8000f16 <__aeabi_dsub+0x72a>
 8000a5e:	4661      	mov	r1, ip
 8000a60:	2320      	movs	r3, #32
 8000a62:	0027      	movs	r7, r4
 8000a64:	1a5b      	subs	r3, r3, r1
 8000a66:	0005      	movs	r5, r0
 8000a68:	4098      	lsls	r0, r3
 8000a6a:	409f      	lsls	r7, r3
 8000a6c:	40cd      	lsrs	r5, r1
 8000a6e:	1e43      	subs	r3, r0, #1
 8000a70:	4198      	sbcs	r0, r3
 8000a72:	40cc      	lsrs	r4, r1
 8000a74:	432f      	orrs	r7, r5
 8000a76:	4307      	orrs	r7, r0
 8000a78:	44a3      	add	fp, r4
 8000a7a:	18bf      	adds	r7, r7, r2
 8000a7c:	4297      	cmp	r7, r2
 8000a7e:	4192      	sbcs	r2, r2
 8000a80:	4252      	negs	r2, r2
 8000a82:	445a      	add	r2, fp
 8000a84:	0014      	movs	r4, r2
 8000a86:	464d      	mov	r5, r9
 8000a88:	e787      	b.n	800099a <__aeabi_dsub+0x1ae>
 8000a8a:	4f34      	ldr	r7, [pc, #208]	@ (8000b5c <__aeabi_dsub+0x370>)
 8000a8c:	1c6b      	adds	r3, r5, #1
 8000a8e:	423b      	tst	r3, r7
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dsub+0x2a8>
 8000a92:	e0b6      	b.n	8000c02 <__aeabi_dsub+0x416>
 8000a94:	4659      	mov	r1, fp
 8000a96:	0023      	movs	r3, r4
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	000f      	movs	r7, r1
 8000a9c:	4303      	orrs	r3, r0
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dsub+0x2b8>
 8000aa2:	e126      	b.n	8000cf2 <__aeabi_dsub+0x506>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dsub+0x2be>
 8000aa8:	e1c0      	b.n	8000e2c <__aeabi_dsub+0x640>
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dsub+0x2c4>
 8000aae:	e0a1      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000ab0:	1a83      	subs	r3, r0, r2
 8000ab2:	4698      	mov	r8, r3
 8000ab4:	465b      	mov	r3, fp
 8000ab6:	4540      	cmp	r0, r8
 8000ab8:	41ad      	sbcs	r5, r5
 8000aba:	1ae3      	subs	r3, r4, r3
 8000abc:	426d      	negs	r5, r5
 8000abe:	1b5b      	subs	r3, r3, r5
 8000ac0:	2580      	movs	r5, #128	@ 0x80
 8000ac2:	042d      	lsls	r5, r5, #16
 8000ac4:	422b      	tst	r3, r5
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dsub+0x2de>
 8000ac8:	e14b      	b.n	8000d62 <__aeabi_dsub+0x576>
 8000aca:	465b      	mov	r3, fp
 8000acc:	1a10      	subs	r0, r2, r0
 8000ace:	4282      	cmp	r2, r0
 8000ad0:	4192      	sbcs	r2, r2
 8000ad2:	1b1c      	subs	r4, r3, r4
 8000ad4:	0007      	movs	r7, r0
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	4663      	mov	r3, ip
 8000ada:	4252      	negs	r2, r2
 8000adc:	1aa4      	subs	r4, r4, r2
 8000ade:	4327      	orrs	r7, r4
 8000ae0:	401e      	ands	r6, r3
 8000ae2:	2f00      	cmp	r7, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dsub+0x2fc>
 8000ae6:	e142      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000ae8:	422c      	tst	r4, r5
 8000aea:	d100      	bne.n	8000aee <__aeabi_dsub+0x302>
 8000aec:	e26d      	b.n	8000fca <__aeabi_dsub+0x7de>
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <__aeabi_dsub+0x368>)
 8000af0:	2501      	movs	r5, #1
 8000af2:	401c      	ands	r4, r3
 8000af4:	e71b      	b.n	800092e <__aeabi_dsub+0x142>
 8000af6:	42bd      	cmp	r5, r7
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x310>
 8000afa:	e13b      	b.n	8000d74 <__aeabi_dsub+0x588>
 8000afc:	2701      	movs	r7, #1
 8000afe:	2b38      	cmp	r3, #56	@ 0x38
 8000b00:	dd00      	ble.n	8000b04 <__aeabi_dsub+0x318>
 8000b02:	e745      	b.n	8000990 <__aeabi_dsub+0x1a4>
 8000b04:	2780      	movs	r7, #128	@ 0x80
 8000b06:	4659      	mov	r1, fp
 8000b08:	043f      	lsls	r7, r7, #16
 8000b0a:	4339      	orrs	r1, r7
 8000b0c:	468b      	mov	fp, r1
 8000b0e:	e72a      	b.n	8000966 <__aeabi_dsub+0x17a>
 8000b10:	2400      	movs	r4, #0
 8000b12:	2700      	movs	r7, #0
 8000b14:	052d      	lsls	r5, r5, #20
 8000b16:	4325      	orrs	r5, r4
 8000b18:	07f6      	lsls	r6, r6, #31
 8000b1a:	4335      	orrs	r5, r6
 8000b1c:	0038      	movs	r0, r7
 8000b1e:	0029      	movs	r1, r5
 8000b20:	b003      	add	sp, #12
 8000b22:	bcf0      	pop	{r4, r5, r6, r7}
 8000b24:	46bb      	mov	fp, r7
 8000b26:	46b2      	mov	sl, r6
 8000b28:	46a9      	mov	r9, r5
 8000b2a:	46a0      	mov	r8, r4
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2e:	077b      	lsls	r3, r7, #29
 8000b30:	d004      	beq.n	8000b3c <__aeabi_dsub+0x350>
 8000b32:	230f      	movs	r3, #15
 8000b34:	403b      	ands	r3, r7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dsub+0x350>
 8000b3a:	e6e7      	b.n	800090c <__aeabi_dsub+0x120>
 8000b3c:	002b      	movs	r3, r5
 8000b3e:	08f8      	lsrs	r0, r7, #3
 8000b40:	4a03      	ldr	r2, [pc, #12]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000b42:	0767      	lsls	r7, r4, #29
 8000b44:	4307      	orrs	r7, r0
 8000b46:	08e5      	lsrs	r5, r4, #3
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dsub+0x362>
 8000b4c:	e74a      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000b4e:	e0a5      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000b50:	000007ff 	.word	0x000007ff
 8000b54:	ff7fffff 	.word	0xff7fffff
 8000b58:	fffff801 	.word	0xfffff801
 8000b5c:	000007fe 	.word	0x000007fe
 8000b60:	0038      	movs	r0, r7
 8000b62:	f000 fab7 	bl	80010d4 <__clzsi2>
 8000b66:	0003      	movs	r3, r0
 8000b68:	3318      	adds	r3, #24
 8000b6a:	2b1f      	cmp	r3, #31
 8000b6c:	dc00      	bgt.n	8000b70 <__aeabi_dsub+0x384>
 8000b6e:	e6a7      	b.n	80008c0 <__aeabi_dsub+0xd4>
 8000b70:	003a      	movs	r2, r7
 8000b72:	3808      	subs	r0, #8
 8000b74:	4082      	lsls	r2, r0
 8000b76:	429d      	cmp	r5, r3
 8000b78:	dd00      	ble.n	8000b7c <__aeabi_dsub+0x390>
 8000b7a:	e08a      	b.n	8000c92 <__aeabi_dsub+0x4a6>
 8000b7c:	1b5b      	subs	r3, r3, r5
 8000b7e:	1c58      	adds	r0, r3, #1
 8000b80:	281f      	cmp	r0, #31
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_dsub+0x39a>
 8000b84:	e1d8      	b.n	8000f38 <__aeabi_dsub+0x74c>
 8000b86:	0017      	movs	r7, r2
 8000b88:	3b1f      	subs	r3, #31
 8000b8a:	40df      	lsrs	r7, r3
 8000b8c:	2820      	cmp	r0, #32
 8000b8e:	d005      	beq.n	8000b9c <__aeabi_dsub+0x3b0>
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	1a1b      	subs	r3, r3, r0
 8000b94:	409a      	lsls	r2, r3
 8000b96:	1e53      	subs	r3, r2, #1
 8000b98:	419a      	sbcs	r2, r3
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dsub+0x3b8>
 8000ba2:	e0e5      	b.n	8000d70 <__aeabi_dsub+0x584>
 8000ba4:	077b      	lsls	r3, r7, #29
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dsub+0x3be>
 8000ba8:	e6ab      	b.n	8000902 <__aeabi_dsub+0x116>
 8000baa:	002c      	movs	r4, r5
 8000bac:	e7c6      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000bae:	08c0      	lsrs	r0, r0, #3
 8000bb0:	e7c6      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	4dd1      	ldr	r5, [pc, #836]	@ (8000efc <__aeabi_dsub+0x710>)
 8000bb8:	e7ac      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000bba:	4fd1      	ldr	r7, [pc, #836]	@ (8000f00 <__aeabi_dsub+0x714>)
 8000bbc:	1c6b      	adds	r3, r5, #1
 8000bbe:	423b      	tst	r3, r7
 8000bc0:	d171      	bne.n	8000ca6 <__aeabi_dsub+0x4ba>
 8000bc2:	0023      	movs	r3, r4
 8000bc4:	4303      	orrs	r3, r0
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dsub+0x3e0>
 8000bca:	e14e      	b.n	8000e6a <__aeabi_dsub+0x67e>
 8000bcc:	4657      	mov	r7, sl
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x3e8>
 8000bd2:	e1b5      	b.n	8000f40 <__aeabi_dsub+0x754>
 8000bd4:	2f00      	cmp	r7, #0
 8000bd6:	d00d      	beq.n	8000bf4 <__aeabi_dsub+0x408>
 8000bd8:	1883      	adds	r3, r0, r2
 8000bda:	4283      	cmp	r3, r0
 8000bdc:	4180      	sbcs	r0, r0
 8000bde:	445c      	add	r4, fp
 8000be0:	4240      	negs	r0, r0
 8000be2:	1824      	adds	r4, r4, r0
 8000be4:	0222      	lsls	r2, r4, #8
 8000be6:	d500      	bpl.n	8000bea <__aeabi_dsub+0x3fe>
 8000be8:	e1c8      	b.n	8000f7c <__aeabi_dsub+0x790>
 8000bea:	001f      	movs	r7, r3
 8000bec:	4698      	mov	r8, r3
 8000bee:	4327      	orrs	r7, r4
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dsub+0x408>
 8000bf2:	e0bc      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	0767      	lsls	r7, r4, #29
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	431f      	orrs	r7, r3
 8000bfc:	08e5      	lsrs	r5, r4, #3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e04c      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000c02:	1a83      	subs	r3, r0, r2
 8000c04:	4698      	mov	r8, r3
 8000c06:	465b      	mov	r3, fp
 8000c08:	4540      	cmp	r0, r8
 8000c0a:	41bf      	sbcs	r7, r7
 8000c0c:	1ae3      	subs	r3, r4, r3
 8000c0e:	427f      	negs	r7, r7
 8000c10:	1bdb      	subs	r3, r3, r7
 8000c12:	021f      	lsls	r7, r3, #8
 8000c14:	d47c      	bmi.n	8000d10 <__aeabi_dsub+0x524>
 8000c16:	4647      	mov	r7, r8
 8000c18:	431f      	orrs	r7, r3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dsub+0x432>
 8000c1c:	e0a6      	b.n	8000d6c <__aeabi_dsub+0x580>
 8000c1e:	001c      	movs	r4, r3
 8000c20:	4647      	mov	r7, r8
 8000c22:	e645      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000c24:	4cb7      	ldr	r4, [pc, #732]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000c26:	1aed      	subs	r5, r5, r3
 8000c28:	4014      	ands	r4, r2
 8000c2a:	077b      	lsls	r3, r7, #29
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_dsub+0x444>
 8000c2e:	e780      	b.n	8000b32 <__aeabi_dsub+0x346>
 8000c30:	e784      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000c32:	464b      	mov	r3, r9
 8000c34:	0025      	movs	r5, r4
 8000c36:	4305      	orrs	r5, r0
 8000c38:	d066      	beq.n	8000d08 <__aeabi_dsub+0x51c>
 8000c3a:	1e5f      	subs	r7, r3, #1
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dsub+0x456>
 8000c40:	e0fc      	b.n	8000e3c <__aeabi_dsub+0x650>
 8000c42:	4dae      	ldr	r5, [pc, #696]	@ (8000efc <__aeabi_dsub+0x710>)
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dsub+0x45e>
 8000c48:	e15e      	b.n	8000f08 <__aeabi_dsub+0x71c>
 8000c4a:	4666      	mov	r6, ip
 8000c4c:	2f38      	cmp	r7, #56	@ 0x38
 8000c4e:	dc00      	bgt.n	8000c52 <__aeabi_dsub+0x466>
 8000c50:	e0b4      	b.n	8000dbc <__aeabi_dsub+0x5d0>
 8000c52:	2001      	movs	r0, #1
 8000c54:	1a17      	subs	r7, r2, r0
 8000c56:	42ba      	cmp	r2, r7
 8000c58:	4192      	sbcs	r2, r2
 8000c5a:	465b      	mov	r3, fp
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	464d      	mov	r5, r9
 8000c60:	1a9c      	subs	r4, r3, r2
 8000c62:	e620      	b.n	80008a6 <__aeabi_dsub+0xba>
 8000c64:	0767      	lsls	r7, r4, #29
 8000c66:	08c0      	lsrs	r0, r0, #3
 8000c68:	4307      	orrs	r7, r0
 8000c6a:	08e5      	lsrs	r5, r4, #3
 8000c6c:	e6ba      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000c6e:	001f      	movs	r7, r3
 8000c70:	4659      	mov	r1, fp
 8000c72:	3f20      	subs	r7, #32
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	000f      	movs	r7, r1
 8000c78:	2b20      	cmp	r3, #32
 8000c7a:	d005      	beq.n	8000c88 <__aeabi_dsub+0x49c>
 8000c7c:	2140      	movs	r1, #64	@ 0x40
 8000c7e:	1acb      	subs	r3, r1, r3
 8000c80:	4659      	mov	r1, fp
 8000c82:	4099      	lsls	r1, r3
 8000c84:	430a      	orrs	r2, r1
 8000c86:	4692      	mov	sl, r2
 8000c88:	4653      	mov	r3, sl
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	4193      	sbcs	r3, r2
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	e604      	b.n	800089c <__aeabi_dsub+0xb0>
 8000c92:	1aeb      	subs	r3, r5, r3
 8000c94:	4d9b      	ldr	r5, [pc, #620]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000c96:	4015      	ands	r5, r2
 8000c98:	076f      	lsls	r7, r5, #29
 8000c9a:	08ed      	lsrs	r5, r5, #3
 8000c9c:	032c      	lsls	r4, r5, #12
 8000c9e:	055d      	lsls	r5, r3, #21
 8000ca0:	0b24      	lsrs	r4, r4, #12
 8000ca2:	0d6d      	lsrs	r5, r5, #21
 8000ca4:	e736      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000ca6:	4d95      	ldr	r5, [pc, #596]	@ (8000efc <__aeabi_dsub+0x710>)
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	d100      	bne.n	8000cae <__aeabi_dsub+0x4c2>
 8000cac:	e0d6      	b.n	8000e5c <__aeabi_dsub+0x670>
 8000cae:	1882      	adds	r2, r0, r2
 8000cb0:	0021      	movs	r1, r4
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	4180      	sbcs	r0, r0
 8000cb6:	4459      	add	r1, fp
 8000cb8:	4240      	negs	r0, r0
 8000cba:	1808      	adds	r0, r1, r0
 8000cbc:	07c7      	lsls	r7, r0, #31
 8000cbe:	0852      	lsrs	r2, r2, #1
 8000cc0:	4317      	orrs	r7, r2
 8000cc2:	0844      	lsrs	r4, r0, #1
 8000cc4:	0752      	lsls	r2, r2, #29
 8000cc6:	d400      	bmi.n	8000cca <__aeabi_dsub+0x4de>
 8000cc8:	e185      	b.n	8000fd6 <__aeabi_dsub+0x7ea>
 8000cca:	220f      	movs	r2, #15
 8000ccc:	001d      	movs	r5, r3
 8000cce:	403a      	ands	r2, r7
 8000cd0:	2a04      	cmp	r2, #4
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dsub+0x4ea>
 8000cd4:	e61a      	b.n	800090c <__aeabi_dsub+0x120>
 8000cd6:	08ff      	lsrs	r7, r7, #3
 8000cd8:	0764      	lsls	r4, r4, #29
 8000cda:	4327      	orrs	r7, r4
 8000cdc:	0905      	lsrs	r5, r0, #4
 8000cde:	e7dd      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000ce0:	465b      	mov	r3, fp
 8000ce2:	08d2      	lsrs	r2, r2, #3
 8000ce4:	075f      	lsls	r7, r3, #29
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	08dd      	lsrs	r5, r3, #3
 8000cea:	e67b      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000cec:	2700      	movs	r7, #0
 8000cee:	2400      	movs	r4, #0
 8000cf0:	e710      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_dsub+0x50c>
 8000cf6:	e0d6      	b.n	8000ea6 <__aeabi_dsub+0x6ba>
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_dsub+0x512>
 8000cfc:	e12f      	b.n	8000f5e <__aeabi_dsub+0x772>
 8000cfe:	2480      	movs	r4, #128	@ 0x80
 8000d00:	2600      	movs	r6, #0
 8000d02:	4d7e      	ldr	r5, [pc, #504]	@ (8000efc <__aeabi_dsub+0x710>)
 8000d04:	0324      	lsls	r4, r4, #12
 8000d06:	e705      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000d08:	4666      	mov	r6, ip
 8000d0a:	465c      	mov	r4, fp
 8000d0c:	08d0      	lsrs	r0, r2, #3
 8000d0e:	e717      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000d10:	465b      	mov	r3, fp
 8000d12:	1a17      	subs	r7, r2, r0
 8000d14:	42ba      	cmp	r2, r7
 8000d16:	4192      	sbcs	r2, r2
 8000d18:	1b1c      	subs	r4, r3, r4
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	4252      	negs	r2, r2
 8000d20:	1aa4      	subs	r4, r4, r2
 8000d22:	401e      	ands	r6, r3
 8000d24:	e5c4      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000d26:	1883      	adds	r3, r0, r2
 8000d28:	4283      	cmp	r3, r0
 8000d2a:	4180      	sbcs	r0, r0
 8000d2c:	445c      	add	r4, fp
 8000d2e:	4240      	negs	r0, r0
 8000d30:	1825      	adds	r5, r4, r0
 8000d32:	022a      	lsls	r2, r5, #8
 8000d34:	d400      	bmi.n	8000d38 <__aeabi_dsub+0x54c>
 8000d36:	e0da      	b.n	8000eee <__aeabi_dsub+0x702>
 8000d38:	4a72      	ldr	r2, [pc, #456]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000d3a:	085b      	lsrs	r3, r3, #1
 8000d3c:	4015      	ands	r5, r2
 8000d3e:	07ea      	lsls	r2, r5, #31
 8000d40:	431a      	orrs	r2, r3
 8000d42:	0869      	lsrs	r1, r5, #1
 8000d44:	075b      	lsls	r3, r3, #29
 8000d46:	d400      	bmi.n	8000d4a <__aeabi_dsub+0x55e>
 8000d48:	e14a      	b.n	8000fe0 <__aeabi_dsub+0x7f4>
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dsub+0x568>
 8000d52:	e0fc      	b.n	8000f4e <__aeabi_dsub+0x762>
 8000d54:	1d17      	adds	r7, r2, #4
 8000d56:	4297      	cmp	r7, r2
 8000d58:	41a4      	sbcs	r4, r4
 8000d5a:	4264      	negs	r4, r4
 8000d5c:	2502      	movs	r5, #2
 8000d5e:	1864      	adds	r4, r4, r1
 8000d60:	e6ec      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000d62:	4647      	mov	r7, r8
 8000d64:	001c      	movs	r4, r3
 8000d66:	431f      	orrs	r7, r3
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dsub+0x580>
 8000d6a:	e743      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	2500      	movs	r5, #0
 8000d70:	2400      	movs	r4, #0
 8000d72:	e6cf      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000d74:	08c0      	lsrs	r0, r0, #3
 8000d76:	0767      	lsls	r7, r4, #29
 8000d78:	4307      	orrs	r7, r0
 8000d7a:	08e5      	lsrs	r5, r4, #3
 8000d7c:	e632      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000d7e:	1a87      	subs	r7, r0, r2
 8000d80:	465b      	mov	r3, fp
 8000d82:	42b8      	cmp	r0, r7
 8000d84:	4180      	sbcs	r0, r0
 8000d86:	1ae4      	subs	r4, r4, r3
 8000d88:	4240      	negs	r0, r0
 8000d8a:	1a24      	subs	r4, r4, r0
 8000d8c:	0223      	lsls	r3, r4, #8
 8000d8e:	d428      	bmi.n	8000de2 <__aeabi_dsub+0x5f6>
 8000d90:	0763      	lsls	r3, r4, #29
 8000d92:	08ff      	lsrs	r7, r7, #3
 8000d94:	431f      	orrs	r7, r3
 8000d96:	08e5      	lsrs	r5, r4, #3
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e77f      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dsub+0x5b6>
 8000da0:	e673      	b.n	8000a8a <__aeabi_dsub+0x29e>
 8000da2:	464b      	mov	r3, r9
 8000da4:	1b5f      	subs	r7, r3, r5
 8000da6:	003b      	movs	r3, r7
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x5c2>
 8000dac:	e742      	b.n	8000c34 <__aeabi_dsub+0x448>
 8000dae:	2f38      	cmp	r7, #56	@ 0x38
 8000db0:	dd00      	ble.n	8000db4 <__aeabi_dsub+0x5c8>
 8000db2:	e0ec      	b.n	8000f8e <__aeabi_dsub+0x7a2>
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	000e      	movs	r6, r1
 8000db8:	041b      	lsls	r3, r3, #16
 8000dba:	431c      	orrs	r4, r3
 8000dbc:	2f1f      	cmp	r7, #31
 8000dbe:	dc25      	bgt.n	8000e0c <__aeabi_dsub+0x620>
 8000dc0:	2520      	movs	r5, #32
 8000dc2:	0023      	movs	r3, r4
 8000dc4:	1bed      	subs	r5, r5, r7
 8000dc6:	0001      	movs	r1, r0
 8000dc8:	40a8      	lsls	r0, r5
 8000dca:	40ab      	lsls	r3, r5
 8000dcc:	40f9      	lsrs	r1, r7
 8000dce:	1e45      	subs	r5, r0, #1
 8000dd0:	41a8      	sbcs	r0, r5
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	40fc      	lsrs	r4, r7
 8000dd6:	4318      	orrs	r0, r3
 8000dd8:	465b      	mov	r3, fp
 8000dda:	1b1b      	subs	r3, r3, r4
 8000ddc:	469b      	mov	fp, r3
 8000dde:	e739      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000de0:	4666      	mov	r6, ip
 8000de2:	2501      	movs	r5, #1
 8000de4:	e562      	b.n	80008ac <__aeabi_dsub+0xc0>
 8000de6:	001f      	movs	r7, r3
 8000de8:	4659      	mov	r1, fp
 8000dea:	3f20      	subs	r7, #32
 8000dec:	40f9      	lsrs	r1, r7
 8000dee:	468c      	mov	ip, r1
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d005      	beq.n	8000e00 <__aeabi_dsub+0x614>
 8000df4:	2740      	movs	r7, #64	@ 0x40
 8000df6:	4659      	mov	r1, fp
 8000df8:	1afb      	subs	r3, r7, r3
 8000dfa:	4099      	lsls	r1, r3
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	4692      	mov	sl, r2
 8000e00:	4657      	mov	r7, sl
 8000e02:	1e7b      	subs	r3, r7, #1
 8000e04:	419f      	sbcs	r7, r3
 8000e06:	4663      	mov	r3, ip
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e5c1      	b.n	8000990 <__aeabi_dsub+0x1a4>
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	0025      	movs	r5, r4
 8000e10:	3b20      	subs	r3, #32
 8000e12:	40dd      	lsrs	r5, r3
 8000e14:	2f20      	cmp	r7, #32
 8000e16:	d004      	beq.n	8000e22 <__aeabi_dsub+0x636>
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	1bdb      	subs	r3, r3, r7
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	4320      	orrs	r0, r4
 8000e20:	4680      	mov	r8, r0
 8000e22:	4640      	mov	r0, r8
 8000e24:	1e43      	subs	r3, r0, #1
 8000e26:	4198      	sbcs	r0, r3
 8000e28:	4328      	orrs	r0, r5
 8000e2a:	e713      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000e2c:	2900      	cmp	r1, #0
 8000e2e:	d09d      	beq.n	8000d6c <__aeabi_dsub+0x580>
 8000e30:	2601      	movs	r6, #1
 8000e32:	4663      	mov	r3, ip
 8000e34:	465c      	mov	r4, fp
 8000e36:	4690      	mov	r8, r2
 8000e38:	401e      	ands	r6, r3
 8000e3a:	e6db      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000e3c:	1a17      	subs	r7, r2, r0
 8000e3e:	465b      	mov	r3, fp
 8000e40:	42ba      	cmp	r2, r7
 8000e42:	4192      	sbcs	r2, r2
 8000e44:	1b1c      	subs	r4, r3, r4
 8000e46:	4252      	negs	r2, r2
 8000e48:	1aa4      	subs	r4, r4, r2
 8000e4a:	0223      	lsls	r3, r4, #8
 8000e4c:	d4c8      	bmi.n	8000de0 <__aeabi_dsub+0x5f4>
 8000e4e:	0763      	lsls	r3, r4, #29
 8000e50:	08ff      	lsrs	r7, r7, #3
 8000e52:	431f      	orrs	r7, r3
 8000e54:	4666      	mov	r6, ip
 8000e56:	2301      	movs	r3, #1
 8000e58:	08e5      	lsrs	r5, r4, #3
 8000e5a:	e71f      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000e5c:	001d      	movs	r5, r3
 8000e5e:	2400      	movs	r4, #0
 8000e60:	2700      	movs	r7, #0
 8000e62:	e657      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000e64:	465c      	mov	r4, fp
 8000e66:	08d0      	lsrs	r0, r2, #3
 8000e68:	e66a      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dsub+0x684>
 8000e6e:	e737      	b.n	8000ce0 <__aeabi_dsub+0x4f4>
 8000e70:	4653      	mov	r3, sl
 8000e72:	08c0      	lsrs	r0, r0, #3
 8000e74:	0767      	lsls	r7, r4, #29
 8000e76:	4307      	orrs	r7, r0
 8000e78:	08e5      	lsrs	r5, r4, #3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dsub+0x694>
 8000e7e:	e5b1      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	031b      	lsls	r3, r3, #12
 8000e84:	421d      	tst	r5, r3
 8000e86:	d008      	beq.n	8000e9a <__aeabi_dsub+0x6ae>
 8000e88:	4659      	mov	r1, fp
 8000e8a:	08c8      	lsrs	r0, r1, #3
 8000e8c:	4218      	tst	r0, r3
 8000e8e:	d104      	bne.n	8000e9a <__aeabi_dsub+0x6ae>
 8000e90:	08d2      	lsrs	r2, r2, #3
 8000e92:	0749      	lsls	r1, r1, #29
 8000e94:	430a      	orrs	r2, r1
 8000e96:	0017      	movs	r7, r2
 8000e98:	0005      	movs	r5, r0
 8000e9a:	0f7b      	lsrs	r3, r7, #29
 8000e9c:	00ff      	lsls	r7, r7, #3
 8000e9e:	08ff      	lsrs	r7, r7, #3
 8000ea0:	075b      	lsls	r3, r3, #29
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	e59e      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000ea6:	08c0      	lsrs	r0, r0, #3
 8000ea8:	0763      	lsls	r3, r4, #29
 8000eaa:	4318      	orrs	r0, r3
 8000eac:	08e5      	lsrs	r5, r4, #3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d053      	beq.n	8000f5a <__aeabi_dsub+0x76e>
 8000eb2:	2380      	movs	r3, #128	@ 0x80
 8000eb4:	031b      	lsls	r3, r3, #12
 8000eb6:	421d      	tst	r5, r3
 8000eb8:	d00a      	beq.n	8000ed0 <__aeabi_dsub+0x6e4>
 8000eba:	4659      	mov	r1, fp
 8000ebc:	08cc      	lsrs	r4, r1, #3
 8000ebe:	421c      	tst	r4, r3
 8000ec0:	d106      	bne.n	8000ed0 <__aeabi_dsub+0x6e4>
 8000ec2:	2601      	movs	r6, #1
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	0025      	movs	r5, r4
 8000ec8:	08d0      	lsrs	r0, r2, #3
 8000eca:	0749      	lsls	r1, r1, #29
 8000ecc:	4308      	orrs	r0, r1
 8000ece:	401e      	ands	r6, r3
 8000ed0:	0f47      	lsrs	r7, r0, #29
 8000ed2:	00c0      	lsls	r0, r0, #3
 8000ed4:	08c0      	lsrs	r0, r0, #3
 8000ed6:	077f      	lsls	r7, r7, #29
 8000ed8:	4307      	orrs	r7, r0
 8000eda:	e583      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000edc:	1883      	adds	r3, r0, r2
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	4192      	sbcs	r2, r2
 8000ee2:	445c      	add	r4, fp
 8000ee4:	4252      	negs	r2, r2
 8000ee6:	18a5      	adds	r5, r4, r2
 8000ee8:	022a      	lsls	r2, r5, #8
 8000eea:	d500      	bpl.n	8000eee <__aeabi_dsub+0x702>
 8000eec:	e724      	b.n	8000d38 <__aeabi_dsub+0x54c>
 8000eee:	076f      	lsls	r7, r5, #29
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	08ed      	lsrs	r5, r5, #3
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e6d0      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	000007ff 	.word	0x000007ff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	ff7fffff 	.word	0xff7fffff
 8000f08:	465b      	mov	r3, fp
 8000f0a:	08d2      	lsrs	r2, r2, #3
 8000f0c:	075f      	lsls	r7, r3, #29
 8000f0e:	4666      	mov	r6, ip
 8000f10:	4317      	orrs	r7, r2
 8000f12:	08dd      	lsrs	r5, r3, #3
 8000f14:	e566      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f16:	0025      	movs	r5, r4
 8000f18:	3b20      	subs	r3, #32
 8000f1a:	40dd      	lsrs	r5, r3
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b20      	cmp	r3, #32
 8000f20:	d005      	beq.n	8000f2e <__aeabi_dsub+0x742>
 8000f22:	2340      	movs	r3, #64	@ 0x40
 8000f24:	4661      	mov	r1, ip
 8000f26:	1a5b      	subs	r3, r3, r1
 8000f28:	409c      	lsls	r4, r3
 8000f2a:	4320      	orrs	r0, r4
 8000f2c:	4680      	mov	r8, r0
 8000f2e:	4647      	mov	r7, r8
 8000f30:	1e7b      	subs	r3, r7, #1
 8000f32:	419f      	sbcs	r7, r3
 8000f34:	432f      	orrs	r7, r5
 8000f36:	e5a0      	b.n	8000a7a <__aeabi_dsub+0x28e>
 8000f38:	2120      	movs	r1, #32
 8000f3a:	2700      	movs	r7, #0
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	e4d2      	b.n	80008e6 <__aeabi_dsub+0xfa>
 8000f40:	2f00      	cmp	r7, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dsub+0x75a>
 8000f44:	e713      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000f46:	465c      	mov	r4, fp
 8000f48:	0017      	movs	r7, r2
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	e5f6      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000f4e:	08d7      	lsrs	r7, r2, #3
 8000f50:	0749      	lsls	r1, r1, #29
 8000f52:	2302      	movs	r3, #2
 8000f54:	430f      	orrs	r7, r1
 8000f56:	092d      	lsrs	r5, r5, #4
 8000f58:	e6a0      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000f5a:	0007      	movs	r7, r0
 8000f5c:	e542      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f5e:	465b      	mov	r3, fp
 8000f60:	2601      	movs	r6, #1
 8000f62:	075f      	lsls	r7, r3, #29
 8000f64:	08dd      	lsrs	r5, r3, #3
 8000f66:	4663      	mov	r3, ip
 8000f68:	08d2      	lsrs	r2, r2, #3
 8000f6a:	4317      	orrs	r7, r2
 8000f6c:	401e      	ands	r6, r3
 8000f6e:	e539      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f70:	465b      	mov	r3, fp
 8000f72:	08d2      	lsrs	r2, r2, #3
 8000f74:	075f      	lsls	r7, r3, #29
 8000f76:	4317      	orrs	r7, r2
 8000f78:	08dd      	lsrs	r5, r3, #3
 8000f7a:	e533      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <__aeabi_dsub+0x80c>)
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	4022      	ands	r2, r4
 8000f82:	0757      	lsls	r7, r2, #29
 8000f84:	0252      	lsls	r2, r2, #9
 8000f86:	2501      	movs	r5, #1
 8000f88:	431f      	orrs	r7, r3
 8000f8a:	0b14      	lsrs	r4, r2, #12
 8000f8c:	e5c2      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000f8e:	000e      	movs	r6, r1
 8000f90:	2001      	movs	r0, #1
 8000f92:	e65f      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00d      	beq.n	8000fb4 <__aeabi_dsub+0x7c8>
 8000f98:	464b      	mov	r3, r9
 8000f9a:	1b5b      	subs	r3, r3, r5
 8000f9c:	469c      	mov	ip, r3
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x7b8>
 8000fa2:	e548      	b.n	8000a36 <__aeabi_dsub+0x24a>
 8000fa4:	2701      	movs	r7, #1
 8000fa6:	2b38      	cmp	r3, #56	@ 0x38
 8000fa8:	dd00      	ble.n	8000fac <__aeabi_dsub+0x7c0>
 8000faa:	e566      	b.n	8000a7a <__aeabi_dsub+0x28e>
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	431c      	orrs	r4, r3
 8000fb2:	e550      	b.n	8000a56 <__aeabi_dsub+0x26a>
 8000fb4:	1c6b      	adds	r3, r5, #1
 8000fb6:	4d11      	ldr	r5, [pc, #68]	@ (8000ffc <__aeabi_dsub+0x810>)
 8000fb8:	422b      	tst	r3, r5
 8000fba:	d000      	beq.n	8000fbe <__aeabi_dsub+0x7d2>
 8000fbc:	e673      	b.n	8000ca6 <__aeabi_dsub+0x4ba>
 8000fbe:	4659      	mov	r1, fp
 8000fc0:	0023      	movs	r3, r4
 8000fc2:	4311      	orrs	r1, r2
 8000fc4:	468a      	mov	sl, r1
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	e600      	b.n	8000bcc <__aeabi_dsub+0x3e0>
 8000fca:	0767      	lsls	r7, r4, #29
 8000fcc:	08c0      	lsrs	r0, r0, #3
 8000fce:	2300      	movs	r3, #0
 8000fd0:	4307      	orrs	r7, r0
 8000fd2:	08e5      	lsrs	r5, r4, #3
 8000fd4:	e662      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fd6:	0764      	lsls	r4, r4, #29
 8000fd8:	08ff      	lsrs	r7, r7, #3
 8000fda:	4327      	orrs	r7, r4
 8000fdc:	0905      	lsrs	r5, r0, #4
 8000fde:	e65d      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fe0:	08d2      	lsrs	r2, r2, #3
 8000fe2:	0749      	lsls	r1, r1, #29
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	000f      	movs	r7, r1
 8000fe8:	2302      	movs	r3, #2
 8000fea:	092d      	lsrs	r5, r5, #4
 8000fec:	e656      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fee:	0007      	movs	r7, r0
 8000ff0:	e5a4      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000ff2:	0038      	movs	r0, r7
 8000ff4:	e48f      	b.n	8000916 <__aeabi_dsub+0x12a>
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	ff7fffff 	.word	0xff7fffff
 8000ffc:	000007fe 	.word	0x000007fe

08001000 <__aeabi_d2iz>:
 8001000:	000b      	movs	r3, r1
 8001002:	0002      	movs	r2, r0
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	4d16      	ldr	r5, [pc, #88]	@ (8001060 <__aeabi_d2iz+0x60>)
 8001008:	030c      	lsls	r4, r1, #12
 800100a:	b082      	sub	sp, #8
 800100c:	0049      	lsls	r1, r1, #1
 800100e:	2000      	movs	r0, #0
 8001010:	9200      	str	r2, [sp, #0]
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	0b24      	lsrs	r4, r4, #12
 8001016:	0d49      	lsrs	r1, r1, #21
 8001018:	0fde      	lsrs	r6, r3, #31
 800101a:	42a9      	cmp	r1, r5
 800101c:	dd04      	ble.n	8001028 <__aeabi_d2iz+0x28>
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <__aeabi_d2iz+0x64>)
 8001020:	4281      	cmp	r1, r0
 8001022:	dd03      	ble.n	800102c <__aeabi_d2iz+0x2c>
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <__aeabi_d2iz+0x68>)
 8001026:	18f0      	adds	r0, r6, r3
 8001028:	b002      	add	sp, #8
 800102a:	bd70      	pop	{r4, r5, r6, pc}
 800102c:	2080      	movs	r0, #128	@ 0x80
 800102e:	0340      	lsls	r0, r0, #13
 8001030:	4320      	orrs	r0, r4
 8001032:	4c0e      	ldr	r4, [pc, #56]	@ (800106c <__aeabi_d2iz+0x6c>)
 8001034:	1a64      	subs	r4, r4, r1
 8001036:	2c1f      	cmp	r4, #31
 8001038:	dd08      	ble.n	800104c <__aeabi_d2iz+0x4c>
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <__aeabi_d2iz+0x70>)
 800103c:	1a5b      	subs	r3, r3, r1
 800103e:	40d8      	lsrs	r0, r3
 8001040:	0003      	movs	r3, r0
 8001042:	4258      	negs	r0, r3
 8001044:	2e00      	cmp	r6, #0
 8001046:	d1ef      	bne.n	8001028 <__aeabi_d2iz+0x28>
 8001048:	0018      	movs	r0, r3
 800104a:	e7ed      	b.n	8001028 <__aeabi_d2iz+0x28>
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <__aeabi_d2iz+0x74>)
 800104e:	9a00      	ldr	r2, [sp, #0]
 8001050:	469c      	mov	ip, r3
 8001052:	0003      	movs	r3, r0
 8001054:	4461      	add	r1, ip
 8001056:	408b      	lsls	r3, r1
 8001058:	40e2      	lsrs	r2, r4
 800105a:	4313      	orrs	r3, r2
 800105c:	e7f1      	b.n	8001042 <__aeabi_d2iz+0x42>
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	000003fe 	.word	0x000003fe
 8001064:	0000041d 	.word	0x0000041d
 8001068:	7fffffff 	.word	0x7fffffff
 800106c:	00000433 	.word	0x00000433
 8001070:	00000413 	.word	0x00000413
 8001074:	fffffbed 	.word	0xfffffbed

08001078 <__aeabi_i2d>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	2800      	cmp	r0, #0
 800107c:	d016      	beq.n	80010ac <__aeabi_i2d+0x34>
 800107e:	17c3      	asrs	r3, r0, #31
 8001080:	18c5      	adds	r5, r0, r3
 8001082:	405d      	eors	r5, r3
 8001084:	0fc4      	lsrs	r4, r0, #31
 8001086:	0028      	movs	r0, r5
 8001088:	f000 f824 	bl	80010d4 <__clzsi2>
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <__aeabi_i2d+0x58>)
 800108e:	1a1b      	subs	r3, r3, r0
 8001090:	055b      	lsls	r3, r3, #21
 8001092:	0d5b      	lsrs	r3, r3, #21
 8001094:	280a      	cmp	r0, #10
 8001096:	dc14      	bgt.n	80010c2 <__aeabi_i2d+0x4a>
 8001098:	0002      	movs	r2, r0
 800109a:	002e      	movs	r6, r5
 800109c:	3215      	adds	r2, #21
 800109e:	4096      	lsls	r6, r2
 80010a0:	220b      	movs	r2, #11
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	40d5      	lsrs	r5, r2
 80010a6:	032d      	lsls	r5, r5, #12
 80010a8:	0b2d      	lsrs	r5, r5, #12
 80010aa:	e003      	b.n	80010b4 <__aeabi_i2d+0x3c>
 80010ac:	2400      	movs	r4, #0
 80010ae:	2300      	movs	r3, #0
 80010b0:	2500      	movs	r5, #0
 80010b2:	2600      	movs	r6, #0
 80010b4:	051b      	lsls	r3, r3, #20
 80010b6:	432b      	orrs	r3, r5
 80010b8:	07e4      	lsls	r4, r4, #31
 80010ba:	4323      	orrs	r3, r4
 80010bc:	0030      	movs	r0, r6
 80010be:	0019      	movs	r1, r3
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
 80010c2:	380b      	subs	r0, #11
 80010c4:	4085      	lsls	r5, r0
 80010c6:	032d      	lsls	r5, r5, #12
 80010c8:	2600      	movs	r6, #0
 80010ca:	0b2d      	lsrs	r5, r5, #12
 80010cc:	e7f2      	b.n	80010b4 <__aeabi_i2d+0x3c>
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	0000041e 	.word	0x0000041e

080010d4 <__clzsi2>:
 80010d4:	211c      	movs	r1, #28
 80010d6:	2301      	movs	r3, #1
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	4298      	cmp	r0, r3
 80010dc:	d301      	bcc.n	80010e2 <__clzsi2+0xe>
 80010de:	0c00      	lsrs	r0, r0, #16
 80010e0:	3910      	subs	r1, #16
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	4298      	cmp	r0, r3
 80010e6:	d301      	bcc.n	80010ec <__clzsi2+0x18>
 80010e8:	0a00      	lsrs	r0, r0, #8
 80010ea:	3908      	subs	r1, #8
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	4298      	cmp	r0, r3
 80010f0:	d301      	bcc.n	80010f6 <__clzsi2+0x22>
 80010f2:	0900      	lsrs	r0, r0, #4
 80010f4:	3904      	subs	r1, #4
 80010f6:	a202      	add	r2, pc, #8	@ (adr r2, 8001100 <__clzsi2+0x2c>)
 80010f8:	5c10      	ldrb	r0, [r2, r0]
 80010fa:	1840      	adds	r0, r0, r1
 80010fc:	4770      	bx	lr
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	02020304 	.word	0x02020304
 8001104:	01010101 	.word	0x01010101
	...

08001110 <HAL_CAN_RxFifo0MsgPendingCallback>:





void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001118:	4b5e      	ldr	r3, [pc, #376]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800111a:	4a5f      	ldr	r2, [pc, #380]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	2100      	movs	r1, #0
 8001120:	f002 ff24 	bl	8003f6c <HAL_CAN_GetRxMessage>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>

		Error_Handler();
 8001128:	f001 fc0e 	bl	8002948 <Error_Handler>
	}

	if (RxHeader.StdId == 0x3A1) {
 800112c:	4b5a      	ldr	r3, [pc, #360]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a5a      	ldr	r2, [pc, #360]	@ (800129c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d13c      	bne.n	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			tempDataFlag = 1;
 8001136:	4b5a      	ldr	r3, [pc, #360]	@ (80012a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
			ect = (RxData[3] << 8) | RxData[2];
 800113c:	4b55      	ldr	r3, [pc, #340]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800113e:	78db      	ldrb	r3, [r3, #3]
 8001140:	b21b      	sxth	r3, r3
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b53      	ldr	r3, [pc, #332]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b54      	ldr	r3, [pc, #336]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001152:	801a      	strh	r2, [r3, #0]
			ect = ect - 50;
 8001154:	4b53      	ldr	r3, [pc, #332]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001156:	2200      	movs	r2, #0
 8001158:	5e9b      	ldrsh	r3, [r3, r2]
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b32      	subs	r3, #50	@ 0x32
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001164:	801a      	strh	r2, [r3, #0]
			if(ect < 0){
 8001166:	4b4f      	ldr	r3, [pc, #316]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001168:	2200      	movs	r2, #0
 800116a:	5e9b      	ldrsh	r3, [r3, r2]
 800116c:	2b00      	cmp	r3, #0
 800116e:	da02      	bge.n	8001176 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
				ect = 0;
 8001170:	4b4c      	ldr	r3, [pc, #304]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001172:	2200      	movs	r2, #0
 8001174:	801a      	strh	r2, [r3, #0]
			}
			oilTemp = (RxData[5] << 8) | RxData[4];
 8001176:	4b47      	ldr	r3, [pc, #284]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001178:	795b      	ldrb	r3, [r3, #5]
 800117a:	b21b      	sxth	r3, r3
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b44      	ldr	r3, [pc, #272]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800118c:	801a      	strh	r2, [r3, #0]
			oilTemp = oilTemp - 50;
 800118e:	4b46      	ldr	r3, [pc, #280]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001190:	2200      	movs	r2, #0
 8001192:	5e9b      	ldrsh	r3, [r3, r2]
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b32      	subs	r3, #50	@ 0x32
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800119e:	801a      	strh	r2, [r3, #0]
			if(oilTemp < 0){
 80011a0:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	5e9b      	ldrsh	r3, [r3, r2]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da02      	bge.n	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
				oilTemp = 0;
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	801a      	strh	r2, [r3, #0]
			}
	}
	if (RxHeader.StdId == 0x3A2){
 80011b0:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a3d      	ldr	r2, [pc, #244]	@ (80012ac <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d11c      	bne.n	80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
			pressDataFlag = 1;
 80011ba:	4b3d      	ldr	r3, [pc, #244]	@ (80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
			fuelPress = (RxData[1] << 8) | RxData[0];
 80011c0:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80011d8:	801a      	strh	r2, [r3, #0]
			oilPress = (RxData[3] << 8) | RxData[2];
 80011da:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80011f2:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x3A3){
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a30      	ldr	r2, [pc, #192]	@ (80012bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10f      	bne.n	800121e <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
			fuelDataFlag = 1;
 80011fe:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
			instFuelConsumption = (RxData[3] << 8) | RxData[2];
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001206:	78db      	ldrb	r3, [r3, #3]
 8001208:	b21b      	sxth	r3, r3
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001210:	789b      	ldrb	r3, [r3, #2]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21b      	sxth	r3, r3
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 800121c:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A4){
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	23e9      	movs	r3, #233	@ 0xe9
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	429a      	cmp	r2, r3
 8001228:	d10f      	bne.n	800124a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			rpmDataFlag = 1;
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
			rpm = (RxData[6] << 8) | RxData[5];
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001232:	799b      	ldrb	r3, [r3, #6]
 8001234:	b21b      	sxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800123c:	795b      	ldrb	r3, [r3, #5]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001248:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A5){
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a20      	ldr	r2, [pc, #128]	@ (80012d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d10f      	bne.n	8001274 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			battDataFlag = 1;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
			battVolt = (RxData[1] << 8) | RxData[0];
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	b21b      	sxth	r3, r3
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001272:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x092){
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b92      	cmp	r3, #146	@ 0x92
 800127a:	d106      	bne.n	800128a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
		if (RxData[0] == 0x02)	{
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d102      	bne.n	800128a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
			canResetEcuFlag = 1;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	200003c0 	.word	0x200003c0
 8001298:	200002d8 	.word	0x200002d8
 800129c:	000003a1 	.word	0x000003a1
 80012a0:	200003ec 	.word	0x200003ec
 80012a4:	200003f2 	.word	0x200003f2
 80012a8:	200003f4 	.word	0x200003f4
 80012ac:	000003a2 	.word	0x000003a2
 80012b0:	200003ed 	.word	0x200003ed
 80012b4:	200003f8 	.word	0x200003f8
 80012b8:	200003f6 	.word	0x200003f6
 80012bc:	000003a3 	.word	0x000003a3
 80012c0:	200003ee 	.word	0x200003ee
 80012c4:	200003fe 	.word	0x200003fe
 80012c8:	200003ef 	.word	0x200003ef
 80012cc:	200003fc 	.word	0x200003fc
 80012d0:	000003a5 	.word	0x000003a5
 80012d4:	200003f0 	.word	0x200003f0
 80012d8:	200003fa 	.word	0x200003fa
 80012dc:	2000041a 	.word	0x2000041a

080012e0 <tempActions>:

void tempActions(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

	tempDataFlag = 0;
 80012e4:	4b84      	ldr	r3, [pc, #528]	@ (80014f8 <tempActions+0x218>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
	if(ect > ectTh[0]){
 80012ea:	4b84      	ldr	r3, [pc, #528]	@ (80014fc <tempActions+0x21c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	5e9b      	ldrsh	r3, [r3, r2]
 80012f0:	001a      	movs	r2, r3
 80012f2:	4b83      	ldr	r3, [pc, #524]	@ (8001500 <tempActions+0x220>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dd59      	ble.n	80013ae <tempActions+0xce>
		HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, SET);
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	0099      	lsls	r1, r3, #2
 80012fe:	2390      	movs	r3, #144	@ 0x90
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	2201      	movs	r2, #1
 8001304:	0018      	movs	r0, r3
 8001306:	f003 fd79 	bl	8004dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1L_Signal_GPIO_Port, F1L_Signal_Pin, SET);
 800130a:	4b7e      	ldr	r3, [pc, #504]	@ (8001504 <tempActions+0x224>)
 800130c:	2201      	movs	r2, #1
 800130e:	2180      	movs	r1, #128	@ 0x80
 8001310:	0018      	movs	r0, r3
 8001312:	f003 fd73 	bl	8004dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2L_Signal_GPIO_Port, F2L_Signal_Pin, SET);
 8001316:	4b7b      	ldr	r3, [pc, #492]	@ (8001504 <tempActions+0x224>)
 8001318:	2201      	movs	r2, #1
 800131a:	2140      	movs	r1, #64	@ 0x40
 800131c:	0018      	movs	r0, r3
 800131e:	f003 fd6d 	bl	8004dfc <HAL_GPIO_WritePin>
		TIM2->CCR3 = dutyFanEctTh[0];
 8001322:	4b79      	ldr	r3, [pc, #484]	@ (8001508 <tempActions+0x228>)
 8001324:	881a      	ldrh	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	@ 0x80
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = dutyFanEctTh[0];
 800132c:	4b76      	ldr	r3, [pc, #472]	@ (8001508 <tempActions+0x228>)
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM16->CCR1 = dutyPumpEctTh[0];
 8001336:	4b75      	ldr	r3, [pc, #468]	@ (800150c <tempActions+0x22c>)
 8001338:	881a      	ldrh	r2, [r3, #0]
 800133a:	4b75      	ldr	r3, [pc, #468]	@ (8001510 <tempActions+0x230>)
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34

		if(ect > ectTh[1]){
 800133e:	4b6f      	ldr	r3, [pc, #444]	@ (80014fc <tempActions+0x21c>)
 8001340:	2200      	movs	r2, #0
 8001342:	5e9b      	ldrsh	r3, [r3, r2]
 8001344:	001a      	movs	r2, r3
 8001346:	4b6e      	ldr	r3, [pc, #440]	@ (8001500 <tempActions+0x220>)
 8001348:	885b      	ldrh	r3, [r3, #2]
 800134a:	429a      	cmp	r2, r3
 800134c:	dd51      	ble.n	80013f2 <tempActions+0x112>
			TIM2->CCR3 = dutyFanEctTh[1];
 800134e:	4b6e      	ldr	r3, [pc, #440]	@ (8001508 <tempActions+0x228>)
 8001350:	885a      	ldrh	r2, [r3, #2]
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = dutyFanEctTh[1];
 8001358:	4b6b      	ldr	r3, [pc, #428]	@ (8001508 <tempActions+0x228>)
 800135a:	885a      	ldrh	r2, [r3, #2]
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	05db      	lsls	r3, r3, #23
 8001360:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM16->CCR1 = dutyPumpEctTh[1];
 8001362:	4b6a      	ldr	r3, [pc, #424]	@ (800150c <tempActions+0x22c>)
 8001364:	885a      	ldrh	r2, [r3, #2]
 8001366:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <tempActions+0x230>)
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34

			if(ect > ectTh[2]){
 800136a:	4b64      	ldr	r3, [pc, #400]	@ (80014fc <tempActions+0x21c>)
 800136c:	2200      	movs	r2, #0
 800136e:	5e9b      	ldrsh	r3, [r3, r2]
 8001370:	001a      	movs	r2, r3
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <tempActions+0x220>)
 8001374:	889b      	ldrh	r3, [r3, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dd3b      	ble.n	80013f2 <tempActions+0x112>
				TIM2->CCR3 = dutyFanEctTh[2];
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <tempActions+0x228>)
 800137c:	889a      	ldrh	r2, [r3, #4]
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM2->CCR4 = dutyFanEctTh[2];
 8001384:	4b60      	ldr	r3, [pc, #384]	@ (8001508 <tempActions+0x228>)
 8001386:	889a      	ldrh	r2, [r3, #4]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
				TIM16->CCR1 = dutyPumpEctTh[2];
 800138e:	4b5f      	ldr	r3, [pc, #380]	@ (800150c <tempActions+0x22c>)
 8001390:	889a      	ldrh	r2, [r3, #4]
 8001392:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <tempActions+0x230>)
 8001394:	635a      	str	r2, [r3, #52]	@ 0x34

				if(ect > ectTh[3]){
 8001396:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <tempActions+0x21c>)
 8001398:	2200      	movs	r2, #0
 800139a:	5e9b      	ldrsh	r3, [r3, r2]
 800139c:	001a      	movs	r2, r3
 800139e:	4b58      	ldr	r3, [pc, #352]	@ (8001500 <tempActions+0x220>)
 80013a0:	88db      	ldrh	r3, [r3, #6]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dd25      	ble.n	80013f2 <tempActions+0x112>
					ectEmergencyFlag = 1;
 80013a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001514 <tempActions+0x234>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	e021      	b.n	80013f2 <tempActions+0x112>
				}
			}
		}
	}else{
		HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, RESET);
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	0099      	lsls	r1, r3, #2
 80013b2:	2390      	movs	r3, #144	@ 0x90
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	2200      	movs	r2, #0
 80013b8:	0018      	movs	r0, r3
 80013ba:	f003 fd1f 	bl	8004dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1L_Signal_GPIO_Port, F1L_Signal_Pin, RESET);
 80013be:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <tempActions+0x224>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	2180      	movs	r1, #128	@ 0x80
 80013c4:	0018      	movs	r0, r3
 80013c6:	f003 fd19 	bl	8004dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2L_Signal_GPIO_Port, F2L_Signal_Pin, RESET);
 80013ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001504 <tempActions+0x224>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	2140      	movs	r1, #64	@ 0x40
 80013d0:	0018      	movs	r0, r3
 80013d2:	f003 fd13 	bl	8004dfc <HAL_GPIO_WritePin>
		TIM2->CCR3 = dutyFanNill;
 80013d6:	4b50      	ldr	r3, [pc, #320]	@ (8001518 <tempActions+0x238>)
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	05db      	lsls	r3, r3, #23
 80013de:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = dutyFanNill;
 80013e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001518 <tempActions+0x238>)
 80013e2:	881a      	ldrh	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM16->CCR1 = dutyPumpNill;
 80013ea:	4b4c      	ldr	r3, [pc, #304]	@ (800151c <tempActions+0x23c>)
 80013ec:	881a      	ldrh	r2, [r3, #0]
 80013ee:	4b48      	ldr	r3, [pc, #288]	@ (8001510 <tempActions+0x230>)
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(oilTemp > oilTh[0]){
 80013f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001520 <tempActions+0x240>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	5e9b      	ldrsh	r3, [r3, r2]
 80013f8:	001a      	movs	r2, r3
 80013fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001524 <tempActions+0x244>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dd55      	ble.n	80014ae <tempActions+0x1ce>
		HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, SET);
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	0059      	lsls	r1, r3, #1
 8001406:	2390      	movs	r3, #144	@ 0x90
 8001408:	05db      	lsls	r3, r3, #23
 800140a:	2201      	movs	r2, #1
 800140c:	0018      	movs	r0, r3
 800140e:	f003 fcf5 	bl	8004dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, SET);
 8001412:	4b3c      	ldr	r3, [pc, #240]	@ (8001504 <tempActions+0x224>)
 8001414:	2201      	movs	r2, #1
 8001416:	2108      	movs	r1, #8
 8001418:	0018      	movs	r0, r3
 800141a:	f003 fcef 	bl	8004dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, SET);
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	0219      	lsls	r1, r3, #8
 8001422:	2390      	movs	r3, #144	@ 0x90
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	2201      	movs	r2, #1
 8001428:	0018      	movs	r0, r3
 800142a:	f003 fce7 	bl	8004dfc <HAL_GPIO_WritePin>
		TIM3->CCR1 = dutyFanEctTh[0];
 800142e:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <tempActions+0x228>)
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <tempActions+0x248>)
 8001434:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = dutyFanEctTh[0];
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <tempActions+0x228>)
 8001438:	881a      	ldrh	r2, [r3, #0]
 800143a:	4b3b      	ldr	r3, [pc, #236]	@ (8001528 <tempActions+0x248>)
 800143c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM17->CCR1 = dutyPumpOilTh[0];
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <tempActions+0x24c>)
 8001440:	881a      	ldrh	r2, [r3, #0]
 8001442:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <tempActions+0x250>)
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34

		if(oilTemp > oilTh[1]){
 8001446:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <tempActions+0x240>)
 8001448:	2200      	movs	r2, #0
 800144a:	5e9b      	ldrsh	r3, [r3, r2]
 800144c:	001a      	movs	r2, r3
 800144e:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <tempActions+0x244>)
 8001450:	885b      	ldrh	r3, [r3, #2]
 8001452:	429a      	cmp	r2, r3
 8001454:	dd4d      	ble.n	80014f2 <tempActions+0x212>
			TIM3->CCR1 = dutyFanEctTh[1];
 8001456:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <tempActions+0x228>)
 8001458:	885a      	ldrh	r2, [r3, #2]
 800145a:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <tempActions+0x248>)
 800145c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM3->CCR2 = dutyFanEctTh[1];
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <tempActions+0x228>)
 8001460:	885a      	ldrh	r2, [r3, #2]
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <tempActions+0x248>)
 8001464:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM17->CCR1 = dutyPumpOilTh[1];
 8001466:	4b31      	ldr	r3, [pc, #196]	@ (800152c <tempActions+0x24c>)
 8001468:	885a      	ldrh	r2, [r3, #2]
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <tempActions+0x250>)
 800146c:	635a      	str	r2, [r3, #52]	@ 0x34

			if(oilTemp > oilTh[2]){
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <tempActions+0x240>)
 8001470:	2200      	movs	r2, #0
 8001472:	5e9b      	ldrsh	r3, [r3, r2]
 8001474:	001a      	movs	r2, r3
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <tempActions+0x244>)
 8001478:	889b      	ldrh	r3, [r3, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	dd39      	ble.n	80014f2 <tempActions+0x212>
				TIM3->CCR1 = dutyFanEctTh[2];
 800147e:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <tempActions+0x228>)
 8001480:	889a      	ldrh	r2, [r3, #4]
 8001482:	4b29      	ldr	r3, [pc, #164]	@ (8001528 <tempActions+0x248>)
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM3->CCR2 = dutyFanEctTh[2];
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <tempActions+0x228>)
 8001488:	889a      	ldrh	r2, [r3, #4]
 800148a:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <tempActions+0x248>)
 800148c:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM17->CCR1 = dutyPumpOilTh[2];
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <tempActions+0x24c>)
 8001490:	889a      	ldrh	r2, [r3, #4]
 8001492:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <tempActions+0x250>)
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34

				if(oilTemp > oilTh[3]){
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <tempActions+0x240>)
 8001498:	2200      	movs	r2, #0
 800149a:	5e9b      	ldrsh	r3, [r3, r2]
 800149c:	001a      	movs	r2, r3
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <tempActions+0x244>)
 80014a0:	88db      	ldrh	r3, [r3, #6]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dd25      	ble.n	80014f2 <tempActions+0x212>
					oilEmergencyFlag = 1;
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <tempActions+0x254>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, SET);
		TIM3->CCR1 = dutyFanNill;
		TIM3->CCR2 = dutyFanNill;
		TIM17->CCR1 = dutyPumpNill;
	}
}
 80014ac:	e021      	b.n	80014f2 <tempActions+0x212>
		HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, SET);
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	0099      	lsls	r1, r3, #2
 80014b2:	2390      	movs	r3, #144	@ 0x90
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2201      	movs	r2, #1
 80014b8:	0018      	movs	r0, r3
 80014ba:	f003 fc9f 	bl	8004dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, SET);
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <tempActions+0x224>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	2108      	movs	r1, #8
 80014c4:	0018      	movs	r0, r3
 80014c6:	f003 fc99 	bl	8004dfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, SET);
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	0219      	lsls	r1, r3, #8
 80014ce:	2390      	movs	r3, #144	@ 0x90
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	2201      	movs	r2, #1
 80014d4:	0018      	movs	r0, r3
 80014d6:	f003 fc91 	bl	8004dfc <HAL_GPIO_WritePin>
		TIM3->CCR1 = dutyFanNill;
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <tempActions+0x238>)
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <tempActions+0x248>)
 80014e0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = dutyFanNill;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <tempActions+0x238>)
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <tempActions+0x248>)
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM17->CCR1 = dutyPumpNill;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <tempActions+0x23c>)
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <tempActions+0x250>)
 80014f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200003ec 	.word	0x200003ec
 80014fc:	200003f2 	.word	0x200003f2
 8001500:	20000000 	.word	0x20000000
 8001504:	48000400 	.word	0x48000400
 8001508:	20000018 	.word	0x20000018
 800150c:	20000020 	.word	0x20000020
 8001510:	40014400 	.word	0x40014400
 8001514:	20000400 	.word	0x20000400
 8001518:	2000001e 	.word	0x2000001e
 800151c:	20000026 	.word	0x20000026
 8001520:	200003f4 	.word	0x200003f4
 8001524:	20000008 	.word	0x20000008
 8001528:	40000400 	.word	0x40000400
 800152c:	20000030 	.word	0x20000030
 8001530:	40014800 	.word	0x40014800
 8001534:	20000401 	.word	0x20000401

08001538 <sendCan>:

void sendCan(){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	send = 0;
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <sendCan+0x114>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]

	TxData_adc[0] = (adc8 >> 8) & 0xFF;
 8001542:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <sendCan+0x118>)
 8001544:	2200      	movs	r2, #0
 8001546:	5e9b      	ldrsh	r3, [r3, r2]
 8001548:	121b      	asrs	r3, r3, #8
 800154a:	b21b      	sxth	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <sendCan+0x11c>)
 8001550:	701a      	strb	r2, [r3, #0]
	TxData_adc[1] = adc8 & 0xFF;
 8001552:	4b3f      	ldr	r3, [pc, #252]	@ (8001650 <sendCan+0x118>)
 8001554:	2200      	movs	r2, #0
 8001556:	5e9b      	ldrsh	r3, [r3, r2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <sendCan+0x11c>)
 800155c:	705a      	strb	r2, [r3, #1]
	TxData_adc[2] = (adc2 >> 8) & 0xFF;
 800155e:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <sendCan+0x120>)
 8001560:	2200      	movs	r2, #0
 8001562:	5e9b      	ldrsh	r3, [r3, r2]
 8001564:	121b      	asrs	r3, r3, #8
 8001566:	b21b      	sxth	r3, r3
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <sendCan+0x11c>)
 800156c:	709a      	strb	r2, [r3, #2]
	TxData_adc[3] = adc2 & 0xFF;
 800156e:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <sendCan+0x120>)
 8001570:	2200      	movs	r2, #0
 8001572:	5e9b      	ldrsh	r3, [r3, r2]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <sendCan+0x11c>)
 8001578:	70da      	strb	r2, [r3, #3]
	TxData_adc[4] = (adc3 >> 8) & 0xFF;
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <sendCan+0x124>)
 800157c:	2200      	movs	r2, #0
 800157e:	5e9b      	ldrsh	r3, [r3, r2]
 8001580:	121b      	asrs	r3, r3, #8
 8001582:	b21b      	sxth	r3, r3
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <sendCan+0x11c>)
 8001588:	711a      	strb	r2, [r3, #4]
	TxData_adc[5] = adc3 & 0xFF;
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <sendCan+0x124>)
 800158c:	2200      	movs	r2, #0
 800158e:	5e9b      	ldrsh	r3, [r3, r2]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b30      	ldr	r3, [pc, #192]	@ (8001654 <sendCan+0x11c>)
 8001594:	715a      	strb	r2, [r3, #5]
	TxData_adc[6] = (adc4 >> 8) & 0xFF;
 8001596:	4b32      	ldr	r3, [pc, #200]	@ (8001660 <sendCan+0x128>)
 8001598:	2200      	movs	r2, #0
 800159a:	5e9b      	ldrsh	r3, [r3, r2]
 800159c:	121b      	asrs	r3, r3, #8
 800159e:	b21b      	sxth	r3, r3
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <sendCan+0x11c>)
 80015a4:	719a      	strb	r2, [r3, #6]
	TxData_adc[7] = adc4 & 0xFF;
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <sendCan+0x128>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	5e9b      	ldrsh	r3, [r3, r2]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <sendCan+0x11c>)
 80015b0:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc, TxData_adc, &TxMailBox);
 80015b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <sendCan+0x12c>)
 80015b4:	4a27      	ldr	r2, [pc, #156]	@ (8001654 <sendCan+0x11c>)
 80015b6:	492c      	ldr	r1, [pc, #176]	@ (8001668 <sendCan+0x130>)
 80015b8:	482c      	ldr	r0, [pc, #176]	@ (800166c <sendCan+0x134>)
 80015ba:	f002 fc05 	bl	8003dc8 <HAL_CAN_AddTxMessage>

	TxData_adc1[0] = (adc5 >> 8) & 0xFF;
 80015be:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <sendCan+0x138>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	5e9b      	ldrsh	r3, [r3, r2]
 80015c4:	121b      	asrs	r3, r3, #8
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <sendCan+0x13c>)
 80015cc:	701a      	strb	r2, [r3, #0]
	TxData_adc1[1] = adc5 & 0xFF;
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <sendCan+0x138>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	5e9b      	ldrsh	r3, [r3, r2]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <sendCan+0x13c>)
 80015d8:	705a      	strb	r2, [r3, #1]
	TxData_adc1[2] = (adc1 >> 8) & 0xFF;
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <sendCan+0x140>)
 80015dc:	2200      	movs	r2, #0
 80015de:	5e9b      	ldrsh	r3, [r3, r2]
 80015e0:	121b      	asrs	r3, r3, #8
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <sendCan+0x13c>)
 80015e8:	709a      	strb	r2, [r3, #2]
	TxData_adc1[3] = adc1 & 0xFF;
 80015ea:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <sendCan+0x140>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	5e9b      	ldrsh	r3, [r3, r2]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <sendCan+0x13c>)
 80015f4:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc1, TxData_adc1, &TxMailBox);
 80015f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <sendCan+0x12c>)
 80015f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001674 <sendCan+0x13c>)
 80015fa:	4920      	ldr	r1, [pc, #128]	@ (800167c <sendCan+0x144>)
 80015fc:	481b      	ldr	r0, [pc, #108]	@ (800166c <sendCan+0x134>)
 80015fe:	f002 fbe3 	bl	8003dc8 <HAL_CAN_AddTxMessage>

	TxData_adc2[0] = (adc6 >> 8) & 0xFF;
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <sendCan+0x148>)
 8001604:	2200      	movs	r2, #0
 8001606:	5e9b      	ldrsh	r3, [r3, r2]
 8001608:	121b      	asrs	r3, r3, #8
 800160a:	b21b      	sxth	r3, r3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <sendCan+0x14c>)
 8001610:	701a      	strb	r2, [r3, #0]
	TxData_adc2[1] = adc6 & 0xFF;
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <sendCan+0x148>)
 8001614:	2200      	movs	r2, #0
 8001616:	5e9b      	ldrsh	r3, [r3, r2]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <sendCan+0x14c>)
 800161c:	705a      	strb	r2, [r3, #1]
	TxData_adc2[2] = (adc9 >> 8) & 0xFF;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <sendCan+0x150>)
 8001620:	2200      	movs	r2, #0
 8001622:	5e9b      	ldrsh	r3, [r3, r2]
 8001624:	121b      	asrs	r3, r3, #8
 8001626:	b21b      	sxth	r3, r3
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <sendCan+0x14c>)
 800162c:	709a      	strb	r2, [r3, #2]
	TxData_adc2[3] = adc9 & 0xFF;
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <sendCan+0x150>)
 8001630:	2200      	movs	r2, #0
 8001632:	5e9b      	ldrsh	r3, [r3, r2]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <sendCan+0x14c>)
 8001638:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc2, TxData_adc2, &TxMailBox);
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <sendCan+0x12c>)
 800163c:	4a11      	ldr	r2, [pc, #68]	@ (8001684 <sendCan+0x14c>)
 800163e:	4913      	ldr	r1, [pc, #76]	@ (800168c <sendCan+0x154>)
 8001640:	480a      	ldr	r0, [pc, #40]	@ (800166c <sendCan+0x134>)
 8001642:	f002 fbc1 	bl	8003dc8 <HAL_CAN_AddTxMessage>
}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000402 	.word	0x20000402
 8001650:	200003e8 	.word	0x200003e8
 8001654:	20000388 	.word	0x20000388
 8001658:	200003dc 	.word	0x200003dc
 800165c:	200003de 	.word	0x200003de
 8001660:	200003e0 	.word	0x200003e0
 8001664:	20000384 	.word	0x20000384
 8001668:	200002f4 	.word	0x200002f4
 800166c:	200000e4 	.word	0x200000e4
 8001670:	200003e2 	.word	0x200003e2
 8001674:	20000390 	.word	0x20000390
 8001678:	200003da 	.word	0x200003da
 800167c:	2000030c 	.word	0x2000030c
 8001680:	200003e4 	.word	0x200003e4
 8001684:	20000394 	.word	0x20000394
 8001688:	200003ea 	.word	0x200003ea
 800168c:	20000324 	.word	0x20000324

08001690 <heartbeat>:

void heartbeat(){
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	TxData_heartbeat[0] = 4;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <heartbeat+0x24>)
 8001696:	2204      	movs	r2, #4
 8001698:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader_heartbeat, TxData_heartbeat,&TxMailBox);
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <heartbeat+0x28>)
 800169c:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <heartbeat+0x24>)
 800169e:	4907      	ldr	r1, [pc, #28]	@ (80016bc <heartbeat+0x2c>)
 80016a0:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <heartbeat+0x30>)
 80016a2:	f002 fb91 	bl	8003dc8 <HAL_CAN_AddTxMessage>
	heartbeatFlag = 0;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <heartbeat+0x34>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	20000398 	.word	0x20000398
 80016b8:	20000384 	.word	0x20000384
 80016bc:	2000036c 	.word	0x2000036c
 80016c0:	200000e4 	.word	0x200000e4
 80016c4:	20000403 	.word	0x20000403

080016c8 <mapeoADC>:

void mapeoADC(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	adc1 = ((value_adc[0] * (3.3 / 4095)) - 0.26) * (1000 / 0.132); //
 80016cc:	4ba2      	ldr	r3, [pc, #648]	@ (8001958 <mapeoADC+0x290>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff fcd1 	bl	8001078 <__aeabi_i2d>
 80016d6:	4aa1      	ldr	r2, [pc, #644]	@ (800195c <mapeoADC+0x294>)
 80016d8:	4ba1      	ldr	r3, [pc, #644]	@ (8001960 <mapeoADC+0x298>)
 80016da:	f7fe fda1 	bl	8000220 <__aeabi_dmul>
 80016de:	0002      	movs	r2, r0
 80016e0:	000b      	movs	r3, r1
 80016e2:	0010      	movs	r0, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	4a9f      	ldr	r2, [pc, #636]	@ (8001964 <mapeoADC+0x29c>)
 80016e8:	4b9f      	ldr	r3, [pc, #636]	@ (8001968 <mapeoADC+0x2a0>)
 80016ea:	f7ff f87f 	bl	80007ec <__aeabi_dsub>
 80016ee:	0002      	movs	r2, r0
 80016f0:	000b      	movs	r3, r1
 80016f2:	0010      	movs	r0, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	4a9d      	ldr	r2, [pc, #628]	@ (800196c <mapeoADC+0x2a4>)
 80016f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001970 <mapeoADC+0x2a8>)
 80016fa:	f7fe fd91 	bl	8000220 <__aeabi_dmul>
 80016fe:	0002      	movs	r2, r0
 8001700:	000b      	movs	r3, r1
 8001702:	0010      	movs	r0, r2
 8001704:	0019      	movs	r1, r3
 8001706:	f7ff fc7b 	bl	8001000 <__aeabi_d2iz>
 800170a:	0003      	movs	r3, r0
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b99      	ldr	r3, [pc, #612]	@ (8001974 <mapeoADC+0x2ac>)
 8001710:	801a      	strh	r2, [r3, #0]
	adc2 = ((value_adc[1] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 8001712:	4b91      	ldr	r3, [pc, #580]	@ (8001958 <mapeoADC+0x290>)
 8001714:	885b      	ldrh	r3, [r3, #2]
 8001716:	0018      	movs	r0, r3
 8001718:	f7ff fcae 	bl	8001078 <__aeabi_i2d>
 800171c:	4a8f      	ldr	r2, [pc, #572]	@ (800195c <mapeoADC+0x294>)
 800171e:	4b90      	ldr	r3, [pc, #576]	@ (8001960 <mapeoADC+0x298>)
 8001720:	f7fe fd7e 	bl	8000220 <__aeabi_dmul>
 8001724:	0002      	movs	r2, r0
 8001726:	000b      	movs	r3, r1
 8001728:	0010      	movs	r0, r2
 800172a:	0019      	movs	r1, r3
 800172c:	4a8d      	ldr	r2, [pc, #564]	@ (8001964 <mapeoADC+0x29c>)
 800172e:	4b8e      	ldr	r3, [pc, #568]	@ (8001968 <mapeoADC+0x2a0>)
 8001730:	f7ff f85c 	bl	80007ec <__aeabi_dsub>
 8001734:	0002      	movs	r2, r0
 8001736:	000b      	movs	r3, r1
 8001738:	0010      	movs	r0, r2
 800173a:	0019      	movs	r1, r3
 800173c:	4a8b      	ldr	r2, [pc, #556]	@ (800196c <mapeoADC+0x2a4>)
 800173e:	4b8e      	ldr	r3, [pc, #568]	@ (8001978 <mapeoADC+0x2b0>)
 8001740:	f7fe fd6e 	bl	8000220 <__aeabi_dmul>
 8001744:	0002      	movs	r2, r0
 8001746:	000b      	movs	r3, r1
 8001748:	0010      	movs	r0, r2
 800174a:	0019      	movs	r1, r3
 800174c:	f7ff fc58 	bl	8001000 <__aeabi_d2iz>
 8001750:	0003      	movs	r3, r0
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b89      	ldr	r3, [pc, #548]	@ (800197c <mapeoADC+0x2b4>)
 8001756:	801a      	strh	r2, [r3, #0]
	adc3 = ((value_adc[2] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 8001758:	4b7f      	ldr	r3, [pc, #508]	@ (8001958 <mapeoADC+0x290>)
 800175a:	889b      	ldrh	r3, [r3, #4]
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fc8b 	bl	8001078 <__aeabi_i2d>
 8001762:	4a7e      	ldr	r2, [pc, #504]	@ (800195c <mapeoADC+0x294>)
 8001764:	4b7e      	ldr	r3, [pc, #504]	@ (8001960 <mapeoADC+0x298>)
 8001766:	f7fe fd5b 	bl	8000220 <__aeabi_dmul>
 800176a:	0002      	movs	r2, r0
 800176c:	000b      	movs	r3, r1
 800176e:	0010      	movs	r0, r2
 8001770:	0019      	movs	r1, r3
 8001772:	4a7c      	ldr	r2, [pc, #496]	@ (8001964 <mapeoADC+0x29c>)
 8001774:	4b7c      	ldr	r3, [pc, #496]	@ (8001968 <mapeoADC+0x2a0>)
 8001776:	f7ff f839 	bl	80007ec <__aeabi_dsub>
 800177a:	0002      	movs	r2, r0
 800177c:	000b      	movs	r3, r1
 800177e:	0010      	movs	r0, r2
 8001780:	0019      	movs	r1, r3
 8001782:	4a7a      	ldr	r2, [pc, #488]	@ (800196c <mapeoADC+0x2a4>)
 8001784:	4b7c      	ldr	r3, [pc, #496]	@ (8001978 <mapeoADC+0x2b0>)
 8001786:	f7fe fd4b 	bl	8000220 <__aeabi_dmul>
 800178a:	0002      	movs	r2, r0
 800178c:	000b      	movs	r3, r1
 800178e:	0010      	movs	r0, r2
 8001790:	0019      	movs	r1, r3
 8001792:	f7ff fc35 	bl	8001000 <__aeabi_d2iz>
 8001796:	0003      	movs	r3, r0
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b79      	ldr	r3, [pc, #484]	@ (8001980 <mapeoADC+0x2b8>)
 800179c:	801a      	strh	r2, [r3, #0]
	adc4 = ((value_adc[3] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 800179e:	4b6e      	ldr	r3, [pc, #440]	@ (8001958 <mapeoADC+0x290>)
 80017a0:	88db      	ldrh	r3, [r3, #6]
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff fc68 	bl	8001078 <__aeabi_i2d>
 80017a8:	4a6c      	ldr	r2, [pc, #432]	@ (800195c <mapeoADC+0x294>)
 80017aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <mapeoADC+0x298>)
 80017ac:	f7fe fd38 	bl	8000220 <__aeabi_dmul>
 80017b0:	0002      	movs	r2, r0
 80017b2:	000b      	movs	r3, r1
 80017b4:	0010      	movs	r0, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001964 <mapeoADC+0x29c>)
 80017ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001968 <mapeoADC+0x2a0>)
 80017bc:	f7ff f816 	bl	80007ec <__aeabi_dsub>
 80017c0:	0002      	movs	r2, r0
 80017c2:	000b      	movs	r3, r1
 80017c4:	0010      	movs	r0, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	4a68      	ldr	r2, [pc, #416]	@ (800196c <mapeoADC+0x2a4>)
 80017ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001978 <mapeoADC+0x2b0>)
 80017cc:	f7fe fd28 	bl	8000220 <__aeabi_dmul>
 80017d0:	0002      	movs	r2, r0
 80017d2:	000b      	movs	r3, r1
 80017d4:	0010      	movs	r0, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	f7ff fc12 	bl	8001000 <__aeabi_d2iz>
 80017dc:	0003      	movs	r3, r0
 80017de:	b21a      	sxth	r2, r3
 80017e0:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <mapeoADC+0x2bc>)
 80017e2:	801a      	strh	r2, [r3, #0]
	adc5 = ((value_adc[4] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 80017e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001958 <mapeoADC+0x290>)
 80017e6:	891b      	ldrh	r3, [r3, #8]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fc45 	bl	8001078 <__aeabi_i2d>
 80017ee:	4a5b      	ldr	r2, [pc, #364]	@ (800195c <mapeoADC+0x294>)
 80017f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <mapeoADC+0x298>)
 80017f2:	f7fe fd15 	bl	8000220 <__aeabi_dmul>
 80017f6:	0002      	movs	r2, r0
 80017f8:	000b      	movs	r3, r1
 80017fa:	0010      	movs	r0, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	4a59      	ldr	r2, [pc, #356]	@ (8001964 <mapeoADC+0x29c>)
 8001800:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <mapeoADC+0x2a0>)
 8001802:	f7fe fff3 	bl	80007ec <__aeabi_dsub>
 8001806:	0002      	movs	r2, r0
 8001808:	000b      	movs	r3, r1
 800180a:	0010      	movs	r0, r2
 800180c:	0019      	movs	r1, r3
 800180e:	4a57      	ldr	r2, [pc, #348]	@ (800196c <mapeoADC+0x2a4>)
 8001810:	4b59      	ldr	r3, [pc, #356]	@ (8001978 <mapeoADC+0x2b0>)
 8001812:	f7fe fd05 	bl	8000220 <__aeabi_dmul>
 8001816:	0002      	movs	r2, r0
 8001818:	000b      	movs	r3, r1
 800181a:	0010      	movs	r0, r2
 800181c:	0019      	movs	r1, r3
 800181e:	f7ff fbef 	bl	8001000 <__aeabi_d2iz>
 8001822:	0003      	movs	r3, r0
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b58      	ldr	r3, [pc, #352]	@ (8001988 <mapeoADC+0x2c0>)
 8001828:	801a      	strh	r2, [r3, #0]
	adc6 = ((value_adc[5] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 800182a:	4b4b      	ldr	r3, [pc, #300]	@ (8001958 <mapeoADC+0x290>)
 800182c:	895b      	ldrh	r3, [r3, #10]
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff fc22 	bl	8001078 <__aeabi_i2d>
 8001834:	4a49      	ldr	r2, [pc, #292]	@ (800195c <mapeoADC+0x294>)
 8001836:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <mapeoADC+0x298>)
 8001838:	f7fe fcf2 	bl	8000220 <__aeabi_dmul>
 800183c:	0002      	movs	r2, r0
 800183e:	000b      	movs	r3, r1
 8001840:	0010      	movs	r0, r2
 8001842:	0019      	movs	r1, r3
 8001844:	4a47      	ldr	r2, [pc, #284]	@ (8001964 <mapeoADC+0x29c>)
 8001846:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <mapeoADC+0x2a0>)
 8001848:	f7fe ffd0 	bl	80007ec <__aeabi_dsub>
 800184c:	0002      	movs	r2, r0
 800184e:	000b      	movs	r3, r1
 8001850:	0010      	movs	r0, r2
 8001852:	0019      	movs	r1, r3
 8001854:	4a45      	ldr	r2, [pc, #276]	@ (800196c <mapeoADC+0x2a4>)
 8001856:	4b48      	ldr	r3, [pc, #288]	@ (8001978 <mapeoADC+0x2b0>)
 8001858:	f7fe fce2 	bl	8000220 <__aeabi_dmul>
 800185c:	0002      	movs	r2, r0
 800185e:	000b      	movs	r3, r1
 8001860:	0010      	movs	r0, r2
 8001862:	0019      	movs	r1, r3
 8001864:	f7ff fbcc 	bl	8001000 <__aeabi_d2iz>
 8001868:	0003      	movs	r3, r0
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b47      	ldr	r3, [pc, #284]	@ (800198c <mapeoADC+0x2c4>)
 800186e:	801a      	strh	r2, [r3, #0]
	adc7 = ((value_adc[6] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 8001870:	4b39      	ldr	r3, [pc, #228]	@ (8001958 <mapeoADC+0x290>)
 8001872:	899b      	ldrh	r3, [r3, #12]
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff fbff 	bl	8001078 <__aeabi_i2d>
 800187a:	4a38      	ldr	r2, [pc, #224]	@ (800195c <mapeoADC+0x294>)
 800187c:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <mapeoADC+0x298>)
 800187e:	f7fe fccf 	bl	8000220 <__aeabi_dmul>
 8001882:	0002      	movs	r2, r0
 8001884:	000b      	movs	r3, r1
 8001886:	0010      	movs	r0, r2
 8001888:	0019      	movs	r1, r3
 800188a:	4a36      	ldr	r2, [pc, #216]	@ (8001964 <mapeoADC+0x29c>)
 800188c:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <mapeoADC+0x2a0>)
 800188e:	f7fe ffad 	bl	80007ec <__aeabi_dsub>
 8001892:	0002      	movs	r2, r0
 8001894:	000b      	movs	r3, r1
 8001896:	0010      	movs	r0, r2
 8001898:	0019      	movs	r1, r3
 800189a:	4a34      	ldr	r2, [pc, #208]	@ (800196c <mapeoADC+0x2a4>)
 800189c:	4b36      	ldr	r3, [pc, #216]	@ (8001978 <mapeoADC+0x2b0>)
 800189e:	f7fe fcbf 	bl	8000220 <__aeabi_dmul>
 80018a2:	0002      	movs	r2, r0
 80018a4:	000b      	movs	r3, r1
 80018a6:	0010      	movs	r0, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	f7ff fba9 	bl	8001000 <__aeabi_d2iz>
 80018ae:	0003      	movs	r3, r0
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <mapeoADC+0x2c8>)
 80018b4:	801a      	strh	r2, [r3, #0]
	adc8 = ((value_adc[7] * (3.3 / 4095)) - 0.27) * (1000 / 0.088); // Alternator Esto debería de ser (value_adc[7] *(3.3/4095)-0.33) *(1000/0.264)
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <mapeoADC+0x290>)
 80018b8:	89db      	ldrh	r3, [r3, #14]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff fbdc 	bl	8001078 <__aeabi_i2d>
 80018c0:	4a26      	ldr	r2, [pc, #152]	@ (800195c <mapeoADC+0x294>)
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <mapeoADC+0x298>)
 80018c4:	f7fe fcac 	bl	8000220 <__aeabi_dmul>
 80018c8:	0002      	movs	r2, r0
 80018ca:	000b      	movs	r3, r1
 80018cc:	0010      	movs	r0, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	4a30      	ldr	r2, [pc, #192]	@ (8001994 <mapeoADC+0x2cc>)
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <mapeoADC+0x2d0>)
 80018d4:	f7fe ff8a 	bl	80007ec <__aeabi_dsub>
 80018d8:	0002      	movs	r2, r0
 80018da:	000b      	movs	r3, r1
 80018dc:	0010      	movs	r0, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	4a2e      	ldr	r2, [pc, #184]	@ (800199c <mapeoADC+0x2d4>)
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <mapeoADC+0x2d8>)
 80018e4:	f7fe fc9c 	bl	8000220 <__aeabi_dmul>
 80018e8:	0002      	movs	r2, r0
 80018ea:	000b      	movs	r3, r1
 80018ec:	0010      	movs	r0, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	f7ff fb86 	bl	8001000 <__aeabi_d2iz>
 80018f4:	0003      	movs	r3, r0
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <mapeoADC+0x2dc>)
 80018fa:	801a      	strh	r2, [r3, #0]
	adc9 = (((value_adc[8] * (3.3 / 4095) - 0.5)) * (1000 / 10) * 1000); // calibración del sensor 0.01V/ºC
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <mapeoADC+0x290>)
 80018fe:	8a1b      	ldrh	r3, [r3, #16]
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff fbb9 	bl	8001078 <__aeabi_i2d>
 8001906:	4a15      	ldr	r2, [pc, #84]	@ (800195c <mapeoADC+0x294>)
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <mapeoADC+0x298>)
 800190a:	f7fe fc89 	bl	8000220 <__aeabi_dmul>
 800190e:	0002      	movs	r2, r0
 8001910:	000b      	movs	r3, r1
 8001912:	0010      	movs	r0, r2
 8001914:	0019      	movs	r1, r3
 8001916:	2200      	movs	r2, #0
 8001918:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <mapeoADC+0x2e0>)
 800191a:	f7fe ff67 	bl	80007ec <__aeabi_dsub>
 800191e:	0002      	movs	r2, r0
 8001920:	000b      	movs	r3, r1
 8001922:	0010      	movs	r0, r2
 8001924:	0019      	movs	r1, r3
 8001926:	2200      	movs	r2, #0
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <mapeoADC+0x2e4>)
 800192a:	f7fe fc79 	bl	8000220 <__aeabi_dmul>
 800192e:	0002      	movs	r2, r0
 8001930:	000b      	movs	r3, r1
 8001932:	0010      	movs	r0, r2
 8001934:	0019      	movs	r1, r3
 8001936:	2200      	movs	r2, #0
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <mapeoADC+0x2e8>)
 800193a:	f7fe fc71 	bl	8000220 <__aeabi_dmul>
 800193e:	0002      	movs	r2, r0
 8001940:	000b      	movs	r3, r1
 8001942:	0010      	movs	r0, r2
 8001944:	0019      	movs	r1, r3
 8001946:	f7ff fb5b 	bl	8001000 <__aeabi_d2iz>
 800194a:	0003      	movs	r3, r0
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <mapeoADC+0x2ec>)
 8001950:	801a      	strh	r2, [r3, #0]
}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200003c8 	.word	0x200003c8
 800195c:	e734d9b4 	.word	0xe734d9b4
 8001960:	3f4a680c 	.word	0x3f4a680c
 8001964:	0a3d70a4 	.word	0x0a3d70a4
 8001968:	3fd0a3d7 	.word	0x3fd0a3d7
 800196c:	f07c1f07 	.word	0xf07c1f07
 8001970:	40bd97c1 	.word	0x40bd97c1
 8001974:	200003da 	.word	0x200003da
 8001978:	40ad97c1 	.word	0x40ad97c1
 800197c:	200003dc 	.word	0x200003dc
 8001980:	200003de 	.word	0x200003de
 8001984:	200003e0 	.word	0x200003e0
 8001988:	200003e2 	.word	0x200003e2
 800198c:	200003e4 	.word	0x200003e4
 8001990:	200003e6 	.word	0x200003e6
 8001994:	147ae148 	.word	0x147ae148
 8001998:	3fd147ae 	.word	0x3fd147ae
 800199c:	745d1746 	.word	0x745d1746
 80019a0:	40c631d1 	.word	0x40c631d1
 80019a4:	200003e8 	.word	0x200003e8
 80019a8:	3fe00000 	.word	0x3fe00000
 80019ac:	40590000 	.word	0x40590000
 80019b0:	408f4000 	.word	0x408f4000
 80019b4:	200003ea 	.word	0x200003ea

080019b8 <battControl>:

void battControl(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	battDataFlag = 0;
 80019be:	4b4f      	ldr	r3, [pc, #316]	@ (8001afc <battControl+0x144>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
	uint8_t arrayLength = (sizeof(dutyFanEctTh)/sizeof(dutyFanEctTh[0]));
 80019c4:	1dfb      	adds	r3, r7, #7
 80019c6:	2203      	movs	r2, #3
 80019c8:	701a      	strb	r2, [r3, #0]
	if(battVoltAverage < battTh[2]){
 80019ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001b00 <battControl+0x148>)
 80019cc:	889a      	ldrh	r2, [r3, #4]
 80019ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001b04 <battControl+0x14c>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d800      	bhi.n	80019d8 <battControl+0x20>
 80019d6:	e08c      	b.n	8001af2 <battControl+0x13a>
		for(uint8_t i=0; (i=arrayLength); i++){
 80019d8:	1dbb      	adds	r3, r7, #6
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
 80019de:	e01f      	b.n	8001a20 <battControl+0x68>
			dutyFanEctTh[i] = dutyFanEctTh[i]-5;
 80019e0:	1dbb      	adds	r3, r7, #6
 80019e2:	781a      	ldrb	r2, [r3, #0]
 80019e4:	4b48      	ldr	r3, [pc, #288]	@ (8001b08 <battControl+0x150>)
 80019e6:	0052      	lsls	r2, r2, #1
 80019e8:	5ad3      	ldrh	r3, [r2, r3]
 80019ea:	1dba      	adds	r2, r7, #6
 80019ec:	7812      	ldrb	r2, [r2, #0]
 80019ee:	3b05      	subs	r3, #5
 80019f0:	b299      	uxth	r1, r3
 80019f2:	4b45      	ldr	r3, [pc, #276]	@ (8001b08 <battControl+0x150>)
 80019f4:	0052      	lsls	r2, r2, #1
 80019f6:	52d1      	strh	r1, [r2, r3]
			dutyFanOilTh[i] = dutyFanOilTh[i]-5;
 80019f8:	1dbb      	adds	r3, r7, #6
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	4b43      	ldr	r3, [pc, #268]	@ (8001b0c <battControl+0x154>)
 80019fe:	0052      	lsls	r2, r2, #1
 8001a00:	5ad3      	ldrh	r3, [r2, r3]
 8001a02:	1dba      	adds	r2, r7, #6
 8001a04:	7812      	ldrb	r2, [r2, #0]
 8001a06:	3b05      	subs	r3, #5
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	4b40      	ldr	r3, [pc, #256]	@ (8001b0c <battControl+0x154>)
 8001a0c:	0052      	lsls	r2, r2, #1
 8001a0e:	52d1      	strh	r1, [r2, r3]
			i = 0;
 8001a10:	1dbb      	adds	r3, r7, #6
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; (i=arrayLength); i++){
 8001a16:	1dbb      	adds	r3, r7, #6
 8001a18:	781a      	ldrb	r2, [r3, #0]
 8001a1a:	1dbb      	adds	r3, r7, #6
 8001a1c:	3201      	adds	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
 8001a20:	1dbb      	adds	r3, r7, #6
 8001a22:	1dfa      	adds	r2, r7, #7
 8001a24:	7812      	ldrb	r2, [r2, #0]
 8001a26:	701a      	strb	r2, [r3, #0]
 8001a28:	1dbb      	adds	r3, r7, #6
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1d7      	bne.n	80019e0 <battControl+0x28>
		}
		if(battVoltAverage < battTh[1]){
 8001a30:	4b33      	ldr	r3, [pc, #204]	@ (8001b00 <battControl+0x148>)
 8001a32:	885a      	ldrh	r2, [r3, #2]
 8001a34:	4b33      	ldr	r3, [pc, #204]	@ (8001b04 <battControl+0x14c>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d95a      	bls.n	8001af2 <battControl+0x13a>
			for(uint8_t i=0; (i=arrayLength); i++){
 8001a3c:	1d7b      	adds	r3, r7, #5
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e01f      	b.n	8001a84 <battControl+0xcc>
				dutyFanEctTh[i] = dutyFanEctTh[i]-10;
 8001a44:	1d7b      	adds	r3, r7, #5
 8001a46:	781a      	ldrb	r2, [r3, #0]
 8001a48:	4b2f      	ldr	r3, [pc, #188]	@ (8001b08 <battControl+0x150>)
 8001a4a:	0052      	lsls	r2, r2, #1
 8001a4c:	5ad3      	ldrh	r3, [r2, r3]
 8001a4e:	1d7a      	adds	r2, r7, #5
 8001a50:	7812      	ldrb	r2, [r2, #0]
 8001a52:	3b0a      	subs	r3, #10
 8001a54:	b299      	uxth	r1, r3
 8001a56:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <battControl+0x150>)
 8001a58:	0052      	lsls	r2, r2, #1
 8001a5a:	52d1      	strh	r1, [r2, r3]
				dutyFanOilTh[i] = dutyFanOilTh[i]-10;
 8001a5c:	1d7b      	adds	r3, r7, #5
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	4b2a      	ldr	r3, [pc, #168]	@ (8001b0c <battControl+0x154>)
 8001a62:	0052      	lsls	r2, r2, #1
 8001a64:	5ad3      	ldrh	r3, [r2, r3]
 8001a66:	1d7a      	adds	r2, r7, #5
 8001a68:	7812      	ldrb	r2, [r2, #0]
 8001a6a:	3b0a      	subs	r3, #10
 8001a6c:	b299      	uxth	r1, r3
 8001a6e:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <battControl+0x154>)
 8001a70:	0052      	lsls	r2, r2, #1
 8001a72:	52d1      	strh	r1, [r2, r3]
				i = 0;
 8001a74:	1d7b      	adds	r3, r7, #5
 8001a76:	2200      	movs	r2, #0
 8001a78:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; (i=arrayLength); i++){
 8001a7a:	1d7b      	adds	r3, r7, #5
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	1d7b      	adds	r3, r7, #5
 8001a80:	3201      	adds	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	1d7b      	adds	r3, r7, #5
 8001a86:	1dfa      	adds	r2, r7, #7
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	701a      	strb	r2, [r3, #0]
 8001a8c:	1d7b      	adds	r3, r7, #5
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1d7      	bne.n	8001a44 <battControl+0x8c>

			}
			if(battVoltAverage < battTh[0]){
 8001a94:	4b1a      	ldr	r3, [pc, #104]	@ (8001b00 <battControl+0x148>)
 8001a96:	881a      	ldrh	r2, [r3, #0]
 8001a98:	4b1a      	ldr	r3, [pc, #104]	@ (8001b04 <battControl+0x14c>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d928      	bls.n	8001af2 <battControl+0x13a>
				for(uint8_t i=0; (i=arrayLength); i++){
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	e01c      	b.n	8001ae2 <battControl+0x12a>
					dutyFanEctTh[i] = dutyFanEctTh[i]-20;
 8001aa8:	1d3b      	adds	r3, r7, #4
 8001aaa:	781a      	ldrb	r2, [r3, #0]
 8001aac:	4b16      	ldr	r3, [pc, #88]	@ (8001b08 <battControl+0x150>)
 8001aae:	0052      	lsls	r2, r2, #1
 8001ab0:	5ad3      	ldrh	r3, [r2, r3]
 8001ab2:	1d3a      	adds	r2, r7, #4
 8001ab4:	7812      	ldrb	r2, [r2, #0]
 8001ab6:	3b14      	subs	r3, #20
 8001ab8:	b299      	uxth	r1, r3
 8001aba:	4b13      	ldr	r3, [pc, #76]	@ (8001b08 <battControl+0x150>)
 8001abc:	0052      	lsls	r2, r2, #1
 8001abe:	52d1      	strh	r1, [r2, r3]
					dutyFanOilTh[i] = dutyFanOilTh[i]-20;
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <battControl+0x154>)
 8001ac6:	0052      	lsls	r2, r2, #1
 8001ac8:	5ad3      	ldrh	r3, [r2, r3]
 8001aca:	1d3a      	adds	r2, r7, #4
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	3b14      	subs	r3, #20
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8001b0c <battControl+0x154>)
 8001ad4:	0052      	lsls	r2, r2, #1
 8001ad6:	52d1      	strh	r1, [r2, r3]
				for(uint8_t i=0; (i=arrayLength); i++){
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	3201      	adds	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	1dfa      	adds	r2, r7, #7
 8001ae6:	7812      	ldrb	r2, [r2, #0]
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1da      	bne.n	8001aa8 <battControl+0xf0>

				}
			}
		}
	}
}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	200003f0 	.word	0x200003f0
 8001b00:	20000010 	.word	0x20000010
 8001b04:	20000418 	.word	0x20000418
 8001b08:	20000018 	.word	0x20000018
 8001b0c:	20000028 	.word	0x20000028

08001b10 <fillBatVoltBuffer>:

void fillBatVoltBuffer(){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
	uint8_t bufferSize = (sizeof(battVoltBuffer)/sizeof(battVoltBuffer[0]));
 8001b16:	1dfb      	adds	r3, r7, #7
 8001b18:	220a      	movs	r2, #10
 8001b1a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; (i= bufferSize); i++) {
 8001b1c:	1dbb      	adds	r3, r7, #6
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e00f      	b.n	8001b44 <fillBatVoltBuffer+0x34>
	        battVoltBuffer[i] = battVoltBuffer[i + 1];
 8001b24:	1dbb      	adds	r3, r7, #6
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	1c59      	adds	r1, r3, #1
 8001b2a:	1dbb      	adds	r3, r7, #6
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001b6c <fillBatVoltBuffer+0x5c>)
 8001b30:	0049      	lsls	r1, r1, #1
 8001b32:	5ac9      	ldrh	r1, [r1, r3]
 8001b34:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <fillBatVoltBuffer+0x5c>)
 8001b36:	0052      	lsls	r2, r2, #1
 8001b38:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; (i= bufferSize); i++) {
 8001b3a:	1dbb      	adds	r3, r7, #6
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	1dbb      	adds	r3, r7, #6
 8001b40:	3201      	adds	r2, #1
 8001b42:	701a      	strb	r2, [r3, #0]
 8001b44:	1dbb      	adds	r3, r7, #6
 8001b46:	1dfa      	adds	r2, r7, #7
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	701a      	strb	r2, [r3, #0]
 8001b4c:	1dbb      	adds	r3, r7, #6
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1e7      	bne.n	8001b24 <fillBatVoltBuffer+0x14>
	}
	battVoltBuffer[bufferSize-1] = battVolt;
 8001b54:	1dfb      	adds	r3, r7, #7
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <fillBatVoltBuffer+0x60>)
 8001b5c:	8819      	ldrh	r1, [r3, #0]
 8001b5e:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <fillBatVoltBuffer+0x5c>)
 8001b60:	0052      	lsls	r2, r2, #1
 8001b62:	52d1      	strh	r1, [r2, r3]
}
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b002      	add	sp, #8
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000404 	.word	0x20000404
 8001b70:	200003fa 	.word	0x200003fa

08001b74 <gettBatVoltAverage>:

void gettBatVoltAverage(){
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
	uint8_t bufferSize = (sizeof(battVoltBuffer)/sizeof(battVoltBuffer[0]));
 8001b7e:	1cbb      	adds	r3, r7, #2
 8001b80:	220a      	movs	r2, #10
 8001b82:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < bufferSize; i++) {
 8001b84:	1cfb      	adds	r3, r7, #3
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
 8001b8a:	e00d      	b.n	8001ba8 <gettBatVoltAverage+0x34>
		sum += battVoltBuffer[i];
 8001b8c:	1cfb      	adds	r3, r7, #3
 8001b8e:	781a      	ldrb	r2, [r3, #0]
 8001b90:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd0 <gettBatVoltAverage+0x5c>)
 8001b92:	0052      	lsls	r2, r2, #1
 8001b94:	5ad3      	ldrh	r3, [r2, r3]
 8001b96:	001a      	movs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	189b      	adds	r3, r3, r2
 8001b9c:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < bufferSize; i++) {
 8001b9e:	1cfb      	adds	r3, r7, #3
 8001ba0:	781a      	ldrb	r2, [r3, #0]
 8001ba2:	1cfb      	adds	r3, r7, #3
 8001ba4:	3201      	adds	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	1cfa      	adds	r2, r7, #3
 8001baa:	1cbb      	adds	r3, r7, #2
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d3eb      	bcc.n	8001b8c <gettBatVoltAverage+0x18>
	}
	battVoltAverage = sum / bufferSize;
 8001bb4:	1cbb      	adds	r3, r7, #2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	0019      	movs	r1, r3
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7fe faa4 	bl	8000108 <__udivsi3>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <gettBatVoltAverage+0x60>)
 8001bc6:	801a      	strh	r2, [r3, #0]
}
 8001bc8:	46c0      	nop			@ (mov r8, r8)
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	b002      	add	sp, #8
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000404 	.word	0x20000404
 8001bd4:	20000418 	.word	0x20000418

08001bd8 <canResetEcu>:

void canResetEcu(){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, RESET);
 8001bdc:	2380      	movs	r3, #128	@ 0x80
 8001bde:	019b      	lsls	r3, r3, #6
 8001be0:	480c      	ldr	r0, [pc, #48]	@ (8001c14 <canResetEcu+0x3c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	0019      	movs	r1, r3
 8001be6:	f003 f909 	bl	8004dfc <HAL_GPIO_WritePin>
	if(resetCounter >= 2){
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <canResetEcu+0x40>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d90c      	bls.n	8001c0c <canResetEcu+0x34>
		canResetEcuFlag = 0;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <canResetEcu+0x44>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
		resetCounter = 0;
 8001bf8:	4b07      	ldr	r3, [pc, #28]	@ (8001c18 <canResetEcu+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 8001bfe:	2380      	movs	r3, #128	@ 0x80
 8001c00:	019b      	lsls	r3, r3, #6
 8001c02:	4804      	ldr	r0, [pc, #16]	@ (8001c14 <canResetEcu+0x3c>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	0019      	movs	r1, r3
 8001c08:	f003 f8f8 	bl	8004dfc <HAL_GPIO_WritePin>
	}

}
 8001c0c:	46c0      	nop			@ (mov r8, r8)
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	46c0      	nop			@ (mov r8, r8)
 8001c14:	48000800 	.word	0x48000800
 8001c18:	2000041b 	.word	0x2000041b
 8001c1c:	2000041a 	.word	0x2000041a

08001c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c24:	f001 f9dc 	bl	8002fe0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c28:	f000 f942 	bl	8001eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2c:	f000 fd8c 	bl	8002748 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c30:	f000 fd6c 	bl	800270c <MX_DMA_Init>
  MX_ADC_Init();
 8001c34:	f000 f98a 	bl	8001f4c <MX_ADC_Init>
  MX_CAN_Init();
 8001c38:	f000 fa58 	bl	80020ec <MX_CAN_Init>
  MX_SPI2_Init();
 8001c3c:	f000 fab2 	bl	80021a4 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001c40:	f000 fbec 	bl	800241c <MX_TIM3_Init>
  MX_TIM17_Init();
 8001c44:	f000 fcdc 	bl	8002600 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001c48:	f000 fc54 	bl	80024f4 <MX_TIM16_Init>
  MX_TIM2_Init();
 8001c4c:	f000 fb7c 	bl	8002348 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001c50:	f000 fae6 	bl	8002220 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adc_buff, 9); //Inicia el DMA se le pasa el ADC, la variable donde guardar los datos y el numero de canales
 8001c54:	4979      	ldr	r1, [pc, #484]	@ (8001e3c <main+0x21c>)
 8001c56:	4b7a      	ldr	r3, [pc, #488]	@ (8001e40 <main+0x220>)
 8001c58:	2209      	movs	r2, #9
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f001 fbd6 	bl	800340c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc); //Se inicia la interrupcion de fin de conversion del ADC en el "Set-up"
 8001c60:	4b77      	ldr	r3, [pc, #476]	@ (8001e40 <main+0x220>)
 8001c62:	0018      	movs	r0, r3
 8001c64:	f001 fb60 	bl	8003328 <HAL_ADC_Start_IT>
  HAL_CAN_Start(&hcan);
 8001c68:	4b76      	ldr	r3, [pc, #472]	@ (8001e44 <main+0x224>)
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f002 f866 	bl	8003d3c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001c70:	4b74      	ldr	r3, [pc, #464]	@ (8001e44 <main+0x224>)
 8001c72:	2102      	movs	r1, #2
 8001c74:	0018      	movs	r0, r3
 8001c76:	f002 faa4 	bl	80041c2 <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim1);
 8001c7a:	4b73      	ldr	r3, [pc, #460]	@ (8001e48 <main+0x228>)
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f003 feb7 	bl	80059f0 <HAL_TIM_Base_Start_IT>
  TIM2->CCR3 = dutyFanNill;
 8001c82:	4b72      	ldr	r3, [pc, #456]	@ (8001e4c <main+0x22c>)
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	2380      	movs	r3, #128	@ 0x80
 8001c88:	05db      	lsls	r3, r3, #23
 8001c8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = dutyFanNill;
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e4c <main+0x22c>)
 8001c8e:	881a      	ldrh	r2, [r3, #0]
 8001c90:	2380      	movs	r3, #128	@ 0x80
 8001c92:	05db      	lsls	r3, r3, #23
 8001c94:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = dutyFanNill;
 8001c96:	4b6d      	ldr	r3, [pc, #436]	@ (8001e4c <main+0x22c>)
 8001c98:	881a      	ldrh	r2, [r3, #0]
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001e50 <main+0x230>)
 8001c9c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = dutyFanNill;
 8001c9e:	4b6b      	ldr	r3, [pc, #428]	@ (8001e4c <main+0x22c>)
 8001ca0:	881a      	ldrh	r2, [r3, #0]
 8001ca2:	4b6b      	ldr	r3, [pc, #428]	@ (8001e50 <main+0x230>)
 8001ca4:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM16->CCR1 = dutyPumpNill;
 8001ca6:	4b6b      	ldr	r3, [pc, #428]	@ (8001e54 <main+0x234>)
 8001ca8:	881a      	ldrh	r2, [r3, #0]
 8001caa:	4b6b      	ldr	r3, [pc, #428]	@ (8001e58 <main+0x238>)
 8001cac:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->CCR1 = dutyPumpNill;
 8001cae:	4b69      	ldr	r3, [pc, #420]	@ (8001e54 <main+0x234>)
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001e5c <main+0x23c>)
 8001cb4:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001cb6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e60 <main+0x240>)
 8001cb8:	2100      	movs	r1, #0
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f003 ff84 	bl	8005bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001cc0:	4b67      	ldr	r3, [pc, #412]	@ (8001e60 <main+0x240>)
 8001cc2:	2104      	movs	r1, #4
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f003 ff7f 	bl	8005bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001cca:	4b66      	ldr	r3, [pc, #408]	@ (8001e64 <main+0x244>)
 8001ccc:	2108      	movs	r1, #8
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f003 ff7a 	bl	8005bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001cd4:	4b63      	ldr	r3, [pc, #396]	@ (8001e64 <main+0x244>)
 8001cd6:	210c      	movs	r1, #12
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f003 ff75 	bl	8005bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001cde:	4b62      	ldr	r3, [pc, #392]	@ (8001e68 <main+0x248>)
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f003 ff70 	bl	8005bc8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001ce8:	4b60      	ldr	r3, [pc, #384]	@ (8001e6c <main+0x24c>)
 8001cea:	2100      	movs	r1, #0
 8001cec:	0018      	movs	r0, r3
 8001cee:	f003 ff6b 	bl	8005bc8 <HAL_TIM_PWM_Start>


	TxHeader_adc.DLC = 8;
 8001cf2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e70 <main+0x250>)
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	611a      	str	r2, [r3, #16]
	TxHeader_adc.ExtId = 0;
 8001cf8:	4b5d      	ldr	r3, [pc, #372]	@ (8001e70 <main+0x250>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	605a      	str	r2, [r3, #4]
	TxHeader_adc.IDE = CAN_ID_STD;
 8001cfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001e70 <main+0x250>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
	TxHeader_adc.RTR = CAN_RTR_DATA;
 8001d04:	4b5a      	ldr	r3, [pc, #360]	@ (8001e70 <main+0x250>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]
	TxHeader_adc.StdId = ADC_ID;
 8001d0a:	4b59      	ldr	r3, [pc, #356]	@ (8001e70 <main+0x250>)
 8001d0c:	4a59      	ldr	r2, [pc, #356]	@ (8001e74 <main+0x254>)
 8001d0e:	601a      	str	r2, [r3, #0]
	TxHeader_adc.TransmitGlobalTime = DISABLE;
 8001d10:	4b57      	ldr	r3, [pc, #348]	@ (8001e70 <main+0x250>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	751a      	strb	r2, [r3, #20]

	TxHeader_adc1.DLC = 4;
 8001d16:	4b58      	ldr	r3, [pc, #352]	@ (8001e78 <main+0x258>)
 8001d18:	2204      	movs	r2, #4
 8001d1a:	611a      	str	r2, [r3, #16]
	TxHeader_adc1.ExtId = 0;
 8001d1c:	4b56      	ldr	r3, [pc, #344]	@ (8001e78 <main+0x258>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	605a      	str	r2, [r3, #4]
	TxHeader_adc1.IDE = CAN_ID_STD;
 8001d22:	4b55      	ldr	r3, [pc, #340]	@ (8001e78 <main+0x258>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
	TxHeader_adc1.RTR = CAN_RTR_DATA;
 8001d28:	4b53      	ldr	r3, [pc, #332]	@ (8001e78 <main+0x258>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
	TxHeader_adc1.StdId = ADC_ID1;
 8001d2e:	4b52      	ldr	r3, [pc, #328]	@ (8001e78 <main+0x258>)
 8001d30:	4a52      	ldr	r2, [pc, #328]	@ (8001e7c <main+0x25c>)
 8001d32:	601a      	str	r2, [r3, #0]
	TxHeader_adc1.TransmitGlobalTime = DISABLE;
 8001d34:	4b50      	ldr	r3, [pc, #320]	@ (8001e78 <main+0x258>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	751a      	strb	r2, [r3, #20]

	TxHeader_adc2.DLC = 4;
 8001d3a:	4b51      	ldr	r3, [pc, #324]	@ (8001e80 <main+0x260>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	611a      	str	r2, [r3, #16]
	TxHeader_adc2.ExtId = 0;
 8001d40:	4b4f      	ldr	r3, [pc, #316]	@ (8001e80 <main+0x260>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	605a      	str	r2, [r3, #4]
	TxHeader_adc2.IDE = CAN_ID_STD;
 8001d46:	4b4e      	ldr	r3, [pc, #312]	@ (8001e80 <main+0x260>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
	TxHeader_adc2.RTR = CAN_RTR_DATA;
 8001d4c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e80 <main+0x260>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
	TxHeader_adc2.StdId = ADC_ID2;
 8001d52:	4b4b      	ldr	r3, [pc, #300]	@ (8001e80 <main+0x260>)
 8001d54:	4a4b      	ldr	r2, [pc, #300]	@ (8001e84 <main+0x264>)
 8001d56:	601a      	str	r2, [r3, #0]
	TxHeader_adc2.TransmitGlobalTime = DISABLE;
 8001d58:	4b49      	ldr	r3, [pc, #292]	@ (8001e80 <main+0x260>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	751a      	strb	r2, [r3, #20]

	TxHeader_adc3.DLC = 2; //AQUI ESTABA EL ERROR; ESO ESTABA COMO TxHeader_adc2
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <main+0x268>)
 8001d60:	2202      	movs	r2, #2
 8001d62:	611a      	str	r2, [r3, #16]
	TxHeader_adc3.ExtId = 0;
 8001d64:	4b48      	ldr	r3, [pc, #288]	@ (8001e88 <main+0x268>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]
	TxHeader_adc3.IDE = CAN_ID_STD;
 8001d6a:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <main+0x268>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
	TxHeader_adc3.RTR = CAN_RTR_DATA;
 8001d70:	4b45      	ldr	r3, [pc, #276]	@ (8001e88 <main+0x268>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]
	TxHeader_adc3.StdId = ADC_ID3;
 8001d76:	4b44      	ldr	r3, [pc, #272]	@ (8001e88 <main+0x268>)
 8001d78:	22ed      	movs	r2, #237	@ 0xed
 8001d7a:	0092      	lsls	r2, r2, #2
 8001d7c:	601a      	str	r2, [r3, #0]
	TxHeader_adc3.TransmitGlobalTime = DISABLE;
 8001d7e:	4b42      	ldr	r3, [pc, #264]	@ (8001e88 <main+0x268>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	751a      	strb	r2, [r3, #20]

	TxHeader_anw.DLC = 2;
 8001d84:	4b41      	ldr	r3, [pc, #260]	@ (8001e8c <main+0x26c>)
 8001d86:	2202      	movs	r2, #2
 8001d88:	611a      	str	r2, [r3, #16]
	TxHeader_anw.ExtId = 0;
 8001d8a:	4b40      	ldr	r3, [pc, #256]	@ (8001e8c <main+0x26c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
	TxHeader_anw.IDE = CAN_ID_STD;
 8001d90:	4b3e      	ldr	r3, [pc, #248]	@ (8001e8c <main+0x26c>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
	TxHeader_anw.RTR = CAN_RTR_DATA;
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <main+0x26c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
	TxHeader_anw.StdId = ANW_ID;
 8001d9c:	4b3b      	ldr	r3, [pc, #236]	@ (8001e8c <main+0x26c>)
 8001d9e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e90 <main+0x270>)
 8001da0:	601a      	str	r2, [r3, #0]
	TxHeader_anw.TransmitGlobalTime = DISABLE;
 8001da2:	4b3a      	ldr	r3, [pc, #232]	@ (8001e8c <main+0x26c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	751a      	strb	r2, [r3, #20]

	TxHeader_heartbeat.DLC = 1;
 8001da8:	4b3a      	ldr	r3, [pc, #232]	@ (8001e94 <main+0x274>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	611a      	str	r2, [r3, #16]
	TxHeader_heartbeat.ExtId = 0;
 8001dae:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <main+0x274>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	605a      	str	r2, [r3, #4]
	TxHeader_heartbeat.IDE = CAN_ID_STD;
 8001db4:	4b37      	ldr	r3, [pc, #220]	@ (8001e94 <main+0x274>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
	TxHeader_heartbeat.RTR = CAN_RTR_DATA;
 8001dba:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <main+0x274>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	60da      	str	r2, [r3, #12]
	TxHeader_heartbeat.StdId = HEARTBEAT_ID;
 8001dc0:	4b34      	ldr	r3, [pc, #208]	@ (8001e94 <main+0x274>)
 8001dc2:	22ec      	movs	r2, #236	@ 0xec
 8001dc4:	0092      	lsls	r2, r2, #2
 8001dc6:	601a      	str	r2, [r3, #0]
	TxHeader_heartbeat.TransmitGlobalTime = DISABLE;
 8001dc8:	4b32      	ldr	r3, [pc, #200]	@ (8001e94 <main+0x274>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001dce:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <main+0x224>)
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f002 f9f5 	bl	80041c2 <HAL_CAN_ActivateNotification>
 8001dd8:	1e03      	subs	r3, r0, #0
 8001dda:	d001      	beq.n	8001de0 <main+0x1c0>
			!= HAL_OK) {
		Error_Handler();
 8001ddc:	f000 fdb4 	bl	8002948 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  mapeoADC();
 8001de0:	f7ff fc72 	bl	80016c8 <mapeoADC>
	  if(tempDataFlag){
 8001de4:	4b2c      	ldr	r3, [pc, #176]	@ (8001e98 <main+0x278>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <main+0x1d0>
		  tempActions();
 8001dec:	f7ff fa78 	bl	80012e0 <tempActions>
	  }
	  if(send){
 8001df0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <main+0x27c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <main+0x1dc>
		  sendCan();
 8001df8:	f7ff fb9e 	bl	8001538 <sendCan>
	  }
	  if(heartbeatFlag >= 5 ){
 8001dfc:	4b28      	ldr	r3, [pc, #160]	@ (8001ea0 <main+0x280>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d901      	bls.n	8001e08 <main+0x1e8>
		  heartbeat();
 8001e04:	f7ff fc44 	bl	8001690 <heartbeat>
	  }
	  if(battDataFlag){
 8001e08:	4b26      	ldr	r3, [pc, #152]	@ (8001ea4 <main+0x284>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <main+0x1fc>
		  fillBatVoltBuffer();
 8001e10:	f7ff fe7e 	bl	8001b10 <fillBatVoltBuffer>
		  gettBatVoltAverage();
 8001e14:	f7ff feae 	bl	8001b74 <gettBatVoltAverage>
		  battControl();
 8001e18:	f7ff fdce 	bl	80019b8 <battControl>
	  }
	  if(canResetEcuFlag){
 8001e1c:	4b22      	ldr	r3, [pc, #136]	@ (8001ea8 <main+0x288>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <main+0x20a>
		  canResetEcu();
 8001e24:	f7ff fed8 	bl	8001bd8 <canResetEcu>
 8001e28:	e7da      	b.n	8001de0 <main+0x1c0>
	  }else{
		  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 8001e2a:	2380      	movs	r3, #128	@ 0x80
 8001e2c:	019b      	lsls	r3, r3, #6
 8001e2e:	481f      	ldr	r0, [pc, #124]	@ (8001eac <main+0x28c>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	0019      	movs	r1, r3
 8001e34:	f002 ffe2 	bl	8004dfc <HAL_GPIO_WritePin>
	  mapeoADC();
 8001e38:	e7d2      	b.n	8001de0 <main+0x1c0>
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	2000039c 	.word	0x2000039c
 8001e40:	20000060 	.word	0x20000060
 8001e44:	200000e4 	.word	0x200000e4
 8001e48:	20000170 	.word	0x20000170
 8001e4c:	2000001e 	.word	0x2000001e
 8001e50:	40000400 	.word	0x40000400
 8001e54:	20000026 	.word	0x20000026
 8001e58:	40014400 	.word	0x40014400
 8001e5c:	40014800 	.word	0x40014800
 8001e60:	20000200 	.word	0x20000200
 8001e64:	200001b8 	.word	0x200001b8
 8001e68:	20000248 	.word	0x20000248
 8001e6c:	20000290 	.word	0x20000290
 8001e70:	200002f4 	.word	0x200002f4
 8001e74:	000003b1 	.word	0x000003b1
 8001e78:	2000030c 	.word	0x2000030c
 8001e7c:	000003b2 	.word	0x000003b2
 8001e80:	20000324 	.word	0x20000324
 8001e84:	000003b3 	.word	0x000003b3
 8001e88:	2000033c 	.word	0x2000033c
 8001e8c:	20000354 	.word	0x20000354
 8001e90:	000002b1 	.word	0x000002b1
 8001e94:	2000036c 	.word	0x2000036c
 8001e98:	200003ec 	.word	0x200003ec
 8001e9c:	20000402 	.word	0x20000402
 8001ea0:	20000403 	.word	0x20000403
 8001ea4:	200003f0 	.word	0x200003f0
 8001ea8:	2000041a 	.word	0x2000041a
 8001eac:	48000800 	.word	0x48000800

08001eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb0:	b590      	push	{r4, r7, lr}
 8001eb2:	b093      	sub	sp, #76	@ 0x4c
 8001eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb6:	2414      	movs	r4, #20
 8001eb8:	193b      	adds	r3, r7, r4
 8001eba:	0018      	movs	r0, r3
 8001ebc:	2334      	movs	r3, #52	@ 0x34
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	f004 fca7 	bl	8006814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec6:	1d3b      	adds	r3, r7, #4
 8001ec8:	0018      	movs	r0, r3
 8001eca:	2310      	movs	r3, #16
 8001ecc:	001a      	movs	r2, r3
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f004 fca0 	bl	8006814 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001ed4:	0021      	movs	r1, r4
 8001ed6:	187b      	adds	r3, r7, r1
 8001ed8:	2211      	movs	r2, #17
 8001eda:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001edc:	187b      	adds	r3, r7, r1
 8001ede:	2201      	movs	r2, #1
 8001ee0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001ee2:	187b      	adds	r3, r7, r1
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2210      	movs	r2, #16
 8001eec:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2280      	movs	r2, #128	@ 0x80
 8001ef8:	0252      	lsls	r2, r2, #9
 8001efa:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2200      	movs	r2, #0
 8001f00:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2200      	movs	r2, #0
 8001f06:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f002 ff94 	bl	8004e38 <HAL_RCC_OscConfig>
 8001f10:	1e03      	subs	r3, r0, #0
 8001f12:	d001      	beq.n	8001f18 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001f14:	f000 fd18 	bl	8002948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2202      	movs	r2, #2
 8001f22:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2101      	movs	r1, #1
 8001f34:	0018      	movs	r0, r3
 8001f36:	f003 fb05 	bl	8005544 <HAL_RCC_ClockConfig>
 8001f3a:	1e03      	subs	r3, r0, #0
 8001f3c:	d001      	beq.n	8001f42 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f3e:	f000 fd03 	bl	8002948 <Error_Handler>
  }
}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b013      	add	sp, #76	@ 0x4c
 8001f48:	bd90      	pop	{r4, r7, pc}
	...

08001f4c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	0018      	movs	r0, r3
 8001f56:	230c      	movs	r3, #12
 8001f58:	001a      	movs	r2, r3
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	f004 fc5a 	bl	8006814 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001f60:	4b60      	ldr	r3, [pc, #384]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f62:	4a61      	ldr	r2, [pc, #388]	@ (80020e8 <MX_ADC_Init+0x19c>)
 8001f64:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f66:	4b5f      	ldr	r3, [pc, #380]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f6c:	4b5d      	ldr	r3, [pc, #372]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f72:	4b5c      	ldr	r3, [pc, #368]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f78:	4b5a      	ldr	r3, [pc, #360]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f7e:	4b59      	ldr	r3, [pc, #356]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f80:	2204      	movs	r2, #4
 8001f82:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001f84:	4b57      	ldr	r3, [pc, #348]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001f8a:	4b56      	ldr	r3, [pc, #344]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001f90:	4b54      	ldr	r3, [pc, #336]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f96:	4b53      	ldr	r3, [pc, #332]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f9c:	4b51      	ldr	r3, [pc, #324]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001f9e:	22c2      	movs	r2, #194	@ 0xc2
 8001fa0:	32ff      	adds	r2, #255	@ 0xff
 8001fa2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001faa:	4b4e      	ldr	r3, [pc, #312]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001fac:	2224      	movs	r2, #36	@ 0x24
 8001fae:	2101      	movs	r1, #1
 8001fb0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001fba:	0018      	movs	r0, r3
 8001fbc:	f001 f874 	bl	80030a8 <HAL_ADC_Init>
 8001fc0:	1e03      	subs	r3, r0, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001fc4:	f000 fcc0 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fc8:	1d3b      	adds	r3, r7, #4
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2280      	movs	r2, #128	@ 0x80
 8001fd2:	0152      	lsls	r2, r2, #5
 8001fd4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2207      	movs	r2, #7
 8001fda:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001fdc:	1d3a      	adds	r2, r7, #4
 8001fde:	4b41      	ldr	r3, [pc, #260]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001fe0:	0011      	movs	r1, r2
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f001 faa4 	bl	8003530 <HAL_ADC_ConfigChannel>
 8001fe8:	1e03      	subs	r3, r0, #0
 8001fea:	d001      	beq.n	8001ff0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001fec:	f000 fcac 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ff6:	1d3a      	adds	r2, r7, #4
 8001ff8:	4b3a      	ldr	r3, [pc, #232]	@ (80020e4 <MX_ADC_Init+0x198>)
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f001 fa97 	bl	8003530 <HAL_ADC_ConfigChannel>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d001      	beq.n	800200a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8002006:	f000 fc9f 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	2202      	movs	r2, #2
 800200e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002010:	1d3a      	adds	r2, r7, #4
 8002012:	4b34      	ldr	r3, [pc, #208]	@ (80020e4 <MX_ADC_Init+0x198>)
 8002014:	0011      	movs	r1, r2
 8002016:	0018      	movs	r0, r3
 8002018:	f001 fa8a 	bl	8003530 <HAL_ADC_ConfigChannel>
 800201c:	1e03      	subs	r3, r0, #0
 800201e:	d001      	beq.n	8002024 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002020:	f000 fc92 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2203      	movs	r2, #3
 8002028:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800202a:	1d3a      	adds	r2, r7, #4
 800202c:	4b2d      	ldr	r3, [pc, #180]	@ (80020e4 <MX_ADC_Init+0x198>)
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f001 fa7d 	bl	8003530 <HAL_ADC_ConfigChannel>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800203a:	f000 fc85 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2204      	movs	r2, #4
 8002042:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002044:	1d3a      	adds	r2, r7, #4
 8002046:	4b27      	ldr	r3, [pc, #156]	@ (80020e4 <MX_ADC_Init+0x198>)
 8002048:	0011      	movs	r1, r2
 800204a:	0018      	movs	r0, r3
 800204c:	f001 fa70 	bl	8003530 <HAL_ADC_ConfigChannel>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d001      	beq.n	8002058 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002054:	f000 fc78 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2205      	movs	r2, #5
 800205c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800205e:	1d3a      	adds	r2, r7, #4
 8002060:	4b20      	ldr	r3, [pc, #128]	@ (80020e4 <MX_ADC_Init+0x198>)
 8002062:	0011      	movs	r1, r2
 8002064:	0018      	movs	r0, r3
 8002066:	f001 fa63 	bl	8003530 <HAL_ADC_ConfigChannel>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800206e:	f000 fc6b 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	2206      	movs	r2, #6
 8002076:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002078:	1d3a      	adds	r2, r7, #4
 800207a:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <MX_ADC_Init+0x198>)
 800207c:	0011      	movs	r1, r2
 800207e:	0018      	movs	r0, r3
 8002080:	f001 fa56 	bl	8003530 <HAL_ADC_ConfigChannel>
 8002084:	1e03      	subs	r3, r0, #0
 8002086:	d001      	beq.n	800208c <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8002088:	f000 fc5e 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	2207      	movs	r2, #7
 8002090:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002092:	1d3a      	adds	r2, r7, #4
 8002094:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <MX_ADC_Init+0x198>)
 8002096:	0011      	movs	r1, r2
 8002098:	0018      	movs	r0, r3
 800209a:	f001 fa49 	bl	8003530 <HAL_ADC_ConfigChannel>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d001      	beq.n	80020a6 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 80020a2:	f000 fc51 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2208      	movs	r2, #8
 80020aa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020ac:	1d3a      	adds	r2, r7, #4
 80020ae:	4b0d      	ldr	r3, [pc, #52]	@ (80020e4 <MX_ADC_Init+0x198>)
 80020b0:	0011      	movs	r1, r2
 80020b2:	0018      	movs	r0, r3
 80020b4:	f001 fa3c 	bl	8003530 <HAL_ADC_ConfigChannel>
 80020b8:	1e03      	subs	r3, r0, #0
 80020ba:	d001      	beq.n	80020c0 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80020bc:	f000 fc44 	bl	8002948 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	2209      	movs	r2, #9
 80020c4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020c6:	1d3a      	adds	r2, r7, #4
 80020c8:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <MX_ADC_Init+0x198>)
 80020ca:	0011      	movs	r1, r2
 80020cc:	0018      	movs	r0, r3
 80020ce:	f001 fa2f 	bl	8003530 <HAL_ADC_ConfigChannel>
 80020d2:	1e03      	subs	r3, r0, #0
 80020d4:	d001      	beq.n	80020da <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80020d6:	f000 fc37 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b004      	add	sp, #16
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	46c0      	nop			@ (mov r8, r8)
 80020e4:	20000060 	.word	0x20000060
 80020e8:	40012400 	.word	0x40012400

080020ec <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80020f2:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <MX_CAN_Init+0xa8>)
 80020f4:	4a28      	ldr	r2, [pc, #160]	@ (8002198 <MX_CAN_Init+0xac>)
 80020f6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80020f8:	4b26      	ldr	r3, [pc, #152]	@ (8002194 <MX_CAN_Init+0xa8>)
 80020fa:	2203      	movs	r2, #3
 80020fc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80020fe:	4b25      	ldr	r3, [pc, #148]	@ (8002194 <MX_CAN_Init+0xa8>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002104:	4b23      	ldr	r3, [pc, #140]	@ (8002194 <MX_CAN_Init+0xa8>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800210a:	4b22      	ldr	r3, [pc, #136]	@ (8002194 <MX_CAN_Init+0xa8>)
 800210c:	22c0      	movs	r2, #192	@ 0xc0
 800210e:	0312      	lsls	r2, r2, #12
 8002110:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <MX_CAN_Init+0xa8>)
 8002114:	2280      	movs	r2, #128	@ 0x80
 8002116:	0352      	lsls	r2, r2, #13
 8002118:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800211a:	4b1e      	ldr	r3, [pc, #120]	@ (8002194 <MX_CAN_Init+0xa8>)
 800211c:	2200      	movs	r2, #0
 800211e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002120:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <MX_CAN_Init+0xa8>)
 8002122:	2200      	movs	r2, #0
 8002124:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8002126:	4b1b      	ldr	r3, [pc, #108]	@ (8002194 <MX_CAN_Init+0xa8>)
 8002128:	2200      	movs	r2, #0
 800212a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800212c:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <MX_CAN_Init+0xa8>)
 800212e:	2201      	movs	r2, #1
 8002130:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002132:	4b18      	ldr	r3, [pc, #96]	@ (8002194 <MX_CAN_Init+0xa8>)
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8002138:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <MX_CAN_Init+0xa8>)
 800213a:	2200      	movs	r2, #0
 800213c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800213e:	4b15      	ldr	r3, [pc, #84]	@ (8002194 <MX_CAN_Init+0xa8>)
 8002140:	0018      	movs	r0, r3
 8002142:	f001 fc0b 	bl	800395c <HAL_CAN_Init>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d001      	beq.n	800214e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800214a:	f000 fbfd 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
	CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800214e:	003b      	movs	r3, r7
 8002150:	2201      	movs	r2, #1
 8002152:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 10;
 8002154:	003b      	movs	r3, r7
 8002156:	220a      	movs	r2, #10
 8002158:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800215a:	003b      	movs	r3, r7
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8002160:	003b      	movs	r3, r7
 8002162:	2201      	movs	r2, #1
 8002164:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8002166:	003b      	movs	r3, r7
 8002168:	2200      	movs	r2, #0
 800216a:	61da      	str	r2, [r3, #28]
	canfilterconfig.FilterIdHigh = 0x1B1 << 5;
 800216c:	003b      	movs	r3, r7
 800216e:	4a0b      	ldr	r2, [pc, #44]	@ (800219c <MX_CAN_Init+0xb0>)
 8002170:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x3A1 << 5;
 8002172:	003b      	movs	r3, r7
 8002174:	4a0a      	ldr	r2, [pc, #40]	@ (80021a0 <MX_CAN_Init+0xb4>)
 8002176:	605a      	str	r2, [r3, #4]
	//canfilterconfig.FilterMaskIdHigh = 0x3A1<<5;
	//canfilterconfig.FilterMaskIdLow = 0x0000;
	canfilterconfig.SlaveStartFilterBank = 0;
 8002178:	003b      	movs	r3, r7
 800217a:	2200      	movs	r2, #0
 800217c:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800217e:	003a      	movs	r2, r7
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <MX_CAN_Init+0xa8>)
 8002182:	0011      	movs	r1, r2
 8002184:	0018      	movs	r0, r3
 8002186:	f001 fce7 	bl	8003b58 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	46bd      	mov	sp, r7
 800218e:	b00a      	add	sp, #40	@ 0x28
 8002190:	bd80      	pop	{r7, pc}
 8002192:	46c0      	nop			@ (mov r8, r8)
 8002194:	200000e4 	.word	0x200000e4
 8002198:	40006400 	.word	0x40006400
 800219c:	00003620 	.word	0x00003620
 80021a0:	00007420 	.word	0x00007420

080021a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021aa:	4a1c      	ldr	r2, [pc, #112]	@ (800221c <MX_SPI2_Init+0x78>)
 80021ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021b0:	2282      	movs	r2, #130	@ 0x82
 80021b2:	0052      	lsls	r2, r2, #1
 80021b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021b6:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80021bc:	4b16      	ldr	r3, [pc, #88]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021be:	22f0      	movs	r2, #240	@ 0xf0
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ca:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021d2:	2280      	movs	r2, #128	@ 0x80
 80021d4:	0092      	lsls	r2, r2, #2
 80021d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021da:	2208      	movs	r2, #8
 80021dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021f2:	2207      	movs	r2, #7
 80021f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80021fc:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <MX_SPI2_Init+0x74>)
 80021fe:	2208      	movs	r2, #8
 8002200:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002202:	4b05      	ldr	r3, [pc, #20]	@ (8002218 <MX_SPI2_Init+0x74>)
 8002204:	0018      	movs	r0, r3
 8002206:	f003 faeb 	bl	80057e0 <HAL_SPI_Init>
 800220a:	1e03      	subs	r3, r0, #0
 800220c:	d001      	beq.n	8002212 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800220e:	f000 fb9b 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	2000010c 	.word	0x2000010c
 800221c:	40003800 	.word	0x40003800

08002220 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b092      	sub	sp, #72	@ 0x48
 8002224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002226:	2340      	movs	r3, #64	@ 0x40
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	0018      	movs	r0, r3
 800222c:	2308      	movs	r3, #8
 800222e:	001a      	movs	r2, r3
 8002230:	2100      	movs	r1, #0
 8002232:	f004 faef 	bl	8006814 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002236:	2324      	movs	r3, #36	@ 0x24
 8002238:	18fb      	adds	r3, r7, r3
 800223a:	0018      	movs	r0, r3
 800223c:	231c      	movs	r3, #28
 800223e:	001a      	movs	r2, r3
 8002240:	2100      	movs	r1, #0
 8002242:	f004 fae7 	bl	8006814 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	0018      	movs	r0, r3
 800224a:	2320      	movs	r3, #32
 800224c:	001a      	movs	r2, r3
 800224e:	2100      	movs	r1, #0
 8002250:	f004 fae0 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002254:	4b38      	ldr	r3, [pc, #224]	@ (8002338 <MX_TIM1_Init+0x118>)
 8002256:	4a39      	ldr	r2, [pc, #228]	@ (800233c <MX_TIM1_Init+0x11c>)
 8002258:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800225a:	4b37      	ldr	r3, [pc, #220]	@ (8002338 <MX_TIM1_Init+0x118>)
 800225c:	4a38      	ldr	r2, [pc, #224]	@ (8002340 <MX_TIM1_Init+0x120>)
 800225e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002260:	4b35      	ldr	r3, [pc, #212]	@ (8002338 <MX_TIM1_Init+0x118>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000;
 8002266:	4b34      	ldr	r3, [pc, #208]	@ (8002338 <MX_TIM1_Init+0x118>)
 8002268:	4a36      	ldr	r2, [pc, #216]	@ (8002344 <MX_TIM1_Init+0x124>)
 800226a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800226c:	4b32      	ldr	r3, [pc, #200]	@ (8002338 <MX_TIM1_Init+0x118>)
 800226e:	2200      	movs	r2, #0
 8002270:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002272:	4b31      	ldr	r3, [pc, #196]	@ (8002338 <MX_TIM1_Init+0x118>)
 8002274:	2200      	movs	r2, #0
 8002276:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002278:	4b2f      	ldr	r3, [pc, #188]	@ (8002338 <MX_TIM1_Init+0x118>)
 800227a:	2200      	movs	r2, #0
 800227c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800227e:	4b2e      	ldr	r3, [pc, #184]	@ (8002338 <MX_TIM1_Init+0x118>)
 8002280:	0018      	movs	r0, r3
 8002282:	f003 fc01 	bl	8005a88 <HAL_TIM_OC_Init>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d001      	beq.n	800228e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800228a:	f000 fb5d 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800228e:	2140      	movs	r1, #64	@ 0x40
 8002290:	187b      	adds	r3, r7, r1
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002296:	187b      	adds	r3, r7, r1
 8002298:	2200      	movs	r2, #0
 800229a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800229c:	187a      	adds	r2, r7, r1
 800229e:	4b26      	ldr	r3, [pc, #152]	@ (8002338 <MX_TIM1_Init+0x118>)
 80022a0:	0011      	movs	r1, r2
 80022a2:	0018      	movs	r0, r3
 80022a4:	f004 f9f0 	bl	8006688 <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022ac:	f000 fb4c 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80022b0:	2124      	movs	r1, #36	@ 0x24
 80022b2:	187b      	adds	r3, r7, r1
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	2200      	movs	r2, #0
 80022bc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022d0:	187b      	adds	r3, r7, r1
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022dc:	1879      	adds	r1, r7, r1
 80022de:	4b16      	ldr	r3, [pc, #88]	@ (8002338 <MX_TIM1_Init+0x118>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	0018      	movs	r0, r3
 80022e4:	f003 fe0a 	bl	8005efc <HAL_TIM_OC_ConfigChannel>
 80022e8:	1e03      	subs	r3, r0, #0
 80022ea:	d001      	beq.n	80022f0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80022ec:	f000 fb2c 	bl	8002948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022f0:	1d3b      	adds	r3, r7, #4
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2200      	movs	r2, #0
 80022fa:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	2280      	movs	r2, #128	@ 0x80
 8002312:	0192      	lsls	r2, r2, #6
 8002314:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2200      	movs	r2, #0
 800231a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800231c:	1d3a      	adds	r2, r7, #4
 800231e:	4b06      	ldr	r3, [pc, #24]	@ (8002338 <MX_TIM1_Init+0x118>)
 8002320:	0011      	movs	r1, r2
 8002322:	0018      	movs	r0, r3
 8002324:	f004 fa08 	bl	8006738 <HAL_TIMEx_ConfigBreakDeadTime>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800232c:	f000 fb0c 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002330:	46c0      	nop			@ (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b012      	add	sp, #72	@ 0x48
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000170 	.word	0x20000170
 800233c:	40012c00 	.word	0x40012c00
 8002340:	000003e7 	.word	0x000003e7
 8002344:	0000bb80 	.word	0x0000bb80

08002348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	@ 0x28
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234e:	2320      	movs	r3, #32
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	0018      	movs	r0, r3
 8002354:	2308      	movs	r3, #8
 8002356:	001a      	movs	r2, r3
 8002358:	2100      	movs	r1, #0
 800235a:	f004 fa5b 	bl	8006814 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	0018      	movs	r0, r3
 8002362:	231c      	movs	r3, #28
 8002364:	001a      	movs	r2, r3
 8002366:	2100      	movs	r1, #0
 8002368:	f004 fa54 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800236c:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <MX_TIM2_Init+0xcc>)
 800236e:	2280      	movs	r2, #128	@ 0x80
 8002370:	05d2      	lsls	r2, r2, #23
 8002372:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9504;
 8002374:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <MX_TIM2_Init+0xcc>)
 8002376:	4a28      	ldr	r2, [pc, #160]	@ (8002418 <MX_TIM2_Init+0xd0>)
 8002378:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <MX_TIM2_Init+0xcc>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002380:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <MX_TIM2_Init+0xcc>)
 8002382:	2264      	movs	r2, #100	@ 0x64
 8002384:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002386:	4b23      	ldr	r3, [pc, #140]	@ (8002414 <MX_TIM2_Init+0xcc>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800238c:	4b21      	ldr	r3, [pc, #132]	@ (8002414 <MX_TIM2_Init+0xcc>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002392:	4b20      	ldr	r3, [pc, #128]	@ (8002414 <MX_TIM2_Init+0xcc>)
 8002394:	0018      	movs	r0, r3
 8002396:	f003 fbc7 	bl	8005b28 <HAL_TIM_PWM_Init>
 800239a:	1e03      	subs	r3, r0, #0
 800239c:	d001      	beq.n	80023a2 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800239e:	f000 fad3 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a2:	2120      	movs	r1, #32
 80023a4:	187b      	adds	r3, r7, r1
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023aa:	187b      	adds	r3, r7, r1
 80023ac:	2200      	movs	r2, #0
 80023ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023b0:	187a      	adds	r2, r7, r1
 80023b2:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <MX_TIM2_Init+0xcc>)
 80023b4:	0011      	movs	r1, r2
 80023b6:	0018      	movs	r0, r3
 80023b8:	f004 f966 	bl	8006688 <HAL_TIMEx_MasterConfigSynchronization>
 80023bc:	1e03      	subs	r3, r0, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80023c0:	f000 fac2 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2260      	movs	r2, #96	@ 0x60
 80023c8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d0:	1d3b      	adds	r3, r7, #4
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2200      	movs	r2, #0
 80023da:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023dc:	1d39      	adds	r1, r7, #4
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <MX_TIM2_Init+0xcc>)
 80023e0:	2208      	movs	r2, #8
 80023e2:	0018      	movs	r0, r3
 80023e4:	f003 fde2 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 80023e8:	1e03      	subs	r3, r0, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80023ec:	f000 faac 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023f0:	1d39      	adds	r1, r7, #4
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <MX_TIM2_Init+0xcc>)
 80023f4:	220c      	movs	r2, #12
 80023f6:	0018      	movs	r0, r3
 80023f8:	f003 fdd8 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 80023fc:	1e03      	subs	r3, r0, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002400:	f000 faa2 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <MX_TIM2_Init+0xcc>)
 8002406:	0018      	movs	r0, r3
 8002408:	f000 fc92 	bl	8002d30 <HAL_TIM_MspPostInit>

}
 800240c:	46c0      	nop			@ (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b00a      	add	sp, #40	@ 0x28
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200001b8 	.word	0x200001b8
 8002418:	00002520 	.word	0x00002520

0800241c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002422:	2320      	movs	r3, #32
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	0018      	movs	r0, r3
 8002428:	2308      	movs	r3, #8
 800242a:	001a      	movs	r2, r3
 800242c:	2100      	movs	r1, #0
 800242e:	f004 f9f1 	bl	8006814 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	0018      	movs	r0, r3
 8002436:	231c      	movs	r3, #28
 8002438:	001a      	movs	r2, r3
 800243a:	2100      	movs	r1, #0
 800243c:	f004 f9ea 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002440:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 8002442:	4a2a      	ldr	r2, [pc, #168]	@ (80024ec <MX_TIM3_Init+0xd0>)
 8002444:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9504;
 8002446:	4b28      	ldr	r3, [pc, #160]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 8002448:	4a29      	ldr	r2, [pc, #164]	@ (80024f0 <MX_TIM3_Init+0xd4>)
 800244a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244c:	4b26      	ldr	r3, [pc, #152]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002452:	4b25      	ldr	r3, [pc, #148]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 8002454:	2264      	movs	r2, #100	@ 0x64
 8002456:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002458:	4b23      	ldr	r3, [pc, #140]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245e:	4b22      	ldr	r3, [pc, #136]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002464:	4b20      	ldr	r3, [pc, #128]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 8002466:	0018      	movs	r0, r3
 8002468:	f003 fb5e 	bl	8005b28 <HAL_TIM_PWM_Init>
 800246c:	1e03      	subs	r3, r0, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002470:	f000 fa6a 	bl	8002948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002474:	2120      	movs	r1, #32
 8002476:	187b      	adds	r3, r7, r1
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247c:	187b      	adds	r3, r7, r1
 800247e:	2200      	movs	r2, #0
 8002480:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002482:	187a      	adds	r2, r7, r1
 8002484:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 8002486:	0011      	movs	r1, r2
 8002488:	0018      	movs	r0, r3
 800248a:	f004 f8fd 	bl	8006688 <HAL_TIMEx_MasterConfigSynchronization>
 800248e:	1e03      	subs	r3, r0, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002492:	f000 fa59 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	2260      	movs	r2, #96	@ 0x60
 800249a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2200      	movs	r2, #0
 80024a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024ae:	1d39      	adds	r1, r7, #4
 80024b0:	4b0d      	ldr	r3, [pc, #52]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	0018      	movs	r0, r3
 80024b6:	f003 fd79 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 80024ba:	1e03      	subs	r3, r0, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80024be:	f000 fa43 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024c2:	1d39      	adds	r1, r7, #4
 80024c4:	4b08      	ldr	r3, [pc, #32]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 80024c6:	2204      	movs	r2, #4
 80024c8:	0018      	movs	r0, r3
 80024ca:	f003 fd6f 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d001      	beq.n	80024d6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80024d2:	f000 fa39 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024d6:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <MX_TIM3_Init+0xcc>)
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 fc29 	bl	8002d30 <HAL_TIM_MspPostInit>

}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b00a      	add	sp, #40	@ 0x28
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	20000200 	.word	0x20000200
 80024ec:	40000400 	.word	0x40000400
 80024f0:	00002520 	.word	0x00002520

080024f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b090      	sub	sp, #64	@ 0x40
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fa:	2324      	movs	r3, #36	@ 0x24
 80024fc:	18fb      	adds	r3, r7, r3
 80024fe:	0018      	movs	r0, r3
 8002500:	231c      	movs	r3, #28
 8002502:	001a      	movs	r2, r3
 8002504:	2100      	movs	r1, #0
 8002506:	f004 f985 	bl	8006814 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800250a:	1d3b      	adds	r3, r7, #4
 800250c:	0018      	movs	r0, r3
 800250e:	2320      	movs	r3, #32
 8002510:	001a      	movs	r2, r3
 8002512:	2100      	movs	r1, #0
 8002514:	f004 f97e 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002518:	4b36      	ldr	r3, [pc, #216]	@ (80025f4 <MX_TIM16_Init+0x100>)
 800251a:	4a37      	ldr	r2, [pc, #220]	@ (80025f8 <MX_TIM16_Init+0x104>)
 800251c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3170;
 800251e:	4b35      	ldr	r3, [pc, #212]	@ (80025f4 <MX_TIM16_Init+0x100>)
 8002520:	4a36      	ldr	r2, [pc, #216]	@ (80025fc <MX_TIM16_Init+0x108>)
 8002522:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002524:	4b33      	ldr	r3, [pc, #204]	@ (80025f4 <MX_TIM16_Init+0x100>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800252a:	4b32      	ldr	r3, [pc, #200]	@ (80025f4 <MX_TIM16_Init+0x100>)
 800252c:	2264      	movs	r2, #100	@ 0x64
 800252e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002530:	4b30      	ldr	r3, [pc, #192]	@ (80025f4 <MX_TIM16_Init+0x100>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002536:	4b2f      	ldr	r3, [pc, #188]	@ (80025f4 <MX_TIM16_Init+0x100>)
 8002538:	2200      	movs	r2, #0
 800253a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253c:	4b2d      	ldr	r3, [pc, #180]	@ (80025f4 <MX_TIM16_Init+0x100>)
 800253e:	2200      	movs	r2, #0
 8002540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002542:	4b2c      	ldr	r3, [pc, #176]	@ (80025f4 <MX_TIM16_Init+0x100>)
 8002544:	0018      	movs	r0, r3
 8002546:	f003 fa03 	bl	8005950 <HAL_TIM_Base_Init>
 800254a:	1e03      	subs	r3, r0, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800254e:	f000 f9fb 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002552:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <MX_TIM16_Init+0x100>)
 8002554:	0018      	movs	r0, r3
 8002556:	f003 fae7 	bl	8005b28 <HAL_TIM_PWM_Init>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d001      	beq.n	8002562 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800255e:	f000 f9f3 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002562:	2124      	movs	r1, #36	@ 0x24
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2260      	movs	r2, #96	@ 0x60
 8002568:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2200      	movs	r2, #0
 800256e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002570:	187b      	adds	r3, r7, r1
 8002572:	2200      	movs	r2, #0
 8002574:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002576:	187b      	adds	r3, r7, r1
 8002578:	2200      	movs	r2, #0
 800257a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800257c:	187b      	adds	r3, r7, r1
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002582:	187b      	adds	r3, r7, r1
 8002584:	2200      	movs	r2, #0
 8002586:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002588:	187b      	adds	r3, r7, r1
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800258e:	1879      	adds	r1, r7, r1
 8002590:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <MX_TIM16_Init+0x100>)
 8002592:	2200      	movs	r2, #0
 8002594:	0018      	movs	r0, r3
 8002596:	f003 fd09 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 800259a:	1e03      	subs	r3, r0, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800259e:	f000 f9d3 	bl	8002948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025a2:	1d3b      	adds	r3, r7, #4
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	2200      	movs	r2, #0
 80025ac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2280      	movs	r2, #128	@ 0x80
 80025c4:	0192      	lsls	r2, r2, #6
 80025c6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	2200      	movs	r2, #0
 80025cc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80025ce:	1d3a      	adds	r2, r7, #4
 80025d0:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <MX_TIM16_Init+0x100>)
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f004 f8af 	bl	8006738 <HAL_TIMEx_ConfigBreakDeadTime>
 80025da:	1e03      	subs	r3, r0, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80025de:	f000 f9b3 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80025e2:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <MX_TIM16_Init+0x100>)
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 fba3 	bl	8002d30 <HAL_TIM_MspPostInit>

}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b010      	add	sp, #64	@ 0x40
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	46c0      	nop			@ (mov r8, r8)
 80025f4:	20000248 	.word	0x20000248
 80025f8:	40014400 	.word	0x40014400
 80025fc:	00000c62 	.word	0x00000c62

08002600 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b090      	sub	sp, #64	@ 0x40
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002606:	2324      	movs	r3, #36	@ 0x24
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	0018      	movs	r0, r3
 800260c:	231c      	movs	r3, #28
 800260e:	001a      	movs	r2, r3
 8002610:	2100      	movs	r1, #0
 8002612:	f004 f8ff 	bl	8006814 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002616:	1d3b      	adds	r3, r7, #4
 8002618:	0018      	movs	r0, r3
 800261a:	2320      	movs	r3, #32
 800261c:	001a      	movs	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	f004 f8f8 	bl	8006814 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002624:	4b36      	ldr	r3, [pc, #216]	@ (8002700 <MX_TIM17_Init+0x100>)
 8002626:	4a37      	ldr	r2, [pc, #220]	@ (8002704 <MX_TIM17_Init+0x104>)
 8002628:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3170;
 800262a:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <MX_TIM17_Init+0x100>)
 800262c:	4a36      	ldr	r2, [pc, #216]	@ (8002708 <MX_TIM17_Init+0x108>)
 800262e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002630:	4b33      	ldr	r3, [pc, #204]	@ (8002700 <MX_TIM17_Init+0x100>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8002636:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <MX_TIM17_Init+0x100>)
 8002638:	2264      	movs	r2, #100	@ 0x64
 800263a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263c:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <MX_TIM17_Init+0x100>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002642:	4b2f      	ldr	r3, [pc, #188]	@ (8002700 <MX_TIM17_Init+0x100>)
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002648:	4b2d      	ldr	r3, [pc, #180]	@ (8002700 <MX_TIM17_Init+0x100>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800264e:	4b2c      	ldr	r3, [pc, #176]	@ (8002700 <MX_TIM17_Init+0x100>)
 8002650:	0018      	movs	r0, r3
 8002652:	f003 f97d 	bl	8005950 <HAL_TIM_Base_Init>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d001      	beq.n	800265e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800265a:	f000 f975 	bl	8002948 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800265e:	4b28      	ldr	r3, [pc, #160]	@ (8002700 <MX_TIM17_Init+0x100>)
 8002660:	0018      	movs	r0, r3
 8002662:	f003 fa61 	bl	8005b28 <HAL_TIM_PWM_Init>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d001      	beq.n	800266e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800266a:	f000 f96d 	bl	8002948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800266e:	2124      	movs	r1, #36	@ 0x24
 8002670:	187b      	adds	r3, r7, r1
 8002672:	2260      	movs	r2, #96	@ 0x60
 8002674:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002676:	187b      	adds	r3, r7, r1
 8002678:	2200      	movs	r2, #0
 800267a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800267c:	187b      	adds	r3, r7, r1
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002682:	187b      	adds	r3, r7, r1
 8002684:	2200      	movs	r2, #0
 8002686:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002688:	187b      	adds	r3, r7, r1
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800268e:	187b      	adds	r3, r7, r1
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800269a:	1879      	adds	r1, r7, r1
 800269c:	4b18      	ldr	r3, [pc, #96]	@ (8002700 <MX_TIM17_Init+0x100>)
 800269e:	2200      	movs	r2, #0
 80026a0:	0018      	movs	r0, r3
 80026a2:	f003 fc83 	bl	8005fac <HAL_TIM_PWM_ConfigChannel>
 80026a6:	1e03      	subs	r3, r0, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80026aa:	f000 f94d 	bl	8002948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026ae:	1d3b      	adds	r3, r7, #4
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026ba:	1d3b      	adds	r3, r7, #4
 80026bc:	2200      	movs	r2, #0
 80026be:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026c0:	1d3b      	adds	r3, r7, #4
 80026c2:	2200      	movs	r2, #0
 80026c4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026cc:	1d3b      	adds	r3, r7, #4
 80026ce:	2280      	movs	r2, #128	@ 0x80
 80026d0:	0192      	lsls	r2, r2, #6
 80026d2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80026da:	1d3a      	adds	r2, r7, #4
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <MX_TIM17_Init+0x100>)
 80026de:	0011      	movs	r1, r2
 80026e0:	0018      	movs	r0, r3
 80026e2:	f004 f829 	bl	8006738 <HAL_TIMEx_ConfigBreakDeadTime>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 80026ea:	f000 f92d 	bl	8002948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80026ee:	4b04      	ldr	r3, [pc, #16]	@ (8002700 <MX_TIM17_Init+0x100>)
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fb1d 	bl	8002d30 <HAL_TIM_MspPostInit>

}
 80026f6:	46c0      	nop			@ (mov r8, r8)
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b010      	add	sp, #64	@ 0x40
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	20000290 	.word	0x20000290
 8002704:	40014800 	.word	0x40014800
 8002708:	00000c62 	.word	0x00000c62

0800270c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002712:	4b0c      	ldr	r3, [pc, #48]	@ (8002744 <MX_DMA_Init+0x38>)
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <MX_DMA_Init+0x38>)
 8002718:	2101      	movs	r1, #1
 800271a:	430a      	orrs	r2, r1
 800271c:	615a      	str	r2, [r3, #20]
 800271e:	4b09      	ldr	r3, [pc, #36]	@ (8002744 <MX_DMA_Init+0x38>)
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	2201      	movs	r2, #1
 8002724:	4013      	ands	r3, r2
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800272a:	2200      	movs	r2, #0
 800272c:	2100      	movs	r1, #0
 800272e:	2009      	movs	r0, #9
 8002730:	f002 f832 	bl	8004798 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002734:	2009      	movs	r0, #9
 8002736:	f002 f844 	bl	80047c2 <HAL_NVIC_EnableIRQ>

}
 800273a:	46c0      	nop			@ (mov r8, r8)
 800273c:	46bd      	mov	sp, r7
 800273e:	b002      	add	sp, #8
 8002740:	bd80      	pop	{r7, pc}
 8002742:	46c0      	nop			@ (mov r8, r8)
 8002744:	40021000 	.word	0x40021000

08002748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002748:	b590      	push	{r4, r7, lr}
 800274a:	b08b      	sub	sp, #44	@ 0x2c
 800274c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274e:	2414      	movs	r4, #20
 8002750:	193b      	adds	r3, r7, r4
 8002752:	0018      	movs	r0, r3
 8002754:	2314      	movs	r3, #20
 8002756:	001a      	movs	r2, r3
 8002758:	2100      	movs	r1, #0
 800275a:	f004 f85b 	bl	8006814 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800275e:	4b45      	ldr	r3, [pc, #276]	@ (8002874 <MX_GPIO_Init+0x12c>)
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	4b44      	ldr	r3, [pc, #272]	@ (8002874 <MX_GPIO_Init+0x12c>)
 8002764:	2180      	movs	r1, #128	@ 0x80
 8002766:	0309      	lsls	r1, r1, #12
 8002768:	430a      	orrs	r2, r1
 800276a:	615a      	str	r2, [r3, #20]
 800276c:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <MX_GPIO_Init+0x12c>)
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	031b      	lsls	r3, r3, #12
 8002774:	4013      	ands	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800277a:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <MX_GPIO_Init+0x12c>)
 800277c:	695a      	ldr	r2, [r3, #20]
 800277e:	4b3d      	ldr	r3, [pc, #244]	@ (8002874 <MX_GPIO_Init+0x12c>)
 8002780:	2180      	movs	r1, #128	@ 0x80
 8002782:	03c9      	lsls	r1, r1, #15
 8002784:	430a      	orrs	r2, r1
 8002786:	615a      	str	r2, [r3, #20]
 8002788:	4b3a      	ldr	r3, [pc, #232]	@ (8002874 <MX_GPIO_Init+0x12c>)
 800278a:	695a      	ldr	r2, [r3, #20]
 800278c:	2380      	movs	r3, #128	@ 0x80
 800278e:	03db      	lsls	r3, r3, #15
 8002790:	4013      	ands	r3, r2
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <MX_GPIO_Init+0x12c>)
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	4b36      	ldr	r3, [pc, #216]	@ (8002874 <MX_GPIO_Init+0x12c>)
 800279c:	2180      	movs	r1, #128	@ 0x80
 800279e:	0289      	lsls	r1, r1, #10
 80027a0:	430a      	orrs	r2, r1
 80027a2:	615a      	str	r2, [r3, #20]
 80027a4:	4b33      	ldr	r3, [pc, #204]	@ (8002874 <MX_GPIO_Init+0x12c>)
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	029b      	lsls	r3, r3, #10
 80027ac:	4013      	ands	r3, r2
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	4b30      	ldr	r3, [pc, #192]	@ (8002874 <MX_GPIO_Init+0x12c>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002874 <MX_GPIO_Init+0x12c>)
 80027b8:	2180      	movs	r1, #128	@ 0x80
 80027ba:	02c9      	lsls	r1, r1, #11
 80027bc:	430a      	orrs	r2, r1
 80027be:	615a      	str	r2, [r3, #20]
 80027c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <MX_GPIO_Init+0x12c>)
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	2380      	movs	r3, #128	@ 0x80
 80027c6:	02db      	lsls	r3, r3, #11
 80027c8:	4013      	ands	r3, r2
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, GPIO_PIN_RESET);
 80027ce:	2380      	movs	r3, #128	@ 0x80
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	4829      	ldr	r0, [pc, #164]	@ (8002878 <MX_GPIO_Init+0x130>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	0019      	movs	r1, r3
 80027d8:	f002 fb10 	bl	8004dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V12_NP_Signal_Pin|F1R_Signal_Pin|F2L_Signal_Pin|F1L_Signal_Pin, GPIO_PIN_RESET);
 80027dc:	4b27      	ldr	r3, [pc, #156]	@ (800287c <MX_GPIO_Init+0x134>)
 80027de:	2200      	movs	r2, #0
 80027e0:	21cc      	movs	r1, #204	@ 0xcc
 80027e2:	0018      	movs	r0, r3
 80027e4:	f002 fb0a 	bl	8004dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin, GPIO_PIN_RESET);
 80027e8:	2387      	movs	r3, #135	@ 0x87
 80027ea:	0219      	lsls	r1, r3, #8
 80027ec:	2390      	movs	r3, #144	@ 0x90
 80027ee:	05db      	lsls	r3, r3, #23
 80027f0:	2200      	movs	r2, #0
 80027f2:	0018      	movs	r0, r3
 80027f4:	f002 fb02 	bl	8004dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ecu_Signal_Pin */
  GPIO_InitStruct.Pin = Ecu_Signal_Pin;
 80027f8:	193b      	adds	r3, r7, r4
 80027fa:	2280      	movs	r2, #128	@ 0x80
 80027fc:	0192      	lsls	r2, r2, #6
 80027fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002800:	193b      	adds	r3, r7, r4
 8002802:	2201      	movs	r2, #1
 8002804:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	193b      	adds	r3, r7, r4
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280c:	193b      	adds	r3, r7, r4
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ecu_Signal_GPIO_Port, &GPIO_InitStruct);
 8002812:	193b      	adds	r3, r7, r4
 8002814:	4a18      	ldr	r2, [pc, #96]	@ (8002878 <MX_GPIO_Init+0x130>)
 8002816:	0019      	movs	r1, r3
 8002818:	0010      	movs	r0, r2
 800281a:	f002 f987 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : V12_NP_Signal_Pin F1R_Signal_Pin F2L_Signal_Pin F1L_Signal_Pin */
  GPIO_InitStruct.Pin = V12_NP_Signal_Pin|F1R_Signal_Pin|F2L_Signal_Pin|F1L_Signal_Pin;
 800281e:	193b      	adds	r3, r7, r4
 8002820:	22cc      	movs	r2, #204	@ 0xcc
 8002822:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	193b      	adds	r3, r7, r4
 8002826:	2201      	movs	r2, #1
 8002828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	193b      	adds	r3, r7, r4
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	193b      	adds	r3, r7, r4
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002836:	193b      	adds	r3, r7, r4
 8002838:	4a10      	ldr	r2, [pc, #64]	@ (800287c <MX_GPIO_Init+0x134>)
 800283a:	0019      	movs	r1, r3
 800283c:	0010      	movs	r0, r2
 800283e:	f002 f975 	bl	8004b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : WPR_Signal_Pin WPL_Signal_Pin Reset_Pin F2R_Signal_Pin */
  GPIO_InitStruct.Pin = WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin;
 8002842:	0021      	movs	r1, r4
 8002844:	187b      	adds	r3, r7, r1
 8002846:	2287      	movs	r2, #135	@ 0x87
 8002848:	0212      	lsls	r2, r2, #8
 800284a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800284c:	187b      	adds	r3, r7, r1
 800284e:	2201      	movs	r2, #1
 8002850:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	187b      	adds	r3, r7, r1
 8002854:	2200      	movs	r2, #0
 8002856:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	187b      	adds	r3, r7, r1
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285e:	187a      	adds	r2, r7, r1
 8002860:	2390      	movs	r3, #144	@ 0x90
 8002862:	05db      	lsls	r3, r3, #23
 8002864:	0011      	movs	r1, r2
 8002866:	0018      	movs	r0, r3
 8002868:	f002 f960 	bl	8004b2c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800286c:	46c0      	nop			@ (mov r8, r8)
 800286e:	46bd      	mov	sp, r7
 8002870:	b00b      	add	sp, #44	@ 0x2c
 8002872:	bd90      	pop	{r4, r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	48000800 	.word	0x48000800
 800287c:	48000400 	.word	0x48000400

08002880 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a0c      	ldr	r2, [pc, #48]	@ (80028c0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d112      	bne.n	80028b8 <HAL_TIM_PeriodElapsedCallback+0x38>
		send = 1;
 8002892:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
		heartbeatFlag = heartbeatFlag+1;
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80028a2:	701a      	strb	r2, [r3, #0]
		if(canResetEcuFlag == 1){
 80028a4:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_TIM_PeriodElapsedCallback+0x38>
			resetCounter = resetCounter+1;
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80028b6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80028b8:	46c0      	nop			@ (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	20000402 	.word	0x20000402
 80028c8:	20000403 	.word	0x20000403
 80028cc:	2000041a 	.word	0x2000041a
 80028d0:	2000041b 	.word	0x2000041b

080028d4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	value_adc[0] = (uint16_t) adc_buff[0];	//Los valores pasan de 32 a 16 bits
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b29a      	uxth	r2, r3
 80028e2:	4b18      	ldr	r3, [pc, #96]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 80028e4:	801a      	strh	r2, [r3, #0]
	value_adc[1] = (uint16_t) adc_buff[1];
 80028e6:	4b16      	ldr	r3, [pc, #88]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	b29a      	uxth	r2, r3
 80028ec:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 80028ee:	805a      	strh	r2, [r3, #2]
	value_adc[2] = (uint16_t) adc_buff[2];
 80028f0:	4b13      	ldr	r3, [pc, #76]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	4b13      	ldr	r3, [pc, #76]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 80028f8:	809a      	strh	r2, [r3, #4]
	value_adc[3] = (uint16_t) adc_buff[3];
 80028fa:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	b29a      	uxth	r2, r3
 8002900:	4b10      	ldr	r3, [pc, #64]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 8002902:	80da      	strh	r2, [r3, #6]
	value_adc[4] = (uint16_t) adc_buff[4];
 8002904:	4b0e      	ldr	r3, [pc, #56]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	b29a      	uxth	r2, r3
 800290a:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 800290c:	811a      	strh	r2, [r3, #8]
	value_adc[5] = (uint16_t) adc_buff[5];
 800290e:	4b0c      	ldr	r3, [pc, #48]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	b29a      	uxth	r2, r3
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 8002916:	815a      	strh	r2, [r3, #10]
	value_adc[6] = (uint16_t) adc_buff[6];
 8002918:	4b09      	ldr	r3, [pc, #36]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	b29a      	uxth	r2, r3
 800291e:	4b09      	ldr	r3, [pc, #36]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 8002920:	819a      	strh	r2, [r3, #12]
	value_adc[7] = (uint16_t) adc_buff[7];
 8002922:	4b07      	ldr	r3, [pc, #28]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	b29a      	uxth	r2, r3
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 800292a:	81da      	strh	r2, [r3, #14]
	value_adc[8] = (uint16_t) adc_buff[8];
 800292c:	4b04      	ldr	r3, [pc, #16]	@ (8002940 <HAL_ADC_ConvCpltCallback+0x6c>)
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	b29a      	uxth	r2, r3
 8002932:	4b04      	ldr	r3, [pc, #16]	@ (8002944 <HAL_ADC_ConvCpltCallback+0x70>)
 8002934:	821a      	strh	r2, [r3, #16]
}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	46bd      	mov	sp, r7
 800293a:	b002      	add	sp, #8
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			@ (mov r8, r8)
 8002940:	2000039c 	.word	0x2000039c
 8002944:	200003c8 	.word	0x200003c8

08002948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002950:	46c0      	nop			@ (mov r8, r8)
 8002952:	e7fd      	b.n	8002950 <Error_Handler+0x8>

08002954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	4b0f      	ldr	r3, [pc, #60]	@ (8002998 <HAL_MspInit+0x44>)
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	4b0e      	ldr	r3, [pc, #56]	@ (8002998 <HAL_MspInit+0x44>)
 8002960:	2101      	movs	r1, #1
 8002962:	430a      	orrs	r2, r1
 8002964:	619a      	str	r2, [r3, #24]
 8002966:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <HAL_MspInit+0x44>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2201      	movs	r2, #1
 800296c:	4013      	ands	r3, r2
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_MspInit+0x44>)
 8002974:	69da      	ldr	r2, [r3, #28]
 8002976:	4b08      	ldr	r3, [pc, #32]	@ (8002998 <HAL_MspInit+0x44>)
 8002978:	2180      	movs	r1, #128	@ 0x80
 800297a:	0549      	lsls	r1, r1, #21
 800297c:	430a      	orrs	r2, r1
 800297e:	61da      	str	r2, [r3, #28]
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_MspInit+0x44>)
 8002982:	69da      	ldr	r2, [r3, #28]
 8002984:	2380      	movs	r3, #128	@ 0x80
 8002986:	055b      	lsls	r3, r3, #21
 8002988:	4013      	ands	r3, r2
 800298a:	603b      	str	r3, [r7, #0]
 800298c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	40021000 	.word	0x40021000

0800299c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b08b      	sub	sp, #44	@ 0x2c
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	2414      	movs	r4, #20
 80029a6:	193b      	adds	r3, r7, r4
 80029a8:	0018      	movs	r0, r3
 80029aa:	2314      	movs	r3, #20
 80029ac:	001a      	movs	r2, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	f003 ff30 	bl	8006814 <memset>
  if(hadc->Instance==ADC1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa8 <HAL_ADC_MspInit+0x10c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d170      	bne.n	8002aa0 <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029be:	4b3b      	ldr	r3, [pc, #236]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 80029c0:	699a      	ldr	r2, [r3, #24]
 80029c2:	4b3a      	ldr	r3, [pc, #232]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 80029c4:	2180      	movs	r1, #128	@ 0x80
 80029c6:	0089      	lsls	r1, r1, #2
 80029c8:	430a      	orrs	r2, r1
 80029ca:	619a      	str	r2, [r3, #24]
 80029cc:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 80029ce:	699a      	ldr	r2, [r3, #24]
 80029d0:	2380      	movs	r3, #128	@ 0x80
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4013      	ands	r3, r2
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 80029dc:	695a      	ldr	r2, [r3, #20]
 80029de:	4b33      	ldr	r3, [pc, #204]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 80029e0:	2180      	movs	r1, #128	@ 0x80
 80029e2:	0289      	lsls	r1, r1, #10
 80029e4:	430a      	orrs	r2, r1
 80029e6:	615a      	str	r2, [r3, #20]
 80029e8:	4b30      	ldr	r3, [pc, #192]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	029b      	lsls	r3, r3, #10
 80029f0:	4013      	ands	r3, r2
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f6:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	4b2c      	ldr	r3, [pc, #176]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 80029fc:	2180      	movs	r1, #128	@ 0x80
 80029fe:	02c9      	lsls	r1, r1, #11
 8002a00:	430a      	orrs	r2, r1
 8002a02:	615a      	str	r2, [r3, #20]
 8002a04:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <HAL_ADC_MspInit+0x110>)
 8002a06:	695a      	ldr	r2, [r3, #20]
 8002a08:	2380      	movs	r3, #128	@ 0x80
 8002a0a:	02db      	lsls	r3, r3, #11
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
 8002a10:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Altrnator_Sens_Pin|WPL_Sens_Pin|WPR_Sens_Pin|F1R_Sens_Pin
 8002a12:	193b      	adds	r3, r7, r4
 8002a14:	22ff      	movs	r2, #255	@ 0xff
 8002a16:	601a      	str	r2, [r3, #0]
                          |F2R_Sens_Pin|F1L_Sens_Pin|F2L_Sens_Pin|V12_NP_Sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a18:	193b      	adds	r3, r7, r4
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	193a      	adds	r2, r7, r4
 8002a26:	2390      	movs	r3, #144	@ 0x90
 8002a28:	05db      	lsls	r3, r3, #23
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f002 f87d 	bl	8004b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V12_P_Sens_Pin|Temp_Sens_Pin;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	2203      	movs	r2, #3
 8002a36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	2200      	movs	r2, #0
 8002a42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a44:	193b      	adds	r3, r7, r4
 8002a46:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_ADC_MspInit+0x114>)
 8002a48:	0019      	movs	r1, r3
 8002a4a:	0010      	movs	r0, r2
 8002a4c:	f002 f86e 	bl	8004b2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002a50:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a52:	4a19      	ldr	r2, [pc, #100]	@ (8002ab8 <HAL_ADC_MspInit+0x11c>)
 8002a54:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a5c:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002a62:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a64:	2280      	movs	r2, #128	@ 0x80
 8002a66:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a68:	4b12      	ldr	r3, [pc, #72]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a6a:	2280      	movs	r2, #128	@ 0x80
 8002a6c:	0092      	lsls	r2, r2, #2
 8002a6e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a70:	4b10      	ldr	r3, [pc, #64]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a72:	2280      	movs	r2, #128	@ 0x80
 8002a74:	0112      	lsls	r2, r2, #4
 8002a76:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002a78:	4b0e      	ldr	r3, [pc, #56]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002a84:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f001 feb8 	bl	80047fc <HAL_DMA_Init>
 8002a8c:	1e03      	subs	r3, r0, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8002a90:	f7ff ff5a 	bl	8002948 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a07      	ldr	r2, [pc, #28]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a98:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a9a:	4b06      	ldr	r3, [pc, #24]	@ (8002ab4 <HAL_ADC_MspInit+0x118>)
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002aa0:	46c0      	nop			@ (mov r8, r8)
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b00b      	add	sp, #44	@ 0x2c
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	40012400 	.word	0x40012400
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	48000400 	.word	0x48000400
 8002ab4:	200000a0 	.word	0x200000a0
 8002ab8:	40020008 	.word	0x40020008

08002abc <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002abc:	b590      	push	{r4, r7, lr}
 8002abe:	b08b      	sub	sp, #44	@ 0x2c
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac4:	2414      	movs	r4, #20
 8002ac6:	193b      	adds	r3, r7, r4
 8002ac8:	0018      	movs	r0, r3
 8002aca:	2314      	movs	r3, #20
 8002acc:	001a      	movs	r2, r3
 8002ace:	2100      	movs	r1, #0
 8002ad0:	f003 fea0 	bl	8006814 <memset>
  if(hcan->Instance==CAN)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a21      	ldr	r2, [pc, #132]	@ (8002b60 <HAL_CAN_MspInit+0xa4>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d13b      	bne.n	8002b56 <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002ade:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <HAL_CAN_MspInit+0xa8>)
 8002ae0:	69da      	ldr	r2, [r3, #28]
 8002ae2:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <HAL_CAN_MspInit+0xa8>)
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	0489      	lsls	r1, r1, #18
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	61da      	str	r2, [r3, #28]
 8002aec:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <HAL_CAN_MspInit+0xa8>)
 8002aee:	69da      	ldr	r2, [r3, #28]
 8002af0:	2380      	movs	r3, #128	@ 0x80
 8002af2:	049b      	lsls	r3, r3, #18
 8002af4:	4013      	ands	r3, r2
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <HAL_CAN_MspInit+0xa8>)
 8002afc:	695a      	ldr	r2, [r3, #20]
 8002afe:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_CAN_MspInit+0xa8>)
 8002b00:	2180      	movs	r1, #128	@ 0x80
 8002b02:	0289      	lsls	r1, r1, #10
 8002b04:	430a      	orrs	r2, r1
 8002b06:	615a      	str	r2, [r3, #20]
 8002b08:	4b16      	ldr	r3, [pc, #88]	@ (8002b64 <HAL_CAN_MspInit+0xa8>)
 8002b0a:	695a      	ldr	r2, [r3, #20]
 8002b0c:	2380      	movs	r3, #128	@ 0x80
 8002b0e:	029b      	lsls	r3, r3, #10
 8002b10:	4013      	ands	r3, r2
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b16:	193b      	adds	r3, r7, r4
 8002b18:	22c0      	movs	r2, #192	@ 0xc0
 8002b1a:	0152      	lsls	r2, r2, #5
 8002b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1e:	0021      	movs	r1, r4
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	2202      	movs	r2, #2
 8002b24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	2200      	movs	r2, #0
 8002b2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2204      	movs	r2, #4
 8002b36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	187a      	adds	r2, r7, r1
 8002b3a:	2390      	movs	r3, #144	@ 0x90
 8002b3c:	05db      	lsls	r3, r3, #23
 8002b3e:	0011      	movs	r1, r2
 8002b40:	0018      	movs	r0, r3
 8002b42:	f001 fff3 	bl	8004b2c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8002b46:	2200      	movs	r2, #0
 8002b48:	2100      	movs	r1, #0
 8002b4a:	201e      	movs	r0, #30
 8002b4c:	f001 fe24 	bl	8004798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002b50:	201e      	movs	r0, #30
 8002b52:	f001 fe36 	bl	80047c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	b00b      	add	sp, #44	@ 0x2c
 8002b5c:	bd90      	pop	{r4, r7, pc}
 8002b5e:	46c0      	nop			@ (mov r8, r8)
 8002b60:	40006400 	.word	0x40006400
 8002b64:	40021000 	.word	0x40021000

08002b68 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b68:	b590      	push	{r4, r7, lr}
 8002b6a:	b08b      	sub	sp, #44	@ 0x2c
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b70:	2414      	movs	r4, #20
 8002b72:	193b      	adds	r3, r7, r4
 8002b74:	0018      	movs	r0, r3
 8002b76:	2314      	movs	r3, #20
 8002b78:	001a      	movs	r2, r3
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	f003 fe4a 	bl	8006814 <memset>
  if(hspi->Instance==SPI2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf8 <HAL_SPI_MspInit+0x90>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d132      	bne.n	8002bf0 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b8a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bfc <HAL_SPI_MspInit+0x94>)
 8002b8c:	69da      	ldr	r2, [r3, #28]
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_SPI_MspInit+0x94>)
 8002b90:	2180      	movs	r1, #128	@ 0x80
 8002b92:	01c9      	lsls	r1, r1, #7
 8002b94:	430a      	orrs	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]
 8002b98:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <HAL_SPI_MspInit+0x94>)
 8002b9a:	69da      	ldr	r2, [r3, #28]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	01db      	lsls	r3, r3, #7
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <HAL_SPI_MspInit+0x94>)
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <HAL_SPI_MspInit+0x94>)
 8002bac:	2180      	movs	r1, #128	@ 0x80
 8002bae:	02c9      	lsls	r1, r1, #11
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	615a      	str	r2, [r3, #20]
 8002bb4:	4b11      	ldr	r3, [pc, #68]	@ (8002bfc <HAL_SPI_MspInit+0x94>)
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	2380      	movs	r3, #128	@ 0x80
 8002bba:	02db      	lsls	r3, r3, #11
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	22f0      	movs	r2, #240	@ 0xf0
 8002bc6:	0212      	lsls	r2, r2, #8
 8002bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	0021      	movs	r1, r4
 8002bcc:	187b      	adds	r3, r7, r1
 8002bce:	2202      	movs	r2, #2
 8002bd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	187b      	adds	r3, r7, r1
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002bde:	187b      	adds	r3, r7, r1
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	4a06      	ldr	r2, [pc, #24]	@ (8002c00 <HAL_SPI_MspInit+0x98>)
 8002be8:	0019      	movs	r1, r3
 8002bea:	0010      	movs	r0, r2
 8002bec:	f001 ff9e 	bl	8004b2c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002bf0:	46c0      	nop			@ (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	b00b      	add	sp, #44	@ 0x2c
 8002bf6:	bd90      	pop	{r4, r7, pc}
 8002bf8:	40003800 	.word	0x40003800
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	48000400 	.word	0x48000400

08002c04 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <HAL_TIM_OC_MspInit+0x58>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d11d      	bne.n	8002c52 <HAL_TIM_OC_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c16:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <HAL_TIM_OC_MspInit+0x5c>)
 8002c18:	699a      	ldr	r2, [r3, #24]
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_TIM_OC_MspInit+0x5c>)
 8002c1c:	2180      	movs	r1, #128	@ 0x80
 8002c1e:	0109      	lsls	r1, r1, #4
 8002c20:	430a      	orrs	r2, r1
 8002c22:	619a      	str	r2, [r3, #24]
 8002c24:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <HAL_TIM_OC_MspInit+0x5c>)
 8002c26:	699a      	ldr	r2, [r3, #24]
 8002c28:	2380      	movs	r3, #128	@ 0x80
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	200d      	movs	r0, #13
 8002c38:	f001 fdae 	bl	8004798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002c3c:	200d      	movs	r0, #13
 8002c3e:	f001 fdc0 	bl	80047c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2100      	movs	r1, #0
 8002c46:	200e      	movs	r0, #14
 8002c48:	f001 fda6 	bl	8004798 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c4c:	200e      	movs	r0, #14
 8002c4e:	f001 fdb8 	bl	80047c2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002c52:	46c0      	nop			@ (mov r8, r8)
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b004      	add	sp, #16
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	@ 0x80
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d10c      	bne.n	8002c92 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c78:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <HAL_TIM_PWM_MspInit+0x58>)
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cbc <HAL_TIM_PWM_MspInit+0x58>)
 8002c7e:	2101      	movs	r1, #1
 8002c80:	430a      	orrs	r2, r1
 8002c82:	61da      	str	r2, [r3, #28]
 8002c84:	4b0d      	ldr	r3, [pc, #52]	@ (8002cbc <HAL_TIM_PWM_MspInit+0x58>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c90:	e010      	b.n	8002cb4 <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc0 <HAL_TIM_PWM_MspInit+0x5c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d10b      	bne.n	8002cb4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <HAL_TIM_PWM_MspInit+0x58>)
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_TIM_PWM_MspInit+0x58>)
 8002ca2:	2102      	movs	r1, #2
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	61da      	str	r2, [r3, #28]
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <HAL_TIM_PWM_MspInit+0x58>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2202      	movs	r2, #2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b004      	add	sp, #16
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40000400 	.word	0x40000400

08002cc4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a14      	ldr	r2, [pc, #80]	@ (8002d24 <HAL_TIM_Base_MspInit+0x60>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <HAL_TIM_Base_MspInit+0x64>)
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	4b13      	ldr	r3, [pc, #76]	@ (8002d28 <HAL_TIM_Base_MspInit+0x64>)
 8002cdc:	2180      	movs	r1, #128	@ 0x80
 8002cde:	0289      	lsls	r1, r1, #10
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]
 8002ce4:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <HAL_TIM_Base_MspInit+0x64>)
 8002ce6:	699a      	ldr	r2, [r3, #24]
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	029b      	lsls	r3, r3, #10
 8002cec:	4013      	ands	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002cf2:	e012      	b.n	8002d1a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8002d2c <HAL_TIM_Base_MspInit+0x68>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d10d      	bne.n	8002d1a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8002d28 <HAL_TIM_Base_MspInit+0x64>)
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <HAL_TIM_Base_MspInit+0x64>)
 8002d04:	2180      	movs	r1, #128	@ 0x80
 8002d06:	02c9      	lsls	r1, r1, #11
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	619a      	str	r2, [r3, #24]
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_TIM_Base_MspInit+0x64>)
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	02db      	lsls	r3, r3, #11
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
}
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	b004      	add	sp, #16
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	40014400 	.word	0x40014400
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40014800 	.word	0x40014800

08002d30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b08d      	sub	sp, #52	@ 0x34
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	241c      	movs	r4, #28
 8002d3a:	193b      	adds	r3, r7, r4
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	2314      	movs	r3, #20
 8002d40:	001a      	movs	r2, r3
 8002d42:	2100      	movs	r1, #0
 8002d44:	f003 fd66 	bl	8006814 <memset>
  if(htim->Instance==TIM2)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	2380      	movs	r3, #128	@ 0x80
 8002d4e:	05db      	lsls	r3, r3, #23
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d125      	bne.n	8002da0 <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d54:	4b54      	ldr	r3, [pc, #336]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002d56:	695a      	ldr	r2, [r3, #20]
 8002d58:	4b53      	ldr	r3, [pc, #332]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002d5a:	2180      	movs	r1, #128	@ 0x80
 8002d5c:	02c9      	lsls	r1, r1, #11
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	615a      	str	r2, [r3, #20]
 8002d62:	4b51      	ldr	r3, [pc, #324]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	2380      	movs	r3, #128	@ 0x80
 8002d68:	02db      	lsls	r3, r3, #11
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = F1L_pwm_Pin|F2L_pwm_Pin;
 8002d70:	193b      	adds	r3, r7, r4
 8002d72:	22c0      	movs	r2, #192	@ 0xc0
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	0021      	movs	r1, r4
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	187b      	adds	r3, r7, r1
 8002d82:	2200      	movs	r2, #0
 8002d84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d86:	187b      	adds	r3, r7, r1
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002d8c:	187b      	adds	r3, r7, r1
 8002d8e:	2202      	movs	r2, #2
 8002d90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d92:	187b      	adds	r3, r7, r1
 8002d94:	4a45      	ldr	r2, [pc, #276]	@ (8002eac <HAL_TIM_MspPostInit+0x17c>)
 8002d96:	0019      	movs	r1, r3
 8002d98:	0010      	movs	r0, r2
 8002d9a:	f001 fec7 	bl	8004b2c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002d9e:	e07e      	b.n	8002e9e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a42      	ldr	r2, [pc, #264]	@ (8002eb0 <HAL_TIM_MspPostInit+0x180>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d124      	bne.n	8002df4 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002daa:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002dac:	695a      	ldr	r2, [r3, #20]
 8002dae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002db0:	2180      	movs	r1, #128	@ 0x80
 8002db2:	02c9      	lsls	r1, r1, #11
 8002db4:	430a      	orrs	r2, r1
 8002db6:	615a      	str	r2, [r3, #20]
 8002db8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002dba:	695a      	ldr	r2, [r3, #20]
 8002dbc:	2380      	movs	r3, #128	@ 0x80
 8002dbe:	02db      	lsls	r3, r3, #11
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = F1R_pwm_Pin|F2R_pwm_Pin;
 8002dc6:	211c      	movs	r1, #28
 8002dc8:	187b      	adds	r3, r7, r1
 8002dca:	2230      	movs	r2, #48	@ 0x30
 8002dcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	187b      	adds	r3, r7, r1
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	187b      	adds	r3, r7, r1
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	187b      	adds	r3, r7, r1
 8002ddc:	2200      	movs	r2, #0
 8002dde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002de0:	187b      	adds	r3, r7, r1
 8002de2:	2201      	movs	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002de6:	187b      	adds	r3, r7, r1
 8002de8:	4a30      	ldr	r2, [pc, #192]	@ (8002eac <HAL_TIM_MspPostInit+0x17c>)
 8002dea:	0019      	movs	r1, r3
 8002dec:	0010      	movs	r0, r2
 8002dee:	f001 fe9d 	bl	8004b2c <HAL_GPIO_Init>
}
 8002df2:	e054      	b.n	8002e9e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM16)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a2e      	ldr	r2, [pc, #184]	@ (8002eb4 <HAL_TIM_MspPostInit+0x184>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d125      	bne.n	8002e4a <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	4b29      	ldr	r3, [pc, #164]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002e04:	2180      	movs	r1, #128	@ 0x80
 8002e06:	02c9      	lsls	r1, r1, #11
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	615a      	str	r2, [r3, #20]
 8002e0c:	4b26      	ldr	r3, [pc, #152]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	02db      	lsls	r3, r3, #11
 8002e14:	4013      	ands	r3, r2
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = WPL_pwm_Pin;
 8002e1a:	211c      	movs	r1, #28
 8002e1c:	187b      	adds	r3, r7, r1
 8002e1e:	2280      	movs	r2, #128	@ 0x80
 8002e20:	0052      	lsls	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	2202      	movs	r2, #2
 8002e28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e30:	187b      	adds	r3, r7, r1
 8002e32:	2200      	movs	r2, #0
 8002e34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	2202      	movs	r2, #2
 8002e3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPL_pwm_GPIO_Port, &GPIO_InitStruct);
 8002e3c:	187b      	adds	r3, r7, r1
 8002e3e:	4a1b      	ldr	r2, [pc, #108]	@ (8002eac <HAL_TIM_MspPostInit+0x17c>)
 8002e40:	0019      	movs	r1, r3
 8002e42:	0010      	movs	r0, r2
 8002e44:	f001 fe72 	bl	8004b2c <HAL_GPIO_Init>
}
 8002e48:	e029      	b.n	8002e9e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM17)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb8 <HAL_TIM_MspPostInit+0x188>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d124      	bne.n	8002e9e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e54:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002e56:	695a      	ldr	r2, [r3, #20]
 8002e58:	4b13      	ldr	r3, [pc, #76]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002e5a:	2180      	movs	r1, #128	@ 0x80
 8002e5c:	02c9      	lsls	r1, r1, #11
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	615a      	str	r2, [r3, #20]
 8002e62:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <HAL_TIM_MspPostInit+0x178>)
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	02db      	lsls	r3, r3, #11
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPR_pwm_Pin;
 8002e70:	211c      	movs	r1, #28
 8002e72:	187b      	adds	r3, r7, r1
 8002e74:	2280      	movs	r2, #128	@ 0x80
 8002e76:	0092      	lsls	r2, r2, #2
 8002e78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	187b      	adds	r3, r7, r1
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	187b      	adds	r3, r7, r1
 8002e88:	2200      	movs	r2, #0
 8002e8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002e8c:	187b      	adds	r3, r7, r1
 8002e8e:	2202      	movs	r2, #2
 8002e90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPR_pwm_GPIO_Port, &GPIO_InitStruct);
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	4a05      	ldr	r2, [pc, #20]	@ (8002eac <HAL_TIM_MspPostInit+0x17c>)
 8002e96:	0019      	movs	r1, r3
 8002e98:	0010      	movs	r0, r2
 8002e9a:	f001 fe47 	bl	8004b2c <HAL_GPIO_Init>
}
 8002e9e:	46c0      	nop			@ (mov r8, r8)
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b00d      	add	sp, #52	@ 0x34
 8002ea4:	bd90      	pop	{r4, r7, pc}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	48000400 	.word	0x48000400
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40014400 	.word	0x40014400
 8002eb8:	40014800 	.word	0x40014800

08002ebc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ec0:	46c0      	nop			@ (mov r8, r8)
 8002ec2:	e7fd      	b.n	8002ec0 <NMI_Handler+0x4>

08002ec4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec8:	46c0      	nop			@ (mov r8, r8)
 8002eca:	e7fd      	b.n	8002ec8 <HardFault_Handler+0x4>

08002ecc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ed0:	46c0      	nop			@ (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee4:	f000 f8c4 	bl	8003070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ee8:	46c0      	nop			@ (mov r8, r8)
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002ef4:	4b03      	ldr	r3, [pc, #12]	@ (8002f04 <DMA1_Channel1_IRQHandler+0x14>)
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	f001 fd2e 	bl	8004958 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	200000a0 	.word	0x200000a0

08002f08 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f0c:	4b03      	ldr	r3, [pc, #12]	@ (8002f1c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f002 ff06 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002f14:	46c0      	nop			@ (mov r8, r8)
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	46c0      	nop			@ (mov r8, r8)
 8002f1c:	20000170 	.word	0x20000170

08002f20 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <TIM1_CC_IRQHandler+0x14>)
 8002f26:	0018      	movs	r0, r3
 8002f28:	f002 fefa 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	20000170 	.word	0x20000170

08002f38 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002f3c:	4b03      	ldr	r3, [pc, #12]	@ (8002f4c <CEC_CAN_IRQHandler+0x14>)
 8002f3e:	0018      	movs	r0, r3
 8002f40:	f001 f969 	bl	8004216 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8002f44:	46c0      	nop			@ (mov r8, r8)
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	200000e4 	.word	0x200000e4

08002f50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002f54:	46c0      	nop			@ (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
	...

08002f5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f5c:	4813      	ldr	r0, [pc, #76]	@ (8002fac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f5e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f60:	f7ff fff6 	bl	8002f50 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002f64:	4812      	ldr	r0, [pc, #72]	@ (8002fb0 <LoopForever+0x6>)
    LDR R1, [R0]
 8002f66:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002f68:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002f6a:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <LoopForever+0xa>)
    CMP R1, R2
 8002f6c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002f6e:	d105      	bne.n	8002f7c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002f70:	4811      	ldr	r0, [pc, #68]	@ (8002fb8 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002f72:	4912      	ldr	r1, [pc, #72]	@ (8002fbc <LoopForever+0x12>)
    STR R1, [R0]
 8002f74:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002f76:	4812      	ldr	r0, [pc, #72]	@ (8002fc0 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002f78:	4912      	ldr	r1, [pc, #72]	@ (8002fc4 <LoopForever+0x1a>)
    STR R1, [R0]
 8002f7a:	6001      	str	r1, [r0, #0]

08002f7c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f7c:	4812      	ldr	r0, [pc, #72]	@ (8002fc8 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002f7e:	4913      	ldr	r1, [pc, #76]	@ (8002fcc <LoopForever+0x22>)
  ldr r2, =_sidata
 8002f80:	4a13      	ldr	r2, [pc, #76]	@ (8002fd0 <LoopForever+0x26>)
  movs r3, #0
 8002f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f84:	e002      	b.n	8002f8c <LoopCopyDataInit>

08002f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f8a:	3304      	adds	r3, #4

08002f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f90:	d3f9      	bcc.n	8002f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f92:	4a10      	ldr	r2, [pc, #64]	@ (8002fd4 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002f94:	4c10      	ldr	r4, [pc, #64]	@ (8002fd8 <LoopForever+0x2e>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f98:	e001      	b.n	8002f9e <LoopFillZerobss>

08002f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f9c:	3204      	adds	r2, #4

08002f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fa0:	d3fb      	bcc.n	8002f9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fa2:	f003 fc3f 	bl	8006824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fa6:	f7fe fe3b 	bl	8001c20 <main>

08002faa <LoopForever>:

LoopForever:
    b LoopForever
 8002faa:	e7fe      	b.n	8002faa <LoopForever>
  ldr   r0, =_estack
 8002fac:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002fb0:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002fb4:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002fb8:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002fbc:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002fc0:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002fc4:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fcc:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8002fd0:	080068bc 	.word	0x080068bc
  ldr r2, =_sbss
 8002fd4:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8002fd8:	20000420 	.word	0x20000420

08002fdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC1_IRQHandler>
	...

08002fe0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe4:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <HAL_Init+0x24>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_Init+0x24>)
 8002fea:	2110      	movs	r1, #16
 8002fec:	430a      	orrs	r2, r1
 8002fee:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff0:	2003      	movs	r0, #3
 8002ff2:	f000 f809 	bl	8003008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ff6:	f7ff fcad 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	40022000 	.word	0x40022000

08003008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003010:	4b14      	ldr	r3, [pc, #80]	@ (8003064 <HAL_InitTick+0x5c>)
 8003012:	681c      	ldr	r4, [r3, #0]
 8003014:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_InitTick+0x60>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	0019      	movs	r1, r3
 800301a:	23fa      	movs	r3, #250	@ 0xfa
 800301c:	0098      	lsls	r0, r3, #2
 800301e:	f7fd f873 	bl	8000108 <__udivsi3>
 8003022:	0003      	movs	r3, r0
 8003024:	0019      	movs	r1, r3
 8003026:	0020      	movs	r0, r4
 8003028:	f7fd f86e 	bl	8000108 <__udivsi3>
 800302c:	0003      	movs	r3, r0
 800302e:	0018      	movs	r0, r3
 8003030:	f001 fbd7 	bl	80047e2 <HAL_SYSTICK_Config>
 8003034:	1e03      	subs	r3, r0, #0
 8003036:	d001      	beq.n	800303c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e00f      	b.n	800305c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b03      	cmp	r3, #3
 8003040:	d80b      	bhi.n	800305a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	2301      	movs	r3, #1
 8003046:	425b      	negs	r3, r3
 8003048:	2200      	movs	r2, #0
 800304a:	0018      	movs	r0, r3
 800304c:	f001 fba4 	bl	8004798 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003050:	4b06      	ldr	r3, [pc, #24]	@ (800306c <HAL_InitTick+0x64>)
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	e000      	b.n	800305c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b003      	add	sp, #12
 8003062:	bd90      	pop	{r4, r7, pc}
 8003064:	20000038 	.word	0x20000038
 8003068:	20000040 	.word	0x20000040
 800306c:	2000003c 	.word	0x2000003c

08003070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003074:	4b05      	ldr	r3, [pc, #20]	@ (800308c <HAL_IncTick+0x1c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	001a      	movs	r2, r3
 800307a:	4b05      	ldr	r3, [pc, #20]	@ (8003090 <HAL_IncTick+0x20>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	18d2      	adds	r2, r2, r3
 8003080:	4b03      	ldr	r3, [pc, #12]	@ (8003090 <HAL_IncTick+0x20>)
 8003082:	601a      	str	r2, [r3, #0]
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	20000040 	.word	0x20000040
 8003090:	2000041c 	.word	0x2000041c

08003094 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  return uwTick;
 8003098:	4b02      	ldr	r3, [pc, #8]	@ (80030a4 <HAL_GetTick+0x10>)
 800309a:	681b      	ldr	r3, [r3, #0]
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	2000041c 	.word	0x2000041c

080030a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030b0:	230f      	movs	r3, #15
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e125      	b.n	8003312 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10a      	bne.n	80030e4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2234      	movs	r2, #52	@ 0x34
 80030d8:	2100      	movs	r1, #0
 80030da:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0018      	movs	r0, r3
 80030e0:	f7ff fc5c 	bl	800299c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030e8:	2210      	movs	r2, #16
 80030ea:	4013      	ands	r3, r2
 80030ec:	d000      	beq.n	80030f0 <HAL_ADC_Init+0x48>
 80030ee:	e103      	b.n	80032f8 <HAL_ADC_Init+0x250>
 80030f0:	230f      	movs	r3, #15
 80030f2:	18fb      	adds	r3, r7, r3
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d000      	beq.n	80030fc <HAL_ADC_Init+0x54>
 80030fa:	e0fd      	b.n	80032f8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	2204      	movs	r2, #4
 8003104:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003106:	d000      	beq.n	800310a <HAL_ADC_Init+0x62>
 8003108:	e0f6      	b.n	80032f8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310e:	4a83      	ldr	r2, [pc, #524]	@ (800331c <HAL_ADC_Init+0x274>)
 8003110:	4013      	ands	r3, r2
 8003112:	2202      	movs	r2, #2
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2203      	movs	r2, #3
 8003122:	4013      	ands	r3, r2
 8003124:	2b01      	cmp	r3, #1
 8003126:	d112      	bne.n	800314e <HAL_ADC_Init+0xa6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2201      	movs	r2, #1
 8003130:	4013      	ands	r3, r2
 8003132:	2b01      	cmp	r3, #1
 8003134:	d009      	beq.n	800314a <HAL_ADC_Init+0xa2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	2380      	movs	r3, #128	@ 0x80
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	401a      	ands	r2, r3
 8003142:	2380      	movs	r3, #128	@ 0x80
 8003144:	021b      	lsls	r3, r3, #8
 8003146:	429a      	cmp	r2, r3
 8003148:	d101      	bne.n	800314e <HAL_ADC_Init+0xa6>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_ADC_Init+0xa8>
 800314e:	2300      	movs	r3, #0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d116      	bne.n	8003182 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	2218      	movs	r2, #24
 800315c:	4393      	bics	r3, r2
 800315e:	0019      	movs	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	0899      	lsrs	r1, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	430a      	orrs	r2, r1
 8003180:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4964      	ldr	r1, [pc, #400]	@ (8003320 <HAL_ADC_Init+0x278>)
 800318e:	400a      	ands	r2, r1
 8003190:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7e1b      	ldrb	r3, [r3, #24]
 8003196:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	7e5b      	ldrb	r3, [r3, #25]
 800319c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800319e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	7e9b      	ldrb	r3, [r3, #26]
 80031a4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80031a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d002      	beq.n	80031b6 <HAL_ADC_Init+0x10e>
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	015b      	lsls	r3, r3, #5
 80031b4:	e000      	b.n	80031b8 <HAL_ADC_Init+0x110>
 80031b6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031b8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80031be:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d101      	bne.n	80031cc <HAL_ADC_Init+0x124>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e000      	b.n	80031ce <HAL_ADC_Init+0x126>
 80031cc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80031ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2124      	movs	r1, #36	@ 0x24
 80031d4:	5c5b      	ldrb	r3, [r3, r1]
 80031d6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031d8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	7edb      	ldrb	r3, [r3, #27]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d115      	bne.n	8003214 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	7e9b      	ldrb	r3, [r3, #26]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2280      	movs	r2, #128	@ 0x80
 80031f4:	0252      	lsls	r2, r2, #9
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	e00b      	b.n	8003214 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003200:	2220      	movs	r2, #32
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320c:	2201      	movs	r2, #1
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	23c2      	movs	r3, #194	@ 0xc2
 800321a:	33ff      	adds	r3, #255	@ 0xff
 800321c:	429a      	cmp	r2, r3
 800321e:	d007      	beq.n	8003230 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003228:	4313      	orrs	r3, r2
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	4313      	orrs	r3, r2
 800322e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68d9      	ldr	r1, [r3, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	430a      	orrs	r2, r1
 800323e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003244:	2380      	movs	r3, #128	@ 0x80
 8003246:	055b      	lsls	r3, r3, #21
 8003248:	429a      	cmp	r2, r3
 800324a:	d01b      	beq.n	8003284 <HAL_ADC_Init+0x1dc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	2b01      	cmp	r3, #1
 8003252:	d017      	beq.n	8003284 <HAL_ADC_Init+0x1dc>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003258:	2b02      	cmp	r3, #2
 800325a:	d013      	beq.n	8003284 <HAL_ADC_Init+0x1dc>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003260:	2b03      	cmp	r3, #3
 8003262:	d00f      	beq.n	8003284 <HAL_ADC_Init+0x1dc>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	2b04      	cmp	r3, #4
 800326a:	d00b      	beq.n	8003284 <HAL_ADC_Init+0x1dc>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003270:	2b05      	cmp	r3, #5
 8003272:	d007      	beq.n	8003284 <HAL_ADC_Init+0x1dc>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	2b06      	cmp	r3, #6
 800327a:	d003      	beq.n	8003284 <HAL_ADC_Init+0x1dc>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003280:	2b07      	cmp	r3, #7
 8003282:	d112      	bne.n	80032aa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2107      	movs	r1, #7
 8003290:	438a      	bics	r2, r1
 8003292:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6959      	ldr	r1, [r3, #20]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	2207      	movs	r2, #7
 80032a0:	401a      	ands	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003324 <HAL_ADC_Init+0x27c>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d10b      	bne.n	80032d2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032c4:	2203      	movs	r2, #3
 80032c6:	4393      	bics	r3, r2
 80032c8:	2201      	movs	r2, #1
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032d0:	e01c      	b.n	800330c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032d6:	2212      	movs	r2, #18
 80032d8:	4393      	bics	r3, r2
 80032da:	2210      	movs	r2, #16
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	2201      	movs	r2, #1
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80032ee:	230f      	movs	r3, #15
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032f6:	e009      	b.n	800330c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	2210      	movs	r2, #16
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003304:	230f      	movs	r3, #15
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800330c:	230f      	movs	r3, #15
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
}
 8003312:	0018      	movs	r0, r3
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
 800331a:	46c0      	nop			@ (mov r8, r8)
 800331c:	fffffefd 	.word	0xfffffefd
 8003320:	fffe0219 	.word	0xfffe0219
 8003324:	833fffe7 	.word	0x833fffe7

08003328 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003330:	230f      	movs	r3, #15
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2204      	movs	r2, #4
 8003340:	4013      	ands	r3, r2
 8003342:	d156      	bne.n	80033f2 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2234      	movs	r2, #52	@ 0x34
 8003348:	5c9b      	ldrb	r3, [r3, r2]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_ADC_Start_IT+0x2a>
 800334e:	2302      	movs	r3, #2
 8003350:	e056      	b.n	8003400 <HAL_ADC_Start_IT+0xd8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2234      	movs	r2, #52	@ 0x34
 8003356:	2101      	movs	r1, #1
 8003358:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	7e5b      	ldrb	r3, [r3, #25]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d007      	beq.n	8003372 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003362:	230f      	movs	r3, #15
 8003364:	18fc      	adds	r4, r7, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	0018      	movs	r0, r3
 800336a:	f000 f9ef 	bl	800374c <ADC_Enable>
 800336e:	0003      	movs	r3, r0
 8003370:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003372:	230f      	movs	r3, #15
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d13e      	bne.n	80033fa <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003380:	4a21      	ldr	r2, [pc, #132]	@ (8003408 <HAL_ADC_Start_IT+0xe0>)
 8003382:	4013      	ands	r3, r2
 8003384:	2280      	movs	r2, #128	@ 0x80
 8003386:	0052      	lsls	r2, r2, #1
 8003388:	431a      	orrs	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2234      	movs	r2, #52	@ 0x34
 8003398:	2100      	movs	r1, #0
 800339a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	221c      	movs	r2, #28
 80033a2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d110      	bne.n	80033ce <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2104      	movs	r1, #4
 80033b8:	438a      	bics	r2, r1
 80033ba:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2118      	movs	r1, #24
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
          break;
 80033cc:	e008      	b.n	80033e0 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685a      	ldr	r2, [r3, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	211c      	movs	r1, #28
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
          break;
 80033de:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2104      	movs	r1, #4
 80033ec:	430a      	orrs	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]
 80033f0:	e003      	b.n	80033fa <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033f2:	230f      	movs	r3, #15
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	2202      	movs	r2, #2
 80033f8:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80033fa:	230f      	movs	r3, #15
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	781b      	ldrb	r3, [r3, #0]
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b005      	add	sp, #20
 8003406:	bd90      	pop	{r4, r7, pc}
 8003408:	fffff0fe 	.word	0xfffff0fe

0800340c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003418:	2317      	movs	r3, #23
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2204      	movs	r2, #4
 8003428:	4013      	ands	r3, r2
 800342a:	d15e      	bne.n	80034ea <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2234      	movs	r2, #52	@ 0x34
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_ADC_Start_DMA+0x2e>
 8003436:	2302      	movs	r3, #2
 8003438:	e05e      	b.n	80034f8 <HAL_ADC_Start_DMA+0xec>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2234      	movs	r2, #52	@ 0x34
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	7e5b      	ldrb	r3, [r3, #25]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d007      	beq.n	800345a <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800344a:	2317      	movs	r3, #23
 800344c:	18fc      	adds	r4, r7, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	0018      	movs	r0, r3
 8003452:	f000 f97b 	bl	800374c <ADC_Enable>
 8003456:	0003      	movs	r3, r0
 8003458:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800345a:	2317      	movs	r3, #23
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d146      	bne.n	80034f2 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003468:	4a25      	ldr	r2, [pc, #148]	@ (8003500 <HAL_ADC_Start_DMA+0xf4>)
 800346a:	4013      	ands	r3, r2
 800346c:	2280      	movs	r2, #128	@ 0x80
 800346e:	0052      	lsls	r2, r2, #1
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2234      	movs	r2, #52	@ 0x34
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003488:	4a1e      	ldr	r2, [pc, #120]	@ (8003504 <HAL_ADC_Start_DMA+0xf8>)
 800348a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	4a1d      	ldr	r2, [pc, #116]	@ (8003508 <HAL_ADC_Start_DMA+0xfc>)
 8003492:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003498:	4a1c      	ldr	r2, [pc, #112]	@ (800350c <HAL_ADC_Start_DMA+0x100>)
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	221c      	movs	r2, #28
 80034a2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2110      	movs	r1, #16
 80034b0:	430a      	orrs	r2, r1
 80034b2:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2101      	movs	r1, #1
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3340      	adds	r3, #64	@ 0x40
 80034ce:	0019      	movs	r1, r3
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f001 f9da 	bl	800488c <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2104      	movs	r1, #4
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	e003      	b.n	80034f2 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034ea:	2317      	movs	r3, #23
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80034f2:	2317      	movs	r3, #23
 80034f4:	18fb      	adds	r3, r7, r3
 80034f6:	781b      	ldrb	r3, [r3, #0]
}
 80034f8:	0018      	movs	r0, r3
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b007      	add	sp, #28
 80034fe:	bd90      	pop	{r4, r7, pc}
 8003500:	fffff0fe 	.word	0xfffff0fe
 8003504:	08003855 	.word	0x08003855
 8003508:	08003909 	.word	0x08003909
 800350c:	08003927 	.word	0x08003927

08003510 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003528:	46c0      	nop			@ (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800353a:	230f      	movs	r3, #15
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800354a:	2380      	movs	r3, #128	@ 0x80
 800354c:	055b      	lsls	r3, r3, #21
 800354e:	429a      	cmp	r2, r3
 8003550:	d011      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	2b01      	cmp	r3, #1
 8003558:	d00d      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800355e:	2b02      	cmp	r3, #2
 8003560:	d009      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003566:	2b03      	cmp	r3, #3
 8003568:	d005      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	2b04      	cmp	r3, #4
 8003570:	d001      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x46>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2234      	movs	r2, #52	@ 0x34
 800357a:	5c9b      	ldrb	r3, [r3, r2]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x54>
 8003580:	2302      	movs	r3, #2
 8003582:	e0d0      	b.n	8003726 <HAL_ADC_ConfigChannel+0x1f6>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2234      	movs	r2, #52	@ 0x34
 8003588:	2101      	movs	r1, #1
 800358a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2204      	movs	r2, #4
 8003594:	4013      	ands	r3, r2
 8003596:	d000      	beq.n	800359a <HAL_ADC_ConfigChannel+0x6a>
 8003598:	e0b4      	b.n	8003704 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a64      	ldr	r2, [pc, #400]	@ (8003730 <HAL_ADC_ConfigChannel+0x200>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d100      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x76>
 80035a4:	e082      	b.n	80036ac <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	409a      	lsls	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c0:	2380      	movs	r3, #128	@ 0x80
 80035c2:	055b      	lsls	r3, r3, #21
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d037      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d033      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d02f      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d02b      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e4:	2b04      	cmp	r3, #4
 80035e6:	d027      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ec:	2b05      	cmp	r3, #5
 80035ee:	d023      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	2b06      	cmp	r3, #6
 80035f6:	d01f      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fc:	2b07      	cmp	r3, #7
 80035fe:	d01b      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	2107      	movs	r1, #7
 800360c:	400b      	ands	r3, r1
 800360e:	429a      	cmp	r2, r3
 8003610:	d012      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695a      	ldr	r2, [r3, #20]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2107      	movs	r1, #7
 800361e:	438a      	bics	r2, r1
 8003620:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6959      	ldr	r1, [r3, #20]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	2207      	movs	r2, #7
 800362e:	401a      	ands	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b10      	cmp	r3, #16
 800363e:	d007      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x120>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b11      	cmp	r3, #17
 8003646:	d003      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x120>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b12      	cmp	r3, #18
 800364e:	d163      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003650:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <HAL_ADC_ConfigChannel+0x204>)
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b10      	cmp	r3, #16
 800365a:	d009      	beq.n	8003670 <HAL_ADC_ConfigChannel+0x140>
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b11      	cmp	r3, #17
 8003662:	d102      	bne.n	800366a <HAL_ADC_ConfigChannel+0x13a>
 8003664:	2380      	movs	r3, #128	@ 0x80
 8003666:	03db      	lsls	r3, r3, #15
 8003668:	e004      	b.n	8003674 <HAL_ADC_ConfigChannel+0x144>
 800366a:	2380      	movs	r3, #128	@ 0x80
 800366c:	045b      	lsls	r3, r3, #17
 800366e:	e001      	b.n	8003674 <HAL_ADC_ConfigChannel+0x144>
 8003670:	2380      	movs	r3, #128	@ 0x80
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	4a2f      	ldr	r2, [pc, #188]	@ (8003734 <HAL_ADC_ConfigChannel+0x204>)
 8003676:	430b      	orrs	r3, r1
 8003678:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b10      	cmp	r3, #16
 8003680:	d14a      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003682:	4b2d      	ldr	r3, [pc, #180]	@ (8003738 <HAL_ADC_ConfigChannel+0x208>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	492d      	ldr	r1, [pc, #180]	@ (800373c <HAL_ADC_ConfigChannel+0x20c>)
 8003688:	0018      	movs	r0, r3
 800368a:	f7fc fd3d 	bl	8000108 <__udivsi3>
 800368e:	0003      	movs	r3, r0
 8003690:	001a      	movs	r2, r3
 8003692:	0013      	movs	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	189b      	adds	r3, r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800369c:	e002      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f9      	bne.n	800369e <HAL_ADC_ConfigChannel+0x16e>
 80036aa:	e035      	b.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2101      	movs	r1, #1
 80036b8:	4099      	lsls	r1, r3
 80036ba:	000b      	movs	r3, r1
 80036bc:	43d9      	mvns	r1, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	400a      	ands	r2, r1
 80036c4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d007      	beq.n	80036de <HAL_ADC_ConfigChannel+0x1ae>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b11      	cmp	r3, #17
 80036d4:	d003      	beq.n	80036de <HAL_ADC_ConfigChannel+0x1ae>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b12      	cmp	r3, #18
 80036dc:	d11c      	bne.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_ADC_ConfigChannel+0x204>)
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b10      	cmp	r3, #16
 80036e8:	d007      	beq.n	80036fa <HAL_ADC_ConfigChannel+0x1ca>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b11      	cmp	r3, #17
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x1c6>
 80036f2:	4b13      	ldr	r3, [pc, #76]	@ (8003740 <HAL_ADC_ConfigChannel+0x210>)
 80036f4:	e002      	b.n	80036fc <HAL_ADC_ConfigChannel+0x1cc>
 80036f6:	4b13      	ldr	r3, [pc, #76]	@ (8003744 <HAL_ADC_ConfigChannel+0x214>)
 80036f8:	e000      	b.n	80036fc <HAL_ADC_ConfigChannel+0x1cc>
 80036fa:	4b13      	ldr	r3, [pc, #76]	@ (8003748 <HAL_ADC_ConfigChannel+0x218>)
 80036fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003734 <HAL_ADC_ConfigChannel+0x204>)
 80036fe:	400b      	ands	r3, r1
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	e009      	b.n	8003718 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	2220      	movs	r2, #32
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003710:	230f      	movs	r3, #15
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2201      	movs	r2, #1
 8003716:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2234      	movs	r2, #52	@ 0x34
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003720:	230f      	movs	r3, #15
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	781b      	ldrb	r3, [r3, #0]
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b004      	add	sp, #16
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	00001001 	.word	0x00001001
 8003734:	40012708 	.word	0x40012708
 8003738:	20000038 	.word	0x20000038
 800373c:	000f4240 	.word	0x000f4240
 8003740:	ffbfffff 	.word	0xffbfffff
 8003744:	feffffff 	.word	0xfeffffff
 8003748:	ff7fffff 	.word	0xff7fffff

0800374c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2203      	movs	r2, #3
 8003764:	4013      	ands	r3, r2
 8003766:	2b01      	cmp	r3, #1
 8003768:	d112      	bne.n	8003790 <ADC_Enable+0x44>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2201      	movs	r2, #1
 8003772:	4013      	ands	r3, r2
 8003774:	2b01      	cmp	r3, #1
 8003776:	d009      	beq.n	800378c <ADC_Enable+0x40>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	2380      	movs	r3, #128	@ 0x80
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	401a      	ands	r2, r3
 8003784:	2380      	movs	r3, #128	@ 0x80
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	429a      	cmp	r2, r3
 800378a:	d101      	bne.n	8003790 <ADC_Enable+0x44>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <ADC_Enable+0x46>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d152      	bne.n	800383c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a2a      	ldr	r2, [pc, #168]	@ (8003848 <ADC_Enable+0xfc>)
 800379e:	4013      	ands	r3, r2
 80037a0:	d00d      	beq.n	80037be <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037a6:	2210      	movs	r2, #16
 80037a8:	431a      	orrs	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b2:	2201      	movs	r2, #1
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e03f      	b.n	800383e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2101      	movs	r1, #1
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037ce:	4b1f      	ldr	r3, [pc, #124]	@ (800384c <ADC_Enable+0x100>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	491f      	ldr	r1, [pc, #124]	@ (8003850 <ADC_Enable+0x104>)
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7fc fc97 	bl	8000108 <__udivsi3>
 80037da:	0003      	movs	r3, r0
 80037dc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037de:	e002      	b.n	80037e6 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f9      	bne.n	80037e0 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80037ec:	f7ff fc52 	bl	8003094 <HAL_GetTick>
 80037f0:	0003      	movs	r3, r0
 80037f2:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80037f4:	e01b      	b.n	800382e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80037f6:	f7ff fc4d 	bl	8003094 <HAL_GetTick>
 80037fa:	0002      	movs	r2, r0
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d914      	bls.n	800382e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	2b01      	cmp	r3, #1
 8003810:	d00d      	beq.n	800382e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003816:	2210      	movs	r2, #16
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003822:	2201      	movs	r2, #1
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e007      	b.n	800383e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	4013      	ands	r3, r2
 8003838:	2b01      	cmp	r3, #1
 800383a:	d1dc      	bne.n	80037f6 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	0018      	movs	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	b004      	add	sp, #16
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	80000017 	.word	0x80000017
 800384c:	20000038 	.word	0x20000038
 8003850:	000f4240 	.word	0x000f4240

08003854 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003860:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003866:	2250      	movs	r2, #80	@ 0x50
 8003868:	4013      	ands	r3, r2
 800386a:	d140      	bne.n	80038ee <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003870:	2280      	movs	r2, #128	@ 0x80
 8003872:	0092      	lsls	r2, r2, #2
 8003874:	431a      	orrs	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	23c0      	movs	r3, #192	@ 0xc0
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	4013      	ands	r3, r2
 8003886:	d12d      	bne.n	80038e4 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800388c:	2b00      	cmp	r3, #0
 800388e:	d129      	bne.n	80038e4 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2208      	movs	r2, #8
 8003898:	4013      	ands	r3, r2
 800389a:	2b08      	cmp	r3, #8
 800389c:	d122      	bne.n	80038e4 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2204      	movs	r2, #4
 80038a6:	4013      	ands	r3, r2
 80038a8:	d110      	bne.n	80038cc <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	210c      	movs	r1, #12
 80038b6:	438a      	bics	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038be:	4a11      	ldr	r2, [pc, #68]	@ (8003904 <ADC_DMAConvCplt+0xb0>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	2201      	movs	r2, #1
 80038c4:	431a      	orrs	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80038ca:	e00b      	b.n	80038e4 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	2220      	movs	r2, #32
 80038d2:	431a      	orrs	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	2201      	movs	r2, #1
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7fe fff4 	bl	80028d4 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80038ec:	e005      	b.n	80038fa <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	0010      	movs	r0, r2
 80038f8:	4798      	blx	r3
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	fffffefe 	.word	0xfffffefe

08003908 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003914:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	0018      	movs	r0, r3
 800391a:	f7ff fdf9 	bl	8003510 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}

08003926 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003932:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	2240      	movs	r2, #64	@ 0x40
 800393a:	431a      	orrs	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003944:	2204      	movs	r2, #4
 8003946:	431a      	orrs	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	0018      	movs	r0, r3
 8003950:	f7ff fde6 	bl	8003520 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003954:	46c0      	nop			@ (mov r8, r8)
 8003956:	46bd      	mov	sp, r7
 8003958:	b004      	add	sp, #16
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e0f0      	b.n	8003b50 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	5c9b      	ldrb	r3, [r3, r2]
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d103      	bne.n	8003982 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0018      	movs	r0, r3
 800397e:	f7ff f89d 	bl	8002abc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2101      	movs	r1, #1
 800398e:	430a      	orrs	r2, r1
 8003990:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003992:	f7ff fb7f 	bl	8003094 <HAL_GetTick>
 8003996:	0003      	movs	r3, r0
 8003998:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800399a:	e013      	b.n	80039c4 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800399c:	f7ff fb7a 	bl	8003094 <HAL_GetTick>
 80039a0:	0002      	movs	r2, r0
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b0a      	cmp	r3, #10
 80039a8:	d90c      	bls.n	80039c4 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	2280      	movs	r2, #128	@ 0x80
 80039b0:	0292      	lsls	r2, r2, #10
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	2105      	movs	r1, #5
 80039be:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0c5      	b.n	8003b50 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	4013      	ands	r3, r2
 80039ce:	d0e5      	beq.n	800399c <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2102      	movs	r1, #2
 80039dc:	438a      	bics	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e0:	f7ff fb58 	bl	8003094 <HAL_GetTick>
 80039e4:	0003      	movs	r3, r0
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80039e8:	e013      	b.n	8003a12 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039ea:	f7ff fb53 	bl	8003094 <HAL_GetTick>
 80039ee:	0002      	movs	r2, r0
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b0a      	cmp	r3, #10
 80039f6:	d90c      	bls.n	8003a12 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fc:	2280      	movs	r2, #128	@ 0x80
 80039fe:	0292      	lsls	r2, r2, #10
 8003a00:	431a      	orrs	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	2105      	movs	r1, #5
 8003a0c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e09e      	b.n	8003b50 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2202      	movs	r2, #2
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	d1e5      	bne.n	80039ea <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7e1b      	ldrb	r3, [r3, #24]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d108      	bne.n	8003a38 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2180      	movs	r1, #128	@ 0x80
 8003a32:	430a      	orrs	r2, r1
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	e007      	b.n	8003a48 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2180      	movs	r1, #128	@ 0x80
 8003a44:	438a      	bics	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	7e5b      	ldrb	r3, [r3, #25]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d108      	bne.n	8003a62 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2140      	movs	r1, #64	@ 0x40
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	e007      	b.n	8003a72 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2140      	movs	r1, #64	@ 0x40
 8003a6e:	438a      	bics	r2, r1
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	7e9b      	ldrb	r3, [r3, #26]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d108      	bne.n	8003a8c <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2120      	movs	r1, #32
 8003a86:	430a      	orrs	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e007      	b.n	8003a9c <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2120      	movs	r1, #32
 8003a98:	438a      	bics	r2, r1
 8003a9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	7edb      	ldrb	r3, [r3, #27]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d108      	bne.n	8003ab6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2110      	movs	r1, #16
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	e007      	b.n	8003ac6 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2110      	movs	r1, #16
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	7f1b      	ldrb	r3, [r3, #28]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d108      	bne.n	8003ae0 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2108      	movs	r1, #8
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	e007      	b.n	8003af0 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2108      	movs	r1, #8
 8003aec:	438a      	bics	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	7f5b      	ldrb	r3, [r3, #29]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d108      	bne.n	8003b0a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2104      	movs	r1, #4
 8003b04:	430a      	orrs	r2, r1
 8003b06:	601a      	str	r2, [r3, #0]
 8003b08:	e007      	b.n	8003b1a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2104      	movs	r1, #4
 8003b16:	438a      	bics	r2, r1
 8003b18:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689a      	ldr	r2, [r3, #8]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	0011      	movs	r1, r2
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	1e5a      	subs	r2, r3, #1
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	0018      	movs	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b004      	add	sp, #16
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b68:	2013      	movs	r0, #19
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	2120      	movs	r1, #32
 8003b70:	5c52      	ldrb	r2, [r2, r1]
 8003b72:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b74:	0002      	movs	r2, r0
 8003b76:	18bb      	adds	r3, r7, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d004      	beq.n	8003b88 <HAL_CAN_ConfigFilter+0x30>
 8003b7e:	18bb      	adds	r3, r7, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d000      	beq.n	8003b88 <HAL_CAN_ConfigFilter+0x30>
 8003b86:	e0cd      	b.n	8003d24 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	2380      	movs	r3, #128	@ 0x80
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	58d3      	ldr	r3, [r2, r3]
 8003b90:	2201      	movs	r2, #1
 8003b92:	431a      	orrs	r2, r3
 8003b94:	0011      	movs	r1, r2
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	2380      	movs	r3, #128	@ 0x80
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	221f      	movs	r2, #31
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	0013      	movs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	2387      	movs	r3, #135	@ 0x87
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	58d3      	ldr	r3, [r2, r3]
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	43d2      	mvns	r2, r2
 8003bba:	401a      	ands	r2, r3
 8003bbc:	0011      	movs	r1, r2
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	2387      	movs	r3, #135	@ 0x87
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d129      	bne.n	8003c22 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	2383      	movs	r3, #131	@ 0x83
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	58d3      	ldr	r3, [r2, r3]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	43d2      	mvns	r2, r2
 8003bda:	401a      	ands	r2, r3
 8003bdc:	0011      	movs	r1, r2
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	2383      	movs	r3, #131	@ 0x83
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	041b      	lsls	r3, r3, #16
 8003bf2:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003bf8:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	3248      	adds	r2, #72	@ 0x48
 8003bfe:	00d2      	lsls	r2, r2, #3
 8003c00:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	041b      	lsls	r3, r3, #16
 8003c0e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c14:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c16:	6979      	ldr	r1, [r7, #20]
 8003c18:	3348      	adds	r3, #72	@ 0x48
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	18cb      	adds	r3, r1, r3
 8003c1e:	3304      	adds	r3, #4
 8003c20:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d128      	bne.n	8003c7c <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	2383      	movs	r3, #131	@ 0x83
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	58d2      	ldr	r2, [r2, r3]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	0011      	movs	r1, r2
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	2383      	movs	r3, #131	@ 0x83
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	041b      	lsls	r3, r3, #16
 8003c4c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c52:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	3248      	adds	r2, #72	@ 0x48
 8003c58:	00d2      	lsls	r2, r2, #3
 8003c5a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	041b      	lsls	r3, r3, #16
 8003c68:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c6e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c70:	6979      	ldr	r1, [r7, #20]
 8003c72:	3348      	adds	r3, #72	@ 0x48
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	18cb      	adds	r3, r1, r3
 8003c78:	3304      	adds	r3, #4
 8003c7a:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10c      	bne.n	8003c9e <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	2381      	movs	r3, #129	@ 0x81
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	58d3      	ldr	r3, [r2, r3]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	43d2      	mvns	r2, r2
 8003c90:	401a      	ands	r2, r3
 8003c92:	0011      	movs	r1, r2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	2381      	movs	r3, #129	@ 0x81
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	50d1      	str	r1, [r2, r3]
 8003c9c:	e00a      	b.n	8003cb4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	2381      	movs	r3, #129	@ 0x81
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	58d2      	ldr	r2, [r2, r3]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	0011      	movs	r1, r2
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	2381      	movs	r3, #129	@ 0x81
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10c      	bne.n	8003cd6 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	2385      	movs	r3, #133	@ 0x85
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	58d3      	ldr	r3, [r2, r3]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	43d2      	mvns	r2, r2
 8003cc8:	401a      	ands	r2, r3
 8003cca:	0011      	movs	r1, r2
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	2385      	movs	r3, #133	@ 0x85
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	50d1      	str	r1, [r2, r3]
 8003cd4:	e00a      	b.n	8003cec <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	2385      	movs	r3, #133	@ 0x85
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	58d2      	ldr	r2, [r2, r3]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	0011      	movs	r1, r2
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	2385      	movs	r3, #133	@ 0x85
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d10a      	bne.n	8003d0a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	2387      	movs	r3, #135	@ 0x87
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	58d2      	ldr	r2, [r2, r3]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	0011      	movs	r1, r2
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	2387      	movs	r3, #135	@ 0x87
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	2380      	movs	r3, #128	@ 0x80
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	58d3      	ldr	r3, [r2, r3]
 8003d12:	2201      	movs	r2, #1
 8003d14:	4393      	bics	r3, r2
 8003d16:	0019      	movs	r1, r3
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	2380      	movs	r3, #128	@ 0x80
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8003d20:	2300      	movs	r3, #0
 8003d22:	e007      	b.n	8003d34 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	2280      	movs	r2, #128	@ 0x80
 8003d2a:	02d2      	lsls	r2, r2, #11
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
  }
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b006      	add	sp, #24
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	5c9b      	ldrb	r3, [r3, r2]
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d12f      	bne.n	8003db0 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	2102      	movs	r1, #2
 8003d56:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2101      	movs	r1, #1
 8003d64:	438a      	bics	r2, r1
 8003d66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d68:	f7ff f994 	bl	8003094 <HAL_GetTick>
 8003d6c:	0003      	movs	r3, r0
 8003d6e:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d70:	e013      	b.n	8003d9a <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d72:	f7ff f98f 	bl	8003094 <HAL_GetTick>
 8003d76:	0002      	movs	r2, r0
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b0a      	cmp	r3, #10
 8003d7e:	d90c      	bls.n	8003d9a <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d84:	2280      	movs	r2, #128	@ 0x80
 8003d86:	0292      	lsls	r2, r2, #10
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2220      	movs	r2, #32
 8003d92:	2105      	movs	r1, #5
 8003d94:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e012      	b.n	8003dc0 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	4013      	ands	r3, r2
 8003da4:	d1e5      	bne.n	8003d72 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e007      	b.n	8003dc0 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	2280      	movs	r2, #128	@ 0x80
 8003db6:	0312      	lsls	r2, r2, #12
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
  }
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b004      	add	sp, #16
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dd6:	201f      	movs	r0, #31
 8003dd8:	183b      	adds	r3, r7, r0
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	2120      	movs	r1, #32
 8003dde:	5c52      	ldrb	r2, [r2, r1]
 8003de0:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003dea:	183b      	adds	r3, r7, r0
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d004      	beq.n	8003dfc <HAL_CAN_AddTxMessage+0x34>
 8003df2:	183b      	adds	r3, r7, r0
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d000      	beq.n	8003dfc <HAL_CAN_AddTxMessage+0x34>
 8003dfa:	e0ab      	b.n	8003f54 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	2380      	movs	r3, #128	@ 0x80
 8003e00:	04db      	lsls	r3, r3, #19
 8003e02:	4013      	ands	r3, r2
 8003e04:	d10a      	bne.n	8003e1c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	2380      	movs	r3, #128	@ 0x80
 8003e0a:	051b      	lsls	r3, r3, #20
 8003e0c:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e0e:	d105      	bne.n	8003e1c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	2380      	movs	r3, #128	@ 0x80
 8003e14:	055b      	lsls	r3, r3, #21
 8003e16:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e18:	d100      	bne.n	8003e1c <HAL_CAN_AddTxMessage+0x54>
 8003e1a:	e092      	b.n	8003f42 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	0e1b      	lsrs	r3, r3, #24
 8003e20:	2203      	movs	r2, #3
 8003e22:	4013      	ands	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e26:	2201      	movs	r2, #1
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10c      	bne.n	8003e52 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4311      	orrs	r1, r2
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	3218      	adds	r2, #24
 8003e4c:	0112      	lsls	r2, r2, #4
 8003e4e:	50d1      	str	r1, [r2, r3]
 8003e50:	e00f      	b.n	8003e72 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8003e68:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	3218      	adds	r2, #24
 8003e6e:	0112      	lsls	r2, r2, #4
 8003e70:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6819      	ldr	r1, [r3, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	3318      	adds	r3, #24
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	18cb      	adds	r3, r1, r3
 8003e82:	3304      	adds	r3, #4
 8003e84:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	7d1b      	ldrb	r3, [r3, #20]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d112      	bne.n	8003eb4 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	3318      	adds	r3, #24
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	18d3      	adds	r3, r2, r3
 8003e9a:	3304      	adds	r3, #4
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6819      	ldr	r1, [r3, #0]
 8003ea2:	2380      	movs	r3, #128	@ 0x80
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	3318      	adds	r3, #24
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	18cb      	adds	r3, r1, r3
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3307      	adds	r3, #7
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	061a      	lsls	r2, r3, #24
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3306      	adds	r3, #6
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	3305      	adds	r3, #5
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	021b      	lsls	r3, r3, #8
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	0019      	movs	r1, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6818      	ldr	r0, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	6979      	ldr	r1, [r7, #20]
 8003ee0:	23c6      	movs	r3, #198	@ 0xc6
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	0109      	lsls	r1, r1, #4
 8003ee6:	1841      	adds	r1, r0, r1
 8003ee8:	18cb      	adds	r3, r1, r3
 8003eea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3303      	adds	r3, #3
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	061a      	lsls	r2, r3, #24
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3302      	adds	r3, #2
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3301      	adds	r3, #1
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	021b      	lsls	r3, r3, #8
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	0019      	movs	r1, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6818      	ldr	r0, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	6979      	ldr	r1, [r7, #20]
 8003f16:	23c4      	movs	r3, #196	@ 0xc4
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	0109      	lsls	r1, r1, #4
 8003f1c:	1841      	adds	r1, r0, r1
 8003f1e:	18cb      	adds	r3, r1, r3
 8003f20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	3218      	adds	r2, #24
 8003f2a:	0112      	lsls	r2, r2, #4
 8003f2c:	58d2      	ldr	r2, [r2, r3]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	4311      	orrs	r1, r2
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	3218      	adds	r2, #24
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e010      	b.n	8003f64 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	2280      	movs	r2, #128	@ 0x80
 8003f48:	0392      	lsls	r2, r2, #14
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e007      	b.n	8003f64 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f58:	2280      	movs	r2, #128	@ 0x80
 8003f5a:	02d2      	lsls	r2, r2, #11
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
  }
}
 8003f64:	0018      	movs	r0, r3
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b008      	add	sp, #32
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
 8003f78:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f7a:	2017      	movs	r0, #23
 8003f7c:	183b      	adds	r3, r7, r0
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	2120      	movs	r1, #32
 8003f82:	5c52      	ldrb	r2, [r2, r1]
 8003f84:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003f86:	0002      	movs	r2, r0
 8003f88:	18bb      	adds	r3, r7, r2
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d004      	beq.n	8003f9a <HAL_CAN_GetRxMessage+0x2e>
 8003f90:	18bb      	adds	r3, r7, r2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d000      	beq.n	8003f9a <HAL_CAN_GetRxMessage+0x2e>
 8003f98:	e107      	b.n	80041aa <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10e      	bne.n	8003fbe <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	4013      	ands	r3, r2
 8003faa:	d117      	bne.n	8003fdc <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	2280      	movs	r2, #128	@ 0x80
 8003fb2:	0392      	lsls	r2, r2, #14
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e0fd      	b.n	80041ba <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	2203      	movs	r2, #3
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d108      	bne.n	8003fdc <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	2280      	movs	r2, #128	@ 0x80
 8003fd0:	0392      	lsls	r2, r2, #14
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0ee      	b.n	80041ba <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	321b      	adds	r2, #27
 8003fe4:	0112      	lsls	r2, r2, #4
 8003fe6:	58d3      	ldr	r3, [r2, r3]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	401a      	ands	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	321b      	adds	r2, #27
 8004000:	0112      	lsls	r2, r2, #4
 8004002:	58d3      	ldr	r3, [r2, r3]
 8004004:	0d5b      	lsrs	r3, r3, #21
 8004006:	055b      	lsls	r3, r3, #21
 8004008:	0d5a      	lsrs	r2, r3, #21
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	e00a      	b.n	8004026 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	321b      	adds	r2, #27
 8004018:	0112      	lsls	r2, r2, #4
 800401a:	58d3      	ldr	r3, [r2, r3]
 800401c:	08db      	lsrs	r3, r3, #3
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	321b      	adds	r2, #27
 800402e:	0112      	lsls	r2, r2, #4
 8004030:	58d3      	ldr	r3, [r2, r3]
 8004032:	2202      	movs	r2, #2
 8004034:	401a      	ands	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	331b      	adds	r3, #27
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	18d3      	adds	r3, r2, r3
 8004046:	3304      	adds	r3, #4
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2208      	movs	r2, #8
 800404c:	4013      	ands	r3, r2
 800404e:	d003      	beq.n	8004058 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2208      	movs	r2, #8
 8004054:	611a      	str	r2, [r3, #16]
 8004056:	e00b      	b.n	8004070 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	331b      	adds	r3, #27
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	18d3      	adds	r3, r2, r3
 8004064:	3304      	adds	r3, #4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	220f      	movs	r2, #15
 800406a:	401a      	ands	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	331b      	adds	r3, #27
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	18d3      	adds	r3, r2, r3
 800407c:	3304      	adds	r3, #4
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	22ff      	movs	r2, #255	@ 0xff
 8004084:	401a      	ands	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	331b      	adds	r3, #27
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	18d3      	adds	r3, r2, r3
 8004096:	3304      	adds	r3, #4
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	0c1a      	lsrs	r2, r3, #16
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6819      	ldr	r1, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	23dc      	movs	r3, #220	@ 0xdc
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	0112      	lsls	r2, r2, #4
 80040b0:	188a      	adds	r2, r1, r2
 80040b2:	18d3      	adds	r3, r2, r3
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6819      	ldr	r1, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	23dc      	movs	r3, #220	@ 0xdc
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	188a      	adds	r2, r1, r2
 80040ca:	18d3      	adds	r3, r2, r3
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	0a1a      	lsrs	r2, r3, #8
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	3301      	adds	r3, #1
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6819      	ldr	r1, [r3, #0]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	23dc      	movs	r3, #220	@ 0xdc
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	0112      	lsls	r2, r2, #4
 80040e4:	188a      	adds	r2, r1, r2
 80040e6:	18d3      	adds	r3, r2, r3
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	0c1a      	lsrs	r2, r3, #16
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	3302      	adds	r3, #2
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6819      	ldr	r1, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	23dc      	movs	r3, #220	@ 0xdc
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	0112      	lsls	r2, r2, #4
 8004100:	188a      	adds	r2, r1, r2
 8004102:	18d3      	adds	r3, r2, r3
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	0e1a      	lsrs	r2, r3, #24
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	3303      	adds	r3, #3
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6819      	ldr	r1, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	23de      	movs	r3, #222	@ 0xde
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	0112      	lsls	r2, r2, #4
 800411c:	188a      	adds	r2, r1, r2
 800411e:	18d3      	adds	r3, r2, r3
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	3304      	adds	r3, #4
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6819      	ldr	r1, [r3, #0]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	23de      	movs	r3, #222	@ 0xde
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	0112      	lsls	r2, r2, #4
 8004136:	188a      	adds	r2, r1, r2
 8004138:	18d3      	adds	r3, r2, r3
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	0a1a      	lsrs	r2, r3, #8
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	3305      	adds	r3, #5
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6819      	ldr	r1, [r3, #0]
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	23de      	movs	r3, #222	@ 0xde
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	0112      	lsls	r2, r2, #4
 8004152:	188a      	adds	r2, r1, r2
 8004154:	18d3      	adds	r3, r2, r3
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	0c1a      	lsrs	r2, r3, #16
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	3306      	adds	r3, #6
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	23de      	movs	r3, #222	@ 0xde
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	0112      	lsls	r2, r2, #4
 800416e:	188a      	adds	r2, r1, r2
 8004170:	18d3      	adds	r3, r2, r3
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0e1a      	lsrs	r2, r3, #24
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	3307      	adds	r3, #7
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d108      	bne.n	8004196 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2120      	movs	r1, #32
 8004190:	430a      	orrs	r2, r1
 8004192:	60da      	str	r2, [r3, #12]
 8004194:	e007      	b.n	80041a6 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2120      	movs	r1, #32
 80041a2:	430a      	orrs	r2, r1
 80041a4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e007      	b.n	80041ba <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	2280      	movs	r2, #128	@ 0x80
 80041b0:	02d2      	lsls	r2, r2, #11
 80041b2:	431a      	orrs	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
  }
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b006      	add	sp, #24
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041cc:	200f      	movs	r0, #15
 80041ce:	183b      	adds	r3, r7, r0
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	2120      	movs	r1, #32
 80041d4:	5c52      	ldrb	r2, [r2, r1]
 80041d6:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80041d8:	0002      	movs	r2, r0
 80041da:	18bb      	adds	r3, r7, r2
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d003      	beq.n	80041ea <HAL_CAN_ActivateNotification+0x28>
 80041e2:	18bb      	adds	r3, r7, r2
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d109      	bne.n	80041fe <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6959      	ldr	r1, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	683a      	ldr	r2, [r7, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e007      	b.n	800420e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	2280      	movs	r2, #128	@ 0x80
 8004204:	02d2      	lsls	r2, r2, #11
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
  }
}
 800420e:	0018      	movs	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	b004      	add	sp, #16
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b08a      	sub	sp, #40	@ 0x28
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800421e:	2300      	movs	r3, #0
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691b      	ldr	r3, [r3, #16]
 8004248:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	2201      	movs	r2, #1
 8004256:	4013      	ands	r3, r2
 8004258:	d100      	bne.n	800425c <HAL_CAN_IRQHandler+0x46>
 800425a:	e084      	b.n	8004366 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	2201      	movs	r2, #1
 8004260:	4013      	ands	r3, r2
 8004262:	d024      	beq.n	80042ae <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2201      	movs	r2, #1
 800426a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	2202      	movs	r2, #2
 8004270:	4013      	ands	r3, r2
 8004272:	d004      	beq.n	800427e <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	0018      	movs	r0, r3
 8004278:	f000 f981 	bl	800457e <HAL_CAN_TxMailbox0CompleteCallback>
 800427c:	e017      	b.n	80042ae <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	2204      	movs	r2, #4
 8004282:	4013      	ands	r3, r2
 8004284:	d005      	beq.n	8004292 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	2280      	movs	r2, #128	@ 0x80
 800428a:	0112      	lsls	r2, r2, #4
 800428c:	4313      	orrs	r3, r2
 800428e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004290:	e00d      	b.n	80042ae <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2208      	movs	r2, #8
 8004296:	4013      	ands	r3, r2
 8004298:	d005      	beq.n	80042a6 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	2280      	movs	r2, #128	@ 0x80
 800429e:	0152      	lsls	r2, r2, #5
 80042a0:	4313      	orrs	r3, r2
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042a4:	e003      	b.n	80042ae <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 f980 	bl	80045ae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	2380      	movs	r3, #128	@ 0x80
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4013      	ands	r3, r2
 80042b6:	d028      	beq.n	800430a <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2280      	movs	r2, #128	@ 0x80
 80042be:	0052      	lsls	r2, r2, #1
 80042c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4013      	ands	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f95d 	bl	800458e <HAL_CAN_TxMailbox1CompleteCallback>
 80042d4:	e019      	b.n	800430a <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	2380      	movs	r3, #128	@ 0x80
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	4013      	ands	r3, r2
 80042de:	d005      	beq.n	80042ec <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	0192      	lsls	r2, r2, #6
 80042e6:	4313      	orrs	r3, r2
 80042e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042ea:	e00e      	b.n	800430a <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	2380      	movs	r3, #128	@ 0x80
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	4013      	ands	r3, r2
 80042f4:	d005      	beq.n	8004302 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	2280      	movs	r2, #128	@ 0x80
 80042fa:	01d2      	lsls	r2, r2, #7
 80042fc:	4313      	orrs	r3, r2
 80042fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004300:	e003      	b.n	800430a <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	0018      	movs	r0, r3
 8004306:	f000 f95a 	bl	80045be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	2380      	movs	r3, #128	@ 0x80
 800430e:	025b      	lsls	r3, r3, #9
 8004310:	4013      	ands	r3, r2
 8004312:	d028      	beq.n	8004366 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2280      	movs	r2, #128	@ 0x80
 800431a:	0252      	lsls	r2, r2, #9
 800431c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	2380      	movs	r3, #128	@ 0x80
 8004322:	029b      	lsls	r3, r3, #10
 8004324:	4013      	ands	r3, r2
 8004326:	d004      	beq.n	8004332 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f937 	bl	800459e <HAL_CAN_TxMailbox2CompleteCallback>
 8004330:	e019      	b.n	8004366 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	2380      	movs	r3, #128	@ 0x80
 8004336:	02db      	lsls	r3, r3, #11
 8004338:	4013      	ands	r3, r2
 800433a:	d005      	beq.n	8004348 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	2280      	movs	r2, #128	@ 0x80
 8004340:	0212      	lsls	r2, r2, #8
 8004342:	4313      	orrs	r3, r2
 8004344:	627b      	str	r3, [r7, #36]	@ 0x24
 8004346:	e00e      	b.n	8004366 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	031b      	lsls	r3, r3, #12
 800434e:	4013      	ands	r3, r2
 8004350:	d005      	beq.n	800435e <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004354:	2280      	movs	r2, #128	@ 0x80
 8004356:	0252      	lsls	r2, r2, #9
 8004358:	4313      	orrs	r3, r2
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
 800435c:	e003      	b.n	8004366 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	0018      	movs	r0, r3
 8004362:	f000 f934 	bl	80045ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	2208      	movs	r2, #8
 800436a:	4013      	ands	r3, r2
 800436c:	d00c      	beq.n	8004388 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	2210      	movs	r2, #16
 8004372:	4013      	ands	r3, r2
 8004374:	d008      	beq.n	8004388 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	2280      	movs	r2, #128	@ 0x80
 800437a:	0092      	lsls	r2, r2, #2
 800437c:	4313      	orrs	r3, r2
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2210      	movs	r2, #16
 8004386:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	2204      	movs	r2, #4
 800438c:	4013      	ands	r3, r2
 800438e:	d00b      	beq.n	80043a8 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2208      	movs	r2, #8
 8004394:	4013      	ands	r3, r2
 8004396:	d007      	beq.n	80043a8 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2208      	movs	r2, #8
 800439e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 f91b 	bl	80045de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	2202      	movs	r2, #2
 80043ac:	4013      	ands	r3, r2
 80043ae:	d009      	beq.n	80043c4 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2203      	movs	r2, #3
 80043b8:	4013      	ands	r3, r2
 80043ba:	d003      	beq.n	80043c4 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	0018      	movs	r0, r3
 80043c0:	f7fc fea6 	bl	8001110 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2240      	movs	r2, #64	@ 0x40
 80043c8:	4013      	ands	r3, r2
 80043ca:	d00c      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2210      	movs	r2, #16
 80043d0:	4013      	ands	r3, r2
 80043d2:	d008      	beq.n	80043e6 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	2280      	movs	r2, #128	@ 0x80
 80043d8:	00d2      	lsls	r2, r2, #3
 80043da:	4313      	orrs	r3, r2
 80043dc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2210      	movs	r2, #16
 80043e4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	2220      	movs	r2, #32
 80043ea:	4013      	ands	r3, r2
 80043ec:	d00b      	beq.n	8004406 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2208      	movs	r2, #8
 80043f2:	4013      	ands	r3, r2
 80043f4:	d007      	beq.n	8004406 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2208      	movs	r2, #8
 80043fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	0018      	movs	r0, r3
 8004402:	f000 f8fc 	bl	80045fe <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	2210      	movs	r2, #16
 800440a:	4013      	ands	r3, r2
 800440c:	d009      	beq.n	8004422 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2203      	movs	r2, #3
 8004416:	4013      	ands	r3, r2
 8004418:	d003      	beq.n	8004422 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	0018      	movs	r0, r3
 800441e:	f000 f8e6 	bl	80045ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004422:	6a3a      	ldr	r2, [r7, #32]
 8004424:	2380      	movs	r3, #128	@ 0x80
 8004426:	029b      	lsls	r3, r3, #10
 8004428:	4013      	ands	r3, r2
 800442a:	d00b      	beq.n	8004444 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2210      	movs	r2, #16
 8004430:	4013      	ands	r3, r2
 8004432:	d007      	beq.n	8004444 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2210      	movs	r2, #16
 800443a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	0018      	movs	r0, r3
 8004440:	f000 f8e5 	bl	800460e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004444:	6a3a      	ldr	r2, [r7, #32]
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	025b      	lsls	r3, r3, #9
 800444a:	4013      	ands	r3, r2
 800444c:	d00b      	beq.n	8004466 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2208      	movs	r2, #8
 8004452:	4013      	ands	r3, r2
 8004454:	d007      	beq.n	8004466 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2208      	movs	r2, #8
 800445c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	0018      	movs	r0, r3
 8004462:	f000 f8dc 	bl	800461e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004466:	6a3a      	ldr	r2, [r7, #32]
 8004468:	2380      	movs	r3, #128	@ 0x80
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	4013      	ands	r3, r2
 800446e:	d100      	bne.n	8004472 <HAL_CAN_IRQHandler+0x25c>
 8004470:	e074      	b.n	800455c <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2204      	movs	r2, #4
 8004476:	4013      	ands	r3, r2
 8004478:	d100      	bne.n	800447c <HAL_CAN_IRQHandler+0x266>
 800447a:	e06b      	b.n	8004554 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800447c:	6a3a      	ldr	r2, [r7, #32]
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	005b      	lsls	r3, r3, #1
 8004482:	4013      	ands	r3, r2
 8004484:	d007      	beq.n	8004496 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2201      	movs	r2, #1
 800448a:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800448c:	d003      	beq.n	8004496 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	2201      	movs	r2, #1
 8004492:	4313      	orrs	r3, r2
 8004494:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004496:	6a3a      	ldr	r2, [r7, #32]
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4013      	ands	r3, r2
 800449e:	d007      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2202      	movs	r2, #2
 80044a4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044a6:	d003      	beq.n	80044b0 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044aa:	2202      	movs	r2, #2
 80044ac:	4313      	orrs	r3, r2
 80044ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044b0:	6a3a      	ldr	r2, [r7, #32]
 80044b2:	2380      	movs	r3, #128	@ 0x80
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	4013      	ands	r3, r2
 80044b8:	d007      	beq.n	80044ca <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2204      	movs	r2, #4
 80044be:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044c0:	d003      	beq.n	80044ca <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	2204      	movs	r2, #4
 80044c6:	4313      	orrs	r3, r2
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	2380      	movs	r3, #128	@ 0x80
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	4013      	ands	r3, r2
 80044d2:	d03f      	beq.n	8004554 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2270      	movs	r2, #112	@ 0x70
 80044d8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044da:	d03b      	beq.n	8004554 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2270      	movs	r2, #112	@ 0x70
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b60      	cmp	r3, #96	@ 0x60
 80044e4:	d027      	beq.n	8004536 <HAL_CAN_IRQHandler+0x320>
 80044e6:	d82c      	bhi.n	8004542 <HAL_CAN_IRQHandler+0x32c>
 80044e8:	2b50      	cmp	r3, #80	@ 0x50
 80044ea:	d01f      	beq.n	800452c <HAL_CAN_IRQHandler+0x316>
 80044ec:	d829      	bhi.n	8004542 <HAL_CAN_IRQHandler+0x32c>
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d017      	beq.n	8004522 <HAL_CAN_IRQHandler+0x30c>
 80044f2:	d826      	bhi.n	8004542 <HAL_CAN_IRQHandler+0x32c>
 80044f4:	2b30      	cmp	r3, #48	@ 0x30
 80044f6:	d00f      	beq.n	8004518 <HAL_CAN_IRQHandler+0x302>
 80044f8:	d823      	bhi.n	8004542 <HAL_CAN_IRQHandler+0x32c>
 80044fa:	2b10      	cmp	r3, #16
 80044fc:	d002      	beq.n	8004504 <HAL_CAN_IRQHandler+0x2ee>
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d005      	beq.n	800450e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004502:	e01e      	b.n	8004542 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	2208      	movs	r2, #8
 8004508:	4313      	orrs	r3, r2
 800450a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800450c:	e01a      	b.n	8004544 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800450e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004510:	2210      	movs	r2, #16
 8004512:	4313      	orrs	r3, r2
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004516:	e015      	b.n	8004544 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	2220      	movs	r2, #32
 800451c:	4313      	orrs	r3, r2
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004520:	e010      	b.n	8004544 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	2240      	movs	r2, #64	@ 0x40
 8004526:	4313      	orrs	r3, r2
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800452a:	e00b      	b.n	8004544 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	2280      	movs	r2, #128	@ 0x80
 8004530:	4313      	orrs	r3, r2
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004534:	e006      	b.n	8004544 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004538:	2280      	movs	r2, #128	@ 0x80
 800453a:	0052      	lsls	r2, r2, #1
 800453c:	4313      	orrs	r3, r2
 800453e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004540:	e000      	b.n	8004544 <HAL_CAN_IRQHandler+0x32e>
            break;
 8004542:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2170      	movs	r1, #112	@ 0x70
 8004550:	438a      	bics	r2, r1
 8004552:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2204      	movs	r2, #4
 800455a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800455c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004568:	431a      	orrs	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0018      	movs	r0, r3
 8004572:	f000 f85c 	bl	800462e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004576:	46c0      	nop			@ (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b00a      	add	sp, #40	@ 0x28
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b082      	sub	sp, #8
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	46bd      	mov	sp, r7
 800458a:	b002      	add	sp, #8
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b082      	sub	sp, #8
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}

0800459e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b082      	sub	sp, #8
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	46bd      	mov	sp, r7
 80045aa:	b002      	add	sp, #8
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	46bd      	mov	sp, r7
 80045ba:	b002      	add	sp, #8
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b082      	sub	sp, #8
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b002      	add	sp, #8
 80045cc:	bd80      	pop	{r7, pc}

080045ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b002      	add	sp, #8
 80045dc:	bd80      	pop	{r7, pc}

080045de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b082      	sub	sp, #8
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b002      	add	sp, #8
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b082      	sub	sp, #8
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b002      	add	sp, #8
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	46bd      	mov	sp, r7
 800460a:	b002      	add	sp, #8
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	46bd      	mov	sp, r7
 800461a:	b002      	add	sp, #8
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004626:	46c0      	nop			@ (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004636:	46c0      	nop			@ (mov r8, r8)
 8004638:	46bd      	mov	sp, r7
 800463a:	b002      	add	sp, #8
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	0002      	movs	r2, r0
 8004648:	1dfb      	adds	r3, r7, #7
 800464a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800464c:	1dfb      	adds	r3, r7, #7
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	2b7f      	cmp	r3, #127	@ 0x7f
 8004652:	d809      	bhi.n	8004668 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004654:	1dfb      	adds	r3, r7, #7
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	001a      	movs	r2, r3
 800465a:	231f      	movs	r3, #31
 800465c:	401a      	ands	r2, r3
 800465e:	4b04      	ldr	r3, [pc, #16]	@ (8004670 <__NVIC_EnableIRQ+0x30>)
 8004660:	2101      	movs	r1, #1
 8004662:	4091      	lsls	r1, r2
 8004664:	000a      	movs	r2, r1
 8004666:	601a      	str	r2, [r3, #0]
  }
}
 8004668:	46c0      	nop			@ (mov r8, r8)
 800466a:	46bd      	mov	sp, r7
 800466c:	b002      	add	sp, #8
 800466e:	bd80      	pop	{r7, pc}
 8004670:	e000e100 	.word	0xe000e100

08004674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004674:	b590      	push	{r4, r7, lr}
 8004676:	b083      	sub	sp, #12
 8004678:	af00      	add	r7, sp, #0
 800467a:	0002      	movs	r2, r0
 800467c:	6039      	str	r1, [r7, #0]
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004682:	1dfb      	adds	r3, r7, #7
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b7f      	cmp	r3, #127	@ 0x7f
 8004688:	d828      	bhi.n	80046dc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800468a:	4a2f      	ldr	r2, [pc, #188]	@ (8004748 <__NVIC_SetPriority+0xd4>)
 800468c:	1dfb      	adds	r3, r7, #7
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b25b      	sxtb	r3, r3
 8004692:	089b      	lsrs	r3, r3, #2
 8004694:	33c0      	adds	r3, #192	@ 0xc0
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	589b      	ldr	r3, [r3, r2]
 800469a:	1dfa      	adds	r2, r7, #7
 800469c:	7812      	ldrb	r2, [r2, #0]
 800469e:	0011      	movs	r1, r2
 80046a0:	2203      	movs	r2, #3
 80046a2:	400a      	ands	r2, r1
 80046a4:	00d2      	lsls	r2, r2, #3
 80046a6:	21ff      	movs	r1, #255	@ 0xff
 80046a8:	4091      	lsls	r1, r2
 80046aa:	000a      	movs	r2, r1
 80046ac:	43d2      	mvns	r2, r2
 80046ae:	401a      	ands	r2, r3
 80046b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	019b      	lsls	r3, r3, #6
 80046b6:	22ff      	movs	r2, #255	@ 0xff
 80046b8:	401a      	ands	r2, r3
 80046ba:	1dfb      	adds	r3, r7, #7
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	0018      	movs	r0, r3
 80046c0:	2303      	movs	r3, #3
 80046c2:	4003      	ands	r3, r0
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046c8:	481f      	ldr	r0, [pc, #124]	@ (8004748 <__NVIC_SetPriority+0xd4>)
 80046ca:	1dfb      	adds	r3, r7, #7
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b25b      	sxtb	r3, r3
 80046d0:	089b      	lsrs	r3, r3, #2
 80046d2:	430a      	orrs	r2, r1
 80046d4:	33c0      	adds	r3, #192	@ 0xc0
 80046d6:	009b      	lsls	r3, r3, #2
 80046d8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046da:	e031      	b.n	8004740 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046dc:	4a1b      	ldr	r2, [pc, #108]	@ (800474c <__NVIC_SetPriority+0xd8>)
 80046de:	1dfb      	adds	r3, r7, #7
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	0019      	movs	r1, r3
 80046e4:	230f      	movs	r3, #15
 80046e6:	400b      	ands	r3, r1
 80046e8:	3b08      	subs	r3, #8
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	3306      	adds	r3, #6
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	18d3      	adds	r3, r2, r3
 80046f2:	3304      	adds	r3, #4
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	1dfa      	adds	r2, r7, #7
 80046f8:	7812      	ldrb	r2, [r2, #0]
 80046fa:	0011      	movs	r1, r2
 80046fc:	2203      	movs	r2, #3
 80046fe:	400a      	ands	r2, r1
 8004700:	00d2      	lsls	r2, r2, #3
 8004702:	21ff      	movs	r1, #255	@ 0xff
 8004704:	4091      	lsls	r1, r2
 8004706:	000a      	movs	r2, r1
 8004708:	43d2      	mvns	r2, r2
 800470a:	401a      	ands	r2, r3
 800470c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	019b      	lsls	r3, r3, #6
 8004712:	22ff      	movs	r2, #255	@ 0xff
 8004714:	401a      	ands	r2, r3
 8004716:	1dfb      	adds	r3, r7, #7
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	0018      	movs	r0, r3
 800471c:	2303      	movs	r3, #3
 800471e:	4003      	ands	r3, r0
 8004720:	00db      	lsls	r3, r3, #3
 8004722:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004724:	4809      	ldr	r0, [pc, #36]	@ (800474c <__NVIC_SetPriority+0xd8>)
 8004726:	1dfb      	adds	r3, r7, #7
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	001c      	movs	r4, r3
 800472c:	230f      	movs	r3, #15
 800472e:	4023      	ands	r3, r4
 8004730:	3b08      	subs	r3, #8
 8004732:	089b      	lsrs	r3, r3, #2
 8004734:	430a      	orrs	r2, r1
 8004736:	3306      	adds	r3, #6
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	18c3      	adds	r3, r0, r3
 800473c:	3304      	adds	r3, #4
 800473e:	601a      	str	r2, [r3, #0]
}
 8004740:	46c0      	nop			@ (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	b003      	add	sp, #12
 8004746:	bd90      	pop	{r4, r7, pc}
 8004748:	e000e100 	.word	0xe000e100
 800474c:	e000ed00 	.word	0xe000ed00

08004750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1e5a      	subs	r2, r3, #1
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	045b      	lsls	r3, r3, #17
 8004760:	429a      	cmp	r2, r3
 8004762:	d301      	bcc.n	8004768 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004764:	2301      	movs	r3, #1
 8004766:	e010      	b.n	800478a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004768:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <SysTick_Config+0x44>)
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	3a01      	subs	r2, #1
 800476e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004770:	2301      	movs	r3, #1
 8004772:	425b      	negs	r3, r3
 8004774:	2103      	movs	r1, #3
 8004776:	0018      	movs	r0, r3
 8004778:	f7ff ff7c 	bl	8004674 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800477c:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <SysTick_Config+0x44>)
 800477e:	2200      	movs	r2, #0
 8004780:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004782:	4b04      	ldr	r3, [pc, #16]	@ (8004794 <SysTick_Config+0x44>)
 8004784:	2207      	movs	r2, #7
 8004786:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004788:	2300      	movs	r3, #0
}
 800478a:	0018      	movs	r0, r3
 800478c:	46bd      	mov	sp, r7
 800478e:	b002      	add	sp, #8
 8004790:	bd80      	pop	{r7, pc}
 8004792:	46c0      	nop			@ (mov r8, r8)
 8004794:	e000e010 	.word	0xe000e010

08004798 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	210f      	movs	r1, #15
 80047a4:	187b      	adds	r3, r7, r1
 80047a6:	1c02      	adds	r2, r0, #0
 80047a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	187b      	adds	r3, r7, r1
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	b25b      	sxtb	r3, r3
 80047b2:	0011      	movs	r1, r2
 80047b4:	0018      	movs	r0, r3
 80047b6:	f7ff ff5d 	bl	8004674 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80047ba:	46c0      	nop			@ (mov r8, r8)
 80047bc:	46bd      	mov	sp, r7
 80047be:	b004      	add	sp, #16
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	0002      	movs	r2, r0
 80047ca:	1dfb      	adds	r3, r7, #7
 80047cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047ce:	1dfb      	adds	r3, r7, #7
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b25b      	sxtb	r3, r3
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7ff ff33 	bl	8004640 <__NVIC_EnableIRQ>
}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	b002      	add	sp, #8
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b082      	sub	sp, #8
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	0018      	movs	r0, r3
 80047ee:	f7ff ffaf 	bl	8004750 <SysTick_Config>
 80047f2:	0003      	movs	r3, r0
}
 80047f4:	0018      	movs	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004804:	2300      	movs	r3, #0
 8004806:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e036      	b.n	8004880 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2221      	movs	r2, #33	@ 0x21
 8004816:	2102      	movs	r1, #2
 8004818:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <HAL_DMA_Init+0x8c>)
 8004826:	4013      	ands	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004832:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	0018      	movs	r0, r3
 8004864:	f000 f946 	bl	8004af4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2221      	movs	r2, #33	@ 0x21
 8004872:	2101      	movs	r1, #1
 8004874:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2220      	movs	r2, #32
 800487a:	2100      	movs	r1, #0
 800487c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b004      	add	sp, #16
 8004886:	bd80      	pop	{r7, pc}
 8004888:	ffffc00f 	.word	0xffffc00f

0800488c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
 8004898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800489a:	2317      	movs	r3, #23
 800489c:	18fb      	adds	r3, r7, r3
 800489e:	2200      	movs	r2, #0
 80048a0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	5c9b      	ldrb	r3, [r3, r2]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d101      	bne.n	80048b0 <HAL_DMA_Start_IT+0x24>
 80048ac:	2302      	movs	r3, #2
 80048ae:	e04f      	b.n	8004950 <HAL_DMA_Start_IT+0xc4>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2220      	movs	r2, #32
 80048b4:	2101      	movs	r1, #1
 80048b6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2221      	movs	r2, #33	@ 0x21
 80048bc:	5c9b      	ldrb	r3, [r3, r2]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d13a      	bne.n	800493a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2221      	movs	r2, #33	@ 0x21
 80048c8:	2102      	movs	r1, #2
 80048ca:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2101      	movs	r1, #1
 80048de:	438a      	bics	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	68b9      	ldr	r1, [r7, #8]
 80048e8:	68f8      	ldr	r0, [r7, #12]
 80048ea:	f000 f8d7 	bl	8004a9c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d008      	beq.n	8004908 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	210e      	movs	r1, #14
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e00f      	b.n	8004928 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	210a      	movs	r1, #10
 8004914:	430a      	orrs	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2104      	movs	r1, #4
 8004924:	438a      	bics	r2, r1
 8004926:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2101      	movs	r1, #1
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	e007      	b.n	800494a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	2100      	movs	r1, #0
 8004940:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004942:	2317      	movs	r3, #23
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2202      	movs	r2, #2
 8004948:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800494a:	2317      	movs	r3, #23
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	781b      	ldrb	r3, [r3, #0]
}
 8004950:	0018      	movs	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	b006      	add	sp, #24
 8004956:	bd80      	pop	{r7, pc}

08004958 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	2204      	movs	r2, #4
 8004976:	409a      	lsls	r2, r3
 8004978:	0013      	movs	r3, r2
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4013      	ands	r3, r2
 800497e:	d024      	beq.n	80049ca <HAL_DMA_IRQHandler+0x72>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2204      	movs	r2, #4
 8004984:	4013      	ands	r3, r2
 8004986:	d020      	beq.n	80049ca <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2220      	movs	r2, #32
 8004990:	4013      	ands	r3, r2
 8004992:	d107      	bne.n	80049a4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2104      	movs	r1, #4
 80049a0:	438a      	bics	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ac:	2104      	movs	r1, #4
 80049ae:	4091      	lsls	r1, r2
 80049b0:	000a      	movs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d100      	bne.n	80049be <HAL_DMA_IRQHandler+0x66>
 80049bc:	e06a      	b.n	8004a94 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	0010      	movs	r0, r2
 80049c6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049c8:	e064      	b.n	8004a94 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	2202      	movs	r2, #2
 80049d0:	409a      	lsls	r2, r3
 80049d2:	0013      	movs	r3, r2
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4013      	ands	r3, r2
 80049d8:	d02b      	beq.n	8004a32 <HAL_DMA_IRQHandler+0xda>
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2202      	movs	r2, #2
 80049de:	4013      	ands	r3, r2
 80049e0:	d027      	beq.n	8004a32 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2220      	movs	r2, #32
 80049ea:	4013      	ands	r3, r2
 80049ec:	d10b      	bne.n	8004a06 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	210a      	movs	r1, #10
 80049fa:	438a      	bics	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2221      	movs	r2, #33	@ 0x21
 8004a02:	2101      	movs	r1, #1
 8004a04:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a0e:	2102      	movs	r1, #2
 8004a10:	4091      	lsls	r1, r2
 8004a12:	000a      	movs	r2, r1
 8004a14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d036      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	0010      	movs	r0, r2
 8004a2e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a30:	e030      	b.n	8004a94 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	2208      	movs	r2, #8
 8004a38:	409a      	lsls	r2, r3
 8004a3a:	0013      	movs	r3, r2
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	d028      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x13c>
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	2208      	movs	r2, #8
 8004a46:	4013      	ands	r3, r2
 8004a48:	d024      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	210e      	movs	r1, #14
 8004a56:	438a      	bics	r2, r1
 8004a58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a62:	2101      	movs	r1, #1
 8004a64:	4091      	lsls	r1, r2
 8004a66:	000a      	movs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2221      	movs	r2, #33	@ 0x21
 8004a74:	2101      	movs	r1, #1
 8004a76:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d005      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	0010      	movs	r0, r2
 8004a90:	4798      	blx	r3
    }
  }
}
 8004a92:	e7ff      	b.n	8004a94 <HAL_DMA_IRQHandler+0x13c>
 8004a94:	46c0      	nop			@ (mov r8, r8)
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	607a      	str	r2, [r7, #4]
 8004aa8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	4091      	lsls	r1, r2
 8004ab6:	000a      	movs	r2, r1
 8004ab8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b10      	cmp	r3, #16
 8004ac8:	d108      	bne.n	8004adc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ada:	e007      	b.n	8004aec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	60da      	str	r2, [r3, #12]
}
 8004aec:	46c0      	nop			@ (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b004      	add	sp, #16
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a08      	ldr	r2, [pc, #32]	@ (8004b24 <DMA_CalcBaseAndBitshift+0x30>)
 8004b02:	4694      	mov	ip, r2
 8004b04:	4463      	add	r3, ip
 8004b06:	2114      	movs	r1, #20
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7fb fafd 	bl	8000108 <__udivsi3>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	009a      	lsls	r2, r3, #2
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a03      	ldr	r2, [pc, #12]	@ (8004b28 <DMA_CalcBaseAndBitshift+0x34>)
 8004b1a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004b1c:	46c0      	nop			@ (mov r8, r8)
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	b002      	add	sp, #8
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	bffdfff8 	.word	0xbffdfff8
 8004b28:	40020000 	.word	0x40020000

08004b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b36:	2300      	movs	r3, #0
 8004b38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b3a:	e149      	b.n	8004dd0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2101      	movs	r1, #1
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4091      	lsls	r1, r2
 8004b46:	000a      	movs	r2, r1
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d100      	bne.n	8004b54 <HAL_GPIO_Init+0x28>
 8004b52:	e13a      	b.n	8004dca <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2203      	movs	r2, #3
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d005      	beq.n	8004b6c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2203      	movs	r2, #3
 8004b66:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d130      	bne.n	8004bce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	2203      	movs	r2, #3
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	0013      	movs	r3, r2
 8004b7c:	43da      	mvns	r2, r3
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4013      	ands	r3, r2
 8004b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	68da      	ldr	r2, [r3, #12]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	409a      	lsls	r2, r3
 8004b8e:	0013      	movs	r3, r2
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	409a      	lsls	r2, r3
 8004ba8:	0013      	movs	r3, r2
 8004baa:	43da      	mvns	r2, r3
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	4013      	ands	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	2201      	movs	r2, #1
 8004bba:	401a      	ands	r2, r3
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	409a      	lsls	r2, r3
 8004bc0:	0013      	movs	r3, r2
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d017      	beq.n	8004c0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	2203      	movs	r2, #3
 8004be6:	409a      	lsls	r2, r3
 8004be8:	0013      	movs	r3, r2
 8004bea:	43da      	mvns	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	0013      	movs	r3, r2
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2203      	movs	r2, #3
 8004c10:	4013      	ands	r3, r2
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d123      	bne.n	8004c5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	08da      	lsrs	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3208      	adds	r2, #8
 8004c1e:	0092      	lsls	r2, r2, #2
 8004c20:	58d3      	ldr	r3, [r2, r3]
 8004c22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2207      	movs	r2, #7
 8004c28:	4013      	ands	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	409a      	lsls	r2, r3
 8004c30:	0013      	movs	r3, r2
 8004c32:	43da      	mvns	r2, r3
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4013      	ands	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	691a      	ldr	r2, [r3, #16]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2107      	movs	r1, #7
 8004c42:	400b      	ands	r3, r1
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	409a      	lsls	r2, r3
 8004c48:	0013      	movs	r3, r2
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	08da      	lsrs	r2, r3, #3
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3208      	adds	r2, #8
 8004c58:	0092      	lsls	r2, r2, #2
 8004c5a:	6939      	ldr	r1, [r7, #16]
 8004c5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	2203      	movs	r2, #3
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	0013      	movs	r3, r2
 8004c6e:	43da      	mvns	r2, r3
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	4013      	ands	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	2203      	movs	r2, #3
 8004c7c:	401a      	ands	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	409a      	lsls	r2, r3
 8004c84:	0013      	movs	r3, r2
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	23c0      	movs	r3, #192	@ 0xc0
 8004c98:	029b      	lsls	r3, r3, #10
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	d100      	bne.n	8004ca0 <HAL_GPIO_Init+0x174>
 8004c9e:	e094      	b.n	8004dca <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca0:	4b51      	ldr	r3, [pc, #324]	@ (8004de8 <HAL_GPIO_Init+0x2bc>)
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	4b50      	ldr	r3, [pc, #320]	@ (8004de8 <HAL_GPIO_Init+0x2bc>)
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	619a      	str	r2, [r3, #24]
 8004cac:	4b4e      	ldr	r3, [pc, #312]	@ (8004de8 <HAL_GPIO_Init+0x2bc>)
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	60bb      	str	r3, [r7, #8]
 8004cb6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cb8:	4a4c      	ldr	r2, [pc, #304]	@ (8004dec <HAL_GPIO_Init+0x2c0>)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	3302      	adds	r3, #2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	589b      	ldr	r3, [r3, r2]
 8004cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2203      	movs	r2, #3
 8004cca:	4013      	ands	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	220f      	movs	r2, #15
 8004cd0:	409a      	lsls	r2, r3
 8004cd2:	0013      	movs	r3, r2
 8004cd4:	43da      	mvns	r2, r3
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	2390      	movs	r3, #144	@ 0x90
 8004ce0:	05db      	lsls	r3, r3, #23
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d00d      	beq.n	8004d02 <HAL_GPIO_Init+0x1d6>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a41      	ldr	r2, [pc, #260]	@ (8004df0 <HAL_GPIO_Init+0x2c4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d007      	beq.n	8004cfe <HAL_GPIO_Init+0x1d2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a40      	ldr	r2, [pc, #256]	@ (8004df4 <HAL_GPIO_Init+0x2c8>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <HAL_GPIO_Init+0x1ce>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e004      	b.n	8004d04 <HAL_GPIO_Init+0x1d8>
 8004cfa:	2305      	movs	r3, #5
 8004cfc:	e002      	b.n	8004d04 <HAL_GPIO_Init+0x1d8>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <HAL_GPIO_Init+0x1d8>
 8004d02:	2300      	movs	r3, #0
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	2103      	movs	r1, #3
 8004d08:	400a      	ands	r2, r1
 8004d0a:	0092      	lsls	r2, r2, #2
 8004d0c:	4093      	lsls	r3, r2
 8004d0e:	693a      	ldr	r2, [r7, #16]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d14:	4935      	ldr	r1, [pc, #212]	@ (8004dec <HAL_GPIO_Init+0x2c0>)
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	089b      	lsrs	r3, r3, #2
 8004d1a:	3302      	adds	r3, #2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	693a      	ldr	r2, [r7, #16]
 8004d20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d22:	4b35      	ldr	r3, [pc, #212]	@ (8004df8 <HAL_GPIO_Init+0x2cc>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	2380      	movs	r3, #128	@ 0x80
 8004d38:	035b      	lsls	r3, r3, #13
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004d46:	4b2c      	ldr	r3, [pc, #176]	@ (8004df8 <HAL_GPIO_Init+0x2cc>)
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004d4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004df8 <HAL_GPIO_Init+0x2cc>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	43da      	mvns	r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	2380      	movs	r3, #128	@ 0x80
 8004d62:	039b      	lsls	r3, r3, #14
 8004d64:	4013      	ands	r3, r2
 8004d66:	d003      	beq.n	8004d70 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d70:	4b21      	ldr	r3, [pc, #132]	@ (8004df8 <HAL_GPIO_Init+0x2cc>)
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004d76:	4b20      	ldr	r3, [pc, #128]	@ (8004df8 <HAL_GPIO_Init+0x2cc>)
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	43da      	mvns	r2, r3
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4013      	ands	r3, r2
 8004d84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	2380      	movs	r3, #128	@ 0x80
 8004d8c:	029b      	lsls	r3, r3, #10
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d003      	beq.n	8004d9a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004d9a:	4b17      	ldr	r3, [pc, #92]	@ (8004df8 <HAL_GPIO_Init+0x2cc>)
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004da0:	4b15      	ldr	r3, [pc, #84]	@ (8004df8 <HAL_GPIO_Init+0x2cc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	43da      	mvns	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	4013      	ands	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	2380      	movs	r3, #128	@ 0x80
 8004db6:	025b      	lsls	r3, r3, #9
 8004db8:	4013      	ands	r3, r2
 8004dba:	d003      	beq.n	8004dc4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8004dbc:	693a      	ldr	r2, [r7, #16]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <HAL_GPIO_Init+0x2cc>)
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	40da      	lsrs	r2, r3
 8004dd8:	1e13      	subs	r3, r2, #0
 8004dda:	d000      	beq.n	8004dde <HAL_GPIO_Init+0x2b2>
 8004ddc:	e6ae      	b.n	8004b3c <HAL_GPIO_Init+0x10>
  } 
}
 8004dde:	46c0      	nop			@ (mov r8, r8)
 8004de0:	46c0      	nop			@ (mov r8, r8)
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b006      	add	sp, #24
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40021000 	.word	0x40021000
 8004dec:	40010000 	.word	0x40010000
 8004df0:	48000400 	.word	0x48000400
 8004df4:	48000800 	.word	0x48000800
 8004df8:	40010400 	.word	0x40010400

08004dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	0008      	movs	r0, r1
 8004e06:	0011      	movs	r1, r2
 8004e08:	1cbb      	adds	r3, r7, #2
 8004e0a:	1c02      	adds	r2, r0, #0
 8004e0c:	801a      	strh	r2, [r3, #0]
 8004e0e:	1c7b      	adds	r3, r7, #1
 8004e10:	1c0a      	adds	r2, r1, #0
 8004e12:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e14:	1c7b      	adds	r3, r7, #1
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e1c:	1cbb      	adds	r3, r7, #2
 8004e1e:	881a      	ldrh	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e24:	e003      	b.n	8004e2e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e26:	1cbb      	adds	r3, r7, #2
 8004e28:	881a      	ldrh	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e2e:	46c0      	nop			@ (mov r8, r8)
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b002      	add	sp, #8
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b088      	sub	sp, #32
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d102      	bne.n	8004e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f000 fb76 	bl	8005538 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2201      	movs	r2, #1
 8004e52:	4013      	ands	r3, r2
 8004e54:	d100      	bne.n	8004e58 <HAL_RCC_OscConfig+0x20>
 8004e56:	e08e      	b.n	8004f76 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e58:	4bc5      	ldr	r3, [pc, #788]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	220c      	movs	r2, #12
 8004e5e:	4013      	ands	r3, r2
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d00e      	beq.n	8004e82 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e64:	4bc2      	ldr	r3, [pc, #776]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	220c      	movs	r2, #12
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d117      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x68>
 8004e70:	4bbf      	ldr	r3, [pc, #764]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	23c0      	movs	r3, #192	@ 0xc0
 8004e76:	025b      	lsls	r3, r3, #9
 8004e78:	401a      	ands	r2, r3
 8004e7a:	2380      	movs	r3, #128	@ 0x80
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d10e      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e82:	4bbb      	ldr	r3, [pc, #748]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	2380      	movs	r3, #128	@ 0x80
 8004e88:	029b      	lsls	r3, r3, #10
 8004e8a:	4013      	ands	r3, r2
 8004e8c:	d100      	bne.n	8004e90 <HAL_RCC_OscConfig+0x58>
 8004e8e:	e071      	b.n	8004f74 <HAL_RCC_OscConfig+0x13c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d000      	beq.n	8004e9a <HAL_RCC_OscConfig+0x62>
 8004e98:	e06c      	b.n	8004f74 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f000 fb4c 	bl	8005538 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x80>
 8004ea8:	4bb1      	ldr	r3, [pc, #708]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	4bb0      	ldr	r3, [pc, #704]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004eae:	2180      	movs	r1, #128	@ 0x80
 8004eb0:	0249      	lsls	r1, r1, #9
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e02f      	b.n	8004f18 <HAL_RCC_OscConfig+0xe0>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10c      	bne.n	8004eda <HAL_RCC_OscConfig+0xa2>
 8004ec0:	4bab      	ldr	r3, [pc, #684]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4baa      	ldr	r3, [pc, #680]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004ec6:	49ab      	ldr	r1, [pc, #684]	@ (8005174 <HAL_RCC_OscConfig+0x33c>)
 8004ec8:	400a      	ands	r2, r1
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	4ba8      	ldr	r3, [pc, #672]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4ba7      	ldr	r3, [pc, #668]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004ed2:	49a9      	ldr	r1, [pc, #676]	@ (8005178 <HAL_RCC_OscConfig+0x340>)
 8004ed4:	400a      	ands	r2, r1
 8004ed6:	601a      	str	r2, [r3, #0]
 8004ed8:	e01e      	b.n	8004f18 <HAL_RCC_OscConfig+0xe0>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b05      	cmp	r3, #5
 8004ee0:	d10e      	bne.n	8004f00 <HAL_RCC_OscConfig+0xc8>
 8004ee2:	4ba3      	ldr	r3, [pc, #652]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4ba2      	ldr	r3, [pc, #648]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004ee8:	2180      	movs	r1, #128	@ 0x80
 8004eea:	02c9      	lsls	r1, r1, #11
 8004eec:	430a      	orrs	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	4b9f      	ldr	r3, [pc, #636]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4b9e      	ldr	r3, [pc, #632]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004ef6:	2180      	movs	r1, #128	@ 0x80
 8004ef8:	0249      	lsls	r1, r1, #9
 8004efa:	430a      	orrs	r2, r1
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e00b      	b.n	8004f18 <HAL_RCC_OscConfig+0xe0>
 8004f00:	4b9b      	ldr	r3, [pc, #620]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b9a      	ldr	r3, [pc, #616]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f06:	499b      	ldr	r1, [pc, #620]	@ (8005174 <HAL_RCC_OscConfig+0x33c>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	4b98      	ldr	r3, [pc, #608]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b97      	ldr	r3, [pc, #604]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f12:	4999      	ldr	r1, [pc, #612]	@ (8005178 <HAL_RCC_OscConfig+0x340>)
 8004f14:	400a      	ands	r2, r1
 8004f16:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d014      	beq.n	8004f4a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f20:	f7fe f8b8 	bl	8003094 <HAL_GetTick>
 8004f24:	0003      	movs	r3, r0
 8004f26:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f2a:	f7fe f8b3 	bl	8003094 <HAL_GetTick>
 8004f2e:	0002      	movs	r2, r0
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b64      	cmp	r3, #100	@ 0x64
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e2fd      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	2380      	movs	r3, #128	@ 0x80
 8004f42:	029b      	lsls	r3, r3, #10
 8004f44:	4013      	ands	r3, r2
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0xf2>
 8004f48:	e015      	b.n	8004f76 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f4a:	f7fe f8a3 	bl	8003094 <HAL_GetTick>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f54:	f7fe f89e 	bl	8003094 <HAL_GetTick>
 8004f58:	0002      	movs	r2, r0
 8004f5a:	69bb      	ldr	r3, [r7, #24]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b64      	cmp	r3, #100	@ 0x64
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e2e8      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	4b82      	ldr	r3, [pc, #520]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	2380      	movs	r3, #128	@ 0x80
 8004f6c:	029b      	lsls	r3, r3, #10
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x11c>
 8004f72:	e000      	b.n	8004f76 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f74:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d100      	bne.n	8004f82 <HAL_RCC_OscConfig+0x14a>
 8004f80:	e06c      	b.n	800505c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f82:	4b7b      	ldr	r3, [pc, #492]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	220c      	movs	r2, #12
 8004f88:	4013      	ands	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f8c:	4b78      	ldr	r3, [pc, #480]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	220c      	movs	r2, #12
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d11f      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x1a0>
 8004f98:	4b75      	ldr	r3, [pc, #468]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	23c0      	movs	r3, #192	@ 0xc0
 8004f9e:	025b      	lsls	r3, r3, #9
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	2380      	movs	r3, #128	@ 0x80
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d116      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004faa:	4b71      	ldr	r3, [pc, #452]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d005      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x188>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e2bb      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc0:	4b6b      	ldr	r3, [pc, #428]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	22f8      	movs	r2, #248	@ 0xf8
 8004fc6:	4393      	bics	r3, r2
 8004fc8:	0019      	movs	r1, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	00da      	lsls	r2, r3, #3
 8004fd0:	4b67      	ldr	r3, [pc, #412]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd6:	e041      	b.n	800505c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d024      	beq.n	800502a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe0:	4b63      	ldr	r3, [pc, #396]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b62      	ldr	r3, [pc, #392]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fec:	f7fe f852 	bl	8003094 <HAL_GetTick>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ff6:	f7fe f84d 	bl	8003094 <HAL_GetTick>
 8004ffa:	0002      	movs	r2, r0
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e297      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005008:	4b59      	ldr	r3, [pc, #356]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2202      	movs	r2, #2
 800500e:	4013      	ands	r3, r2
 8005010:	d0f1      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005012:	4b57      	ldr	r3, [pc, #348]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	22f8      	movs	r2, #248	@ 0xf8
 8005018:	4393      	bics	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	00da      	lsls	r2, r3, #3
 8005022:	4b53      	ldr	r3, [pc, #332]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005024:	430a      	orrs	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e018      	b.n	800505c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800502a:	4b51      	ldr	r3, [pc, #324]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b50      	ldr	r3, [pc, #320]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005030:	2101      	movs	r1, #1
 8005032:	438a      	bics	r2, r1
 8005034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005036:	f7fe f82d 	bl	8003094 <HAL_GetTick>
 800503a:	0003      	movs	r3, r0
 800503c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005040:	f7fe f828 	bl	8003094 <HAL_GetTick>
 8005044:	0002      	movs	r2, r0
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e272      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	4b47      	ldr	r3, [pc, #284]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2202      	movs	r2, #2
 8005058:	4013      	ands	r3, r2
 800505a:	d1f1      	bne.n	8005040 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2208      	movs	r2, #8
 8005062:	4013      	ands	r3, r2
 8005064:	d036      	beq.n	80050d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d019      	beq.n	80050a2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800506e:	4b40      	ldr	r3, [pc, #256]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005072:	4b3f      	ldr	r3, [pc, #252]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005074:	2101      	movs	r1, #1
 8005076:	430a      	orrs	r2, r1
 8005078:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800507a:	f7fe f80b 	bl	8003094 <HAL_GetTick>
 800507e:	0003      	movs	r3, r0
 8005080:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005084:	f7fe f806 	bl	8003094 <HAL_GetTick>
 8005088:	0002      	movs	r2, r0
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e250      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509a:	2202      	movs	r2, #2
 800509c:	4013      	ands	r3, r2
 800509e:	d0f1      	beq.n	8005084 <HAL_RCC_OscConfig+0x24c>
 80050a0:	e018      	b.n	80050d4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a2:	4b33      	ldr	r3, [pc, #204]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 80050a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050a6:	4b32      	ldr	r3, [pc, #200]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 80050a8:	2101      	movs	r1, #1
 80050aa:	438a      	bics	r2, r1
 80050ac:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ae:	f7fd fff1 	bl	8003094 <HAL_GetTick>
 80050b2:	0003      	movs	r3, r0
 80050b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050b8:	f7fd ffec 	bl	8003094 <HAL_GetTick>
 80050bc:	0002      	movs	r2, r0
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e236      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ca:	4b29      	ldr	r3, [pc, #164]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	2202      	movs	r2, #2
 80050d0:	4013      	ands	r3, r2
 80050d2:	d1f1      	bne.n	80050b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2204      	movs	r2, #4
 80050da:	4013      	ands	r3, r2
 80050dc:	d100      	bne.n	80050e0 <HAL_RCC_OscConfig+0x2a8>
 80050de:	e0b5      	b.n	800524c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e0:	201f      	movs	r0, #31
 80050e2:	183b      	adds	r3, r7, r0
 80050e4:	2200      	movs	r2, #0
 80050e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050e8:	4b21      	ldr	r3, [pc, #132]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 80050ea:	69da      	ldr	r2, [r3, #28]
 80050ec:	2380      	movs	r3, #128	@ 0x80
 80050ee:	055b      	lsls	r3, r3, #21
 80050f0:	4013      	ands	r3, r2
 80050f2:	d110      	bne.n	8005116 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 80050f6:	69da      	ldr	r2, [r3, #28]
 80050f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 80050fa:	2180      	movs	r1, #128	@ 0x80
 80050fc:	0549      	lsls	r1, r1, #21
 80050fe:	430a      	orrs	r2, r1
 8005100:	61da      	str	r2, [r3, #28]
 8005102:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	2380      	movs	r3, #128	@ 0x80
 8005108:	055b      	lsls	r3, r3, #21
 800510a:	4013      	ands	r3, r2
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005110:	183b      	adds	r3, r7, r0
 8005112:	2201      	movs	r2, #1
 8005114:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005116:	4b19      	ldr	r3, [pc, #100]	@ (800517c <HAL_RCC_OscConfig+0x344>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	2380      	movs	r3, #128	@ 0x80
 800511c:	005b      	lsls	r3, r3, #1
 800511e:	4013      	ands	r3, r2
 8005120:	d11a      	bne.n	8005158 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005122:	4b16      	ldr	r3, [pc, #88]	@ (800517c <HAL_RCC_OscConfig+0x344>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4b15      	ldr	r3, [pc, #84]	@ (800517c <HAL_RCC_OscConfig+0x344>)
 8005128:	2180      	movs	r1, #128	@ 0x80
 800512a:	0049      	lsls	r1, r1, #1
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005130:	f7fd ffb0 	bl	8003094 <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fd ffab 	bl	8003094 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b64      	cmp	r3, #100	@ 0x64
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e1f5      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <HAL_RCC_OscConfig+0x344>)
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	2380      	movs	r3, #128	@ 0x80
 8005152:	005b      	lsls	r3, r3, #1
 8005154:	4013      	ands	r3, r2
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d10f      	bne.n	8005180 <HAL_RCC_OscConfig+0x348>
 8005160:	4b03      	ldr	r3, [pc, #12]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005162:	6a1a      	ldr	r2, [r3, #32]
 8005164:	4b02      	ldr	r3, [pc, #8]	@ (8005170 <HAL_RCC_OscConfig+0x338>)
 8005166:	2101      	movs	r1, #1
 8005168:	430a      	orrs	r2, r1
 800516a:	621a      	str	r2, [r3, #32]
 800516c:	e036      	b.n	80051dc <HAL_RCC_OscConfig+0x3a4>
 800516e:	46c0      	nop			@ (mov r8, r8)
 8005170:	40021000 	.word	0x40021000
 8005174:	fffeffff 	.word	0xfffeffff
 8005178:	fffbffff 	.word	0xfffbffff
 800517c:	40007000 	.word	0x40007000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10c      	bne.n	80051a2 <HAL_RCC_OscConfig+0x36a>
 8005188:	4bca      	ldr	r3, [pc, #808]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	4bc9      	ldr	r3, [pc, #804]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800518e:	2101      	movs	r1, #1
 8005190:	438a      	bics	r2, r1
 8005192:	621a      	str	r2, [r3, #32]
 8005194:	4bc7      	ldr	r3, [pc, #796]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005196:	6a1a      	ldr	r2, [r3, #32]
 8005198:	4bc6      	ldr	r3, [pc, #792]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800519a:	2104      	movs	r1, #4
 800519c:	438a      	bics	r2, r1
 800519e:	621a      	str	r2, [r3, #32]
 80051a0:	e01c      	b.n	80051dc <HAL_RCC_OscConfig+0x3a4>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d10c      	bne.n	80051c4 <HAL_RCC_OscConfig+0x38c>
 80051aa:	4bc2      	ldr	r3, [pc, #776]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80051ac:	6a1a      	ldr	r2, [r3, #32]
 80051ae:	4bc1      	ldr	r3, [pc, #772]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80051b0:	2104      	movs	r1, #4
 80051b2:	430a      	orrs	r2, r1
 80051b4:	621a      	str	r2, [r3, #32]
 80051b6:	4bbf      	ldr	r3, [pc, #764]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80051b8:	6a1a      	ldr	r2, [r3, #32]
 80051ba:	4bbe      	ldr	r3, [pc, #760]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80051bc:	2101      	movs	r1, #1
 80051be:	430a      	orrs	r2, r1
 80051c0:	621a      	str	r2, [r3, #32]
 80051c2:	e00b      	b.n	80051dc <HAL_RCC_OscConfig+0x3a4>
 80051c4:	4bbb      	ldr	r3, [pc, #748]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80051c6:	6a1a      	ldr	r2, [r3, #32]
 80051c8:	4bba      	ldr	r3, [pc, #744]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80051ca:	2101      	movs	r1, #1
 80051cc:	438a      	bics	r2, r1
 80051ce:	621a      	str	r2, [r3, #32]
 80051d0:	4bb8      	ldr	r3, [pc, #736]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	4bb7      	ldr	r3, [pc, #732]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80051d6:	2104      	movs	r1, #4
 80051d8:	438a      	bics	r2, r1
 80051da:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d014      	beq.n	800520e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051e4:	f7fd ff56 	bl	8003094 <HAL_GetTick>
 80051e8:	0003      	movs	r3, r0
 80051ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ec:	e009      	b.n	8005202 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fd ff51 	bl	8003094 <HAL_GetTick>
 80051f2:	0002      	movs	r2, r0
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	4aaf      	ldr	r2, [pc, #700]	@ (80054b8 <HAL_RCC_OscConfig+0x680>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e19a      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005202:	4bac      	ldr	r3, [pc, #688]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	2202      	movs	r2, #2
 8005208:	4013      	ands	r3, r2
 800520a:	d0f0      	beq.n	80051ee <HAL_RCC_OscConfig+0x3b6>
 800520c:	e013      	b.n	8005236 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800520e:	f7fd ff41 	bl	8003094 <HAL_GetTick>
 8005212:	0003      	movs	r3, r0
 8005214:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005216:	e009      	b.n	800522c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005218:	f7fd ff3c 	bl	8003094 <HAL_GetTick>
 800521c:	0002      	movs	r2, r0
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	4aa5      	ldr	r2, [pc, #660]	@ (80054b8 <HAL_RCC_OscConfig+0x680>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e185      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800522c:	4ba1      	ldr	r3, [pc, #644]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	2202      	movs	r2, #2
 8005232:	4013      	ands	r3, r2
 8005234:	d1f0      	bne.n	8005218 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005236:	231f      	movs	r3, #31
 8005238:	18fb      	adds	r3, r7, r3
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d105      	bne.n	800524c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005240:	4b9c      	ldr	r3, [pc, #624]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005242:	69da      	ldr	r2, [r3, #28]
 8005244:	4b9b      	ldr	r3, [pc, #620]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005246:	499d      	ldr	r1, [pc, #628]	@ (80054bc <HAL_RCC_OscConfig+0x684>)
 8005248:	400a      	ands	r2, r1
 800524a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2210      	movs	r2, #16
 8005252:	4013      	ands	r3, r2
 8005254:	d063      	beq.n	800531e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d12a      	bne.n	80052b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800525e:	4b95      	ldr	r3, [pc, #596]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005260:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005262:	4b94      	ldr	r3, [pc, #592]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005264:	2104      	movs	r1, #4
 8005266:	430a      	orrs	r2, r1
 8005268:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800526a:	4b92      	ldr	r3, [pc, #584]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800526c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800526e:	4b91      	ldr	r3, [pc, #580]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005270:	2101      	movs	r1, #1
 8005272:	430a      	orrs	r2, r1
 8005274:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005276:	f7fd ff0d 	bl	8003094 <HAL_GetTick>
 800527a:	0003      	movs	r3, r0
 800527c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005280:	f7fd ff08 	bl	8003094 <HAL_GetTick>
 8005284:	0002      	movs	r2, r0
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e152      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005292:	4b88      	ldr	r3, [pc, #544]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005296:	2202      	movs	r2, #2
 8005298:	4013      	ands	r3, r2
 800529a:	d0f1      	beq.n	8005280 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800529c:	4b85      	ldr	r3, [pc, #532]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800529e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052a0:	22f8      	movs	r2, #248	@ 0xf8
 80052a2:	4393      	bics	r3, r2
 80052a4:	0019      	movs	r1, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	00da      	lsls	r2, r3, #3
 80052ac:	4b81      	ldr	r3, [pc, #516]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052ae:	430a      	orrs	r2, r1
 80052b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80052b2:	e034      	b.n	800531e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	3305      	adds	r3, #5
 80052ba:	d111      	bne.n	80052e0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80052bc:	4b7d      	ldr	r3, [pc, #500]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052c0:	4b7c      	ldr	r3, [pc, #496]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052c2:	2104      	movs	r1, #4
 80052c4:	438a      	bics	r2, r1
 80052c6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052c8:	4b7a      	ldr	r3, [pc, #488]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052cc:	22f8      	movs	r2, #248	@ 0xf8
 80052ce:	4393      	bics	r3, r2
 80052d0:	0019      	movs	r1, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	00da      	lsls	r2, r3, #3
 80052d8:	4b76      	ldr	r3, [pc, #472]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052da:	430a      	orrs	r2, r1
 80052dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80052de:	e01e      	b.n	800531e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80052e0:	4b74      	ldr	r3, [pc, #464]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e4:	4b73      	ldr	r3, [pc, #460]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052e6:	2104      	movs	r1, #4
 80052e8:	430a      	orrs	r2, r1
 80052ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80052ec:	4b71      	ldr	r3, [pc, #452]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052f0:	4b70      	ldr	r3, [pc, #448]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80052f2:	2101      	movs	r1, #1
 80052f4:	438a      	bics	r2, r1
 80052f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052f8:	f7fd fecc 	bl	8003094 <HAL_GetTick>
 80052fc:	0003      	movs	r3, r0
 80052fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005302:	f7fd fec7 	bl	8003094 <HAL_GetTick>
 8005306:	0002      	movs	r2, r0
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e111      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005314:	4b67      	ldr	r3, [pc, #412]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005318:	2202      	movs	r2, #2
 800531a:	4013      	ands	r3, r2
 800531c:	d1f1      	bne.n	8005302 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2220      	movs	r2, #32
 8005324:	4013      	ands	r3, r2
 8005326:	d05c      	beq.n	80053e2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005328:	4b62      	ldr	r3, [pc, #392]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	220c      	movs	r2, #12
 800532e:	4013      	ands	r3, r2
 8005330:	2b0c      	cmp	r3, #12
 8005332:	d00e      	beq.n	8005352 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005334:	4b5f      	ldr	r3, [pc, #380]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	220c      	movs	r2, #12
 800533a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800533c:	2b08      	cmp	r3, #8
 800533e:	d114      	bne.n	800536a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005340:	4b5c      	ldr	r3, [pc, #368]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	23c0      	movs	r3, #192	@ 0xc0
 8005346:	025b      	lsls	r3, r3, #9
 8005348:	401a      	ands	r2, r3
 800534a:	23c0      	movs	r3, #192	@ 0xc0
 800534c:	025b      	lsls	r3, r3, #9
 800534e:	429a      	cmp	r2, r3
 8005350:	d10b      	bne.n	800536a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005352:	4b58      	ldr	r3, [pc, #352]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005354:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005356:	2380      	movs	r3, #128	@ 0x80
 8005358:	029b      	lsls	r3, r3, #10
 800535a:	4013      	ands	r3, r2
 800535c:	d040      	beq.n	80053e0 <HAL_RCC_OscConfig+0x5a8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d03c      	beq.n	80053e0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e0e6      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01b      	beq.n	80053aa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005372:	4b50      	ldr	r3, [pc, #320]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005374:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005376:	4b4f      	ldr	r3, [pc, #316]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005378:	2180      	movs	r1, #128	@ 0x80
 800537a:	0249      	lsls	r1, r1, #9
 800537c:	430a      	orrs	r2, r1
 800537e:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fd fe88 	bl	8003094 <HAL_GetTick>
 8005384:	0003      	movs	r3, r0
 8005386:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800538a:	f7fd fe83 	bl	8003094 <HAL_GetTick>
 800538e:	0002      	movs	r2, r0
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e0cd      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800539c:	4b45      	ldr	r3, [pc, #276]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800539e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053a0:	2380      	movs	r3, #128	@ 0x80
 80053a2:	029b      	lsls	r3, r3, #10
 80053a4:	4013      	ands	r3, r2
 80053a6:	d0f0      	beq.n	800538a <HAL_RCC_OscConfig+0x552>
 80053a8:	e01b      	b.n	80053e2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80053aa:	4b42      	ldr	r3, [pc, #264]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80053ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ae:	4b41      	ldr	r3, [pc, #260]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80053b0:	4943      	ldr	r1, [pc, #268]	@ (80054c0 <HAL_RCC_OscConfig+0x688>)
 80053b2:	400a      	ands	r2, r1
 80053b4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b6:	f7fd fe6d 	bl	8003094 <HAL_GetTick>
 80053ba:	0003      	movs	r3, r0
 80053bc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053c0:	f7fd fe68 	bl	8003094 <HAL_GetTick>
 80053c4:	0002      	movs	r2, r0
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e0b2      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80053d2:	4b38      	ldr	r3, [pc, #224]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80053d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d6:	2380      	movs	r3, #128	@ 0x80
 80053d8:	029b      	lsls	r3, r3, #10
 80053da:	4013      	ands	r3, r2
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x588>
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80053e0:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d100      	bne.n	80053ec <HAL_RCC_OscConfig+0x5b4>
 80053ea:	e0a4      	b.n	8005536 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053ec:	4b31      	ldr	r3, [pc, #196]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	220c      	movs	r2, #12
 80053f2:	4013      	ands	r3, r2
 80053f4:	2b08      	cmp	r3, #8
 80053f6:	d100      	bne.n	80053fa <HAL_RCC_OscConfig+0x5c2>
 80053f8:	e078      	b.n	80054ec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d14c      	bne.n	800549c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005402:	4b2c      	ldr	r3, [pc, #176]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	4b2b      	ldr	r3, [pc, #172]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005408:	492e      	ldr	r1, [pc, #184]	@ (80054c4 <HAL_RCC_OscConfig+0x68c>)
 800540a:	400a      	ands	r2, r1
 800540c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540e:	f7fd fe41 	bl	8003094 <HAL_GetTick>
 8005412:	0003      	movs	r3, r0
 8005414:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005416:	e008      	b.n	800542a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005418:	f7fd fe3c 	bl	8003094 <HAL_GetTick>
 800541c:	0002      	movs	r2, r0
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	2b02      	cmp	r3, #2
 8005424:	d901      	bls.n	800542a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e086      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800542a:	4b22      	ldr	r3, [pc, #136]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	2380      	movs	r3, #128	@ 0x80
 8005430:	049b      	lsls	r3, r3, #18
 8005432:	4013      	ands	r3, r2
 8005434:	d1f0      	bne.n	8005418 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005436:	4b1f      	ldr	r3, [pc, #124]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800543a:	220f      	movs	r2, #15
 800543c:	4393      	bics	r3, r2
 800543e:	0019      	movs	r1, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005444:	4b1b      	ldr	r3, [pc, #108]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005446:	430a      	orrs	r2, r1
 8005448:	62da      	str	r2, [r3, #44]	@ 0x2c
 800544a:	4b1a      	ldr	r3, [pc, #104]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	4a1e      	ldr	r2, [pc, #120]	@ (80054c8 <HAL_RCC_OscConfig+0x690>)
 8005450:	4013      	ands	r3, r2
 8005452:	0019      	movs	r1, r3
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545c:	431a      	orrs	r2, r3
 800545e:	4b15      	ldr	r3, [pc, #84]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005460:	430a      	orrs	r2, r1
 8005462:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005464:	4b13      	ldr	r3, [pc, #76]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	4b12      	ldr	r3, [pc, #72]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800546a:	2180      	movs	r1, #128	@ 0x80
 800546c:	0449      	lsls	r1, r1, #17
 800546e:	430a      	orrs	r2, r1
 8005470:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005472:	f7fd fe0f 	bl	8003094 <HAL_GetTick>
 8005476:	0003      	movs	r3, r0
 8005478:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547c:	f7fd fe0a 	bl	8003094 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e054      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800548e:	4b09      	ldr	r3, [pc, #36]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	2380      	movs	r3, #128	@ 0x80
 8005494:	049b      	lsls	r3, r3, #18
 8005496:	4013      	ands	r3, r2
 8005498:	d0f0      	beq.n	800547c <HAL_RCC_OscConfig+0x644>
 800549a:	e04c      	b.n	8005536 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <HAL_RCC_OscConfig+0x67c>)
 80054a2:	4908      	ldr	r1, [pc, #32]	@ (80054c4 <HAL_RCC_OscConfig+0x68c>)
 80054a4:	400a      	ands	r2, r1
 80054a6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fd fdf4 	bl	8003094 <HAL_GetTick>
 80054ac:	0003      	movs	r3, r0
 80054ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054b0:	e015      	b.n	80054de <HAL_RCC_OscConfig+0x6a6>
 80054b2:	46c0      	nop			@ (mov r8, r8)
 80054b4:	40021000 	.word	0x40021000
 80054b8:	00001388 	.word	0x00001388
 80054bc:	efffffff 	.word	0xefffffff
 80054c0:	fffeffff 	.word	0xfffeffff
 80054c4:	feffffff 	.word	0xfeffffff
 80054c8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054cc:	f7fd fde2 	bl	8003094 <HAL_GetTick>
 80054d0:	0002      	movs	r2, r0
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e02c      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054de:	4b18      	ldr	r3, [pc, #96]	@ (8005540 <HAL_RCC_OscConfig+0x708>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	2380      	movs	r3, #128	@ 0x80
 80054e4:	049b      	lsls	r3, r3, #18
 80054e6:	4013      	ands	r3, r2
 80054e8:	d1f0      	bne.n	80054cc <HAL_RCC_OscConfig+0x694>
 80054ea:	e024      	b.n	8005536 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d101      	bne.n	80054f8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e01f      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80054f8:	4b11      	ldr	r3, [pc, #68]	@ (8005540 <HAL_RCC_OscConfig+0x708>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80054fe:	4b10      	ldr	r3, [pc, #64]	@ (8005540 <HAL_RCC_OscConfig+0x708>)
 8005500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005502:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	23c0      	movs	r3, #192	@ 0xc0
 8005508:	025b      	lsls	r3, r3, #9
 800550a:	401a      	ands	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005510:	429a      	cmp	r2, r3
 8005512:	d10e      	bne.n	8005532 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	220f      	movs	r2, #15
 8005518:	401a      	ands	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800551e:	429a      	cmp	r2, r3
 8005520:	d107      	bne.n	8005532 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	23f0      	movs	r3, #240	@ 0xf0
 8005526:	039b      	lsls	r3, r3, #14
 8005528:	401a      	ands	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800552e:	429a      	cmp	r2, r3
 8005530:	d001      	beq.n	8005536 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b008      	add	sp, #32
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40021000 	.word	0x40021000

08005544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0bf      	b.n	80056d8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005558:	4b61      	ldr	r3, [pc, #388]	@ (80056e0 <HAL_RCC_ClockConfig+0x19c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2201      	movs	r2, #1
 800555e:	4013      	ands	r3, r2
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d911      	bls.n	800558a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005566:	4b5e      	ldr	r3, [pc, #376]	@ (80056e0 <HAL_RCC_ClockConfig+0x19c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	4393      	bics	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	4b5b      	ldr	r3, [pc, #364]	@ (80056e0 <HAL_RCC_ClockConfig+0x19c>)
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005578:	4b59      	ldr	r3, [pc, #356]	@ (80056e0 <HAL_RCC_ClockConfig+0x19c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2201      	movs	r2, #1
 800557e:	4013      	ands	r3, r2
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d001      	beq.n	800558a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e0a6      	b.n	80056d8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2202      	movs	r2, #2
 8005590:	4013      	ands	r3, r2
 8005592:	d015      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2204      	movs	r2, #4
 800559a:	4013      	ands	r3, r2
 800559c:	d006      	beq.n	80055ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800559e:	4b51      	ldr	r3, [pc, #324]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	4b50      	ldr	r3, [pc, #320]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80055a4:	21e0      	movs	r1, #224	@ 0xe0
 80055a6:	00c9      	lsls	r1, r1, #3
 80055a8:	430a      	orrs	r2, r1
 80055aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055ac:	4b4d      	ldr	r3, [pc, #308]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	22f0      	movs	r2, #240	@ 0xf0
 80055b2:	4393      	bics	r3, r2
 80055b4:	0019      	movs	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	4b4a      	ldr	r3, [pc, #296]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2201      	movs	r2, #1
 80055c6:	4013      	ands	r3, r2
 80055c8:	d04c      	beq.n	8005664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d107      	bne.n	80055e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d2:	4b44      	ldr	r3, [pc, #272]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	2380      	movs	r3, #128	@ 0x80
 80055d8:	029b      	lsls	r3, r3, #10
 80055da:	4013      	ands	r3, r2
 80055dc:	d120      	bne.n	8005620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e07a      	b.n	80056d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d107      	bne.n	80055fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ea:	4b3e      	ldr	r3, [pc, #248]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	@ 0x80
 80055f0:	049b      	lsls	r3, r3, #18
 80055f2:	4013      	ands	r3, r2
 80055f4:	d114      	bne.n	8005620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e06e      	b.n	80056d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d107      	bne.n	8005612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005602:	4b38      	ldr	r3, [pc, #224]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 8005604:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005606:	2380      	movs	r3, #128	@ 0x80
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	4013      	ands	r3, r2
 800560c:	d108      	bne.n	8005620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e062      	b.n	80056d8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005612:	4b34      	ldr	r3, [pc, #208]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2202      	movs	r2, #2
 8005618:	4013      	ands	r3, r2
 800561a:	d101      	bne.n	8005620 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e05b      	b.n	80056d8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005620:	4b30      	ldr	r3, [pc, #192]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2203      	movs	r2, #3
 8005626:	4393      	bics	r3, r2
 8005628:	0019      	movs	r1, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	4b2d      	ldr	r3, [pc, #180]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 8005630:	430a      	orrs	r2, r1
 8005632:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005634:	f7fd fd2e 	bl	8003094 <HAL_GetTick>
 8005638:	0003      	movs	r3, r0
 800563a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563c:	e009      	b.n	8005652 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800563e:	f7fd fd29 	bl	8003094 <HAL_GetTick>
 8005642:	0002      	movs	r2, r0
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	4a27      	ldr	r2, [pc, #156]	@ (80056e8 <HAL_RCC_ClockConfig+0x1a4>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e042      	b.n	80056d8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005652:	4b24      	ldr	r3, [pc, #144]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	220c      	movs	r2, #12
 8005658:	401a      	ands	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	429a      	cmp	r2, r3
 8005662:	d1ec      	bne.n	800563e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005664:	4b1e      	ldr	r3, [pc, #120]	@ (80056e0 <HAL_RCC_ClockConfig+0x19c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2201      	movs	r2, #1
 800566a:	4013      	ands	r3, r2
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d211      	bcs.n	8005696 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005672:	4b1b      	ldr	r3, [pc, #108]	@ (80056e0 <HAL_RCC_ClockConfig+0x19c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2201      	movs	r2, #1
 8005678:	4393      	bics	r3, r2
 800567a:	0019      	movs	r1, r3
 800567c:	4b18      	ldr	r3, [pc, #96]	@ (80056e0 <HAL_RCC_ClockConfig+0x19c>)
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	430a      	orrs	r2, r1
 8005682:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005684:	4b16      	ldr	r3, [pc, #88]	@ (80056e0 <HAL_RCC_ClockConfig+0x19c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2201      	movs	r2, #1
 800568a:	4013      	ands	r3, r2
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	429a      	cmp	r2, r3
 8005690:	d001      	beq.n	8005696 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e020      	b.n	80056d8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2204      	movs	r2, #4
 800569c:	4013      	ands	r3, r2
 800569e:	d009      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056a0:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	4a11      	ldr	r2, [pc, #68]	@ (80056ec <HAL_RCC_ClockConfig+0x1a8>)
 80056a6:	4013      	ands	r3, r2
 80056a8:	0019      	movs	r1, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68da      	ldr	r2, [r3, #12]
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80056b0:	430a      	orrs	r2, r1
 80056b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056b4:	f000 f820 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 80056b8:	0001      	movs	r1, r0
 80056ba:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <HAL_RCC_ClockConfig+0x1a0>)
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	220f      	movs	r2, #15
 80056c2:	4013      	ands	r3, r2
 80056c4:	4a0a      	ldr	r2, [pc, #40]	@ (80056f0 <HAL_RCC_ClockConfig+0x1ac>)
 80056c6:	5cd3      	ldrb	r3, [r2, r3]
 80056c8:	000a      	movs	r2, r1
 80056ca:	40da      	lsrs	r2, r3
 80056cc:	4b09      	ldr	r3, [pc, #36]	@ (80056f4 <HAL_RCC_ClockConfig+0x1b0>)
 80056ce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80056d0:	2003      	movs	r0, #3
 80056d2:	f7fd fc99 	bl	8003008 <HAL_InitTick>
  
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	0018      	movs	r0, r3
 80056da:	46bd      	mov	sp, r7
 80056dc:	b004      	add	sp, #16
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40022000 	.word	0x40022000
 80056e4:	40021000 	.word	0x40021000
 80056e8:	00001388 	.word	0x00001388
 80056ec:	fffff8ff 	.word	0xfffff8ff
 80056f0:	08006884 	.word	0x08006884
 80056f4:	20000038 	.word	0x20000038

080056f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056fe:	2300      	movs	r3, #0
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	2300      	movs	r3, #0
 8005708:	617b      	str	r3, [r7, #20]
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005712:	4b2d      	ldr	r3, [pc, #180]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	220c      	movs	r2, #12
 800571c:	4013      	ands	r3, r2
 800571e:	2b0c      	cmp	r3, #12
 8005720:	d046      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0xb8>
 8005722:	d848      	bhi.n	80057b6 <HAL_RCC_GetSysClockFreq+0xbe>
 8005724:	2b04      	cmp	r3, #4
 8005726:	d002      	beq.n	800572e <HAL_RCC_GetSysClockFreq+0x36>
 8005728:	2b08      	cmp	r3, #8
 800572a:	d003      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0x3c>
 800572c:	e043      	b.n	80057b6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800572e:	4b27      	ldr	r3, [pc, #156]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005730:	613b      	str	r3, [r7, #16]
      break;
 8005732:	e043      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	0c9b      	lsrs	r3, r3, #18
 8005738:	220f      	movs	r2, #15
 800573a:	4013      	ands	r3, r2
 800573c:	4a24      	ldr	r2, [pc, #144]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0xd8>)
 800573e:	5cd3      	ldrb	r3, [r2, r3]
 8005740:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005742:	4b21      	ldr	r3, [pc, #132]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005746:	220f      	movs	r2, #15
 8005748:	4013      	ands	r3, r2
 800574a:	4a22      	ldr	r2, [pc, #136]	@ (80057d4 <HAL_RCC_GetSysClockFreq+0xdc>)
 800574c:	5cd3      	ldrb	r3, [r2, r3]
 800574e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	23c0      	movs	r3, #192	@ 0xc0
 8005754:	025b      	lsls	r3, r3, #9
 8005756:	401a      	ands	r2, r3
 8005758:	2380      	movs	r3, #128	@ 0x80
 800575a:	025b      	lsls	r3, r3, #9
 800575c:	429a      	cmp	r2, r3
 800575e:	d109      	bne.n	8005774 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005760:	68b9      	ldr	r1, [r7, #8]
 8005762:	481a      	ldr	r0, [pc, #104]	@ (80057cc <HAL_RCC_GetSysClockFreq+0xd4>)
 8005764:	f7fa fcd0 	bl	8000108 <__udivsi3>
 8005768:	0003      	movs	r3, r0
 800576a:	001a      	movs	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4353      	muls	r3, r2
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	e01a      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	23c0      	movs	r3, #192	@ 0xc0
 8005778:	025b      	lsls	r3, r3, #9
 800577a:	401a      	ands	r2, r3
 800577c:	23c0      	movs	r3, #192	@ 0xc0
 800577e:	025b      	lsls	r3, r3, #9
 8005780:	429a      	cmp	r2, r3
 8005782:	d109      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	4814      	ldr	r0, [pc, #80]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005788:	f7fa fcbe 	bl	8000108 <__udivsi3>
 800578c:	0003      	movs	r3, r0
 800578e:	001a      	movs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4353      	muls	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e008      	b.n	80057aa <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005798:	68b9      	ldr	r1, [r7, #8]
 800579a:	4810      	ldr	r0, [pc, #64]	@ (80057dc <HAL_RCC_GetSysClockFreq+0xe4>)
 800579c:	f7fa fcb4 	bl	8000108 <__udivsi3>
 80057a0:	0003      	movs	r3, r0
 80057a2:	001a      	movs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4353      	muls	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	613b      	str	r3, [r7, #16]
      break;
 80057ae:	e005      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80057b0:	4b09      	ldr	r3, [pc, #36]	@ (80057d8 <HAL_RCC_GetSysClockFreq+0xe0>)
 80057b2:	613b      	str	r3, [r7, #16]
      break;
 80057b4:	e002      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057b6:	4b09      	ldr	r3, [pc, #36]	@ (80057dc <HAL_RCC_GetSysClockFreq+0xe4>)
 80057b8:	613b      	str	r3, [r7, #16]
      break;
 80057ba:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80057bc:	693b      	ldr	r3, [r7, #16]
}
 80057be:	0018      	movs	r0, r3
 80057c0:	46bd      	mov	sp, r7
 80057c2:	b006      	add	sp, #24
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	46c0      	nop			@ (mov r8, r8)
 80057c8:	40021000 	.word	0x40021000
 80057cc:	016e3600 	.word	0x016e3600
 80057d0:	08006894 	.word	0x08006894
 80057d4:	080068a4 	.word	0x080068a4
 80057d8:	02dc6c00 	.word	0x02dc6c00
 80057dc:	007a1200 	.word	0x007a1200

080057e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e0a8      	b.n	8005944 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d109      	bne.n	800580e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	2382      	movs	r3, #130	@ 0x82
 8005800:	005b      	lsls	r3, r3, #1
 8005802:	429a      	cmp	r2, r3
 8005804:	d009      	beq.n	800581a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	61da      	str	r2, [r3, #28]
 800580c:	e005      	b.n	800581a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	225d      	movs	r2, #93	@ 0x5d
 8005824:	5c9b      	ldrb	r3, [r3, r2]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	225c      	movs	r2, #92	@ 0x5c
 8005830:	2100      	movs	r1, #0
 8005832:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	0018      	movs	r0, r3
 8005838:	f7fd f996 	bl	8002b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	225d      	movs	r2, #93	@ 0x5d
 8005840:	2102      	movs	r1, #2
 8005842:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2140      	movs	r1, #64	@ 0x40
 8005850:	438a      	bics	r2, r1
 8005852:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	23e0      	movs	r3, #224	@ 0xe0
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	429a      	cmp	r2, r3
 800585e:	d902      	bls.n	8005866 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e002      	b.n	800586c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005866:	2380      	movs	r3, #128	@ 0x80
 8005868:	015b      	lsls	r3, r3, #5
 800586a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	23f0      	movs	r3, #240	@ 0xf0
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	429a      	cmp	r2, r3
 8005876:	d008      	beq.n	800588a <HAL_SPI_Init+0xaa>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	23e0      	movs	r3, #224	@ 0xe0
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	429a      	cmp	r2, r3
 8005882:	d002      	beq.n	800588a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	2382      	movs	r3, #130	@ 0x82
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	401a      	ands	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6899      	ldr	r1, [r3, #8]
 8005898:	2384      	movs	r3, #132	@ 0x84
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	400b      	ands	r3, r1
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	2102      	movs	r1, #2
 80058a6:	400b      	ands	r3, r1
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	2101      	movs	r1, #1
 80058b0:	400b      	ands	r3, r1
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6999      	ldr	r1, [r3, #24]
 80058b8:	2380      	movs	r3, #128	@ 0x80
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	400b      	ands	r3, r1
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	2138      	movs	r1, #56	@ 0x38
 80058c6:	400b      	ands	r3, r1
 80058c8:	431a      	orrs	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	2180      	movs	r1, #128	@ 0x80
 80058d0:	400b      	ands	r3, r1
 80058d2:	431a      	orrs	r2, r3
 80058d4:	0011      	movs	r1, r2
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058da:	2380      	movs	r3, #128	@ 0x80
 80058dc:	019b      	lsls	r3, r3, #6
 80058de:	401a      	ands	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	2204      	movs	r2, #4
 80058f0:	401a      	ands	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f6:	2110      	movs	r1, #16
 80058f8:	400b      	ands	r3, r1
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005900:	2108      	movs	r1, #8
 8005902:	400b      	ands	r3, r1
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68d9      	ldr	r1, [r3, #12]
 800590a:	23f0      	movs	r3, #240	@ 0xf0
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	400b      	ands	r3, r1
 8005910:	431a      	orrs	r2, r3
 8005912:	0011      	movs	r1, r2
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	2380      	movs	r3, #128	@ 0x80
 8005918:	015b      	lsls	r3, r3, #5
 800591a:	401a      	ands	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	69da      	ldr	r2, [r3, #28]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4907      	ldr	r1, [pc, #28]	@ (800594c <HAL_SPI_Init+0x16c>)
 8005930:	400a      	ands	r2, r1
 8005932:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	225d      	movs	r2, #93	@ 0x5d
 800593e:	2101      	movs	r1, #1
 8005940:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	0018      	movs	r0, r3
 8005946:	46bd      	mov	sp, r7
 8005948:	b004      	add	sp, #16
 800594a:	bd80      	pop	{r7, pc}
 800594c:	fffff7ff 	.word	0xfffff7ff

08005950 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b082      	sub	sp, #8
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e042      	b.n	80059e8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	223d      	movs	r2, #61	@ 0x3d
 8005966:	5c9b      	ldrb	r3, [r3, r2]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d107      	bne.n	800597e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	223c      	movs	r2, #60	@ 0x3c
 8005972:	2100      	movs	r1, #0
 8005974:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0018      	movs	r0, r3
 800597a:	f7fd f9a3 	bl	8002cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	223d      	movs	r2, #61	@ 0x3d
 8005982:	2102      	movs	r1, #2
 8005984:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	3304      	adds	r3, #4
 800598e:	0019      	movs	r1, r3
 8005990:	0010      	movs	r0, r2
 8005992:	f000 fbf1 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2246      	movs	r2, #70	@ 0x46
 800599a:	2101      	movs	r1, #1
 800599c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	223e      	movs	r2, #62	@ 0x3e
 80059a2:	2101      	movs	r1, #1
 80059a4:	5499      	strb	r1, [r3, r2]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	223f      	movs	r2, #63	@ 0x3f
 80059aa:	2101      	movs	r1, #1
 80059ac:	5499      	strb	r1, [r3, r2]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2240      	movs	r2, #64	@ 0x40
 80059b2:	2101      	movs	r1, #1
 80059b4:	5499      	strb	r1, [r3, r2]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2241      	movs	r2, #65	@ 0x41
 80059ba:	2101      	movs	r1, #1
 80059bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2242      	movs	r2, #66	@ 0x42
 80059c2:	2101      	movs	r1, #1
 80059c4:	5499      	strb	r1, [r3, r2]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2243      	movs	r2, #67	@ 0x43
 80059ca:	2101      	movs	r1, #1
 80059cc:	5499      	strb	r1, [r3, r2]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2244      	movs	r2, #68	@ 0x44
 80059d2:	2101      	movs	r1, #1
 80059d4:	5499      	strb	r1, [r3, r2]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2245      	movs	r2, #69	@ 0x45
 80059da:	2101      	movs	r1, #1
 80059dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	223d      	movs	r2, #61	@ 0x3d
 80059e2:	2101      	movs	r1, #1
 80059e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	0018      	movs	r0, r3
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b002      	add	sp, #8
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	223d      	movs	r2, #61	@ 0x3d
 80059fc:	5c9b      	ldrb	r3, [r3, r2]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d001      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e036      	b.n	8005a76 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	223d      	movs	r2, #61	@ 0x3d
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a16      	ldr	r2, [pc, #88]	@ (8005a80 <HAL_TIM_Base_Start_IT+0x90>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00a      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0x50>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	2380      	movs	r3, #128	@ 0x80
 8005a30:	05db      	lsls	r3, r3, #23
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d004      	beq.n	8005a40 <HAL_TIM_Base_Start_IT+0x50>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a12      	ldr	r2, [pc, #72]	@ (8005a84 <HAL_TIM_Base_Start_IT+0x94>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d111      	bne.n	8005a64 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2207      	movs	r2, #7
 8005a48:	4013      	ands	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2b06      	cmp	r3, #6
 8005a50:	d010      	beq.n	8005a74 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2101      	movs	r1, #1
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a62:	e007      	b.n	8005a74 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2101      	movs	r1, #1
 8005a70:	430a      	orrs	r2, r1
 8005a72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	0018      	movs	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	b004      	add	sp, #16
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	46c0      	nop			@ (mov r8, r8)
 8005a80:	40012c00 	.word	0x40012c00
 8005a84:	40000400 	.word	0x40000400

08005a88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e042      	b.n	8005b20 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	223d      	movs	r2, #61	@ 0x3d
 8005a9e:	5c9b      	ldrb	r3, [r3, r2]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d107      	bne.n	8005ab6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	223c      	movs	r2, #60	@ 0x3c
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	0018      	movs	r0, r3
 8005ab2:	f7fd f8a7 	bl	8002c04 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	223d      	movs	r2, #61	@ 0x3d
 8005aba:	2102      	movs	r1, #2
 8005abc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	0019      	movs	r1, r3
 8005ac8:	0010      	movs	r0, r2
 8005aca:	f000 fb55 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2246      	movs	r2, #70	@ 0x46
 8005ad2:	2101      	movs	r1, #1
 8005ad4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	223e      	movs	r2, #62	@ 0x3e
 8005ada:	2101      	movs	r1, #1
 8005adc:	5499      	strb	r1, [r3, r2]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	223f      	movs	r2, #63	@ 0x3f
 8005ae2:	2101      	movs	r1, #1
 8005ae4:	5499      	strb	r1, [r3, r2]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2240      	movs	r2, #64	@ 0x40
 8005aea:	2101      	movs	r1, #1
 8005aec:	5499      	strb	r1, [r3, r2]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2241      	movs	r2, #65	@ 0x41
 8005af2:	2101      	movs	r1, #1
 8005af4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2242      	movs	r2, #66	@ 0x42
 8005afa:	2101      	movs	r1, #1
 8005afc:	5499      	strb	r1, [r3, r2]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2243      	movs	r2, #67	@ 0x43
 8005b02:	2101      	movs	r1, #1
 8005b04:	5499      	strb	r1, [r3, r2]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2244      	movs	r2, #68	@ 0x44
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	5499      	strb	r1, [r3, r2]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2245      	movs	r2, #69	@ 0x45
 8005b12:	2101      	movs	r1, #1
 8005b14:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	223d      	movs	r2, #61	@ 0x3d
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b002      	add	sp, #8
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e042      	b.n	8005bc0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	223d      	movs	r2, #61	@ 0x3d
 8005b3e:	5c9b      	ldrb	r3, [r3, r2]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	223c      	movs	r2, #60	@ 0x3c
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f7fd f887 	bl	8002c64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	223d      	movs	r2, #61	@ 0x3d
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	0019      	movs	r1, r3
 8005b68:	0010      	movs	r0, r2
 8005b6a:	f000 fb05 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2246      	movs	r2, #70	@ 0x46
 8005b72:	2101      	movs	r1, #1
 8005b74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	223e      	movs	r2, #62	@ 0x3e
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	5499      	strb	r1, [r3, r2]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	223f      	movs	r2, #63	@ 0x3f
 8005b82:	2101      	movs	r1, #1
 8005b84:	5499      	strb	r1, [r3, r2]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2240      	movs	r2, #64	@ 0x40
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2241      	movs	r2, #65	@ 0x41
 8005b92:	2101      	movs	r1, #1
 8005b94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2242      	movs	r2, #66	@ 0x42
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	5499      	strb	r1, [r3, r2]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2243      	movs	r2, #67	@ 0x43
 8005ba2:	2101      	movs	r1, #1
 8005ba4:	5499      	strb	r1, [r3, r2]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2244      	movs	r2, #68	@ 0x44
 8005baa:	2101      	movs	r1, #1
 8005bac:	5499      	strb	r1, [r3, r2]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2245      	movs	r2, #69	@ 0x45
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	223d      	movs	r2, #61	@ 0x3d
 8005bba:	2101      	movs	r1, #1
 8005bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b002      	add	sp, #8
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d108      	bne.n	8005bea <HAL_TIM_PWM_Start+0x22>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	223e      	movs	r2, #62	@ 0x3e
 8005bdc:	5c9b      	ldrb	r3, [r3, r2]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	3b01      	subs	r3, #1
 8005be2:	1e5a      	subs	r2, r3, #1
 8005be4:	4193      	sbcs	r3, r2
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	e01f      	b.n	8005c2a <HAL_TIM_PWM_Start+0x62>
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d108      	bne.n	8005c02 <HAL_TIM_PWM_Start+0x3a>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	223f      	movs	r2, #63	@ 0x3f
 8005bf4:	5c9b      	ldrb	r3, [r3, r2]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	1e5a      	subs	r2, r3, #1
 8005bfc:	4193      	sbcs	r3, r2
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	e013      	b.n	8005c2a <HAL_TIM_PWM_Start+0x62>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	d108      	bne.n	8005c1a <HAL_TIM_PWM_Start+0x52>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2240      	movs	r2, #64	@ 0x40
 8005c0c:	5c9b      	ldrb	r3, [r3, r2]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	3b01      	subs	r3, #1
 8005c12:	1e5a      	subs	r2, r3, #1
 8005c14:	4193      	sbcs	r3, r2
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	e007      	b.n	8005c2a <HAL_TIM_PWM_Start+0x62>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2241      	movs	r2, #65	@ 0x41
 8005c1e:	5c9b      	ldrb	r3, [r3, r2]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	4193      	sbcs	r3, r2
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e06a      	b.n	8005d08 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d104      	bne.n	8005c42 <HAL_TIM_PWM_Start+0x7a>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	223e      	movs	r2, #62	@ 0x3e
 8005c3c:	2102      	movs	r1, #2
 8005c3e:	5499      	strb	r1, [r3, r2]
 8005c40:	e013      	b.n	8005c6a <HAL_TIM_PWM_Start+0xa2>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d104      	bne.n	8005c52 <HAL_TIM_PWM_Start+0x8a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	223f      	movs	r2, #63	@ 0x3f
 8005c4c:	2102      	movs	r1, #2
 8005c4e:	5499      	strb	r1, [r3, r2]
 8005c50:	e00b      	b.n	8005c6a <HAL_TIM_PWM_Start+0xa2>
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b08      	cmp	r3, #8
 8005c56:	d104      	bne.n	8005c62 <HAL_TIM_PWM_Start+0x9a>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2240      	movs	r2, #64	@ 0x40
 8005c5c:	2102      	movs	r1, #2
 8005c5e:	5499      	strb	r1, [r3, r2]
 8005c60:	e003      	b.n	8005c6a <HAL_TIM_PWM_Start+0xa2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2241      	movs	r2, #65	@ 0x41
 8005c66:	2102      	movs	r1, #2
 8005c68:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	2201      	movs	r2, #1
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 fce4 	bl	8006640 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a24      	ldr	r2, [pc, #144]	@ (8005d10 <HAL_TIM_PWM_Start+0x148>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d009      	beq.n	8005c96 <HAL_TIM_PWM_Start+0xce>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a23      	ldr	r2, [pc, #140]	@ (8005d14 <HAL_TIM_PWM_Start+0x14c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d004      	beq.n	8005c96 <HAL_TIM_PWM_Start+0xce>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a21      	ldr	r2, [pc, #132]	@ (8005d18 <HAL_TIM_PWM_Start+0x150>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d101      	bne.n	8005c9a <HAL_TIM_PWM_Start+0xd2>
 8005c96:	2301      	movs	r3, #1
 8005c98:	e000      	b.n	8005c9c <HAL_TIM_PWM_Start+0xd4>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d008      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2180      	movs	r1, #128	@ 0x80
 8005cac:	0209      	lsls	r1, r1, #8
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a16      	ldr	r2, [pc, #88]	@ (8005d10 <HAL_TIM_PWM_Start+0x148>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00a      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x10a>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	2380      	movs	r3, #128	@ 0x80
 8005cc2:	05db      	lsls	r3, r3, #23
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d004      	beq.n	8005cd2 <HAL_TIM_PWM_Start+0x10a>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a13      	ldr	r2, [pc, #76]	@ (8005d1c <HAL_TIM_PWM_Start+0x154>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d111      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2207      	movs	r2, #7
 8005cda:	4013      	ands	r3, r2
 8005cdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b06      	cmp	r3, #6
 8005ce2:	d010      	beq.n	8005d06 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2101      	movs	r1, #1
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cf4:	e007      	b.n	8005d06 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	681a      	ldr	r2, [r3, #0]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2101      	movs	r1, #1
 8005d02:	430a      	orrs	r2, r1
 8005d04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d06:	2300      	movs	r3, #0
}
 8005d08:	0018      	movs	r0, r3
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	b004      	add	sp, #16
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	40012c00 	.word	0x40012c00
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800
 8005d1c:	40000400 	.word	0x40000400

08005d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	d021      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2202      	movs	r2, #2
 8005d44:	4013      	ands	r3, r2
 8005d46:	d01d      	beq.n	8005d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2203      	movs	r2, #3
 8005d4e:	4252      	negs	r2, r2
 8005d50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	2203      	movs	r2, #3
 8005d60:	4013      	ands	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	0018      	movs	r0, r3
 8005d68:	f000 f9ee 	bl	8006148 <HAL_TIM_IC_CaptureCallback>
 8005d6c:	e007      	b.n	8005d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f000 f9e1 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0018      	movs	r0, r3
 8005d7a:	f000 f9ed 	bl	8006158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2204      	movs	r2, #4
 8005d88:	4013      	ands	r3, r2
 8005d8a:	d022      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2204      	movs	r2, #4
 8005d90:	4013      	ands	r3, r2
 8005d92:	d01e      	beq.n	8005dd2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2205      	movs	r2, #5
 8005d9a:	4252      	negs	r2, r2
 8005d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	23c0      	movs	r3, #192	@ 0xc0
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4013      	ands	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f000 f9c7 	bl	8006148 <HAL_TIM_IC_CaptureCallback>
 8005dba:	e007      	b.n	8005dcc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f000 f9ba 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f000 f9c6 	bl	8006158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2208      	movs	r2, #8
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d021      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2208      	movs	r2, #8
 8005dde:	4013      	ands	r3, r2
 8005de0:	d01d      	beq.n	8005e1e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2209      	movs	r2, #9
 8005de8:	4252      	negs	r2, r2
 8005dea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2204      	movs	r2, #4
 8005df0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	2203      	movs	r2, #3
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d004      	beq.n	8005e08 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 f9a1 	bl	8006148 <HAL_TIM_IC_CaptureCallback>
 8005e06:	e007      	b.n	8005e18 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	0018      	movs	r0, r3
 8005e0c:	f000 f994 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 f9a0 	bl	8006158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	2210      	movs	r2, #16
 8005e22:	4013      	ands	r3, r2
 8005e24:	d022      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2210      	movs	r2, #16
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d01e      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2211      	movs	r2, #17
 8005e34:	4252      	negs	r2, r2
 8005e36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2208      	movs	r2, #8
 8005e3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69da      	ldr	r2, [r3, #28]
 8005e44:	23c0      	movs	r3, #192	@ 0xc0
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4013      	ands	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 f97a 	bl	8006148 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e007      	b.n	8005e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	0018      	movs	r0, r3
 8005e5a:	f000 f96d 	bl	8006138 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	0018      	movs	r0, r3
 8005e62:	f000 f979 	bl	8006158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	4013      	ands	r3, r2
 8005e72:	d00c      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2201      	movs	r2, #1
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d008      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2202      	movs	r2, #2
 8005e82:	4252      	negs	r2, r2
 8005e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f7fc fcf9 	bl	8002880 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2280      	movs	r2, #128	@ 0x80
 8005e92:	4013      	ands	r3, r2
 8005e94:	d00c      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2280      	movs	r2, #128	@ 0x80
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	d008      	beq.n	8005eb0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2281      	movs	r2, #129	@ 0x81
 8005ea4:	4252      	negs	r2, r2
 8005ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	0018      	movs	r0, r3
 8005eac:	f000 fcaa 	bl	8006804 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2240      	movs	r2, #64	@ 0x40
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d00c      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2240      	movs	r2, #64	@ 0x40
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d008      	beq.n	8005ed2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2241      	movs	r2, #65	@ 0x41
 8005ec6:	4252      	negs	r2, r2
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	0018      	movs	r0, r3
 8005ece:	f000 f94b 	bl	8006168 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2220      	movs	r2, #32
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	d00c      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d008      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2221      	movs	r2, #33	@ 0x21
 8005ee8:	4252      	negs	r2, r2
 8005eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	0018      	movs	r0, r3
 8005ef0:	f000 fc80 	bl	80067f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ef4:	46c0      	nop			@ (mov r8, r8)
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	b004      	add	sp, #16
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f08:	2317      	movs	r3, #23
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	223c      	movs	r2, #60	@ 0x3c
 8005f14:	5c9b      	ldrb	r3, [r3, r2]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d101      	bne.n	8005f1e <HAL_TIM_OC_ConfigChannel+0x22>
 8005f1a:	2302      	movs	r3, #2
 8005f1c:	e042      	b.n	8005fa4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	223c      	movs	r2, #60	@ 0x3c
 8005f22:	2101      	movs	r1, #1
 8005f24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b0c      	cmp	r3, #12
 8005f2a:	d027      	beq.n	8005f7c <HAL_TIM_OC_ConfigChannel+0x80>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b0c      	cmp	r3, #12
 8005f30:	d82c      	bhi.n	8005f8c <HAL_TIM_OC_ConfigChannel+0x90>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d019      	beq.n	8005f6c <HAL_TIM_OC_ConfigChannel+0x70>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b08      	cmp	r3, #8
 8005f3c:	d826      	bhi.n	8005f8c <HAL_TIM_OC_ConfigChannel+0x90>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_TIM_OC_ConfigChannel+0x50>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d008      	beq.n	8005f5c <HAL_TIM_OC_ConfigChannel+0x60>
 8005f4a:	e01f      	b.n	8005f8c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	68ba      	ldr	r2, [r7, #8]
 8005f52:	0011      	movs	r1, r2
 8005f54:	0018      	movs	r0, r3
 8005f56:	f000 f993 	bl	8006280 <TIM_OC1_SetConfig>
      break;
 8005f5a:	e01c      	b.n	8005f96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	0011      	movs	r1, r2
 8005f64:	0018      	movs	r0, r3
 8005f66:	f000 fa09 	bl	800637c <TIM_OC2_SetConfig>
      break;
 8005f6a:	e014      	b.n	8005f96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	0011      	movs	r1, r2
 8005f74:	0018      	movs	r0, r3
 8005f76:	f000 fa7f 	bl	8006478 <TIM_OC3_SetConfig>
      break;
 8005f7a:	e00c      	b.n	8005f96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	0011      	movs	r1, r2
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 faf7 	bl	8006578 <TIM_OC4_SetConfig>
      break;
 8005f8a:	e004      	b.n	8005f96 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005f8c:	2317      	movs	r3, #23
 8005f8e:	18fb      	adds	r3, r7, r3
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
      break;
 8005f94:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	223c      	movs	r2, #60	@ 0x3c
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	5499      	strb	r1, [r3, r2]

  return status;
 8005f9e:	2317      	movs	r3, #23
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	781b      	ldrb	r3, [r3, #0]
}
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b006      	add	sp, #24
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fb8:	2317      	movs	r3, #23
 8005fba:	18fb      	adds	r3, r7, r3
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	223c      	movs	r2, #60	@ 0x3c
 8005fc4:	5c9b      	ldrb	r3, [r3, r2]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_TIM_PWM_ConfigChannel+0x22>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e0ad      	b.n	800612a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	223c      	movs	r2, #60	@ 0x3c
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b0c      	cmp	r3, #12
 8005fda:	d100      	bne.n	8005fde <HAL_TIM_PWM_ConfigChannel+0x32>
 8005fdc:	e076      	b.n	80060cc <HAL_TIM_PWM_ConfigChannel+0x120>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b0c      	cmp	r3, #12
 8005fe2:	d900      	bls.n	8005fe6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005fe4:	e095      	b.n	8006112 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	d04e      	beq.n	800608a <HAL_TIM_PWM_ConfigChannel+0xde>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d900      	bls.n	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005ff2:	e08e      	b.n	8006112 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_TIM_PWM_ConfigChannel+0x56>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d021      	beq.n	8006044 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006000:	e087      	b.n	8006112 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	0011      	movs	r1, r2
 800600a:	0018      	movs	r0, r3
 800600c:	f000 f938 	bl	8006280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2108      	movs	r1, #8
 800601c:	430a      	orrs	r2, r1
 800601e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2104      	movs	r1, #4
 800602c:	438a      	bics	r2, r1
 800602e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6999      	ldr	r1, [r3, #24]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	691a      	ldr	r2, [r3, #16]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	619a      	str	r2, [r3, #24]
      break;
 8006042:	e06b      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	0011      	movs	r1, r2
 800604c:	0018      	movs	r0, r3
 800604e:	f000 f995 	bl	800637c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699a      	ldr	r2, [r3, #24]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2180      	movs	r1, #128	@ 0x80
 800605e:	0109      	lsls	r1, r1, #4
 8006060:	430a      	orrs	r2, r1
 8006062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	699a      	ldr	r2, [r3, #24]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4931      	ldr	r1, [pc, #196]	@ (8006134 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006070:	400a      	ands	r2, r1
 8006072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6999      	ldr	r1, [r3, #24]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	021a      	lsls	r2, r3, #8
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	619a      	str	r2, [r3, #24]
      break;
 8006088:	e048      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	0011      	movs	r1, r2
 8006092:	0018      	movs	r0, r3
 8006094:	f000 f9f0 	bl	8006478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	69da      	ldr	r2, [r3, #28]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2108      	movs	r1, #8
 80060a4:	430a      	orrs	r2, r1
 80060a6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69da      	ldr	r2, [r3, #28]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2104      	movs	r1, #4
 80060b4:	438a      	bics	r2, r1
 80060b6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69d9      	ldr	r1, [r3, #28]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	61da      	str	r2, [r3, #28]
      break;
 80060ca:	e027      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	0011      	movs	r1, r2
 80060d4:	0018      	movs	r0, r3
 80060d6:	f000 fa4f 	bl	8006578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2180      	movs	r1, #128	@ 0x80
 80060e6:	0109      	lsls	r1, r1, #4
 80060e8:	430a      	orrs	r2, r1
 80060ea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	69da      	ldr	r2, [r3, #28]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	490f      	ldr	r1, [pc, #60]	@ (8006134 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80060f8:	400a      	ands	r2, r1
 80060fa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69d9      	ldr	r1, [r3, #28]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	021a      	lsls	r2, r3, #8
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	430a      	orrs	r2, r1
 800610e:	61da      	str	r2, [r3, #28]
      break;
 8006110:	e004      	b.n	800611c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006112:	2317      	movs	r3, #23
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
      break;
 800611a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	223c      	movs	r2, #60	@ 0x3c
 8006120:	2100      	movs	r1, #0
 8006122:	5499      	strb	r1, [r3, r2]

  return status;
 8006124:	2317      	movs	r3, #23
 8006126:	18fb      	adds	r3, r7, r3
 8006128:	781b      	ldrb	r3, [r3, #0]
}
 800612a:	0018      	movs	r0, r3
 800612c:	46bd      	mov	sp, r7
 800612e:	b006      	add	sp, #24
 8006130:	bd80      	pop	{r7, pc}
 8006132:	46c0      	nop			@ (mov r8, r8)
 8006134:	fffffbff 	.word	0xfffffbff

08006138 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006140:	46c0      	nop			@ (mov r8, r8)
 8006142:	46bd      	mov	sp, r7
 8006144:	b002      	add	sp, #8
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006150:	46c0      	nop			@ (mov r8, r8)
 8006152:	46bd      	mov	sp, r7
 8006154:	b002      	add	sp, #8
 8006156:	bd80      	pop	{r7, pc}

08006158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006160:	46c0      	nop			@ (mov r8, r8)
 8006162:	46bd      	mov	sp, r7
 8006164:	b002      	add	sp, #8
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006170:	46c0      	nop			@ (mov r8, r8)
 8006172:	46bd      	mov	sp, r7
 8006174:	b002      	add	sp, #8
 8006176:	bd80      	pop	{r7, pc}

08006178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a37      	ldr	r2, [pc, #220]	@ (8006268 <TIM_Base_SetConfig+0xf0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d008      	beq.n	80061a2 <TIM_Base_SetConfig+0x2a>
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	2380      	movs	r3, #128	@ 0x80
 8006194:	05db      	lsls	r3, r3, #23
 8006196:	429a      	cmp	r2, r3
 8006198:	d003      	beq.n	80061a2 <TIM_Base_SetConfig+0x2a>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4a33      	ldr	r2, [pc, #204]	@ (800626c <TIM_Base_SetConfig+0xf4>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d108      	bne.n	80061b4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2270      	movs	r2, #112	@ 0x70
 80061a6:	4393      	bics	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a2c      	ldr	r2, [pc, #176]	@ (8006268 <TIM_Base_SetConfig+0xf0>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d014      	beq.n	80061e6 <TIM_Base_SetConfig+0x6e>
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	2380      	movs	r3, #128	@ 0x80
 80061c0:	05db      	lsls	r3, r3, #23
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d00f      	beq.n	80061e6 <TIM_Base_SetConfig+0x6e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a28      	ldr	r2, [pc, #160]	@ (800626c <TIM_Base_SetConfig+0xf4>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d00b      	beq.n	80061e6 <TIM_Base_SetConfig+0x6e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a27      	ldr	r2, [pc, #156]	@ (8006270 <TIM_Base_SetConfig+0xf8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d007      	beq.n	80061e6 <TIM_Base_SetConfig+0x6e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a26      	ldr	r2, [pc, #152]	@ (8006274 <TIM_Base_SetConfig+0xfc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d003      	beq.n	80061e6 <TIM_Base_SetConfig+0x6e>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a25      	ldr	r2, [pc, #148]	@ (8006278 <TIM_Base_SetConfig+0x100>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d108      	bne.n	80061f8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a24      	ldr	r2, [pc, #144]	@ (800627c <TIM_Base_SetConfig+0x104>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	68db      	ldr	r3, [r3, #12]
 80061f2:	68fa      	ldr	r2, [r7, #12]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2280      	movs	r2, #128	@ 0x80
 80061fc:	4393      	bics	r3, r2
 80061fe:	001a      	movs	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	689a      	ldr	r2, [r3, #8]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a11      	ldr	r2, [pc, #68]	@ (8006268 <TIM_Base_SetConfig+0xf0>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d007      	beq.n	8006236 <TIM_Base_SetConfig+0xbe>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a12      	ldr	r2, [pc, #72]	@ (8006274 <TIM_Base_SetConfig+0xfc>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d003      	beq.n	8006236 <TIM_Base_SetConfig+0xbe>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a11      	ldr	r2, [pc, #68]	@ (8006278 <TIM_Base_SetConfig+0x100>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d103      	bne.n	800623e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	2201      	movs	r2, #1
 800624a:	4013      	ands	r3, r2
 800624c:	2b01      	cmp	r3, #1
 800624e:	d106      	bne.n	800625e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2201      	movs	r2, #1
 8006256:	4393      	bics	r3, r2
 8006258:	001a      	movs	r2, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	611a      	str	r2, [r3, #16]
  }
}
 800625e:	46c0      	nop			@ (mov r8, r8)
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40000400 	.word	0x40000400
 8006270:	40002000 	.word	0x40002000
 8006274:	40014400 	.word	0x40014400
 8006278:	40014800 	.word	0x40014800
 800627c:	fffffcff 	.word	0xfffffcff

08006280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b086      	sub	sp, #24
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	2201      	movs	r2, #1
 8006296:	4393      	bics	r3, r2
 8006298:	001a      	movs	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2270      	movs	r2, #112	@ 0x70
 80062ae:	4393      	bics	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2203      	movs	r2, #3
 80062b6:	4393      	bics	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2202      	movs	r2, #2
 80062c8:	4393      	bics	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a23      	ldr	r2, [pc, #140]	@ (8006368 <TIM_OC1_SetConfig+0xe8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d007      	beq.n	80062ee <TIM_OC1_SetConfig+0x6e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a22      	ldr	r2, [pc, #136]	@ (800636c <TIM_OC1_SetConfig+0xec>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <TIM_OC1_SetConfig+0x6e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a21      	ldr	r2, [pc, #132]	@ (8006370 <TIM_OC1_SetConfig+0xf0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d10c      	bne.n	8006308 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2208      	movs	r2, #8
 80062f2:	4393      	bics	r3, r2
 80062f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	2204      	movs	r2, #4
 8006304:	4393      	bics	r3, r2
 8006306:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a17      	ldr	r2, [pc, #92]	@ (8006368 <TIM_OC1_SetConfig+0xe8>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d007      	beq.n	8006320 <TIM_OC1_SetConfig+0xa0>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	4a16      	ldr	r2, [pc, #88]	@ (800636c <TIM_OC1_SetConfig+0xec>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d003      	beq.n	8006320 <TIM_OC1_SetConfig+0xa0>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	4a15      	ldr	r2, [pc, #84]	@ (8006370 <TIM_OC1_SetConfig+0xf0>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d111      	bne.n	8006344 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	4a14      	ldr	r2, [pc, #80]	@ (8006374 <TIM_OC1_SetConfig+0xf4>)
 8006324:	4013      	ands	r3, r2
 8006326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4a13      	ldr	r2, [pc, #76]	@ (8006378 <TIM_OC1_SetConfig+0xf8>)
 800632c:	4013      	ands	r3, r2
 800632e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	46c0      	nop			@ (mov r8, r8)
 8006360:	46bd      	mov	sp, r7
 8006362:	b006      	add	sp, #24
 8006364:	bd80      	pop	{r7, pc}
 8006366:	46c0      	nop			@ (mov r8, r8)
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40014400 	.word	0x40014400
 8006370:	40014800 	.word	0x40014800
 8006374:	fffffeff 	.word	0xfffffeff
 8006378:	fffffdff 	.word	0xfffffdff

0800637c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	2210      	movs	r2, #16
 8006392:	4393      	bics	r3, r2
 8006394:	001a      	movs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	699b      	ldr	r3, [r3, #24]
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a2c      	ldr	r2, [pc, #176]	@ (800645c <TIM_OC2_SetConfig+0xe0>)
 80063aa:	4013      	ands	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006460 <TIM_OC2_SetConfig+0xe4>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	68fa      	ldr	r2, [r7, #12]
 80063be:	4313      	orrs	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	2220      	movs	r2, #32
 80063c6:	4393      	bics	r3, r2
 80063c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	011b      	lsls	r3, r3, #4
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a22      	ldr	r2, [pc, #136]	@ (8006464 <TIM_OC2_SetConfig+0xe8>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d10d      	bne.n	80063fa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2280      	movs	r2, #128	@ 0x80
 80063e2:	4393      	bics	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	011b      	lsls	r3, r3, #4
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2240      	movs	r2, #64	@ 0x40
 80063f6:	4393      	bics	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a19      	ldr	r2, [pc, #100]	@ (8006464 <TIM_OC2_SetConfig+0xe8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d007      	beq.n	8006412 <TIM_OC2_SetConfig+0x96>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a18      	ldr	r2, [pc, #96]	@ (8006468 <TIM_OC2_SetConfig+0xec>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d003      	beq.n	8006412 <TIM_OC2_SetConfig+0x96>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4a17      	ldr	r2, [pc, #92]	@ (800646c <TIM_OC2_SetConfig+0xf0>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d113      	bne.n	800643a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4a16      	ldr	r2, [pc, #88]	@ (8006470 <TIM_OC2_SetConfig+0xf4>)
 8006416:	4013      	ands	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	4a15      	ldr	r2, [pc, #84]	@ (8006474 <TIM_OC2_SetConfig+0xf8>)
 800641e:	4013      	ands	r3, r2
 8006420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4313      	orrs	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	699b      	ldr	r3, [r3, #24]
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4313      	orrs	r3, r2
 8006438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	621a      	str	r2, [r3, #32]
}
 8006454:	46c0      	nop			@ (mov r8, r8)
 8006456:	46bd      	mov	sp, r7
 8006458:	b006      	add	sp, #24
 800645a:	bd80      	pop	{r7, pc}
 800645c:	ffff8fff 	.word	0xffff8fff
 8006460:	fffffcff 	.word	0xfffffcff
 8006464:	40012c00 	.word	0x40012c00
 8006468:	40014400 	.word	0x40014400
 800646c:	40014800 	.word	0x40014800
 8006470:	fffffbff 	.word	0xfffffbff
 8006474:	fffff7ff 	.word	0xfffff7ff

08006478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	4a31      	ldr	r2, [pc, #196]	@ (8006554 <TIM_OC3_SetConfig+0xdc>)
 800648e:	401a      	ands	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2270      	movs	r2, #112	@ 0x70
 80064a4:	4393      	bics	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2203      	movs	r2, #3
 80064ac:	4393      	bics	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	4a26      	ldr	r2, [pc, #152]	@ (8006558 <TIM_OC3_SetConfig+0xe0>)
 80064be:	4013      	ands	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	021b      	lsls	r3, r3, #8
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a22      	ldr	r2, [pc, #136]	@ (800655c <TIM_OC3_SetConfig+0xe4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d10d      	bne.n	80064f2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	4a21      	ldr	r2, [pc, #132]	@ (8006560 <TIM_OC3_SetConfig+0xe8>)
 80064da:	4013      	ands	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006564 <TIM_OC3_SetConfig+0xec>)
 80064ee:	4013      	ands	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a19      	ldr	r2, [pc, #100]	@ (800655c <TIM_OC3_SetConfig+0xe4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d007      	beq.n	800650a <TIM_OC3_SetConfig+0x92>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a1a      	ldr	r2, [pc, #104]	@ (8006568 <TIM_OC3_SetConfig+0xf0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d003      	beq.n	800650a <TIM_OC3_SetConfig+0x92>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a19      	ldr	r2, [pc, #100]	@ (800656c <TIM_OC3_SetConfig+0xf4>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d113      	bne.n	8006532 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	4a18      	ldr	r2, [pc, #96]	@ (8006570 <TIM_OC3_SetConfig+0xf8>)
 800650e:	4013      	ands	r3, r2
 8006510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	4a17      	ldr	r2, [pc, #92]	@ (8006574 <TIM_OC3_SetConfig+0xfc>)
 8006516:	4013      	ands	r3, r2
 8006518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4313      	orrs	r3, r2
 8006524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	4313      	orrs	r3, r2
 8006530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	693a      	ldr	r2, [r7, #16]
 8006536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	697a      	ldr	r2, [r7, #20]
 800654a:	621a      	str	r2, [r3, #32]
}
 800654c:	46c0      	nop			@ (mov r8, r8)
 800654e:	46bd      	mov	sp, r7
 8006550:	b006      	add	sp, #24
 8006552:	bd80      	pop	{r7, pc}
 8006554:	fffffeff 	.word	0xfffffeff
 8006558:	fffffdff 	.word	0xfffffdff
 800655c:	40012c00 	.word	0x40012c00
 8006560:	fffff7ff 	.word	0xfffff7ff
 8006564:	fffffbff 	.word	0xfffffbff
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800
 8006570:	ffffefff 	.word	0xffffefff
 8006574:	ffffdfff 	.word	0xffffdfff

08006578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a1b      	ldr	r3, [r3, #32]
 800658c:	4a24      	ldr	r2, [pc, #144]	@ (8006620 <TIM_OC4_SetConfig+0xa8>)
 800658e:	401a      	ands	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	4a20      	ldr	r2, [pc, #128]	@ (8006624 <TIM_OC4_SetConfig+0xac>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	4a1f      	ldr	r2, [pc, #124]	@ (8006628 <TIM_OC4_SetConfig+0xb0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	021b      	lsls	r3, r3, #8
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4a1b      	ldr	r2, [pc, #108]	@ (800662c <TIM_OC4_SetConfig+0xb4>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	031b      	lsls	r3, r3, #12
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a17      	ldr	r2, [pc, #92]	@ (8006630 <TIM_OC4_SetConfig+0xb8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d007      	beq.n	80065e8 <TIM_OC4_SetConfig+0x70>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a16      	ldr	r2, [pc, #88]	@ (8006634 <TIM_OC4_SetConfig+0xbc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_OC4_SetConfig+0x70>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a15      	ldr	r2, [pc, #84]	@ (8006638 <TIM_OC4_SetConfig+0xc0>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d109      	bne.n	80065fc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	4a14      	ldr	r2, [pc, #80]	@ (800663c <TIM_OC4_SetConfig+0xc4>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	019b      	lsls	r3, r3, #6
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	46bd      	mov	sp, r7
 800661a:	b006      	add	sp, #24
 800661c:	bd80      	pop	{r7, pc}
 800661e:	46c0      	nop			@ (mov r8, r8)
 8006620:	ffffefff 	.word	0xffffefff
 8006624:	ffff8fff 	.word	0xffff8fff
 8006628:	fffffcff 	.word	0xfffffcff
 800662c:	ffffdfff 	.word	0xffffdfff
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40014400 	.word	0x40014400
 8006638:	40014800 	.word	0x40014800
 800663c:	ffffbfff 	.word	0xffffbfff

08006640 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	221f      	movs	r2, #31
 8006650:	4013      	ands	r3, r2
 8006652:	2201      	movs	r2, #1
 8006654:	409a      	lsls	r2, r3
 8006656:	0013      	movs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6a1b      	ldr	r3, [r3, #32]
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	43d2      	mvns	r2, r2
 8006662:	401a      	ands	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1a      	ldr	r2, [r3, #32]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	211f      	movs	r1, #31
 8006670:	400b      	ands	r3, r1
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	4099      	lsls	r1, r3
 8006676:	000b      	movs	r3, r1
 8006678:	431a      	orrs	r2, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	621a      	str	r2, [r3, #32]
}
 800667e:	46c0      	nop			@ (mov r8, r8)
 8006680:	46bd      	mov	sp, r7
 8006682:	b006      	add	sp, #24
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	223c      	movs	r2, #60	@ 0x3c
 8006696:	5c9b      	ldrb	r3, [r3, r2]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800669c:	2302      	movs	r3, #2
 800669e:	e042      	b.n	8006726 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	223c      	movs	r2, #60	@ 0x3c
 80066a4:	2101      	movs	r1, #1
 80066a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	223d      	movs	r2, #61	@ 0x3d
 80066ac:	2102      	movs	r1, #2
 80066ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2270      	movs	r2, #112	@ 0x70
 80066c4:	4393      	bics	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a14      	ldr	r2, [pc, #80]	@ (8006730 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00a      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	2380      	movs	r3, #128	@ 0x80
 80066ea:	05db      	lsls	r3, r3, #23
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d004      	beq.n	80066fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006734 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d10c      	bne.n	8006714 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2280      	movs	r2, #128	@ 0x80
 80066fe:	4393      	bics	r3, r2
 8006700:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4313      	orrs	r3, r2
 800670a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	223d      	movs	r2, #61	@ 0x3d
 8006718:	2101      	movs	r1, #1
 800671a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	223c      	movs	r2, #60	@ 0x3c
 8006720:	2100      	movs	r1, #0
 8006722:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b004      	add	sp, #16
 800672c:	bd80      	pop	{r7, pc}
 800672e:	46c0      	nop			@ (mov r8, r8)
 8006730:	40012c00 	.word	0x40012c00
 8006734:	40000400 	.word	0x40000400

08006738 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b084      	sub	sp, #16
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	223c      	movs	r2, #60	@ 0x3c
 800674a:	5c9b      	ldrb	r3, [r3, r2]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d101      	bne.n	8006754 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006750:	2302      	movs	r3, #2
 8006752:	e03e      	b.n	80067d2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	223c      	movs	r2, #60	@ 0x3c
 8006758:	2101      	movs	r1, #1
 800675a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	22ff      	movs	r2, #255	@ 0xff
 8006760:	4393      	bics	r3, r2
 8006762:	001a      	movs	r2, r3
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	4313      	orrs	r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a1b      	ldr	r2, [pc, #108]	@ (80067dc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006770:	401a      	ands	r2, r3
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4a18      	ldr	r2, [pc, #96]	@ (80067e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800677e:	401a      	ands	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4a16      	ldr	r2, [pc, #88]	@ (80067e4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800678c:	401a      	ands	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4313      	orrs	r3, r2
 8006794:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a13      	ldr	r2, [pc, #76]	@ (80067e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800679a:	401a      	ands	r2, r3
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	691b      	ldr	r3, [r3, #16]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	4a11      	ldr	r2, [pc, #68]	@ (80067ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80067a8:	401a      	ands	r2, r3
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	4a0e      	ldr	r2, [pc, #56]	@ (80067f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80067b6:	401a      	ands	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	4313      	orrs	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	223c      	movs	r2, #60	@ 0x3c
 80067cc:	2100      	movs	r1, #0
 80067ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	0018      	movs	r0, r3
 80067d4:	46bd      	mov	sp, r7
 80067d6:	b004      	add	sp, #16
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	46c0      	nop			@ (mov r8, r8)
 80067dc:	fffffcff 	.word	0xfffffcff
 80067e0:	fffffbff 	.word	0xfffffbff
 80067e4:	fffff7ff 	.word	0xfffff7ff
 80067e8:	ffffefff 	.word	0xffffefff
 80067ec:	ffffdfff 	.word	0xffffdfff
 80067f0:	ffffbfff 	.word	0xffffbfff

080067f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067fc:	46c0      	nop			@ (mov r8, r8)
 80067fe:	46bd      	mov	sp, r7
 8006800:	b002      	add	sp, #8
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800680c:	46c0      	nop			@ (mov r8, r8)
 800680e:	46bd      	mov	sp, r7
 8006810:	b002      	add	sp, #8
 8006812:	bd80      	pop	{r7, pc}

08006814 <memset>:
 8006814:	0003      	movs	r3, r0
 8006816:	1882      	adds	r2, r0, r2
 8006818:	4293      	cmp	r3, r2
 800681a:	d100      	bne.n	800681e <memset+0xa>
 800681c:	4770      	bx	lr
 800681e:	7019      	strb	r1, [r3, #0]
 8006820:	3301      	adds	r3, #1
 8006822:	e7f9      	b.n	8006818 <memset+0x4>

08006824 <__libc_init_array>:
 8006824:	b570      	push	{r4, r5, r6, lr}
 8006826:	2600      	movs	r6, #0
 8006828:	4c0c      	ldr	r4, [pc, #48]	@ (800685c <__libc_init_array+0x38>)
 800682a:	4d0d      	ldr	r5, [pc, #52]	@ (8006860 <__libc_init_array+0x3c>)
 800682c:	1b64      	subs	r4, r4, r5
 800682e:	10a4      	asrs	r4, r4, #2
 8006830:	42a6      	cmp	r6, r4
 8006832:	d109      	bne.n	8006848 <__libc_init_array+0x24>
 8006834:	2600      	movs	r6, #0
 8006836:	f000 f819 	bl	800686c <_init>
 800683a:	4c0a      	ldr	r4, [pc, #40]	@ (8006864 <__libc_init_array+0x40>)
 800683c:	4d0a      	ldr	r5, [pc, #40]	@ (8006868 <__libc_init_array+0x44>)
 800683e:	1b64      	subs	r4, r4, r5
 8006840:	10a4      	asrs	r4, r4, #2
 8006842:	42a6      	cmp	r6, r4
 8006844:	d105      	bne.n	8006852 <__libc_init_array+0x2e>
 8006846:	bd70      	pop	{r4, r5, r6, pc}
 8006848:	00b3      	lsls	r3, r6, #2
 800684a:	58eb      	ldr	r3, [r5, r3]
 800684c:	4798      	blx	r3
 800684e:	3601      	adds	r6, #1
 8006850:	e7ee      	b.n	8006830 <__libc_init_array+0xc>
 8006852:	00b3      	lsls	r3, r6, #2
 8006854:	58eb      	ldr	r3, [r5, r3]
 8006856:	4798      	blx	r3
 8006858:	3601      	adds	r6, #1
 800685a:	e7f2      	b.n	8006842 <__libc_init_array+0x1e>
 800685c:	080068b4 	.word	0x080068b4
 8006860:	080068b4 	.word	0x080068b4
 8006864:	080068b8 	.word	0x080068b8
 8006868:	080068b4 	.word	0x080068b4

0800686c <_init>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	46c0      	nop			@ (mov r8, r8)
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr

08006878 <_fini>:
 8006878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800687a:	46c0      	nop			@ (mov r8, r8)
 800687c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800687e:	bc08      	pop	{r3}
 8006880:	469e      	mov	lr, r3
 8006882:	4770      	bx	lr
