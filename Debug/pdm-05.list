
pdm-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d8  080068d8  00008058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080068d8  080068d8  00008058  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080068d8  080068d8  00008058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d8  080068d8  000078d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068dc  080068dc  000078dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  080068e0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003cc  20000058  08006938  00008058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006938  00008424  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d602  00000000  00000000  00008080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000202a  00000000  00000000  00015682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  000176b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b25  00000000  00000000  000184f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ba2  00000000  00000000  00019015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010034  00000000  00000000  00031bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091683  00000000  00000000  00041beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d326e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b4  00000000  00000000  000d32b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d6768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000058 	.word	0x20000058
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006890 	.word	0x08006890

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000005c 	.word	0x2000005c
 8000104:	08006890 	.word	0x08006890

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_dmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	46de      	mov	lr, fp
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	001f      	movs	r7, r3
 800022e:	030b      	lsls	r3, r1, #12
 8000230:	0b1b      	lsrs	r3, r3, #12
 8000232:	0016      	movs	r6, r2
 8000234:	469a      	mov	sl, r3
 8000236:	0fca      	lsrs	r2, r1, #31
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	0004      	movs	r4, r0
 800023c:	4691      	mov	r9, r2
 800023e:	b085      	sub	sp, #20
 8000240:	0d5b      	lsrs	r3, r3, #21
 8000242:	d100      	bne.n	8000246 <__aeabi_dmul+0x26>
 8000244:	e1cf      	b.n	80005e6 <__aeabi_dmul+0x3c6>
 8000246:	4acd      	ldr	r2, [pc, #820]	@ (800057c <__aeabi_dmul+0x35c>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d055      	beq.n	80002f8 <__aeabi_dmul+0xd8>
 800024c:	4651      	mov	r1, sl
 800024e:	0f42      	lsrs	r2, r0, #29
 8000250:	00c9      	lsls	r1, r1, #3
 8000252:	430a      	orrs	r2, r1
 8000254:	2180      	movs	r1, #128	@ 0x80
 8000256:	0409      	lsls	r1, r1, #16
 8000258:	4311      	orrs	r1, r2
 800025a:	00c2      	lsls	r2, r0, #3
 800025c:	4690      	mov	r8, r2
 800025e:	4ac8      	ldr	r2, [pc, #800]	@ (8000580 <__aeabi_dmul+0x360>)
 8000260:	468a      	mov	sl, r1
 8000262:	4693      	mov	fp, r2
 8000264:	449b      	add	fp, r3
 8000266:	2300      	movs	r3, #0
 8000268:	2500      	movs	r5, #0
 800026a:	9302      	str	r3, [sp, #8]
 800026c:	033c      	lsls	r4, r7, #12
 800026e:	007b      	lsls	r3, r7, #1
 8000270:	0ffa      	lsrs	r2, r7, #31
 8000272:	9601      	str	r6, [sp, #4]
 8000274:	0b24      	lsrs	r4, r4, #12
 8000276:	0d5b      	lsrs	r3, r3, #21
 8000278:	9200      	str	r2, [sp, #0]
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x5e>
 800027c:	e188      	b.n	8000590 <__aeabi_dmul+0x370>
 800027e:	4abf      	ldr	r2, [pc, #764]	@ (800057c <__aeabi_dmul+0x35c>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x66>
 8000284:	e092      	b.n	80003ac <__aeabi_dmul+0x18c>
 8000286:	4abe      	ldr	r2, [pc, #760]	@ (8000580 <__aeabi_dmul+0x360>)
 8000288:	4694      	mov	ip, r2
 800028a:	4463      	add	r3, ip
 800028c:	449b      	add	fp, r3
 800028e:	2d0a      	cmp	r5, #10
 8000290:	dc42      	bgt.n	8000318 <__aeabi_dmul+0xf8>
 8000292:	00e4      	lsls	r4, r4, #3
 8000294:	0f73      	lsrs	r3, r6, #29
 8000296:	4323      	orrs	r3, r4
 8000298:	2480      	movs	r4, #128	@ 0x80
 800029a:	4649      	mov	r1, r9
 800029c:	0424      	lsls	r4, r4, #16
 800029e:	431c      	orrs	r4, r3
 80002a0:	00f3      	lsls	r3, r6, #3
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	9b00      	ldr	r3, [sp, #0]
 80002a6:	2000      	movs	r0, #0
 80002a8:	4059      	eors	r1, r3
 80002aa:	b2cb      	uxtb	r3, r1
 80002ac:	9303      	str	r3, [sp, #12]
 80002ae:	2d02      	cmp	r5, #2
 80002b0:	dc00      	bgt.n	80002b4 <__aeabi_dmul+0x94>
 80002b2:	e094      	b.n	80003de <__aeabi_dmul+0x1be>
 80002b4:	2301      	movs	r3, #1
 80002b6:	40ab      	lsls	r3, r5
 80002b8:	001d      	movs	r5, r3
 80002ba:	23a6      	movs	r3, #166	@ 0xa6
 80002bc:	002a      	movs	r2, r5
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	401a      	ands	r2, r3
 80002c2:	421d      	tst	r5, r3
 80002c4:	d000      	beq.n	80002c8 <__aeabi_dmul+0xa8>
 80002c6:	e229      	b.n	800071c <__aeabi_dmul+0x4fc>
 80002c8:	2390      	movs	r3, #144	@ 0x90
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	421d      	tst	r5, r3
 80002ce:	d100      	bne.n	80002d2 <__aeabi_dmul+0xb2>
 80002d0:	e24d      	b.n	800076e <__aeabi_dmul+0x54e>
 80002d2:	2300      	movs	r3, #0
 80002d4:	2480      	movs	r4, #128	@ 0x80
 80002d6:	4699      	mov	r9, r3
 80002d8:	0324      	lsls	r4, r4, #12
 80002da:	4ba8      	ldr	r3, [pc, #672]	@ (800057c <__aeabi_dmul+0x35c>)
 80002dc:	0010      	movs	r0, r2
 80002de:	464a      	mov	r2, r9
 80002e0:	051b      	lsls	r3, r3, #20
 80002e2:	4323      	orrs	r3, r4
 80002e4:	07d2      	lsls	r2, r2, #31
 80002e6:	4313      	orrs	r3, r2
 80002e8:	0019      	movs	r1, r3
 80002ea:	b005      	add	sp, #20
 80002ec:	bcf0      	pop	{r4, r5, r6, r7}
 80002ee:	46bb      	mov	fp, r7
 80002f0:	46b2      	mov	sl, r6
 80002f2:	46a9      	mov	r9, r5
 80002f4:	46a0      	mov	r8, r4
 80002f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f8:	4652      	mov	r2, sl
 80002fa:	4302      	orrs	r2, r0
 80002fc:	4690      	mov	r8, r2
 80002fe:	d000      	beq.n	8000302 <__aeabi_dmul+0xe2>
 8000300:	e1ac      	b.n	800065c <__aeabi_dmul+0x43c>
 8000302:	469b      	mov	fp, r3
 8000304:	2302      	movs	r3, #2
 8000306:	4692      	mov	sl, r2
 8000308:	2508      	movs	r5, #8
 800030a:	9302      	str	r3, [sp, #8]
 800030c:	e7ae      	b.n	800026c <__aeabi_dmul+0x4c>
 800030e:	9b00      	ldr	r3, [sp, #0]
 8000310:	46a2      	mov	sl, r4
 8000312:	4699      	mov	r9, r3
 8000314:	9b01      	ldr	r3, [sp, #4]
 8000316:	4698      	mov	r8, r3
 8000318:	9b02      	ldr	r3, [sp, #8]
 800031a:	2b02      	cmp	r3, #2
 800031c:	d100      	bne.n	8000320 <__aeabi_dmul+0x100>
 800031e:	e1ca      	b.n	80006b6 <__aeabi_dmul+0x496>
 8000320:	2b03      	cmp	r3, #3
 8000322:	d100      	bne.n	8000326 <__aeabi_dmul+0x106>
 8000324:	e192      	b.n	800064c <__aeabi_dmul+0x42c>
 8000326:	2b01      	cmp	r3, #1
 8000328:	d110      	bne.n	800034c <__aeabi_dmul+0x12c>
 800032a:	2300      	movs	r3, #0
 800032c:	2400      	movs	r4, #0
 800032e:	2200      	movs	r2, #0
 8000330:	e7d4      	b.n	80002dc <__aeabi_dmul+0xbc>
 8000332:	2201      	movs	r2, #1
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	403a      	ands	r2, r7
 8000338:	4313      	orrs	r3, r2
 800033a:	4652      	mov	r2, sl
 800033c:	07d2      	lsls	r2, r2, #31
 800033e:	4313      	orrs	r3, r2
 8000340:	4698      	mov	r8, r3
 8000342:	4653      	mov	r3, sl
 8000344:	085b      	lsrs	r3, r3, #1
 8000346:	469a      	mov	sl, r3
 8000348:	9b03      	ldr	r3, [sp, #12]
 800034a:	4699      	mov	r9, r3
 800034c:	465b      	mov	r3, fp
 800034e:	1c58      	adds	r0, r3, #1
 8000350:	2380      	movs	r3, #128	@ 0x80
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	445b      	add	r3, fp
 8000356:	2b00      	cmp	r3, #0
 8000358:	dc00      	bgt.n	800035c <__aeabi_dmul+0x13c>
 800035a:	e1b1      	b.n	80006c0 <__aeabi_dmul+0x4a0>
 800035c:	4642      	mov	r2, r8
 800035e:	0752      	lsls	r2, r2, #29
 8000360:	d00b      	beq.n	800037a <__aeabi_dmul+0x15a>
 8000362:	220f      	movs	r2, #15
 8000364:	4641      	mov	r1, r8
 8000366:	400a      	ands	r2, r1
 8000368:	2a04      	cmp	r2, #4
 800036a:	d006      	beq.n	800037a <__aeabi_dmul+0x15a>
 800036c:	4642      	mov	r2, r8
 800036e:	1d11      	adds	r1, r2, #4
 8000370:	4541      	cmp	r1, r8
 8000372:	4192      	sbcs	r2, r2
 8000374:	4688      	mov	r8, r1
 8000376:	4252      	negs	r2, r2
 8000378:	4492      	add	sl, r2
 800037a:	4652      	mov	r2, sl
 800037c:	01d2      	lsls	r2, r2, #7
 800037e:	d506      	bpl.n	800038e <__aeabi_dmul+0x16e>
 8000380:	4652      	mov	r2, sl
 8000382:	4b80      	ldr	r3, [pc, #512]	@ (8000584 <__aeabi_dmul+0x364>)
 8000384:	401a      	ands	r2, r3
 8000386:	2380      	movs	r3, #128	@ 0x80
 8000388:	4692      	mov	sl, r2
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	18c3      	adds	r3, r0, r3
 800038e:	4a7e      	ldr	r2, [pc, #504]	@ (8000588 <__aeabi_dmul+0x368>)
 8000390:	4293      	cmp	r3, r2
 8000392:	dd00      	ble.n	8000396 <__aeabi_dmul+0x176>
 8000394:	e18f      	b.n	80006b6 <__aeabi_dmul+0x496>
 8000396:	4642      	mov	r2, r8
 8000398:	08d1      	lsrs	r1, r2, #3
 800039a:	4652      	mov	r2, sl
 800039c:	0752      	lsls	r2, r2, #29
 800039e:	430a      	orrs	r2, r1
 80003a0:	4651      	mov	r1, sl
 80003a2:	055b      	lsls	r3, r3, #21
 80003a4:	024c      	lsls	r4, r1, #9
 80003a6:	0b24      	lsrs	r4, r4, #12
 80003a8:	0d5b      	lsrs	r3, r3, #21
 80003aa:	e797      	b.n	80002dc <__aeabi_dmul+0xbc>
 80003ac:	4b73      	ldr	r3, [pc, #460]	@ (800057c <__aeabi_dmul+0x35c>)
 80003ae:	4326      	orrs	r6, r4
 80003b0:	469c      	mov	ip, r3
 80003b2:	44e3      	add	fp, ip
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d100      	bne.n	80003ba <__aeabi_dmul+0x19a>
 80003b8:	e16f      	b.n	800069a <__aeabi_dmul+0x47a>
 80003ba:	2303      	movs	r3, #3
 80003bc:	4649      	mov	r1, r9
 80003be:	431d      	orrs	r5, r3
 80003c0:	9b00      	ldr	r3, [sp, #0]
 80003c2:	4059      	eors	r1, r3
 80003c4:	b2cb      	uxtb	r3, r1
 80003c6:	9303      	str	r3, [sp, #12]
 80003c8:	2d0a      	cmp	r5, #10
 80003ca:	dd00      	ble.n	80003ce <__aeabi_dmul+0x1ae>
 80003cc:	e133      	b.n	8000636 <__aeabi_dmul+0x416>
 80003ce:	2301      	movs	r3, #1
 80003d0:	40ab      	lsls	r3, r5
 80003d2:	001d      	movs	r5, r3
 80003d4:	2303      	movs	r3, #3
 80003d6:	9302      	str	r3, [sp, #8]
 80003d8:	2288      	movs	r2, #136	@ 0x88
 80003da:	422a      	tst	r2, r5
 80003dc:	d197      	bne.n	800030e <__aeabi_dmul+0xee>
 80003de:	4642      	mov	r2, r8
 80003e0:	4643      	mov	r3, r8
 80003e2:	0412      	lsls	r2, r2, #16
 80003e4:	0c12      	lsrs	r2, r2, #16
 80003e6:	0016      	movs	r6, r2
 80003e8:	9801      	ldr	r0, [sp, #4]
 80003ea:	0c1d      	lsrs	r5, r3, #16
 80003ec:	0c03      	lsrs	r3, r0, #16
 80003ee:	0400      	lsls	r0, r0, #16
 80003f0:	0c00      	lsrs	r0, r0, #16
 80003f2:	4346      	muls	r6, r0
 80003f4:	46b4      	mov	ip, r6
 80003f6:	001e      	movs	r6, r3
 80003f8:	436e      	muls	r6, r5
 80003fa:	9600      	str	r6, [sp, #0]
 80003fc:	0016      	movs	r6, r2
 80003fe:	0007      	movs	r7, r0
 8000400:	435e      	muls	r6, r3
 8000402:	4661      	mov	r1, ip
 8000404:	46b0      	mov	r8, r6
 8000406:	436f      	muls	r7, r5
 8000408:	0c0e      	lsrs	r6, r1, #16
 800040a:	44b8      	add	r8, r7
 800040c:	4446      	add	r6, r8
 800040e:	42b7      	cmp	r7, r6
 8000410:	d905      	bls.n	800041e <__aeabi_dmul+0x1fe>
 8000412:	2180      	movs	r1, #128	@ 0x80
 8000414:	0249      	lsls	r1, r1, #9
 8000416:	4688      	mov	r8, r1
 8000418:	9f00      	ldr	r7, [sp, #0]
 800041a:	4447      	add	r7, r8
 800041c:	9700      	str	r7, [sp, #0]
 800041e:	4661      	mov	r1, ip
 8000420:	0409      	lsls	r1, r1, #16
 8000422:	0c09      	lsrs	r1, r1, #16
 8000424:	0c37      	lsrs	r7, r6, #16
 8000426:	0436      	lsls	r6, r6, #16
 8000428:	468c      	mov	ip, r1
 800042a:	0031      	movs	r1, r6
 800042c:	4461      	add	r1, ip
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	0011      	movs	r1, r2
 8000432:	0c26      	lsrs	r6, r4, #16
 8000434:	0424      	lsls	r4, r4, #16
 8000436:	0c24      	lsrs	r4, r4, #16
 8000438:	4361      	muls	r1, r4
 800043a:	468c      	mov	ip, r1
 800043c:	0021      	movs	r1, r4
 800043e:	4369      	muls	r1, r5
 8000440:	4689      	mov	r9, r1
 8000442:	4661      	mov	r1, ip
 8000444:	0c09      	lsrs	r1, r1, #16
 8000446:	4688      	mov	r8, r1
 8000448:	4372      	muls	r2, r6
 800044a:	444a      	add	r2, r9
 800044c:	4442      	add	r2, r8
 800044e:	4375      	muls	r5, r6
 8000450:	4591      	cmp	r9, r2
 8000452:	d903      	bls.n	800045c <__aeabi_dmul+0x23c>
 8000454:	2180      	movs	r1, #128	@ 0x80
 8000456:	0249      	lsls	r1, r1, #9
 8000458:	4688      	mov	r8, r1
 800045a:	4445      	add	r5, r8
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	4688      	mov	r8, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0409      	lsls	r1, r1, #16
 8000464:	0c09      	lsrs	r1, r1, #16
 8000466:	468c      	mov	ip, r1
 8000468:	0412      	lsls	r2, r2, #16
 800046a:	4462      	add	r2, ip
 800046c:	18b9      	adds	r1, r7, r2
 800046e:	9102      	str	r1, [sp, #8]
 8000470:	4651      	mov	r1, sl
 8000472:	0c09      	lsrs	r1, r1, #16
 8000474:	468c      	mov	ip, r1
 8000476:	4651      	mov	r1, sl
 8000478:	040f      	lsls	r7, r1, #16
 800047a:	0c3f      	lsrs	r7, r7, #16
 800047c:	0039      	movs	r1, r7
 800047e:	4341      	muls	r1, r0
 8000480:	4445      	add	r5, r8
 8000482:	4688      	mov	r8, r1
 8000484:	4661      	mov	r1, ip
 8000486:	4341      	muls	r1, r0
 8000488:	468a      	mov	sl, r1
 800048a:	4641      	mov	r1, r8
 800048c:	4660      	mov	r0, ip
 800048e:	0c09      	lsrs	r1, r1, #16
 8000490:	4689      	mov	r9, r1
 8000492:	4358      	muls	r0, r3
 8000494:	437b      	muls	r3, r7
 8000496:	4453      	add	r3, sl
 8000498:	444b      	add	r3, r9
 800049a:	459a      	cmp	sl, r3
 800049c:	d903      	bls.n	80004a6 <__aeabi_dmul+0x286>
 800049e:	2180      	movs	r1, #128	@ 0x80
 80004a0:	0249      	lsls	r1, r1, #9
 80004a2:	4689      	mov	r9, r1
 80004a4:	4448      	add	r0, r9
 80004a6:	0c19      	lsrs	r1, r3, #16
 80004a8:	4689      	mov	r9, r1
 80004aa:	4641      	mov	r1, r8
 80004ac:	0409      	lsls	r1, r1, #16
 80004ae:	0c09      	lsrs	r1, r1, #16
 80004b0:	4688      	mov	r8, r1
 80004b2:	0039      	movs	r1, r7
 80004b4:	4361      	muls	r1, r4
 80004b6:	041b      	lsls	r3, r3, #16
 80004b8:	4443      	add	r3, r8
 80004ba:	4688      	mov	r8, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	434c      	muls	r4, r1
 80004c0:	4371      	muls	r1, r6
 80004c2:	468c      	mov	ip, r1
 80004c4:	4641      	mov	r1, r8
 80004c6:	4377      	muls	r7, r6
 80004c8:	0c0e      	lsrs	r6, r1, #16
 80004ca:	193f      	adds	r7, r7, r4
 80004cc:	19f6      	adds	r6, r6, r7
 80004ce:	4448      	add	r0, r9
 80004d0:	42b4      	cmp	r4, r6
 80004d2:	d903      	bls.n	80004dc <__aeabi_dmul+0x2bc>
 80004d4:	2180      	movs	r1, #128	@ 0x80
 80004d6:	0249      	lsls	r1, r1, #9
 80004d8:	4689      	mov	r9, r1
 80004da:	44cc      	add	ip, r9
 80004dc:	9902      	ldr	r1, [sp, #8]
 80004de:	9f00      	ldr	r7, [sp, #0]
 80004e0:	4689      	mov	r9, r1
 80004e2:	0431      	lsls	r1, r6, #16
 80004e4:	444f      	add	r7, r9
 80004e6:	4689      	mov	r9, r1
 80004e8:	4641      	mov	r1, r8
 80004ea:	4297      	cmp	r7, r2
 80004ec:	4192      	sbcs	r2, r2
 80004ee:	040c      	lsls	r4, r1, #16
 80004f0:	0c24      	lsrs	r4, r4, #16
 80004f2:	444c      	add	r4, r9
 80004f4:	18ff      	adds	r7, r7, r3
 80004f6:	4252      	negs	r2, r2
 80004f8:	1964      	adds	r4, r4, r5
 80004fa:	18a1      	adds	r1, r4, r2
 80004fc:	429f      	cmp	r7, r3
 80004fe:	419b      	sbcs	r3, r3
 8000500:	4688      	mov	r8, r1
 8000502:	4682      	mov	sl, r0
 8000504:	425b      	negs	r3, r3
 8000506:	4699      	mov	r9, r3
 8000508:	4590      	cmp	r8, r2
 800050a:	4192      	sbcs	r2, r2
 800050c:	42ac      	cmp	r4, r5
 800050e:	41a4      	sbcs	r4, r4
 8000510:	44c2      	add	sl, r8
 8000512:	44d1      	add	r9, sl
 8000514:	4252      	negs	r2, r2
 8000516:	4264      	negs	r4, r4
 8000518:	4314      	orrs	r4, r2
 800051a:	4599      	cmp	r9, r3
 800051c:	419b      	sbcs	r3, r3
 800051e:	4582      	cmp	sl, r0
 8000520:	4192      	sbcs	r2, r2
 8000522:	425b      	negs	r3, r3
 8000524:	4252      	negs	r2, r2
 8000526:	4313      	orrs	r3, r2
 8000528:	464a      	mov	r2, r9
 800052a:	0c36      	lsrs	r6, r6, #16
 800052c:	19a4      	adds	r4, r4, r6
 800052e:	18e3      	adds	r3, r4, r3
 8000530:	4463      	add	r3, ip
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	0dd2      	lsrs	r2, r2, #23
 8000536:	431a      	orrs	r2, r3
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	4692      	mov	sl, r2
 800053c:	027a      	lsls	r2, r7, #9
 800053e:	430a      	orrs	r2, r1
 8000540:	1e50      	subs	r0, r2, #1
 8000542:	4182      	sbcs	r2, r0
 8000544:	0dff      	lsrs	r7, r7, #23
 8000546:	4317      	orrs	r7, r2
 8000548:	464a      	mov	r2, r9
 800054a:	0252      	lsls	r2, r2, #9
 800054c:	4317      	orrs	r7, r2
 800054e:	46b8      	mov	r8, r7
 8000550:	01db      	lsls	r3, r3, #7
 8000552:	d500      	bpl.n	8000556 <__aeabi_dmul+0x336>
 8000554:	e6ed      	b.n	8000332 <__aeabi_dmul+0x112>
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <__aeabi_dmul+0x36c>)
 8000558:	9a03      	ldr	r2, [sp, #12]
 800055a:	445b      	add	r3, fp
 800055c:	4691      	mov	r9, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	dc00      	bgt.n	8000564 <__aeabi_dmul+0x344>
 8000562:	e0ac      	b.n	80006be <__aeabi_dmul+0x49e>
 8000564:	003a      	movs	r2, r7
 8000566:	0752      	lsls	r2, r2, #29
 8000568:	d100      	bne.n	800056c <__aeabi_dmul+0x34c>
 800056a:	e710      	b.n	800038e <__aeabi_dmul+0x16e>
 800056c:	220f      	movs	r2, #15
 800056e:	4658      	mov	r0, fp
 8000570:	403a      	ands	r2, r7
 8000572:	2a04      	cmp	r2, #4
 8000574:	d000      	beq.n	8000578 <__aeabi_dmul+0x358>
 8000576:	e6f9      	b.n	800036c <__aeabi_dmul+0x14c>
 8000578:	e709      	b.n	800038e <__aeabi_dmul+0x16e>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	000007ff 	.word	0x000007ff
 8000580:	fffffc01 	.word	0xfffffc01
 8000584:	feffffff 	.word	0xfeffffff
 8000588:	000007fe 	.word	0x000007fe
 800058c:	000003ff 	.word	0x000003ff
 8000590:	0022      	movs	r2, r4
 8000592:	4332      	orrs	r2, r6
 8000594:	d06f      	beq.n	8000676 <__aeabi_dmul+0x456>
 8000596:	2c00      	cmp	r4, #0
 8000598:	d100      	bne.n	800059c <__aeabi_dmul+0x37c>
 800059a:	e0c2      	b.n	8000722 <__aeabi_dmul+0x502>
 800059c:	0020      	movs	r0, r4
 800059e:	f000 fd99 	bl	80010d4 <__clzsi2>
 80005a2:	0002      	movs	r2, r0
 80005a4:	0003      	movs	r3, r0
 80005a6:	3a0b      	subs	r2, #11
 80005a8:	201d      	movs	r0, #29
 80005aa:	1a82      	subs	r2, r0, r2
 80005ac:	0030      	movs	r0, r6
 80005ae:	0019      	movs	r1, r3
 80005b0:	40d0      	lsrs	r0, r2
 80005b2:	3908      	subs	r1, #8
 80005b4:	408c      	lsls	r4, r1
 80005b6:	0002      	movs	r2, r0
 80005b8:	4322      	orrs	r2, r4
 80005ba:	0034      	movs	r4, r6
 80005bc:	408c      	lsls	r4, r1
 80005be:	4659      	mov	r1, fp
 80005c0:	1acb      	subs	r3, r1, r3
 80005c2:	4986      	ldr	r1, [pc, #536]	@ (80007dc <__aeabi_dmul+0x5bc>)
 80005c4:	468b      	mov	fp, r1
 80005c6:	449b      	add	fp, r3
 80005c8:	2d0a      	cmp	r5, #10
 80005ca:	dd00      	ble.n	80005ce <__aeabi_dmul+0x3ae>
 80005cc:	e6a4      	b.n	8000318 <__aeabi_dmul+0xf8>
 80005ce:	4649      	mov	r1, r9
 80005d0:	9b00      	ldr	r3, [sp, #0]
 80005d2:	9401      	str	r4, [sp, #4]
 80005d4:	4059      	eors	r1, r3
 80005d6:	b2cb      	uxtb	r3, r1
 80005d8:	0014      	movs	r4, r2
 80005da:	2000      	movs	r0, #0
 80005dc:	9303      	str	r3, [sp, #12]
 80005de:	2d02      	cmp	r5, #2
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_dmul+0x3c4>
 80005e2:	e667      	b.n	80002b4 <__aeabi_dmul+0x94>
 80005e4:	e6fb      	b.n	80003de <__aeabi_dmul+0x1be>
 80005e6:	4653      	mov	r3, sl
 80005e8:	4303      	orrs	r3, r0
 80005ea:	4698      	mov	r8, r3
 80005ec:	d03c      	beq.n	8000668 <__aeabi_dmul+0x448>
 80005ee:	4653      	mov	r3, sl
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dmul+0x3d6>
 80005f4:	e0a3      	b.n	800073e <__aeabi_dmul+0x51e>
 80005f6:	4650      	mov	r0, sl
 80005f8:	f000 fd6c 	bl	80010d4 <__clzsi2>
 80005fc:	230b      	movs	r3, #11
 80005fe:	425b      	negs	r3, r3
 8000600:	469c      	mov	ip, r3
 8000602:	0002      	movs	r2, r0
 8000604:	4484      	add	ip, r0
 8000606:	0011      	movs	r1, r2
 8000608:	4650      	mov	r0, sl
 800060a:	3908      	subs	r1, #8
 800060c:	4088      	lsls	r0, r1
 800060e:	231d      	movs	r3, #29
 8000610:	4680      	mov	r8, r0
 8000612:	4660      	mov	r0, ip
 8000614:	1a1b      	subs	r3, r3, r0
 8000616:	0020      	movs	r0, r4
 8000618:	40d8      	lsrs	r0, r3
 800061a:	0003      	movs	r3, r0
 800061c:	4640      	mov	r0, r8
 800061e:	4303      	orrs	r3, r0
 8000620:	469a      	mov	sl, r3
 8000622:	0023      	movs	r3, r4
 8000624:	408b      	lsls	r3, r1
 8000626:	4698      	mov	r8, r3
 8000628:	4b6c      	ldr	r3, [pc, #432]	@ (80007dc <__aeabi_dmul+0x5bc>)
 800062a:	2500      	movs	r5, #0
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	469b      	mov	fp, r3
 8000630:	2300      	movs	r3, #0
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	e61a      	b.n	800026c <__aeabi_dmul+0x4c>
 8000636:	2d0f      	cmp	r5, #15
 8000638:	d000      	beq.n	800063c <__aeabi_dmul+0x41c>
 800063a:	e0c9      	b.n	80007d0 <__aeabi_dmul+0x5b0>
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	4652      	mov	r2, sl
 8000640:	031b      	lsls	r3, r3, #12
 8000642:	421a      	tst	r2, r3
 8000644:	d002      	beq.n	800064c <__aeabi_dmul+0x42c>
 8000646:	421c      	tst	r4, r3
 8000648:	d100      	bne.n	800064c <__aeabi_dmul+0x42c>
 800064a:	e092      	b.n	8000772 <__aeabi_dmul+0x552>
 800064c:	2480      	movs	r4, #128	@ 0x80
 800064e:	4653      	mov	r3, sl
 8000650:	0324      	lsls	r4, r4, #12
 8000652:	431c      	orrs	r4, r3
 8000654:	0324      	lsls	r4, r4, #12
 8000656:	4642      	mov	r2, r8
 8000658:	0b24      	lsrs	r4, r4, #12
 800065a:	e63e      	b.n	80002da <__aeabi_dmul+0xba>
 800065c:	469b      	mov	fp, r3
 800065e:	2303      	movs	r3, #3
 8000660:	4680      	mov	r8, r0
 8000662:	250c      	movs	r5, #12
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	e601      	b.n	800026c <__aeabi_dmul+0x4c>
 8000668:	2300      	movs	r3, #0
 800066a:	469a      	mov	sl, r3
 800066c:	469b      	mov	fp, r3
 800066e:	3301      	adds	r3, #1
 8000670:	2504      	movs	r5, #4
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	e5fa      	b.n	800026c <__aeabi_dmul+0x4c>
 8000676:	2101      	movs	r1, #1
 8000678:	430d      	orrs	r5, r1
 800067a:	2d0a      	cmp	r5, #10
 800067c:	dd00      	ble.n	8000680 <__aeabi_dmul+0x460>
 800067e:	e64b      	b.n	8000318 <__aeabi_dmul+0xf8>
 8000680:	4649      	mov	r1, r9
 8000682:	9800      	ldr	r0, [sp, #0]
 8000684:	4041      	eors	r1, r0
 8000686:	b2c9      	uxtb	r1, r1
 8000688:	9103      	str	r1, [sp, #12]
 800068a:	2d02      	cmp	r5, #2
 800068c:	dc00      	bgt.n	8000690 <__aeabi_dmul+0x470>
 800068e:	e096      	b.n	80007be <__aeabi_dmul+0x59e>
 8000690:	2300      	movs	r3, #0
 8000692:	2400      	movs	r4, #0
 8000694:	2001      	movs	r0, #1
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	e60c      	b.n	80002b4 <__aeabi_dmul+0x94>
 800069a:	4649      	mov	r1, r9
 800069c:	2302      	movs	r3, #2
 800069e:	9a00      	ldr	r2, [sp, #0]
 80006a0:	432b      	orrs	r3, r5
 80006a2:	4051      	eors	r1, r2
 80006a4:	b2ca      	uxtb	r2, r1
 80006a6:	9203      	str	r2, [sp, #12]
 80006a8:	2b0a      	cmp	r3, #10
 80006aa:	dd00      	ble.n	80006ae <__aeabi_dmul+0x48e>
 80006ac:	e634      	b.n	8000318 <__aeabi_dmul+0xf8>
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d157      	bne.n	8000762 <__aeabi_dmul+0x542>
 80006b2:	9b03      	ldr	r3, [sp, #12]
 80006b4:	4699      	mov	r9, r3
 80006b6:	2400      	movs	r4, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	4b49      	ldr	r3, [pc, #292]	@ (80007e0 <__aeabi_dmul+0x5c0>)
 80006bc:	e60e      	b.n	80002dc <__aeabi_dmul+0xbc>
 80006be:	4658      	mov	r0, fp
 80006c0:	2101      	movs	r1, #1
 80006c2:	1ac9      	subs	r1, r1, r3
 80006c4:	2938      	cmp	r1, #56	@ 0x38
 80006c6:	dd00      	ble.n	80006ca <__aeabi_dmul+0x4aa>
 80006c8:	e62f      	b.n	800032a <__aeabi_dmul+0x10a>
 80006ca:	291f      	cmp	r1, #31
 80006cc:	dd56      	ble.n	800077c <__aeabi_dmul+0x55c>
 80006ce:	221f      	movs	r2, #31
 80006d0:	4654      	mov	r4, sl
 80006d2:	4252      	negs	r2, r2
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	40dc      	lsrs	r4, r3
 80006d8:	2920      	cmp	r1, #32
 80006da:	d007      	beq.n	80006ec <__aeabi_dmul+0x4cc>
 80006dc:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <__aeabi_dmul+0x5c4>)
 80006de:	4642      	mov	r2, r8
 80006e0:	469c      	mov	ip, r3
 80006e2:	4653      	mov	r3, sl
 80006e4:	4460      	add	r0, ip
 80006e6:	4083      	lsls	r3, r0
 80006e8:	431a      	orrs	r2, r3
 80006ea:	4690      	mov	r8, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	2107      	movs	r1, #7
 80006f0:	1e53      	subs	r3, r2, #1
 80006f2:	419a      	sbcs	r2, r3
 80006f4:	000b      	movs	r3, r1
 80006f6:	4322      	orrs	r2, r4
 80006f8:	4013      	ands	r3, r2
 80006fa:	2400      	movs	r4, #0
 80006fc:	4211      	tst	r1, r2
 80006fe:	d009      	beq.n	8000714 <__aeabi_dmul+0x4f4>
 8000700:	230f      	movs	r3, #15
 8000702:	4013      	ands	r3, r2
 8000704:	2b04      	cmp	r3, #4
 8000706:	d05d      	beq.n	80007c4 <__aeabi_dmul+0x5a4>
 8000708:	1d11      	adds	r1, r2, #4
 800070a:	4291      	cmp	r1, r2
 800070c:	419b      	sbcs	r3, r3
 800070e:	000a      	movs	r2, r1
 8000710:	425b      	negs	r3, r3
 8000712:	075b      	lsls	r3, r3, #29
 8000714:	08d2      	lsrs	r2, r2, #3
 8000716:	431a      	orrs	r2, r3
 8000718:	2300      	movs	r3, #0
 800071a:	e5df      	b.n	80002dc <__aeabi_dmul+0xbc>
 800071c:	9b03      	ldr	r3, [sp, #12]
 800071e:	4699      	mov	r9, r3
 8000720:	e5fa      	b.n	8000318 <__aeabi_dmul+0xf8>
 8000722:	9801      	ldr	r0, [sp, #4]
 8000724:	f000 fcd6 	bl	80010d4 <__clzsi2>
 8000728:	0002      	movs	r2, r0
 800072a:	0003      	movs	r3, r0
 800072c:	3215      	adds	r2, #21
 800072e:	3320      	adds	r3, #32
 8000730:	2a1c      	cmp	r2, #28
 8000732:	dc00      	bgt.n	8000736 <__aeabi_dmul+0x516>
 8000734:	e738      	b.n	80005a8 <__aeabi_dmul+0x388>
 8000736:	9a01      	ldr	r2, [sp, #4]
 8000738:	3808      	subs	r0, #8
 800073a:	4082      	lsls	r2, r0
 800073c:	e73f      	b.n	80005be <__aeabi_dmul+0x39e>
 800073e:	f000 fcc9 	bl	80010d4 <__clzsi2>
 8000742:	2315      	movs	r3, #21
 8000744:	469c      	mov	ip, r3
 8000746:	4484      	add	ip, r0
 8000748:	0002      	movs	r2, r0
 800074a:	4663      	mov	r3, ip
 800074c:	3220      	adds	r2, #32
 800074e:	2b1c      	cmp	r3, #28
 8000750:	dc00      	bgt.n	8000754 <__aeabi_dmul+0x534>
 8000752:	e758      	b.n	8000606 <__aeabi_dmul+0x3e6>
 8000754:	2300      	movs	r3, #0
 8000756:	4698      	mov	r8, r3
 8000758:	0023      	movs	r3, r4
 800075a:	3808      	subs	r0, #8
 800075c:	4083      	lsls	r3, r0
 800075e:	469a      	mov	sl, r3
 8000760:	e762      	b.n	8000628 <__aeabi_dmul+0x408>
 8000762:	001d      	movs	r5, r3
 8000764:	2300      	movs	r3, #0
 8000766:	2400      	movs	r4, #0
 8000768:	2002      	movs	r0, #2
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	e5a2      	b.n	80002b4 <__aeabi_dmul+0x94>
 800076e:	9002      	str	r0, [sp, #8]
 8000770:	e632      	b.n	80003d8 <__aeabi_dmul+0x1b8>
 8000772:	431c      	orrs	r4, r3
 8000774:	9b00      	ldr	r3, [sp, #0]
 8000776:	9a01      	ldr	r2, [sp, #4]
 8000778:	4699      	mov	r9, r3
 800077a:	e5ae      	b.n	80002da <__aeabi_dmul+0xba>
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <__aeabi_dmul+0x5c8>)
 800077e:	4652      	mov	r2, sl
 8000780:	18c3      	adds	r3, r0, r3
 8000782:	4640      	mov	r0, r8
 8000784:	409a      	lsls	r2, r3
 8000786:	40c8      	lsrs	r0, r1
 8000788:	4302      	orrs	r2, r0
 800078a:	4640      	mov	r0, r8
 800078c:	4098      	lsls	r0, r3
 800078e:	0003      	movs	r3, r0
 8000790:	1e58      	subs	r0, r3, #1
 8000792:	4183      	sbcs	r3, r0
 8000794:	4654      	mov	r4, sl
 8000796:	431a      	orrs	r2, r3
 8000798:	40cc      	lsrs	r4, r1
 800079a:	0753      	lsls	r3, r2, #29
 800079c:	d009      	beq.n	80007b2 <__aeabi_dmul+0x592>
 800079e:	230f      	movs	r3, #15
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d005      	beq.n	80007b2 <__aeabi_dmul+0x592>
 80007a6:	1d13      	adds	r3, r2, #4
 80007a8:	4293      	cmp	r3, r2
 80007aa:	4192      	sbcs	r2, r2
 80007ac:	4252      	negs	r2, r2
 80007ae:	18a4      	adds	r4, r4, r2
 80007b0:	001a      	movs	r2, r3
 80007b2:	0223      	lsls	r3, r4, #8
 80007b4:	d508      	bpl.n	80007c8 <__aeabi_dmul+0x5a8>
 80007b6:	2301      	movs	r3, #1
 80007b8:	2400      	movs	r4, #0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e58e      	b.n	80002dc <__aeabi_dmul+0xbc>
 80007be:	4689      	mov	r9, r1
 80007c0:	2400      	movs	r4, #0
 80007c2:	e58b      	b.n	80002dc <__aeabi_dmul+0xbc>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e7a5      	b.n	8000714 <__aeabi_dmul+0x4f4>
 80007c8:	0763      	lsls	r3, r4, #29
 80007ca:	0264      	lsls	r4, r4, #9
 80007cc:	0b24      	lsrs	r4, r4, #12
 80007ce:	e7a1      	b.n	8000714 <__aeabi_dmul+0x4f4>
 80007d0:	9b00      	ldr	r3, [sp, #0]
 80007d2:	46a2      	mov	sl, r4
 80007d4:	4699      	mov	r9, r3
 80007d6:	9b01      	ldr	r3, [sp, #4]
 80007d8:	4698      	mov	r8, r3
 80007da:	e737      	b.n	800064c <__aeabi_dmul+0x42c>
 80007dc:	fffffc0d 	.word	0xfffffc0d
 80007e0:	000007ff 	.word	0x000007ff
 80007e4:	0000043e 	.word	0x0000043e
 80007e8:	0000041e 	.word	0x0000041e

080007ec <__aeabi_dsub>:
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	4657      	mov	r7, sl
 80007f0:	464e      	mov	r6, r9
 80007f2:	4645      	mov	r5, r8
 80007f4:	46de      	mov	lr, fp
 80007f6:	b5e0      	push	{r5, r6, r7, lr}
 80007f8:	b083      	sub	sp, #12
 80007fa:	9000      	str	r0, [sp, #0]
 80007fc:	9101      	str	r1, [sp, #4]
 80007fe:	030c      	lsls	r4, r1, #12
 8000800:	004d      	lsls	r5, r1, #1
 8000802:	0fce      	lsrs	r6, r1, #31
 8000804:	0a61      	lsrs	r1, r4, #9
 8000806:	9c00      	ldr	r4, [sp, #0]
 8000808:	005f      	lsls	r7, r3, #1
 800080a:	0f64      	lsrs	r4, r4, #29
 800080c:	430c      	orrs	r4, r1
 800080e:	9900      	ldr	r1, [sp, #0]
 8000810:	9200      	str	r2, [sp, #0]
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	00c8      	lsls	r0, r1, #3
 8000816:	0319      	lsls	r1, r3, #12
 8000818:	0d7b      	lsrs	r3, r7, #21
 800081a:	4699      	mov	r9, r3
 800081c:	9b01      	ldr	r3, [sp, #4]
 800081e:	4fcc      	ldr	r7, [pc, #816]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000820:	0fdb      	lsrs	r3, r3, #31
 8000822:	469c      	mov	ip, r3
 8000824:	0a4b      	lsrs	r3, r1, #9
 8000826:	9900      	ldr	r1, [sp, #0]
 8000828:	4680      	mov	r8, r0
 800082a:	0f49      	lsrs	r1, r1, #29
 800082c:	4319      	orrs	r1, r3
 800082e:	9b00      	ldr	r3, [sp, #0]
 8000830:	468b      	mov	fp, r1
 8000832:	00da      	lsls	r2, r3, #3
 8000834:	4692      	mov	sl, r2
 8000836:	0d6d      	lsrs	r5, r5, #21
 8000838:	45b9      	cmp	r9, r7
 800083a:	d100      	bne.n	800083e <__aeabi_dsub+0x52>
 800083c:	e0bf      	b.n	80009be <__aeabi_dsub+0x1d2>
 800083e:	2301      	movs	r3, #1
 8000840:	4661      	mov	r1, ip
 8000842:	4059      	eors	r1, r3
 8000844:	464b      	mov	r3, r9
 8000846:	468c      	mov	ip, r1
 8000848:	1aeb      	subs	r3, r5, r3
 800084a:	428e      	cmp	r6, r1
 800084c:	d075      	beq.n	800093a <__aeabi_dsub+0x14e>
 800084e:	2b00      	cmp	r3, #0
 8000850:	dc00      	bgt.n	8000854 <__aeabi_dsub+0x68>
 8000852:	e2a3      	b.n	8000d9c <__aeabi_dsub+0x5b0>
 8000854:	4649      	mov	r1, r9
 8000856:	2900      	cmp	r1, #0
 8000858:	d100      	bne.n	800085c <__aeabi_dsub+0x70>
 800085a:	e0ce      	b.n	80009fa <__aeabi_dsub+0x20e>
 800085c:	42bd      	cmp	r5, r7
 800085e:	d100      	bne.n	8000862 <__aeabi_dsub+0x76>
 8000860:	e200      	b.n	8000c64 <__aeabi_dsub+0x478>
 8000862:	2701      	movs	r7, #1
 8000864:	2b38      	cmp	r3, #56	@ 0x38
 8000866:	dc19      	bgt.n	800089c <__aeabi_dsub+0xb0>
 8000868:	2780      	movs	r7, #128	@ 0x80
 800086a:	4659      	mov	r1, fp
 800086c:	043f      	lsls	r7, r7, #16
 800086e:	4339      	orrs	r1, r7
 8000870:	468b      	mov	fp, r1
 8000872:	2b1f      	cmp	r3, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dsub+0x8c>
 8000876:	e1fa      	b.n	8000c6e <__aeabi_dsub+0x482>
 8000878:	2720      	movs	r7, #32
 800087a:	1af9      	subs	r1, r7, r3
 800087c:	468c      	mov	ip, r1
 800087e:	4659      	mov	r1, fp
 8000880:	4667      	mov	r7, ip
 8000882:	40b9      	lsls	r1, r7
 8000884:	000f      	movs	r7, r1
 8000886:	0011      	movs	r1, r2
 8000888:	40d9      	lsrs	r1, r3
 800088a:	430f      	orrs	r7, r1
 800088c:	4661      	mov	r1, ip
 800088e:	408a      	lsls	r2, r1
 8000890:	1e51      	subs	r1, r2, #1
 8000892:	418a      	sbcs	r2, r1
 8000894:	4659      	mov	r1, fp
 8000896:	40d9      	lsrs	r1, r3
 8000898:	4317      	orrs	r7, r2
 800089a:	1a64      	subs	r4, r4, r1
 800089c:	1bc7      	subs	r7, r0, r7
 800089e:	42b8      	cmp	r0, r7
 80008a0:	4180      	sbcs	r0, r0
 80008a2:	4240      	negs	r0, r0
 80008a4:	1a24      	subs	r4, r4, r0
 80008a6:	0223      	lsls	r3, r4, #8
 80008a8:	d400      	bmi.n	80008ac <__aeabi_dsub+0xc0>
 80008aa:	e140      	b.n	8000b2e <__aeabi_dsub+0x342>
 80008ac:	0264      	lsls	r4, r4, #9
 80008ae:	0a64      	lsrs	r4, r4, #9
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dsub+0xca>
 80008b4:	e154      	b.n	8000b60 <__aeabi_dsub+0x374>
 80008b6:	0020      	movs	r0, r4
 80008b8:	f000 fc0c 	bl	80010d4 <__clzsi2>
 80008bc:	0003      	movs	r3, r0
 80008be:	3b08      	subs	r3, #8
 80008c0:	2120      	movs	r1, #32
 80008c2:	0038      	movs	r0, r7
 80008c4:	1aca      	subs	r2, r1, r3
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	409c      	lsls	r4, r3
 80008ca:	0002      	movs	r2, r0
 80008cc:	409f      	lsls	r7, r3
 80008ce:	4322      	orrs	r2, r4
 80008d0:	429d      	cmp	r5, r3
 80008d2:	dd00      	ble.n	80008d6 <__aeabi_dsub+0xea>
 80008d4:	e1a6      	b.n	8000c24 <__aeabi_dsub+0x438>
 80008d6:	1b58      	subs	r0, r3, r5
 80008d8:	3001      	adds	r0, #1
 80008da:	1a09      	subs	r1, r1, r0
 80008dc:	003c      	movs	r4, r7
 80008de:	408f      	lsls	r7, r1
 80008e0:	40c4      	lsrs	r4, r0
 80008e2:	1e7b      	subs	r3, r7, #1
 80008e4:	419f      	sbcs	r7, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	408b      	lsls	r3, r1
 80008ea:	4327      	orrs	r7, r4
 80008ec:	431f      	orrs	r7, r3
 80008ee:	40c2      	lsrs	r2, r0
 80008f0:	003b      	movs	r3, r7
 80008f2:	0014      	movs	r4, r2
 80008f4:	2500      	movs	r5, #0
 80008f6:	4313      	orrs	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_dsub+0x110>
 80008fa:	e1f7      	b.n	8000cec <__aeabi_dsub+0x500>
 80008fc:	077b      	lsls	r3, r7, #29
 80008fe:	d100      	bne.n	8000902 <__aeabi_dsub+0x116>
 8000900:	e377      	b.n	8000ff2 <__aeabi_dsub+0x806>
 8000902:	230f      	movs	r3, #15
 8000904:	0038      	movs	r0, r7
 8000906:	403b      	ands	r3, r7
 8000908:	2b04      	cmp	r3, #4
 800090a:	d004      	beq.n	8000916 <__aeabi_dsub+0x12a>
 800090c:	1d38      	adds	r0, r7, #4
 800090e:	42b8      	cmp	r0, r7
 8000910:	41bf      	sbcs	r7, r7
 8000912:	427f      	negs	r7, r7
 8000914:	19e4      	adds	r4, r4, r7
 8000916:	0223      	lsls	r3, r4, #8
 8000918:	d400      	bmi.n	800091c <__aeabi_dsub+0x130>
 800091a:	e368      	b.n	8000fee <__aeabi_dsub+0x802>
 800091c:	4b8c      	ldr	r3, [pc, #560]	@ (8000b50 <__aeabi_dsub+0x364>)
 800091e:	3501      	adds	r5, #1
 8000920:	429d      	cmp	r5, r3
 8000922:	d100      	bne.n	8000926 <__aeabi_dsub+0x13a>
 8000924:	e0f4      	b.n	8000b10 <__aeabi_dsub+0x324>
 8000926:	4b8b      	ldr	r3, [pc, #556]	@ (8000b54 <__aeabi_dsub+0x368>)
 8000928:	056d      	lsls	r5, r5, #21
 800092a:	401c      	ands	r4, r3
 800092c:	0d6d      	lsrs	r5, r5, #21
 800092e:	0767      	lsls	r7, r4, #29
 8000930:	08c0      	lsrs	r0, r0, #3
 8000932:	0264      	lsls	r4, r4, #9
 8000934:	4307      	orrs	r7, r0
 8000936:	0b24      	lsrs	r4, r4, #12
 8000938:	e0ec      	b.n	8000b14 <__aeabi_dsub+0x328>
 800093a:	2b00      	cmp	r3, #0
 800093c:	dc00      	bgt.n	8000940 <__aeabi_dsub+0x154>
 800093e:	e329      	b.n	8000f94 <__aeabi_dsub+0x7a8>
 8000940:	4649      	mov	r1, r9
 8000942:	2900      	cmp	r1, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_dsub+0x15c>
 8000946:	e0d6      	b.n	8000af6 <__aeabi_dsub+0x30a>
 8000948:	4659      	mov	r1, fp
 800094a:	4311      	orrs	r1, r2
 800094c:	d100      	bne.n	8000950 <__aeabi_dsub+0x164>
 800094e:	e12e      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000950:	1e59      	subs	r1, r3, #1
 8000952:	2b01      	cmp	r3, #1
 8000954:	d100      	bne.n	8000958 <__aeabi_dsub+0x16c>
 8000956:	e1e6      	b.n	8000d26 <__aeabi_dsub+0x53a>
 8000958:	42bb      	cmp	r3, r7
 800095a:	d100      	bne.n	800095e <__aeabi_dsub+0x172>
 800095c:	e182      	b.n	8000c64 <__aeabi_dsub+0x478>
 800095e:	2701      	movs	r7, #1
 8000960:	000b      	movs	r3, r1
 8000962:	2938      	cmp	r1, #56	@ 0x38
 8000964:	dc14      	bgt.n	8000990 <__aeabi_dsub+0x1a4>
 8000966:	2b1f      	cmp	r3, #31
 8000968:	dd00      	ble.n	800096c <__aeabi_dsub+0x180>
 800096a:	e23c      	b.n	8000de6 <__aeabi_dsub+0x5fa>
 800096c:	2720      	movs	r7, #32
 800096e:	1af9      	subs	r1, r7, r3
 8000970:	468c      	mov	ip, r1
 8000972:	4659      	mov	r1, fp
 8000974:	4667      	mov	r7, ip
 8000976:	40b9      	lsls	r1, r7
 8000978:	000f      	movs	r7, r1
 800097a:	0011      	movs	r1, r2
 800097c:	40d9      	lsrs	r1, r3
 800097e:	430f      	orrs	r7, r1
 8000980:	4661      	mov	r1, ip
 8000982:	408a      	lsls	r2, r1
 8000984:	1e51      	subs	r1, r2, #1
 8000986:	418a      	sbcs	r2, r1
 8000988:	4659      	mov	r1, fp
 800098a:	40d9      	lsrs	r1, r3
 800098c:	4317      	orrs	r7, r2
 800098e:	1864      	adds	r4, r4, r1
 8000990:	183f      	adds	r7, r7, r0
 8000992:	4287      	cmp	r7, r0
 8000994:	4180      	sbcs	r0, r0
 8000996:	4240      	negs	r0, r0
 8000998:	1824      	adds	r4, r4, r0
 800099a:	0223      	lsls	r3, r4, #8
 800099c:	d400      	bmi.n	80009a0 <__aeabi_dsub+0x1b4>
 800099e:	e0c6      	b.n	8000b2e <__aeabi_dsub+0x342>
 80009a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000b50 <__aeabi_dsub+0x364>)
 80009a2:	3501      	adds	r5, #1
 80009a4:	429d      	cmp	r5, r3
 80009a6:	d100      	bne.n	80009aa <__aeabi_dsub+0x1be>
 80009a8:	e0b2      	b.n	8000b10 <__aeabi_dsub+0x324>
 80009aa:	2101      	movs	r1, #1
 80009ac:	4b69      	ldr	r3, [pc, #420]	@ (8000b54 <__aeabi_dsub+0x368>)
 80009ae:	087a      	lsrs	r2, r7, #1
 80009b0:	401c      	ands	r4, r3
 80009b2:	4039      	ands	r1, r7
 80009b4:	430a      	orrs	r2, r1
 80009b6:	07e7      	lsls	r7, r4, #31
 80009b8:	4317      	orrs	r7, r2
 80009ba:	0864      	lsrs	r4, r4, #1
 80009bc:	e79e      	b.n	80008fc <__aeabi_dsub+0x110>
 80009be:	4b66      	ldr	r3, [pc, #408]	@ (8000b58 <__aeabi_dsub+0x36c>)
 80009c0:	4311      	orrs	r1, r2
 80009c2:	468a      	mov	sl, r1
 80009c4:	18eb      	adds	r3, r5, r3
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d028      	beq.n	8000a1c <__aeabi_dsub+0x230>
 80009ca:	4566      	cmp	r6, ip
 80009cc:	d02c      	beq.n	8000a28 <__aeabi_dsub+0x23c>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d05b      	beq.n	8000a8a <__aeabi_dsub+0x29e>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dsub+0x1ec>
 80009d6:	e12c      	b.n	8000c32 <__aeabi_dsub+0x446>
 80009d8:	465b      	mov	r3, fp
 80009da:	4666      	mov	r6, ip
 80009dc:	075f      	lsls	r7, r3, #29
 80009de:	08d2      	lsrs	r2, r2, #3
 80009e0:	4317      	orrs	r7, r2
 80009e2:	08dd      	lsrs	r5, r3, #3
 80009e4:	003b      	movs	r3, r7
 80009e6:	432b      	orrs	r3, r5
 80009e8:	d100      	bne.n	80009ec <__aeabi_dsub+0x200>
 80009ea:	e0e2      	b.n	8000bb2 <__aeabi_dsub+0x3c6>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	0324      	lsls	r4, r4, #12
 80009f0:	432c      	orrs	r4, r5
 80009f2:	0324      	lsls	r4, r4, #12
 80009f4:	4d56      	ldr	r5, [pc, #344]	@ (8000b50 <__aeabi_dsub+0x364>)
 80009f6:	0b24      	lsrs	r4, r4, #12
 80009f8:	e08c      	b.n	8000b14 <__aeabi_dsub+0x328>
 80009fa:	4659      	mov	r1, fp
 80009fc:	4311      	orrs	r1, r2
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dsub+0x216>
 8000a00:	e0d5      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000a02:	1e59      	subs	r1, r3, #1
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dsub+0x21e>
 8000a08:	e1b9      	b.n	8000d7e <__aeabi_dsub+0x592>
 8000a0a:	42bb      	cmp	r3, r7
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dsub+0x224>
 8000a0e:	e1b1      	b.n	8000d74 <__aeabi_dsub+0x588>
 8000a10:	2701      	movs	r7, #1
 8000a12:	000b      	movs	r3, r1
 8000a14:	2938      	cmp	r1, #56	@ 0x38
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dsub+0x22e>
 8000a18:	e740      	b.n	800089c <__aeabi_dsub+0xb0>
 8000a1a:	e72a      	b.n	8000872 <__aeabi_dsub+0x86>
 8000a1c:	4661      	mov	r1, ip
 8000a1e:	2701      	movs	r7, #1
 8000a20:	4079      	eors	r1, r7
 8000a22:	468c      	mov	ip, r1
 8000a24:	4566      	cmp	r6, ip
 8000a26:	d1d2      	bne.n	80009ce <__aeabi_dsub+0x1e2>
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dsub+0x242>
 8000a2c:	e0c5      	b.n	8000bba <__aeabi_dsub+0x3ce>
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dsub+0x248>
 8000a32:	e155      	b.n	8000ce0 <__aeabi_dsub+0x4f4>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0025      	movs	r5, r4
 8000a38:	4305      	orrs	r5, r0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dsub+0x252>
 8000a3c:	e212      	b.n	8000e64 <__aeabi_dsub+0x678>
 8000a3e:	1e59      	subs	r1, r3, #1
 8000a40:	468c      	mov	ip, r1
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dsub+0x25c>
 8000a46:	e249      	b.n	8000edc <__aeabi_dsub+0x6f0>
 8000a48:	4d41      	ldr	r5, [pc, #260]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000a4a:	42ab      	cmp	r3, r5
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dsub+0x264>
 8000a4e:	e28f      	b.n	8000f70 <__aeabi_dsub+0x784>
 8000a50:	2701      	movs	r7, #1
 8000a52:	2938      	cmp	r1, #56	@ 0x38
 8000a54:	dc11      	bgt.n	8000a7a <__aeabi_dsub+0x28e>
 8000a56:	4663      	mov	r3, ip
 8000a58:	2b1f      	cmp	r3, #31
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dsub+0x272>
 8000a5c:	e25b      	b.n	8000f16 <__aeabi_dsub+0x72a>
 8000a5e:	4661      	mov	r1, ip
 8000a60:	2320      	movs	r3, #32
 8000a62:	0027      	movs	r7, r4
 8000a64:	1a5b      	subs	r3, r3, r1
 8000a66:	0005      	movs	r5, r0
 8000a68:	4098      	lsls	r0, r3
 8000a6a:	409f      	lsls	r7, r3
 8000a6c:	40cd      	lsrs	r5, r1
 8000a6e:	1e43      	subs	r3, r0, #1
 8000a70:	4198      	sbcs	r0, r3
 8000a72:	40cc      	lsrs	r4, r1
 8000a74:	432f      	orrs	r7, r5
 8000a76:	4307      	orrs	r7, r0
 8000a78:	44a3      	add	fp, r4
 8000a7a:	18bf      	adds	r7, r7, r2
 8000a7c:	4297      	cmp	r7, r2
 8000a7e:	4192      	sbcs	r2, r2
 8000a80:	4252      	negs	r2, r2
 8000a82:	445a      	add	r2, fp
 8000a84:	0014      	movs	r4, r2
 8000a86:	464d      	mov	r5, r9
 8000a88:	e787      	b.n	800099a <__aeabi_dsub+0x1ae>
 8000a8a:	4f34      	ldr	r7, [pc, #208]	@ (8000b5c <__aeabi_dsub+0x370>)
 8000a8c:	1c6b      	adds	r3, r5, #1
 8000a8e:	423b      	tst	r3, r7
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dsub+0x2a8>
 8000a92:	e0b6      	b.n	8000c02 <__aeabi_dsub+0x416>
 8000a94:	4659      	mov	r1, fp
 8000a96:	0023      	movs	r3, r4
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	000f      	movs	r7, r1
 8000a9c:	4303      	orrs	r3, r0
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dsub+0x2b8>
 8000aa2:	e126      	b.n	8000cf2 <__aeabi_dsub+0x506>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dsub+0x2be>
 8000aa8:	e1c0      	b.n	8000e2c <__aeabi_dsub+0x640>
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dsub+0x2c4>
 8000aae:	e0a1      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000ab0:	1a83      	subs	r3, r0, r2
 8000ab2:	4698      	mov	r8, r3
 8000ab4:	465b      	mov	r3, fp
 8000ab6:	4540      	cmp	r0, r8
 8000ab8:	41ad      	sbcs	r5, r5
 8000aba:	1ae3      	subs	r3, r4, r3
 8000abc:	426d      	negs	r5, r5
 8000abe:	1b5b      	subs	r3, r3, r5
 8000ac0:	2580      	movs	r5, #128	@ 0x80
 8000ac2:	042d      	lsls	r5, r5, #16
 8000ac4:	422b      	tst	r3, r5
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dsub+0x2de>
 8000ac8:	e14b      	b.n	8000d62 <__aeabi_dsub+0x576>
 8000aca:	465b      	mov	r3, fp
 8000acc:	1a10      	subs	r0, r2, r0
 8000ace:	4282      	cmp	r2, r0
 8000ad0:	4192      	sbcs	r2, r2
 8000ad2:	1b1c      	subs	r4, r3, r4
 8000ad4:	0007      	movs	r7, r0
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	4663      	mov	r3, ip
 8000ada:	4252      	negs	r2, r2
 8000adc:	1aa4      	subs	r4, r4, r2
 8000ade:	4327      	orrs	r7, r4
 8000ae0:	401e      	ands	r6, r3
 8000ae2:	2f00      	cmp	r7, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dsub+0x2fc>
 8000ae6:	e142      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000ae8:	422c      	tst	r4, r5
 8000aea:	d100      	bne.n	8000aee <__aeabi_dsub+0x302>
 8000aec:	e26d      	b.n	8000fca <__aeabi_dsub+0x7de>
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <__aeabi_dsub+0x368>)
 8000af0:	2501      	movs	r5, #1
 8000af2:	401c      	ands	r4, r3
 8000af4:	e71b      	b.n	800092e <__aeabi_dsub+0x142>
 8000af6:	42bd      	cmp	r5, r7
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x310>
 8000afa:	e13b      	b.n	8000d74 <__aeabi_dsub+0x588>
 8000afc:	2701      	movs	r7, #1
 8000afe:	2b38      	cmp	r3, #56	@ 0x38
 8000b00:	dd00      	ble.n	8000b04 <__aeabi_dsub+0x318>
 8000b02:	e745      	b.n	8000990 <__aeabi_dsub+0x1a4>
 8000b04:	2780      	movs	r7, #128	@ 0x80
 8000b06:	4659      	mov	r1, fp
 8000b08:	043f      	lsls	r7, r7, #16
 8000b0a:	4339      	orrs	r1, r7
 8000b0c:	468b      	mov	fp, r1
 8000b0e:	e72a      	b.n	8000966 <__aeabi_dsub+0x17a>
 8000b10:	2400      	movs	r4, #0
 8000b12:	2700      	movs	r7, #0
 8000b14:	052d      	lsls	r5, r5, #20
 8000b16:	4325      	orrs	r5, r4
 8000b18:	07f6      	lsls	r6, r6, #31
 8000b1a:	4335      	orrs	r5, r6
 8000b1c:	0038      	movs	r0, r7
 8000b1e:	0029      	movs	r1, r5
 8000b20:	b003      	add	sp, #12
 8000b22:	bcf0      	pop	{r4, r5, r6, r7}
 8000b24:	46bb      	mov	fp, r7
 8000b26:	46b2      	mov	sl, r6
 8000b28:	46a9      	mov	r9, r5
 8000b2a:	46a0      	mov	r8, r4
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2e:	077b      	lsls	r3, r7, #29
 8000b30:	d004      	beq.n	8000b3c <__aeabi_dsub+0x350>
 8000b32:	230f      	movs	r3, #15
 8000b34:	403b      	ands	r3, r7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dsub+0x350>
 8000b3a:	e6e7      	b.n	800090c <__aeabi_dsub+0x120>
 8000b3c:	002b      	movs	r3, r5
 8000b3e:	08f8      	lsrs	r0, r7, #3
 8000b40:	4a03      	ldr	r2, [pc, #12]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000b42:	0767      	lsls	r7, r4, #29
 8000b44:	4307      	orrs	r7, r0
 8000b46:	08e5      	lsrs	r5, r4, #3
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dsub+0x362>
 8000b4c:	e74a      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000b4e:	e0a5      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000b50:	000007ff 	.word	0x000007ff
 8000b54:	ff7fffff 	.word	0xff7fffff
 8000b58:	fffff801 	.word	0xfffff801
 8000b5c:	000007fe 	.word	0x000007fe
 8000b60:	0038      	movs	r0, r7
 8000b62:	f000 fab7 	bl	80010d4 <__clzsi2>
 8000b66:	0003      	movs	r3, r0
 8000b68:	3318      	adds	r3, #24
 8000b6a:	2b1f      	cmp	r3, #31
 8000b6c:	dc00      	bgt.n	8000b70 <__aeabi_dsub+0x384>
 8000b6e:	e6a7      	b.n	80008c0 <__aeabi_dsub+0xd4>
 8000b70:	003a      	movs	r2, r7
 8000b72:	3808      	subs	r0, #8
 8000b74:	4082      	lsls	r2, r0
 8000b76:	429d      	cmp	r5, r3
 8000b78:	dd00      	ble.n	8000b7c <__aeabi_dsub+0x390>
 8000b7a:	e08a      	b.n	8000c92 <__aeabi_dsub+0x4a6>
 8000b7c:	1b5b      	subs	r3, r3, r5
 8000b7e:	1c58      	adds	r0, r3, #1
 8000b80:	281f      	cmp	r0, #31
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_dsub+0x39a>
 8000b84:	e1d8      	b.n	8000f38 <__aeabi_dsub+0x74c>
 8000b86:	0017      	movs	r7, r2
 8000b88:	3b1f      	subs	r3, #31
 8000b8a:	40df      	lsrs	r7, r3
 8000b8c:	2820      	cmp	r0, #32
 8000b8e:	d005      	beq.n	8000b9c <__aeabi_dsub+0x3b0>
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	1a1b      	subs	r3, r3, r0
 8000b94:	409a      	lsls	r2, r3
 8000b96:	1e53      	subs	r3, r2, #1
 8000b98:	419a      	sbcs	r2, r3
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dsub+0x3b8>
 8000ba2:	e0e5      	b.n	8000d70 <__aeabi_dsub+0x584>
 8000ba4:	077b      	lsls	r3, r7, #29
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dsub+0x3be>
 8000ba8:	e6ab      	b.n	8000902 <__aeabi_dsub+0x116>
 8000baa:	002c      	movs	r4, r5
 8000bac:	e7c6      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000bae:	08c0      	lsrs	r0, r0, #3
 8000bb0:	e7c6      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	4dd1      	ldr	r5, [pc, #836]	@ (8000efc <__aeabi_dsub+0x710>)
 8000bb8:	e7ac      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000bba:	4fd1      	ldr	r7, [pc, #836]	@ (8000f00 <__aeabi_dsub+0x714>)
 8000bbc:	1c6b      	adds	r3, r5, #1
 8000bbe:	423b      	tst	r3, r7
 8000bc0:	d171      	bne.n	8000ca6 <__aeabi_dsub+0x4ba>
 8000bc2:	0023      	movs	r3, r4
 8000bc4:	4303      	orrs	r3, r0
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dsub+0x3e0>
 8000bca:	e14e      	b.n	8000e6a <__aeabi_dsub+0x67e>
 8000bcc:	4657      	mov	r7, sl
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x3e8>
 8000bd2:	e1b5      	b.n	8000f40 <__aeabi_dsub+0x754>
 8000bd4:	2f00      	cmp	r7, #0
 8000bd6:	d00d      	beq.n	8000bf4 <__aeabi_dsub+0x408>
 8000bd8:	1883      	adds	r3, r0, r2
 8000bda:	4283      	cmp	r3, r0
 8000bdc:	4180      	sbcs	r0, r0
 8000bde:	445c      	add	r4, fp
 8000be0:	4240      	negs	r0, r0
 8000be2:	1824      	adds	r4, r4, r0
 8000be4:	0222      	lsls	r2, r4, #8
 8000be6:	d500      	bpl.n	8000bea <__aeabi_dsub+0x3fe>
 8000be8:	e1c8      	b.n	8000f7c <__aeabi_dsub+0x790>
 8000bea:	001f      	movs	r7, r3
 8000bec:	4698      	mov	r8, r3
 8000bee:	4327      	orrs	r7, r4
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dsub+0x408>
 8000bf2:	e0bc      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	0767      	lsls	r7, r4, #29
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	431f      	orrs	r7, r3
 8000bfc:	08e5      	lsrs	r5, r4, #3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e04c      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000c02:	1a83      	subs	r3, r0, r2
 8000c04:	4698      	mov	r8, r3
 8000c06:	465b      	mov	r3, fp
 8000c08:	4540      	cmp	r0, r8
 8000c0a:	41bf      	sbcs	r7, r7
 8000c0c:	1ae3      	subs	r3, r4, r3
 8000c0e:	427f      	negs	r7, r7
 8000c10:	1bdb      	subs	r3, r3, r7
 8000c12:	021f      	lsls	r7, r3, #8
 8000c14:	d47c      	bmi.n	8000d10 <__aeabi_dsub+0x524>
 8000c16:	4647      	mov	r7, r8
 8000c18:	431f      	orrs	r7, r3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dsub+0x432>
 8000c1c:	e0a6      	b.n	8000d6c <__aeabi_dsub+0x580>
 8000c1e:	001c      	movs	r4, r3
 8000c20:	4647      	mov	r7, r8
 8000c22:	e645      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000c24:	4cb7      	ldr	r4, [pc, #732]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000c26:	1aed      	subs	r5, r5, r3
 8000c28:	4014      	ands	r4, r2
 8000c2a:	077b      	lsls	r3, r7, #29
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_dsub+0x444>
 8000c2e:	e780      	b.n	8000b32 <__aeabi_dsub+0x346>
 8000c30:	e784      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000c32:	464b      	mov	r3, r9
 8000c34:	0025      	movs	r5, r4
 8000c36:	4305      	orrs	r5, r0
 8000c38:	d066      	beq.n	8000d08 <__aeabi_dsub+0x51c>
 8000c3a:	1e5f      	subs	r7, r3, #1
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dsub+0x456>
 8000c40:	e0fc      	b.n	8000e3c <__aeabi_dsub+0x650>
 8000c42:	4dae      	ldr	r5, [pc, #696]	@ (8000efc <__aeabi_dsub+0x710>)
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dsub+0x45e>
 8000c48:	e15e      	b.n	8000f08 <__aeabi_dsub+0x71c>
 8000c4a:	4666      	mov	r6, ip
 8000c4c:	2f38      	cmp	r7, #56	@ 0x38
 8000c4e:	dc00      	bgt.n	8000c52 <__aeabi_dsub+0x466>
 8000c50:	e0b4      	b.n	8000dbc <__aeabi_dsub+0x5d0>
 8000c52:	2001      	movs	r0, #1
 8000c54:	1a17      	subs	r7, r2, r0
 8000c56:	42ba      	cmp	r2, r7
 8000c58:	4192      	sbcs	r2, r2
 8000c5a:	465b      	mov	r3, fp
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	464d      	mov	r5, r9
 8000c60:	1a9c      	subs	r4, r3, r2
 8000c62:	e620      	b.n	80008a6 <__aeabi_dsub+0xba>
 8000c64:	0767      	lsls	r7, r4, #29
 8000c66:	08c0      	lsrs	r0, r0, #3
 8000c68:	4307      	orrs	r7, r0
 8000c6a:	08e5      	lsrs	r5, r4, #3
 8000c6c:	e6ba      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000c6e:	001f      	movs	r7, r3
 8000c70:	4659      	mov	r1, fp
 8000c72:	3f20      	subs	r7, #32
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	000f      	movs	r7, r1
 8000c78:	2b20      	cmp	r3, #32
 8000c7a:	d005      	beq.n	8000c88 <__aeabi_dsub+0x49c>
 8000c7c:	2140      	movs	r1, #64	@ 0x40
 8000c7e:	1acb      	subs	r3, r1, r3
 8000c80:	4659      	mov	r1, fp
 8000c82:	4099      	lsls	r1, r3
 8000c84:	430a      	orrs	r2, r1
 8000c86:	4692      	mov	sl, r2
 8000c88:	4653      	mov	r3, sl
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	4193      	sbcs	r3, r2
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	e604      	b.n	800089c <__aeabi_dsub+0xb0>
 8000c92:	1aeb      	subs	r3, r5, r3
 8000c94:	4d9b      	ldr	r5, [pc, #620]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000c96:	4015      	ands	r5, r2
 8000c98:	076f      	lsls	r7, r5, #29
 8000c9a:	08ed      	lsrs	r5, r5, #3
 8000c9c:	032c      	lsls	r4, r5, #12
 8000c9e:	055d      	lsls	r5, r3, #21
 8000ca0:	0b24      	lsrs	r4, r4, #12
 8000ca2:	0d6d      	lsrs	r5, r5, #21
 8000ca4:	e736      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000ca6:	4d95      	ldr	r5, [pc, #596]	@ (8000efc <__aeabi_dsub+0x710>)
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	d100      	bne.n	8000cae <__aeabi_dsub+0x4c2>
 8000cac:	e0d6      	b.n	8000e5c <__aeabi_dsub+0x670>
 8000cae:	1882      	adds	r2, r0, r2
 8000cb0:	0021      	movs	r1, r4
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	4180      	sbcs	r0, r0
 8000cb6:	4459      	add	r1, fp
 8000cb8:	4240      	negs	r0, r0
 8000cba:	1808      	adds	r0, r1, r0
 8000cbc:	07c7      	lsls	r7, r0, #31
 8000cbe:	0852      	lsrs	r2, r2, #1
 8000cc0:	4317      	orrs	r7, r2
 8000cc2:	0844      	lsrs	r4, r0, #1
 8000cc4:	0752      	lsls	r2, r2, #29
 8000cc6:	d400      	bmi.n	8000cca <__aeabi_dsub+0x4de>
 8000cc8:	e185      	b.n	8000fd6 <__aeabi_dsub+0x7ea>
 8000cca:	220f      	movs	r2, #15
 8000ccc:	001d      	movs	r5, r3
 8000cce:	403a      	ands	r2, r7
 8000cd0:	2a04      	cmp	r2, #4
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dsub+0x4ea>
 8000cd4:	e61a      	b.n	800090c <__aeabi_dsub+0x120>
 8000cd6:	08ff      	lsrs	r7, r7, #3
 8000cd8:	0764      	lsls	r4, r4, #29
 8000cda:	4327      	orrs	r7, r4
 8000cdc:	0905      	lsrs	r5, r0, #4
 8000cde:	e7dd      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000ce0:	465b      	mov	r3, fp
 8000ce2:	08d2      	lsrs	r2, r2, #3
 8000ce4:	075f      	lsls	r7, r3, #29
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	08dd      	lsrs	r5, r3, #3
 8000cea:	e67b      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000cec:	2700      	movs	r7, #0
 8000cee:	2400      	movs	r4, #0
 8000cf0:	e710      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_dsub+0x50c>
 8000cf6:	e0d6      	b.n	8000ea6 <__aeabi_dsub+0x6ba>
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_dsub+0x512>
 8000cfc:	e12f      	b.n	8000f5e <__aeabi_dsub+0x772>
 8000cfe:	2480      	movs	r4, #128	@ 0x80
 8000d00:	2600      	movs	r6, #0
 8000d02:	4d7e      	ldr	r5, [pc, #504]	@ (8000efc <__aeabi_dsub+0x710>)
 8000d04:	0324      	lsls	r4, r4, #12
 8000d06:	e705      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000d08:	4666      	mov	r6, ip
 8000d0a:	465c      	mov	r4, fp
 8000d0c:	08d0      	lsrs	r0, r2, #3
 8000d0e:	e717      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000d10:	465b      	mov	r3, fp
 8000d12:	1a17      	subs	r7, r2, r0
 8000d14:	42ba      	cmp	r2, r7
 8000d16:	4192      	sbcs	r2, r2
 8000d18:	1b1c      	subs	r4, r3, r4
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	4252      	negs	r2, r2
 8000d20:	1aa4      	subs	r4, r4, r2
 8000d22:	401e      	ands	r6, r3
 8000d24:	e5c4      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000d26:	1883      	adds	r3, r0, r2
 8000d28:	4283      	cmp	r3, r0
 8000d2a:	4180      	sbcs	r0, r0
 8000d2c:	445c      	add	r4, fp
 8000d2e:	4240      	negs	r0, r0
 8000d30:	1825      	adds	r5, r4, r0
 8000d32:	022a      	lsls	r2, r5, #8
 8000d34:	d400      	bmi.n	8000d38 <__aeabi_dsub+0x54c>
 8000d36:	e0da      	b.n	8000eee <__aeabi_dsub+0x702>
 8000d38:	4a72      	ldr	r2, [pc, #456]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000d3a:	085b      	lsrs	r3, r3, #1
 8000d3c:	4015      	ands	r5, r2
 8000d3e:	07ea      	lsls	r2, r5, #31
 8000d40:	431a      	orrs	r2, r3
 8000d42:	0869      	lsrs	r1, r5, #1
 8000d44:	075b      	lsls	r3, r3, #29
 8000d46:	d400      	bmi.n	8000d4a <__aeabi_dsub+0x55e>
 8000d48:	e14a      	b.n	8000fe0 <__aeabi_dsub+0x7f4>
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dsub+0x568>
 8000d52:	e0fc      	b.n	8000f4e <__aeabi_dsub+0x762>
 8000d54:	1d17      	adds	r7, r2, #4
 8000d56:	4297      	cmp	r7, r2
 8000d58:	41a4      	sbcs	r4, r4
 8000d5a:	4264      	negs	r4, r4
 8000d5c:	2502      	movs	r5, #2
 8000d5e:	1864      	adds	r4, r4, r1
 8000d60:	e6ec      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000d62:	4647      	mov	r7, r8
 8000d64:	001c      	movs	r4, r3
 8000d66:	431f      	orrs	r7, r3
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dsub+0x580>
 8000d6a:	e743      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	2500      	movs	r5, #0
 8000d70:	2400      	movs	r4, #0
 8000d72:	e6cf      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000d74:	08c0      	lsrs	r0, r0, #3
 8000d76:	0767      	lsls	r7, r4, #29
 8000d78:	4307      	orrs	r7, r0
 8000d7a:	08e5      	lsrs	r5, r4, #3
 8000d7c:	e632      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000d7e:	1a87      	subs	r7, r0, r2
 8000d80:	465b      	mov	r3, fp
 8000d82:	42b8      	cmp	r0, r7
 8000d84:	4180      	sbcs	r0, r0
 8000d86:	1ae4      	subs	r4, r4, r3
 8000d88:	4240      	negs	r0, r0
 8000d8a:	1a24      	subs	r4, r4, r0
 8000d8c:	0223      	lsls	r3, r4, #8
 8000d8e:	d428      	bmi.n	8000de2 <__aeabi_dsub+0x5f6>
 8000d90:	0763      	lsls	r3, r4, #29
 8000d92:	08ff      	lsrs	r7, r7, #3
 8000d94:	431f      	orrs	r7, r3
 8000d96:	08e5      	lsrs	r5, r4, #3
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e77f      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dsub+0x5b6>
 8000da0:	e673      	b.n	8000a8a <__aeabi_dsub+0x29e>
 8000da2:	464b      	mov	r3, r9
 8000da4:	1b5f      	subs	r7, r3, r5
 8000da6:	003b      	movs	r3, r7
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x5c2>
 8000dac:	e742      	b.n	8000c34 <__aeabi_dsub+0x448>
 8000dae:	2f38      	cmp	r7, #56	@ 0x38
 8000db0:	dd00      	ble.n	8000db4 <__aeabi_dsub+0x5c8>
 8000db2:	e0ec      	b.n	8000f8e <__aeabi_dsub+0x7a2>
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	000e      	movs	r6, r1
 8000db8:	041b      	lsls	r3, r3, #16
 8000dba:	431c      	orrs	r4, r3
 8000dbc:	2f1f      	cmp	r7, #31
 8000dbe:	dc25      	bgt.n	8000e0c <__aeabi_dsub+0x620>
 8000dc0:	2520      	movs	r5, #32
 8000dc2:	0023      	movs	r3, r4
 8000dc4:	1bed      	subs	r5, r5, r7
 8000dc6:	0001      	movs	r1, r0
 8000dc8:	40a8      	lsls	r0, r5
 8000dca:	40ab      	lsls	r3, r5
 8000dcc:	40f9      	lsrs	r1, r7
 8000dce:	1e45      	subs	r5, r0, #1
 8000dd0:	41a8      	sbcs	r0, r5
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	40fc      	lsrs	r4, r7
 8000dd6:	4318      	orrs	r0, r3
 8000dd8:	465b      	mov	r3, fp
 8000dda:	1b1b      	subs	r3, r3, r4
 8000ddc:	469b      	mov	fp, r3
 8000dde:	e739      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000de0:	4666      	mov	r6, ip
 8000de2:	2501      	movs	r5, #1
 8000de4:	e562      	b.n	80008ac <__aeabi_dsub+0xc0>
 8000de6:	001f      	movs	r7, r3
 8000de8:	4659      	mov	r1, fp
 8000dea:	3f20      	subs	r7, #32
 8000dec:	40f9      	lsrs	r1, r7
 8000dee:	468c      	mov	ip, r1
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d005      	beq.n	8000e00 <__aeabi_dsub+0x614>
 8000df4:	2740      	movs	r7, #64	@ 0x40
 8000df6:	4659      	mov	r1, fp
 8000df8:	1afb      	subs	r3, r7, r3
 8000dfa:	4099      	lsls	r1, r3
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	4692      	mov	sl, r2
 8000e00:	4657      	mov	r7, sl
 8000e02:	1e7b      	subs	r3, r7, #1
 8000e04:	419f      	sbcs	r7, r3
 8000e06:	4663      	mov	r3, ip
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e5c1      	b.n	8000990 <__aeabi_dsub+0x1a4>
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	0025      	movs	r5, r4
 8000e10:	3b20      	subs	r3, #32
 8000e12:	40dd      	lsrs	r5, r3
 8000e14:	2f20      	cmp	r7, #32
 8000e16:	d004      	beq.n	8000e22 <__aeabi_dsub+0x636>
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	1bdb      	subs	r3, r3, r7
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	4320      	orrs	r0, r4
 8000e20:	4680      	mov	r8, r0
 8000e22:	4640      	mov	r0, r8
 8000e24:	1e43      	subs	r3, r0, #1
 8000e26:	4198      	sbcs	r0, r3
 8000e28:	4328      	orrs	r0, r5
 8000e2a:	e713      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000e2c:	2900      	cmp	r1, #0
 8000e2e:	d09d      	beq.n	8000d6c <__aeabi_dsub+0x580>
 8000e30:	2601      	movs	r6, #1
 8000e32:	4663      	mov	r3, ip
 8000e34:	465c      	mov	r4, fp
 8000e36:	4690      	mov	r8, r2
 8000e38:	401e      	ands	r6, r3
 8000e3a:	e6db      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000e3c:	1a17      	subs	r7, r2, r0
 8000e3e:	465b      	mov	r3, fp
 8000e40:	42ba      	cmp	r2, r7
 8000e42:	4192      	sbcs	r2, r2
 8000e44:	1b1c      	subs	r4, r3, r4
 8000e46:	4252      	negs	r2, r2
 8000e48:	1aa4      	subs	r4, r4, r2
 8000e4a:	0223      	lsls	r3, r4, #8
 8000e4c:	d4c8      	bmi.n	8000de0 <__aeabi_dsub+0x5f4>
 8000e4e:	0763      	lsls	r3, r4, #29
 8000e50:	08ff      	lsrs	r7, r7, #3
 8000e52:	431f      	orrs	r7, r3
 8000e54:	4666      	mov	r6, ip
 8000e56:	2301      	movs	r3, #1
 8000e58:	08e5      	lsrs	r5, r4, #3
 8000e5a:	e71f      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000e5c:	001d      	movs	r5, r3
 8000e5e:	2400      	movs	r4, #0
 8000e60:	2700      	movs	r7, #0
 8000e62:	e657      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000e64:	465c      	mov	r4, fp
 8000e66:	08d0      	lsrs	r0, r2, #3
 8000e68:	e66a      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dsub+0x684>
 8000e6e:	e737      	b.n	8000ce0 <__aeabi_dsub+0x4f4>
 8000e70:	4653      	mov	r3, sl
 8000e72:	08c0      	lsrs	r0, r0, #3
 8000e74:	0767      	lsls	r7, r4, #29
 8000e76:	4307      	orrs	r7, r0
 8000e78:	08e5      	lsrs	r5, r4, #3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dsub+0x694>
 8000e7e:	e5b1      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	031b      	lsls	r3, r3, #12
 8000e84:	421d      	tst	r5, r3
 8000e86:	d008      	beq.n	8000e9a <__aeabi_dsub+0x6ae>
 8000e88:	4659      	mov	r1, fp
 8000e8a:	08c8      	lsrs	r0, r1, #3
 8000e8c:	4218      	tst	r0, r3
 8000e8e:	d104      	bne.n	8000e9a <__aeabi_dsub+0x6ae>
 8000e90:	08d2      	lsrs	r2, r2, #3
 8000e92:	0749      	lsls	r1, r1, #29
 8000e94:	430a      	orrs	r2, r1
 8000e96:	0017      	movs	r7, r2
 8000e98:	0005      	movs	r5, r0
 8000e9a:	0f7b      	lsrs	r3, r7, #29
 8000e9c:	00ff      	lsls	r7, r7, #3
 8000e9e:	08ff      	lsrs	r7, r7, #3
 8000ea0:	075b      	lsls	r3, r3, #29
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	e59e      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000ea6:	08c0      	lsrs	r0, r0, #3
 8000ea8:	0763      	lsls	r3, r4, #29
 8000eaa:	4318      	orrs	r0, r3
 8000eac:	08e5      	lsrs	r5, r4, #3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d053      	beq.n	8000f5a <__aeabi_dsub+0x76e>
 8000eb2:	2380      	movs	r3, #128	@ 0x80
 8000eb4:	031b      	lsls	r3, r3, #12
 8000eb6:	421d      	tst	r5, r3
 8000eb8:	d00a      	beq.n	8000ed0 <__aeabi_dsub+0x6e4>
 8000eba:	4659      	mov	r1, fp
 8000ebc:	08cc      	lsrs	r4, r1, #3
 8000ebe:	421c      	tst	r4, r3
 8000ec0:	d106      	bne.n	8000ed0 <__aeabi_dsub+0x6e4>
 8000ec2:	2601      	movs	r6, #1
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	0025      	movs	r5, r4
 8000ec8:	08d0      	lsrs	r0, r2, #3
 8000eca:	0749      	lsls	r1, r1, #29
 8000ecc:	4308      	orrs	r0, r1
 8000ece:	401e      	ands	r6, r3
 8000ed0:	0f47      	lsrs	r7, r0, #29
 8000ed2:	00c0      	lsls	r0, r0, #3
 8000ed4:	08c0      	lsrs	r0, r0, #3
 8000ed6:	077f      	lsls	r7, r7, #29
 8000ed8:	4307      	orrs	r7, r0
 8000eda:	e583      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000edc:	1883      	adds	r3, r0, r2
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	4192      	sbcs	r2, r2
 8000ee2:	445c      	add	r4, fp
 8000ee4:	4252      	negs	r2, r2
 8000ee6:	18a5      	adds	r5, r4, r2
 8000ee8:	022a      	lsls	r2, r5, #8
 8000eea:	d500      	bpl.n	8000eee <__aeabi_dsub+0x702>
 8000eec:	e724      	b.n	8000d38 <__aeabi_dsub+0x54c>
 8000eee:	076f      	lsls	r7, r5, #29
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	08ed      	lsrs	r5, r5, #3
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e6d0      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	000007ff 	.word	0x000007ff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	ff7fffff 	.word	0xff7fffff
 8000f08:	465b      	mov	r3, fp
 8000f0a:	08d2      	lsrs	r2, r2, #3
 8000f0c:	075f      	lsls	r7, r3, #29
 8000f0e:	4666      	mov	r6, ip
 8000f10:	4317      	orrs	r7, r2
 8000f12:	08dd      	lsrs	r5, r3, #3
 8000f14:	e566      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f16:	0025      	movs	r5, r4
 8000f18:	3b20      	subs	r3, #32
 8000f1a:	40dd      	lsrs	r5, r3
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b20      	cmp	r3, #32
 8000f20:	d005      	beq.n	8000f2e <__aeabi_dsub+0x742>
 8000f22:	2340      	movs	r3, #64	@ 0x40
 8000f24:	4661      	mov	r1, ip
 8000f26:	1a5b      	subs	r3, r3, r1
 8000f28:	409c      	lsls	r4, r3
 8000f2a:	4320      	orrs	r0, r4
 8000f2c:	4680      	mov	r8, r0
 8000f2e:	4647      	mov	r7, r8
 8000f30:	1e7b      	subs	r3, r7, #1
 8000f32:	419f      	sbcs	r7, r3
 8000f34:	432f      	orrs	r7, r5
 8000f36:	e5a0      	b.n	8000a7a <__aeabi_dsub+0x28e>
 8000f38:	2120      	movs	r1, #32
 8000f3a:	2700      	movs	r7, #0
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	e4d2      	b.n	80008e6 <__aeabi_dsub+0xfa>
 8000f40:	2f00      	cmp	r7, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dsub+0x75a>
 8000f44:	e713      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000f46:	465c      	mov	r4, fp
 8000f48:	0017      	movs	r7, r2
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	e5f6      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000f4e:	08d7      	lsrs	r7, r2, #3
 8000f50:	0749      	lsls	r1, r1, #29
 8000f52:	2302      	movs	r3, #2
 8000f54:	430f      	orrs	r7, r1
 8000f56:	092d      	lsrs	r5, r5, #4
 8000f58:	e6a0      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000f5a:	0007      	movs	r7, r0
 8000f5c:	e542      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f5e:	465b      	mov	r3, fp
 8000f60:	2601      	movs	r6, #1
 8000f62:	075f      	lsls	r7, r3, #29
 8000f64:	08dd      	lsrs	r5, r3, #3
 8000f66:	4663      	mov	r3, ip
 8000f68:	08d2      	lsrs	r2, r2, #3
 8000f6a:	4317      	orrs	r7, r2
 8000f6c:	401e      	ands	r6, r3
 8000f6e:	e539      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f70:	465b      	mov	r3, fp
 8000f72:	08d2      	lsrs	r2, r2, #3
 8000f74:	075f      	lsls	r7, r3, #29
 8000f76:	4317      	orrs	r7, r2
 8000f78:	08dd      	lsrs	r5, r3, #3
 8000f7a:	e533      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <__aeabi_dsub+0x80c>)
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	4022      	ands	r2, r4
 8000f82:	0757      	lsls	r7, r2, #29
 8000f84:	0252      	lsls	r2, r2, #9
 8000f86:	2501      	movs	r5, #1
 8000f88:	431f      	orrs	r7, r3
 8000f8a:	0b14      	lsrs	r4, r2, #12
 8000f8c:	e5c2      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000f8e:	000e      	movs	r6, r1
 8000f90:	2001      	movs	r0, #1
 8000f92:	e65f      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00d      	beq.n	8000fb4 <__aeabi_dsub+0x7c8>
 8000f98:	464b      	mov	r3, r9
 8000f9a:	1b5b      	subs	r3, r3, r5
 8000f9c:	469c      	mov	ip, r3
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x7b8>
 8000fa2:	e548      	b.n	8000a36 <__aeabi_dsub+0x24a>
 8000fa4:	2701      	movs	r7, #1
 8000fa6:	2b38      	cmp	r3, #56	@ 0x38
 8000fa8:	dd00      	ble.n	8000fac <__aeabi_dsub+0x7c0>
 8000faa:	e566      	b.n	8000a7a <__aeabi_dsub+0x28e>
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	431c      	orrs	r4, r3
 8000fb2:	e550      	b.n	8000a56 <__aeabi_dsub+0x26a>
 8000fb4:	1c6b      	adds	r3, r5, #1
 8000fb6:	4d11      	ldr	r5, [pc, #68]	@ (8000ffc <__aeabi_dsub+0x810>)
 8000fb8:	422b      	tst	r3, r5
 8000fba:	d000      	beq.n	8000fbe <__aeabi_dsub+0x7d2>
 8000fbc:	e673      	b.n	8000ca6 <__aeabi_dsub+0x4ba>
 8000fbe:	4659      	mov	r1, fp
 8000fc0:	0023      	movs	r3, r4
 8000fc2:	4311      	orrs	r1, r2
 8000fc4:	468a      	mov	sl, r1
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	e600      	b.n	8000bcc <__aeabi_dsub+0x3e0>
 8000fca:	0767      	lsls	r7, r4, #29
 8000fcc:	08c0      	lsrs	r0, r0, #3
 8000fce:	2300      	movs	r3, #0
 8000fd0:	4307      	orrs	r7, r0
 8000fd2:	08e5      	lsrs	r5, r4, #3
 8000fd4:	e662      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fd6:	0764      	lsls	r4, r4, #29
 8000fd8:	08ff      	lsrs	r7, r7, #3
 8000fda:	4327      	orrs	r7, r4
 8000fdc:	0905      	lsrs	r5, r0, #4
 8000fde:	e65d      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fe0:	08d2      	lsrs	r2, r2, #3
 8000fe2:	0749      	lsls	r1, r1, #29
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	000f      	movs	r7, r1
 8000fe8:	2302      	movs	r3, #2
 8000fea:	092d      	lsrs	r5, r5, #4
 8000fec:	e656      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fee:	0007      	movs	r7, r0
 8000ff0:	e5a4      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000ff2:	0038      	movs	r0, r7
 8000ff4:	e48f      	b.n	8000916 <__aeabi_dsub+0x12a>
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	ff7fffff 	.word	0xff7fffff
 8000ffc:	000007fe 	.word	0x000007fe

08001000 <__aeabi_d2iz>:
 8001000:	000b      	movs	r3, r1
 8001002:	0002      	movs	r2, r0
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	4d16      	ldr	r5, [pc, #88]	@ (8001060 <__aeabi_d2iz+0x60>)
 8001008:	030c      	lsls	r4, r1, #12
 800100a:	b082      	sub	sp, #8
 800100c:	0049      	lsls	r1, r1, #1
 800100e:	2000      	movs	r0, #0
 8001010:	9200      	str	r2, [sp, #0]
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	0b24      	lsrs	r4, r4, #12
 8001016:	0d49      	lsrs	r1, r1, #21
 8001018:	0fde      	lsrs	r6, r3, #31
 800101a:	42a9      	cmp	r1, r5
 800101c:	dd04      	ble.n	8001028 <__aeabi_d2iz+0x28>
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <__aeabi_d2iz+0x64>)
 8001020:	4281      	cmp	r1, r0
 8001022:	dd03      	ble.n	800102c <__aeabi_d2iz+0x2c>
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <__aeabi_d2iz+0x68>)
 8001026:	18f0      	adds	r0, r6, r3
 8001028:	b002      	add	sp, #8
 800102a:	bd70      	pop	{r4, r5, r6, pc}
 800102c:	2080      	movs	r0, #128	@ 0x80
 800102e:	0340      	lsls	r0, r0, #13
 8001030:	4320      	orrs	r0, r4
 8001032:	4c0e      	ldr	r4, [pc, #56]	@ (800106c <__aeabi_d2iz+0x6c>)
 8001034:	1a64      	subs	r4, r4, r1
 8001036:	2c1f      	cmp	r4, #31
 8001038:	dd08      	ble.n	800104c <__aeabi_d2iz+0x4c>
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <__aeabi_d2iz+0x70>)
 800103c:	1a5b      	subs	r3, r3, r1
 800103e:	40d8      	lsrs	r0, r3
 8001040:	0003      	movs	r3, r0
 8001042:	4258      	negs	r0, r3
 8001044:	2e00      	cmp	r6, #0
 8001046:	d1ef      	bne.n	8001028 <__aeabi_d2iz+0x28>
 8001048:	0018      	movs	r0, r3
 800104a:	e7ed      	b.n	8001028 <__aeabi_d2iz+0x28>
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <__aeabi_d2iz+0x74>)
 800104e:	9a00      	ldr	r2, [sp, #0]
 8001050:	469c      	mov	ip, r3
 8001052:	0003      	movs	r3, r0
 8001054:	4461      	add	r1, ip
 8001056:	408b      	lsls	r3, r1
 8001058:	40e2      	lsrs	r2, r4
 800105a:	4313      	orrs	r3, r2
 800105c:	e7f1      	b.n	8001042 <__aeabi_d2iz+0x42>
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	000003fe 	.word	0x000003fe
 8001064:	0000041d 	.word	0x0000041d
 8001068:	7fffffff 	.word	0x7fffffff
 800106c:	00000433 	.word	0x00000433
 8001070:	00000413 	.word	0x00000413
 8001074:	fffffbed 	.word	0xfffffbed

08001078 <__aeabi_i2d>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	2800      	cmp	r0, #0
 800107c:	d016      	beq.n	80010ac <__aeabi_i2d+0x34>
 800107e:	17c3      	asrs	r3, r0, #31
 8001080:	18c5      	adds	r5, r0, r3
 8001082:	405d      	eors	r5, r3
 8001084:	0fc4      	lsrs	r4, r0, #31
 8001086:	0028      	movs	r0, r5
 8001088:	f000 f824 	bl	80010d4 <__clzsi2>
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <__aeabi_i2d+0x58>)
 800108e:	1a1b      	subs	r3, r3, r0
 8001090:	055b      	lsls	r3, r3, #21
 8001092:	0d5b      	lsrs	r3, r3, #21
 8001094:	280a      	cmp	r0, #10
 8001096:	dc14      	bgt.n	80010c2 <__aeabi_i2d+0x4a>
 8001098:	0002      	movs	r2, r0
 800109a:	002e      	movs	r6, r5
 800109c:	3215      	adds	r2, #21
 800109e:	4096      	lsls	r6, r2
 80010a0:	220b      	movs	r2, #11
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	40d5      	lsrs	r5, r2
 80010a6:	032d      	lsls	r5, r5, #12
 80010a8:	0b2d      	lsrs	r5, r5, #12
 80010aa:	e003      	b.n	80010b4 <__aeabi_i2d+0x3c>
 80010ac:	2400      	movs	r4, #0
 80010ae:	2300      	movs	r3, #0
 80010b0:	2500      	movs	r5, #0
 80010b2:	2600      	movs	r6, #0
 80010b4:	051b      	lsls	r3, r3, #20
 80010b6:	432b      	orrs	r3, r5
 80010b8:	07e4      	lsls	r4, r4, #31
 80010ba:	4323      	orrs	r3, r4
 80010bc:	0030      	movs	r0, r6
 80010be:	0019      	movs	r1, r3
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
 80010c2:	380b      	subs	r0, #11
 80010c4:	4085      	lsls	r5, r0
 80010c6:	032d      	lsls	r5, r5, #12
 80010c8:	2600      	movs	r6, #0
 80010ca:	0b2d      	lsrs	r5, r5, #12
 80010cc:	e7f2      	b.n	80010b4 <__aeabi_i2d+0x3c>
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	0000041e 	.word	0x0000041e

080010d4 <__clzsi2>:
 80010d4:	211c      	movs	r1, #28
 80010d6:	2301      	movs	r3, #1
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	4298      	cmp	r0, r3
 80010dc:	d301      	bcc.n	80010e2 <__clzsi2+0xe>
 80010de:	0c00      	lsrs	r0, r0, #16
 80010e0:	3910      	subs	r1, #16
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	4298      	cmp	r0, r3
 80010e6:	d301      	bcc.n	80010ec <__clzsi2+0x18>
 80010e8:	0a00      	lsrs	r0, r0, #8
 80010ea:	3908      	subs	r1, #8
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	4298      	cmp	r0, r3
 80010f0:	d301      	bcc.n	80010f6 <__clzsi2+0x22>
 80010f2:	0900      	lsrs	r0, r0, #4
 80010f4:	3904      	subs	r1, #4
 80010f6:	a202      	add	r2, pc, #8	@ (adr r2, 8001100 <__clzsi2+0x2c>)
 80010f8:	5c10      	ldrb	r0, [r2, r0]
 80010fa:	1840      	adds	r0, r0, r1
 80010fc:	4770      	bx	lr
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	02020304 	.word	0x02020304
 8001104:	01010101 	.word	0x01010101
	...

08001110 <HAL_CAN_RxFifo0MsgPendingCallback>:





void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001118:	4b5e      	ldr	r3, [pc, #376]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800111a:	4a5f      	ldr	r2, [pc, #380]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	2100      	movs	r1, #0
 8001120:	f002 ff36 	bl	8003f90 <HAL_CAN_GetRxMessage>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>

		Error_Handler();
 8001128:	f001 fc20 	bl	800296c <Error_Handler>
	}

	if (RxHeader.StdId == 0x3A1) {
 800112c:	4b5a      	ldr	r3, [pc, #360]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a5a      	ldr	r2, [pc, #360]	@ (800129c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d13c      	bne.n	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			tempDataFlag = 1;
 8001136:	4b5a      	ldr	r3, [pc, #360]	@ (80012a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
			ect = (RxData[3] << 8) | RxData[2];
 800113c:	4b55      	ldr	r3, [pc, #340]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800113e:	78db      	ldrb	r3, [r3, #3]
 8001140:	b21b      	sxth	r3, r3
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b53      	ldr	r3, [pc, #332]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b54      	ldr	r3, [pc, #336]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001152:	801a      	strh	r2, [r3, #0]
			ect = ect - 50;
 8001154:	4b53      	ldr	r3, [pc, #332]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001156:	2200      	movs	r2, #0
 8001158:	5e9b      	ldrsh	r3, [r3, r2]
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b32      	subs	r3, #50	@ 0x32
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001164:	801a      	strh	r2, [r3, #0]
			if(ect < 0){
 8001166:	4b4f      	ldr	r3, [pc, #316]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001168:	2200      	movs	r2, #0
 800116a:	5e9b      	ldrsh	r3, [r3, r2]
 800116c:	2b00      	cmp	r3, #0
 800116e:	da02      	bge.n	8001176 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
				ect = 0;
 8001170:	4b4c      	ldr	r3, [pc, #304]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8001172:	2200      	movs	r2, #0
 8001174:	801a      	strh	r2, [r3, #0]
			}
			oilTemp = (RxData[5] << 8) | RxData[4];
 8001176:	4b47      	ldr	r3, [pc, #284]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001178:	795b      	ldrb	r3, [r3, #5]
 800117a:	b21b      	sxth	r3, r3
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b44      	ldr	r3, [pc, #272]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800118c:	801a      	strh	r2, [r3, #0]
			oilTemp = oilTemp - 50;
 800118e:	4b46      	ldr	r3, [pc, #280]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8001190:	2200      	movs	r2, #0
 8001192:	5e9b      	ldrsh	r3, [r3, r2]
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b32      	subs	r3, #50	@ 0x32
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b42      	ldr	r3, [pc, #264]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 800119e:	801a      	strh	r2, [r3, #0]
			if(oilTemp < 0){
 80011a0:	4b41      	ldr	r3, [pc, #260]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	5e9b      	ldrsh	r3, [r3, r2]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da02      	bge.n	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
				oilTemp = 0;
 80011aa:	4b3f      	ldr	r3, [pc, #252]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	801a      	strh	r2, [r3, #0]
			}
	}
	if (RxHeader.StdId == 0x3A2){
 80011b0:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a3d      	ldr	r2, [pc, #244]	@ (80012ac <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d11c      	bne.n	80011f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>
			pressDataFlag = 1;
 80011ba:	4b3d      	ldr	r3, [pc, #244]	@ (80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
			fuelPress = (RxData[1] << 8) | RxData[0];
 80011c0:	4b34      	ldr	r3, [pc, #208]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b32      	ldr	r3, [pc, #200]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	4b37      	ldr	r3, [pc, #220]	@ (80012b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80011d8:	801a      	strh	r2, [r3, #0]
			oilPress = (RxData[3] << 8) | RxData[2];
 80011da:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80011dc:	78db      	ldrb	r3, [r3, #3]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	b21b      	sxth	r3, r3
 80011ea:	4313      	orrs	r3, r2
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80011f2:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x3A3){
 80011f4:	4b28      	ldr	r3, [pc, #160]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a30      	ldr	r2, [pc, #192]	@ (80012bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10f      	bne.n	800121e <HAL_CAN_RxFifo0MsgPendingCallback+0x10e>
			fuelDataFlag = 1;
 80011fe:	4b30      	ldr	r3, [pc, #192]	@ (80012c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8001200:	2201      	movs	r2, #1
 8001202:	701a      	strb	r2, [r3, #0]
			instFuelConsumption = (RxData[3] << 8) | RxData[2];
 8001204:	4b23      	ldr	r3, [pc, #140]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001206:	78db      	ldrb	r3, [r3, #3]
 8001208:	b21b      	sxth	r3, r3
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001210:	789b      	ldrb	r3, [r3, #2]
 8001212:	b21b      	sxth	r3, r3
 8001214:	4313      	orrs	r3, r2
 8001216:	b21b      	sxth	r3, r3
 8001218:	b29a      	uxth	r2, r3
 800121a:	4b2a      	ldr	r3, [pc, #168]	@ (80012c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 800121c:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A4){
 800121e:	4b1e      	ldr	r3, [pc, #120]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	23e9      	movs	r3, #233	@ 0xe9
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	429a      	cmp	r2, r3
 8001228:	d10f      	bne.n	800124a <HAL_CAN_RxFifo0MsgPendingCallback+0x13a>
			rpmDataFlag = 1;
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800122c:	2201      	movs	r2, #1
 800122e:	701a      	strb	r2, [r3, #0]
			rpm = (RxData[6] << 8) | RxData[5];
 8001230:	4b18      	ldr	r3, [pc, #96]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001232:	799b      	ldrb	r3, [r3, #6]
 8001234:	b21b      	sxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b16      	ldr	r3, [pc, #88]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800123c:	795b      	ldrb	r3, [r3, #5]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001248:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A5){
 800124a:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a20      	ldr	r2, [pc, #128]	@ (80012d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d10f      	bne.n	8001274 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
			battDataFlag = 1;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
			battVolt = (RxData[1] << 8) | RxData[0];
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800125c:	785b      	ldrb	r3, [r3, #1]
 800125e:	b21b      	sxth	r3, r3
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	b21a      	sxth	r2, r3
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b21b      	sxth	r3, r3
 800126a:	4313      	orrs	r3, r2
 800126c:	b21b      	sxth	r3, r3
 800126e:	b29a      	uxth	r2, r3
 8001270:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8001272:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x092){
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b92      	cmp	r3, #146	@ 0x92
 800127a:	d106      	bne.n	800128a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
		if (RxData[0] == 0x02)	{
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d102      	bne.n	800128a <HAL_CAN_RxFifo0MsgPendingCallback+0x17a>
			canResetEcuFlag = 1;
 8001284:	4b15      	ldr	r3, [pc, #84]	@ (80012dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b002      	add	sp, #8
 8001290:	bd80      	pop	{r7, pc}
 8001292:	46c0      	nop			@ (mov r8, r8)
 8001294:	200003d4 	.word	0x200003d4
 8001298:	200002ec 	.word	0x200002ec
 800129c:	000003a1 	.word	0x000003a1
 80012a0:	20000400 	.word	0x20000400
 80012a4:	20000406 	.word	0x20000406
 80012a8:	20000408 	.word	0x20000408
 80012ac:	000003a2 	.word	0x000003a2
 80012b0:	20000401 	.word	0x20000401
 80012b4:	2000040c 	.word	0x2000040c
 80012b8:	2000040a 	.word	0x2000040a
 80012bc:	000003a3 	.word	0x000003a3
 80012c0:	20000402 	.word	0x20000402
 80012c4:	20000412 	.word	0x20000412
 80012c8:	20000403 	.word	0x20000403
 80012cc:	20000410 	.word	0x20000410
 80012d0:	000003a5 	.word	0x000003a5
 80012d4:	20000404 	.word	0x20000404
 80012d8:	2000040e 	.word	0x2000040e
 80012dc:	2000041e 	.word	0x2000041e

080012e0 <tempActions>:

void tempActions(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

	tempDataFlag = 0;
 80012e4:	4b84      	ldr	r3, [pc, #528]	@ (80014f8 <tempActions+0x218>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	701a      	strb	r2, [r3, #0]
	if(ect > ectTh[0]){
 80012ea:	4b84      	ldr	r3, [pc, #528]	@ (80014fc <tempActions+0x21c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	5e9b      	ldrsh	r3, [r3, r2]
 80012f0:	001a      	movs	r2, r3
 80012f2:	4b83      	ldr	r3, [pc, #524]	@ (8001500 <tempActions+0x220>)
 80012f4:	881b      	ldrh	r3, [r3, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dd59      	ble.n	80013ae <tempActions+0xce>
		HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, SET);
 80012fa:	2380      	movs	r3, #128	@ 0x80
 80012fc:	0099      	lsls	r1, r3, #2
 80012fe:	2390      	movs	r3, #144	@ 0x90
 8001300:	05db      	lsls	r3, r3, #23
 8001302:	2201      	movs	r2, #1
 8001304:	0018      	movs	r0, r3
 8001306:	f003 fd8b 	bl	8004e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1L_Signal_GPIO_Port, F1L_Signal_Pin, SET);
 800130a:	4b7e      	ldr	r3, [pc, #504]	@ (8001504 <tempActions+0x224>)
 800130c:	2201      	movs	r2, #1
 800130e:	2180      	movs	r1, #128	@ 0x80
 8001310:	0018      	movs	r0, r3
 8001312:	f003 fd85 	bl	8004e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2L_Signal_GPIO_Port, F2L_Signal_Pin, SET);
 8001316:	4b7b      	ldr	r3, [pc, #492]	@ (8001504 <tempActions+0x224>)
 8001318:	2201      	movs	r2, #1
 800131a:	2140      	movs	r1, #64	@ 0x40
 800131c:	0018      	movs	r0, r3
 800131e:	f003 fd7f 	bl	8004e20 <HAL_GPIO_WritePin>
		TIM2->CCR3 = dutyFanEctTh[0];
 8001322:	4b79      	ldr	r3, [pc, #484]	@ (8001508 <tempActions+0x228>)
 8001324:	881a      	ldrh	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	@ 0x80
 8001328:	05db      	lsls	r3, r3, #23
 800132a:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = dutyFanEctTh[0];
 800132c:	4b76      	ldr	r3, [pc, #472]	@ (8001508 <tempActions+0x228>)
 800132e:	881a      	ldrh	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	05db      	lsls	r3, r3, #23
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM16->CCR1 = dutyPumpEctTh[0];
 8001336:	4b75      	ldr	r3, [pc, #468]	@ (800150c <tempActions+0x22c>)
 8001338:	881a      	ldrh	r2, [r3, #0]
 800133a:	4b75      	ldr	r3, [pc, #468]	@ (8001510 <tempActions+0x230>)
 800133c:	635a      	str	r2, [r3, #52]	@ 0x34

		if(ect > ectTh[1]){
 800133e:	4b6f      	ldr	r3, [pc, #444]	@ (80014fc <tempActions+0x21c>)
 8001340:	2200      	movs	r2, #0
 8001342:	5e9b      	ldrsh	r3, [r3, r2]
 8001344:	001a      	movs	r2, r3
 8001346:	4b6e      	ldr	r3, [pc, #440]	@ (8001500 <tempActions+0x220>)
 8001348:	885b      	ldrh	r3, [r3, #2]
 800134a:	429a      	cmp	r2, r3
 800134c:	dd51      	ble.n	80013f2 <tempActions+0x112>
			TIM2->CCR3 = dutyFanEctTh[1];
 800134e:	4b6e      	ldr	r3, [pc, #440]	@ (8001508 <tempActions+0x228>)
 8001350:	885a      	ldrh	r2, [r3, #2]
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	05db      	lsls	r3, r3, #23
 8001356:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = dutyFanEctTh[1];
 8001358:	4b6b      	ldr	r3, [pc, #428]	@ (8001508 <tempActions+0x228>)
 800135a:	885a      	ldrh	r2, [r3, #2]
 800135c:	2380      	movs	r3, #128	@ 0x80
 800135e:	05db      	lsls	r3, r3, #23
 8001360:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM16->CCR1 = dutyPumpEctTh[1];
 8001362:	4b6a      	ldr	r3, [pc, #424]	@ (800150c <tempActions+0x22c>)
 8001364:	885a      	ldrh	r2, [r3, #2]
 8001366:	4b6a      	ldr	r3, [pc, #424]	@ (8001510 <tempActions+0x230>)
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34

			if(ect > ectTh[2]){
 800136a:	4b64      	ldr	r3, [pc, #400]	@ (80014fc <tempActions+0x21c>)
 800136c:	2200      	movs	r2, #0
 800136e:	5e9b      	ldrsh	r3, [r3, r2]
 8001370:	001a      	movs	r2, r3
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <tempActions+0x220>)
 8001374:	889b      	ldrh	r3, [r3, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dd3b      	ble.n	80013f2 <tempActions+0x112>
				TIM2->CCR3 = dutyFanEctTh[2];
 800137a:	4b63      	ldr	r3, [pc, #396]	@ (8001508 <tempActions+0x228>)
 800137c:	889a      	ldrh	r2, [r3, #4]
 800137e:	2380      	movs	r3, #128	@ 0x80
 8001380:	05db      	lsls	r3, r3, #23
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM2->CCR4 = dutyFanEctTh[2];
 8001384:	4b60      	ldr	r3, [pc, #384]	@ (8001508 <tempActions+0x228>)
 8001386:	889a      	ldrh	r2, [r3, #4]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	05db      	lsls	r3, r3, #23
 800138c:	641a      	str	r2, [r3, #64]	@ 0x40
				TIM16->CCR1 = dutyPumpEctTh[2];
 800138e:	4b5f      	ldr	r3, [pc, #380]	@ (800150c <tempActions+0x22c>)
 8001390:	889a      	ldrh	r2, [r3, #4]
 8001392:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <tempActions+0x230>)
 8001394:	635a      	str	r2, [r3, #52]	@ 0x34

				if(ect > ectTh[3]){
 8001396:	4b59      	ldr	r3, [pc, #356]	@ (80014fc <tempActions+0x21c>)
 8001398:	2200      	movs	r2, #0
 800139a:	5e9b      	ldrsh	r3, [r3, r2]
 800139c:	001a      	movs	r2, r3
 800139e:	4b58      	ldr	r3, [pc, #352]	@ (8001500 <tempActions+0x220>)
 80013a0:	88db      	ldrh	r3, [r3, #6]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dd25      	ble.n	80013f2 <tempActions+0x112>
					ectEmergencyFlag = 1;
 80013a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001514 <tempActions+0x234>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	e021      	b.n	80013f2 <tempActions+0x112>
				}
			}
		}
	}else{
		HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, RESET);
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	0099      	lsls	r1, r3, #2
 80013b2:	2390      	movs	r3, #144	@ 0x90
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	2200      	movs	r2, #0
 80013b8:	0018      	movs	r0, r3
 80013ba:	f003 fd31 	bl	8004e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1L_Signal_GPIO_Port, F1L_Signal_Pin, RESET);
 80013be:	4b51      	ldr	r3, [pc, #324]	@ (8001504 <tempActions+0x224>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	2180      	movs	r1, #128	@ 0x80
 80013c4:	0018      	movs	r0, r3
 80013c6:	f003 fd2b 	bl	8004e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2L_Signal_GPIO_Port, F2L_Signal_Pin, RESET);
 80013ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001504 <tempActions+0x224>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	2140      	movs	r1, #64	@ 0x40
 80013d0:	0018      	movs	r0, r3
 80013d2:	f003 fd25 	bl	8004e20 <HAL_GPIO_WritePin>
		TIM2->CCR3 = dutyFanNill;
 80013d6:	4b50      	ldr	r3, [pc, #320]	@ (8001518 <tempActions+0x238>)
 80013d8:	881a      	ldrh	r2, [r3, #0]
 80013da:	2380      	movs	r3, #128	@ 0x80
 80013dc:	05db      	lsls	r3, r3, #23
 80013de:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = dutyFanNill;
 80013e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001518 <tempActions+0x238>)
 80013e2:	881a      	ldrh	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	05db      	lsls	r3, r3, #23
 80013e8:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM16->CCR1 = dutyPumpNill;
 80013ea:	4b4c      	ldr	r3, [pc, #304]	@ (800151c <tempActions+0x23c>)
 80013ec:	881a      	ldrh	r2, [r3, #0]
 80013ee:	4b48      	ldr	r3, [pc, #288]	@ (8001510 <tempActions+0x230>)
 80013f0:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(oilTemp > oilTh[0]){
 80013f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001520 <tempActions+0x240>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	5e9b      	ldrsh	r3, [r3, r2]
 80013f8:	001a      	movs	r2, r3
 80013fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001524 <tempActions+0x244>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dd55      	ble.n	80014ae <tempActions+0x1ce>
		HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, SET);
 8001402:	2380      	movs	r3, #128	@ 0x80
 8001404:	0059      	lsls	r1, r3, #1
 8001406:	2390      	movs	r3, #144	@ 0x90
 8001408:	05db      	lsls	r3, r3, #23
 800140a:	2201      	movs	r2, #1
 800140c:	0018      	movs	r0, r3
 800140e:	f003 fd07 	bl	8004e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, SET);
 8001412:	4b3c      	ldr	r3, [pc, #240]	@ (8001504 <tempActions+0x224>)
 8001414:	2201      	movs	r2, #1
 8001416:	2108      	movs	r1, #8
 8001418:	0018      	movs	r0, r3
 800141a:	f003 fd01 	bl	8004e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, SET);
 800141e:	2380      	movs	r3, #128	@ 0x80
 8001420:	0219      	lsls	r1, r3, #8
 8001422:	2390      	movs	r3, #144	@ 0x90
 8001424:	05db      	lsls	r3, r3, #23
 8001426:	2201      	movs	r2, #1
 8001428:	0018      	movs	r0, r3
 800142a:	f003 fcf9 	bl	8004e20 <HAL_GPIO_WritePin>
		TIM3->CCR1 = dutyFanEctTh[0];
 800142e:	4b36      	ldr	r3, [pc, #216]	@ (8001508 <tempActions+0x228>)
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <tempActions+0x248>)
 8001434:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = dutyFanEctTh[0];
 8001436:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <tempActions+0x228>)
 8001438:	881a      	ldrh	r2, [r3, #0]
 800143a:	4b3b      	ldr	r3, [pc, #236]	@ (8001528 <tempActions+0x248>)
 800143c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM17->CCR1 = dutyPumpOilTh[0];
 800143e:	4b3b      	ldr	r3, [pc, #236]	@ (800152c <tempActions+0x24c>)
 8001440:	881a      	ldrh	r2, [r3, #0]
 8001442:	4b3b      	ldr	r3, [pc, #236]	@ (8001530 <tempActions+0x250>)
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34

		if(oilTemp > oilTh[1]){
 8001446:	4b36      	ldr	r3, [pc, #216]	@ (8001520 <tempActions+0x240>)
 8001448:	2200      	movs	r2, #0
 800144a:	5e9b      	ldrsh	r3, [r3, r2]
 800144c:	001a      	movs	r2, r3
 800144e:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <tempActions+0x244>)
 8001450:	885b      	ldrh	r3, [r3, #2]
 8001452:	429a      	cmp	r2, r3
 8001454:	dd4d      	ble.n	80014f2 <tempActions+0x212>
			TIM3->CCR1 = dutyFanEctTh[1];
 8001456:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <tempActions+0x228>)
 8001458:	885a      	ldrh	r2, [r3, #2]
 800145a:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <tempActions+0x248>)
 800145c:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM3->CCR2 = dutyFanEctTh[1];
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <tempActions+0x228>)
 8001460:	885a      	ldrh	r2, [r3, #2]
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <tempActions+0x248>)
 8001464:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM17->CCR1 = dutyPumpOilTh[1];
 8001466:	4b31      	ldr	r3, [pc, #196]	@ (800152c <tempActions+0x24c>)
 8001468:	885a      	ldrh	r2, [r3, #2]
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <tempActions+0x250>)
 800146c:	635a      	str	r2, [r3, #52]	@ 0x34

			if(oilTemp > oilTh[2]){
 800146e:	4b2c      	ldr	r3, [pc, #176]	@ (8001520 <tempActions+0x240>)
 8001470:	2200      	movs	r2, #0
 8001472:	5e9b      	ldrsh	r3, [r3, r2]
 8001474:	001a      	movs	r2, r3
 8001476:	4b2b      	ldr	r3, [pc, #172]	@ (8001524 <tempActions+0x244>)
 8001478:	889b      	ldrh	r3, [r3, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	dd39      	ble.n	80014f2 <tempActions+0x212>
				TIM3->CCR1 = dutyFanEctTh[2];
 800147e:	4b22      	ldr	r3, [pc, #136]	@ (8001508 <tempActions+0x228>)
 8001480:	889a      	ldrh	r2, [r3, #4]
 8001482:	4b29      	ldr	r3, [pc, #164]	@ (8001528 <tempActions+0x248>)
 8001484:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM3->CCR2 = dutyFanEctTh[2];
 8001486:	4b20      	ldr	r3, [pc, #128]	@ (8001508 <tempActions+0x228>)
 8001488:	889a      	ldrh	r2, [r3, #4]
 800148a:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <tempActions+0x248>)
 800148c:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM17->CCR1 = dutyPumpOilTh[2];
 800148e:	4b27      	ldr	r3, [pc, #156]	@ (800152c <tempActions+0x24c>)
 8001490:	889a      	ldrh	r2, [r3, #4]
 8001492:	4b27      	ldr	r3, [pc, #156]	@ (8001530 <tempActions+0x250>)
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34

				if(oilTemp > oilTh[3]){
 8001496:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <tempActions+0x240>)
 8001498:	2200      	movs	r2, #0
 800149a:	5e9b      	ldrsh	r3, [r3, r2]
 800149c:	001a      	movs	r2, r3
 800149e:	4b21      	ldr	r3, [pc, #132]	@ (8001524 <tempActions+0x244>)
 80014a0:	88db      	ldrh	r3, [r3, #6]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dd25      	ble.n	80014f2 <tempActions+0x212>
					oilEmergencyFlag = 1;
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <tempActions+0x254>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, RESET);
		TIM3->CCR1 = dutyFanNill;
		TIM3->CCR2 = dutyFanNill;
		TIM17->CCR1 = dutyPumpNill;
	}
}
 80014ac:	e021      	b.n	80014f2 <tempActions+0x212>
		HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, RESET);
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	0059      	lsls	r1, r3, #1
 80014b2:	2390      	movs	r3, #144	@ 0x90
 80014b4:	05db      	lsls	r3, r3, #23
 80014b6:	2200      	movs	r2, #0
 80014b8:	0018      	movs	r0, r3
 80014ba:	f003 fcb1 	bl	8004e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, RESET);
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <tempActions+0x224>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	2108      	movs	r1, #8
 80014c4:	0018      	movs	r0, r3
 80014c6:	f003 fcab 	bl	8004e20 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, RESET);
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	0219      	lsls	r1, r3, #8
 80014ce:	2390      	movs	r3, #144	@ 0x90
 80014d0:	05db      	lsls	r3, r3, #23
 80014d2:	2200      	movs	r2, #0
 80014d4:	0018      	movs	r0, r3
 80014d6:	f003 fca3 	bl	8004e20 <HAL_GPIO_WritePin>
		TIM3->CCR1 = dutyFanNill;
 80014da:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <tempActions+0x238>)
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	4b12      	ldr	r3, [pc, #72]	@ (8001528 <tempActions+0x248>)
 80014e0:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = dutyFanNill;
 80014e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001518 <tempActions+0x238>)
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <tempActions+0x248>)
 80014e8:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM17->CCR1 = dutyPumpNill;
 80014ea:	4b0c      	ldr	r3, [pc, #48]	@ (800151c <tempActions+0x23c>)
 80014ec:	881a      	ldrh	r2, [r3, #0]
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <tempActions+0x250>)
 80014f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000400 	.word	0x20000400
 80014fc:	20000406 	.word	0x20000406
 8001500:	20000000 	.word	0x20000000
 8001504:	48000400 	.word	0x48000400
 8001508:	20000018 	.word	0x20000018
 800150c:	20000020 	.word	0x20000020
 8001510:	40014400 	.word	0x40014400
 8001514:	20000417 	.word	0x20000417
 8001518:	2000001e 	.word	0x2000001e
 800151c:	20000026 	.word	0x20000026
 8001520:	20000408 	.word	0x20000408
 8001524:	20000008 	.word	0x20000008
 8001528:	40000400 	.word	0x40000400
 800152c:	20000030 	.word	0x20000030
 8001530:	40014800 	.word	0x40014800
 8001534:	20000418 	.word	0x20000418

08001538 <sendCan>:

void sendCan(){
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
	send = 0;
 800153c:	4b43      	ldr	r3, [pc, #268]	@ (800164c <sendCan+0x114>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]

	TxData_adc[0] = (adc8 >> 8) & 0xFF;
 8001542:	4b43      	ldr	r3, [pc, #268]	@ (8001650 <sendCan+0x118>)
 8001544:	2200      	movs	r2, #0
 8001546:	5e9b      	ldrsh	r3, [r3, r2]
 8001548:	121b      	asrs	r3, r3, #8
 800154a:	b21b      	sxth	r3, r3
 800154c:	b2da      	uxtb	r2, r3
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <sendCan+0x11c>)
 8001550:	701a      	strb	r2, [r3, #0]
	TxData_adc[1] = adc8 & 0xFF;
 8001552:	4b3f      	ldr	r3, [pc, #252]	@ (8001650 <sendCan+0x118>)
 8001554:	2200      	movs	r2, #0
 8001556:	5e9b      	ldrsh	r3, [r3, r2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b3e      	ldr	r3, [pc, #248]	@ (8001654 <sendCan+0x11c>)
 800155c:	705a      	strb	r2, [r3, #1]
	TxData_adc[2] = (adc2 >> 8) & 0xFF;
 800155e:	4b3e      	ldr	r3, [pc, #248]	@ (8001658 <sendCan+0x120>)
 8001560:	2200      	movs	r2, #0
 8001562:	5e9b      	ldrsh	r3, [r3, r2]
 8001564:	121b      	asrs	r3, r3, #8
 8001566:	b21b      	sxth	r3, r3
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <sendCan+0x11c>)
 800156c:	709a      	strb	r2, [r3, #2]
	TxData_adc[3] = adc2 & 0xFF;
 800156e:	4b3a      	ldr	r3, [pc, #232]	@ (8001658 <sendCan+0x120>)
 8001570:	2200      	movs	r2, #0
 8001572:	5e9b      	ldrsh	r3, [r3, r2]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b37      	ldr	r3, [pc, #220]	@ (8001654 <sendCan+0x11c>)
 8001578:	70da      	strb	r2, [r3, #3]
	TxData_adc[4] = (adc3 >> 8) & 0xFF;
 800157a:	4b38      	ldr	r3, [pc, #224]	@ (800165c <sendCan+0x124>)
 800157c:	2200      	movs	r2, #0
 800157e:	5e9b      	ldrsh	r3, [r3, r2]
 8001580:	121b      	asrs	r3, r3, #8
 8001582:	b21b      	sxth	r3, r3
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <sendCan+0x11c>)
 8001588:	711a      	strb	r2, [r3, #4]
	TxData_adc[5] = adc3 & 0xFF;
 800158a:	4b34      	ldr	r3, [pc, #208]	@ (800165c <sendCan+0x124>)
 800158c:	2200      	movs	r2, #0
 800158e:	5e9b      	ldrsh	r3, [r3, r2]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	4b30      	ldr	r3, [pc, #192]	@ (8001654 <sendCan+0x11c>)
 8001594:	715a      	strb	r2, [r3, #5]
	TxData_adc[6] = (adc4 >> 8) & 0xFF;
 8001596:	4b32      	ldr	r3, [pc, #200]	@ (8001660 <sendCan+0x128>)
 8001598:	2200      	movs	r2, #0
 800159a:	5e9b      	ldrsh	r3, [r3, r2]
 800159c:	121b      	asrs	r3, r3, #8
 800159e:	b21b      	sxth	r3, r3
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001654 <sendCan+0x11c>)
 80015a4:	719a      	strb	r2, [r3, #6]
	TxData_adc[7] = adc4 & 0xFF;
 80015a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <sendCan+0x128>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	5e9b      	ldrsh	r3, [r3, r2]
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	4b29      	ldr	r3, [pc, #164]	@ (8001654 <sendCan+0x11c>)
 80015b0:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc, TxData_adc, &TxMailBox);
 80015b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <sendCan+0x12c>)
 80015b4:	4a27      	ldr	r2, [pc, #156]	@ (8001654 <sendCan+0x11c>)
 80015b6:	492c      	ldr	r1, [pc, #176]	@ (8001668 <sendCan+0x130>)
 80015b8:	482c      	ldr	r0, [pc, #176]	@ (800166c <sendCan+0x134>)
 80015ba:	f002 fc17 	bl	8003dec <HAL_CAN_AddTxMessage>

	TxData_adc1[0] = (adc5 >> 8) & 0xFF;
 80015be:	4b2c      	ldr	r3, [pc, #176]	@ (8001670 <sendCan+0x138>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	5e9b      	ldrsh	r3, [r3, r2]
 80015c4:	121b      	asrs	r3, r3, #8
 80015c6:	b21b      	sxth	r3, r3
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <sendCan+0x13c>)
 80015cc:	701a      	strb	r2, [r3, #0]
	TxData_adc1[1] = adc5 & 0xFF;
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <sendCan+0x138>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	5e9b      	ldrsh	r3, [r3, r2]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b27      	ldr	r3, [pc, #156]	@ (8001674 <sendCan+0x13c>)
 80015d8:	705a      	strb	r2, [r3, #1]
	TxData_adc1[2] = (adc1 >> 8) & 0xFF;
 80015da:	4b27      	ldr	r3, [pc, #156]	@ (8001678 <sendCan+0x140>)
 80015dc:	2200      	movs	r2, #0
 80015de:	5e9b      	ldrsh	r3, [r3, r2]
 80015e0:	121b      	asrs	r3, r3, #8
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <sendCan+0x13c>)
 80015e8:	709a      	strb	r2, [r3, #2]
	TxData_adc1[3] = adc1 & 0xFF;
 80015ea:	4b23      	ldr	r3, [pc, #140]	@ (8001678 <sendCan+0x140>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	5e9b      	ldrsh	r3, [r3, r2]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <sendCan+0x13c>)
 80015f4:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc1, TxData_adc1, &TxMailBox);
 80015f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001664 <sendCan+0x12c>)
 80015f8:	4a1e      	ldr	r2, [pc, #120]	@ (8001674 <sendCan+0x13c>)
 80015fa:	4920      	ldr	r1, [pc, #128]	@ (800167c <sendCan+0x144>)
 80015fc:	481b      	ldr	r0, [pc, #108]	@ (800166c <sendCan+0x134>)
 80015fe:	f002 fbf5 	bl	8003dec <HAL_CAN_AddTxMessage>

	TxData_adc2[0] = (adc6 >> 8) & 0xFF;
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <sendCan+0x148>)
 8001604:	2200      	movs	r2, #0
 8001606:	5e9b      	ldrsh	r3, [r3, r2]
 8001608:	121b      	asrs	r3, r3, #8
 800160a:	b21b      	sxth	r3, r3
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4b1d      	ldr	r3, [pc, #116]	@ (8001684 <sendCan+0x14c>)
 8001610:	701a      	strb	r2, [r3, #0]
	TxData_adc2[1] = adc6 & 0xFF;
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <sendCan+0x148>)
 8001614:	2200      	movs	r2, #0
 8001616:	5e9b      	ldrsh	r3, [r3, r2]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b1a      	ldr	r3, [pc, #104]	@ (8001684 <sendCan+0x14c>)
 800161c:	705a      	strb	r2, [r3, #1]
	TxData_adc2[2] = (adc9 >> 8) & 0xFF;
 800161e:	4b1a      	ldr	r3, [pc, #104]	@ (8001688 <sendCan+0x150>)
 8001620:	2200      	movs	r2, #0
 8001622:	5e9b      	ldrsh	r3, [r3, r2]
 8001624:	121b      	asrs	r3, r3, #8
 8001626:	b21b      	sxth	r3, r3
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <sendCan+0x14c>)
 800162c:	709a      	strb	r2, [r3, #2]
	TxData_adc2[3] = adc9 & 0xFF;
 800162e:	4b16      	ldr	r3, [pc, #88]	@ (8001688 <sendCan+0x150>)
 8001630:	2200      	movs	r2, #0
 8001632:	5e9b      	ldrsh	r3, [r3, r2]
 8001634:	b2da      	uxtb	r2, r3
 8001636:	4b13      	ldr	r3, [pc, #76]	@ (8001684 <sendCan+0x14c>)
 8001638:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc2, TxData_adc2, &TxMailBox);
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <sendCan+0x12c>)
 800163c:	4a11      	ldr	r2, [pc, #68]	@ (8001684 <sendCan+0x14c>)
 800163e:	4913      	ldr	r1, [pc, #76]	@ (800168c <sendCan+0x154>)
 8001640:	480a      	ldr	r0, [pc, #40]	@ (800166c <sendCan+0x134>)
 8001642:	f002 fbd3 	bl	8003dec <HAL_CAN_AddTxMessage>
}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000419 	.word	0x20000419
 8001650:	200003fc 	.word	0x200003fc
 8001654:	2000039c 	.word	0x2000039c
 8001658:	200003f0 	.word	0x200003f0
 800165c:	200003f2 	.word	0x200003f2
 8001660:	200003f4 	.word	0x200003f4
 8001664:	20000398 	.word	0x20000398
 8001668:	20000308 	.word	0x20000308
 800166c:	200000f8 	.word	0x200000f8
 8001670:	200003f6 	.word	0x200003f6
 8001674:	200003a4 	.word	0x200003a4
 8001678:	200003ee 	.word	0x200003ee
 800167c:	20000320 	.word	0x20000320
 8001680:	200003f8 	.word	0x200003f8
 8001684:	200003a8 	.word	0x200003a8
 8001688:	200003fe 	.word	0x200003fe
 800168c:	20000338 	.word	0x20000338

08001690 <heartbeat>:

void heartbeat(){
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
	TxData_heartbeat[0] = 4;
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <heartbeat+0x24>)
 8001696:	2204      	movs	r2, #4
 8001698:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader_heartbeat, TxData_heartbeat,&TxMailBox);
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <heartbeat+0x28>)
 800169c:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <heartbeat+0x24>)
 800169e:	4907      	ldr	r1, [pc, #28]	@ (80016bc <heartbeat+0x2c>)
 80016a0:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <heartbeat+0x30>)
 80016a2:	f002 fba3 	bl	8003dec <HAL_CAN_AddTxMessage>
	heartbeatFlag = 0;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <heartbeat+0x34>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	701a      	strb	r2, [r3, #0]

}
 80016ac:	46c0      	nop			@ (mov r8, r8)
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	200003ac 	.word	0x200003ac
 80016b8:	20000398 	.word	0x20000398
 80016bc:	20000380 	.word	0x20000380
 80016c0:	200000f8 	.word	0x200000f8
 80016c4:	2000041a 	.word	0x2000041a

080016c8 <mapeoADC>:

void mapeoADC(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	adc1 = ((value_adc[0] * (3.3 / 4095)) - 0.26) * (1000 / 0.132); //
 80016cc:	4ba2      	ldr	r3, [pc, #648]	@ (8001958 <mapeoADC+0x290>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	0018      	movs	r0, r3
 80016d2:	f7ff fcd1 	bl	8001078 <__aeabi_i2d>
 80016d6:	4aa1      	ldr	r2, [pc, #644]	@ (800195c <mapeoADC+0x294>)
 80016d8:	4ba1      	ldr	r3, [pc, #644]	@ (8001960 <mapeoADC+0x298>)
 80016da:	f7fe fda1 	bl	8000220 <__aeabi_dmul>
 80016de:	0002      	movs	r2, r0
 80016e0:	000b      	movs	r3, r1
 80016e2:	0010      	movs	r0, r2
 80016e4:	0019      	movs	r1, r3
 80016e6:	4a9f      	ldr	r2, [pc, #636]	@ (8001964 <mapeoADC+0x29c>)
 80016e8:	4b9f      	ldr	r3, [pc, #636]	@ (8001968 <mapeoADC+0x2a0>)
 80016ea:	f7ff f87f 	bl	80007ec <__aeabi_dsub>
 80016ee:	0002      	movs	r2, r0
 80016f0:	000b      	movs	r3, r1
 80016f2:	0010      	movs	r0, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	4a9d      	ldr	r2, [pc, #628]	@ (800196c <mapeoADC+0x2a4>)
 80016f8:	4b9d      	ldr	r3, [pc, #628]	@ (8001970 <mapeoADC+0x2a8>)
 80016fa:	f7fe fd91 	bl	8000220 <__aeabi_dmul>
 80016fe:	0002      	movs	r2, r0
 8001700:	000b      	movs	r3, r1
 8001702:	0010      	movs	r0, r2
 8001704:	0019      	movs	r1, r3
 8001706:	f7ff fc7b 	bl	8001000 <__aeabi_d2iz>
 800170a:	0003      	movs	r3, r0
 800170c:	b21a      	sxth	r2, r3
 800170e:	4b99      	ldr	r3, [pc, #612]	@ (8001974 <mapeoADC+0x2ac>)
 8001710:	801a      	strh	r2, [r3, #0]
	adc2 = ((value_adc[1] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 8001712:	4b91      	ldr	r3, [pc, #580]	@ (8001958 <mapeoADC+0x290>)
 8001714:	885b      	ldrh	r3, [r3, #2]
 8001716:	0018      	movs	r0, r3
 8001718:	f7ff fcae 	bl	8001078 <__aeabi_i2d>
 800171c:	4a8f      	ldr	r2, [pc, #572]	@ (800195c <mapeoADC+0x294>)
 800171e:	4b90      	ldr	r3, [pc, #576]	@ (8001960 <mapeoADC+0x298>)
 8001720:	f7fe fd7e 	bl	8000220 <__aeabi_dmul>
 8001724:	0002      	movs	r2, r0
 8001726:	000b      	movs	r3, r1
 8001728:	0010      	movs	r0, r2
 800172a:	0019      	movs	r1, r3
 800172c:	4a8d      	ldr	r2, [pc, #564]	@ (8001964 <mapeoADC+0x29c>)
 800172e:	4b8e      	ldr	r3, [pc, #568]	@ (8001968 <mapeoADC+0x2a0>)
 8001730:	f7ff f85c 	bl	80007ec <__aeabi_dsub>
 8001734:	0002      	movs	r2, r0
 8001736:	000b      	movs	r3, r1
 8001738:	0010      	movs	r0, r2
 800173a:	0019      	movs	r1, r3
 800173c:	4a8b      	ldr	r2, [pc, #556]	@ (800196c <mapeoADC+0x2a4>)
 800173e:	4b8e      	ldr	r3, [pc, #568]	@ (8001978 <mapeoADC+0x2b0>)
 8001740:	f7fe fd6e 	bl	8000220 <__aeabi_dmul>
 8001744:	0002      	movs	r2, r0
 8001746:	000b      	movs	r3, r1
 8001748:	0010      	movs	r0, r2
 800174a:	0019      	movs	r1, r3
 800174c:	f7ff fc58 	bl	8001000 <__aeabi_d2iz>
 8001750:	0003      	movs	r3, r0
 8001752:	b21a      	sxth	r2, r3
 8001754:	4b89      	ldr	r3, [pc, #548]	@ (800197c <mapeoADC+0x2b4>)
 8001756:	801a      	strh	r2, [r3, #0]
	adc3 = ((value_adc[2] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 8001758:	4b7f      	ldr	r3, [pc, #508]	@ (8001958 <mapeoADC+0x290>)
 800175a:	889b      	ldrh	r3, [r3, #4]
 800175c:	0018      	movs	r0, r3
 800175e:	f7ff fc8b 	bl	8001078 <__aeabi_i2d>
 8001762:	4a7e      	ldr	r2, [pc, #504]	@ (800195c <mapeoADC+0x294>)
 8001764:	4b7e      	ldr	r3, [pc, #504]	@ (8001960 <mapeoADC+0x298>)
 8001766:	f7fe fd5b 	bl	8000220 <__aeabi_dmul>
 800176a:	0002      	movs	r2, r0
 800176c:	000b      	movs	r3, r1
 800176e:	0010      	movs	r0, r2
 8001770:	0019      	movs	r1, r3
 8001772:	4a7c      	ldr	r2, [pc, #496]	@ (8001964 <mapeoADC+0x29c>)
 8001774:	4b7c      	ldr	r3, [pc, #496]	@ (8001968 <mapeoADC+0x2a0>)
 8001776:	f7ff f839 	bl	80007ec <__aeabi_dsub>
 800177a:	0002      	movs	r2, r0
 800177c:	000b      	movs	r3, r1
 800177e:	0010      	movs	r0, r2
 8001780:	0019      	movs	r1, r3
 8001782:	4a7a      	ldr	r2, [pc, #488]	@ (800196c <mapeoADC+0x2a4>)
 8001784:	4b7c      	ldr	r3, [pc, #496]	@ (8001978 <mapeoADC+0x2b0>)
 8001786:	f7fe fd4b 	bl	8000220 <__aeabi_dmul>
 800178a:	0002      	movs	r2, r0
 800178c:	000b      	movs	r3, r1
 800178e:	0010      	movs	r0, r2
 8001790:	0019      	movs	r1, r3
 8001792:	f7ff fc35 	bl	8001000 <__aeabi_d2iz>
 8001796:	0003      	movs	r3, r0
 8001798:	b21a      	sxth	r2, r3
 800179a:	4b79      	ldr	r3, [pc, #484]	@ (8001980 <mapeoADC+0x2b8>)
 800179c:	801a      	strh	r2, [r3, #0]
	adc4 = ((value_adc[3] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 800179e:	4b6e      	ldr	r3, [pc, #440]	@ (8001958 <mapeoADC+0x290>)
 80017a0:	88db      	ldrh	r3, [r3, #6]
 80017a2:	0018      	movs	r0, r3
 80017a4:	f7ff fc68 	bl	8001078 <__aeabi_i2d>
 80017a8:	4a6c      	ldr	r2, [pc, #432]	@ (800195c <mapeoADC+0x294>)
 80017aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <mapeoADC+0x298>)
 80017ac:	f7fe fd38 	bl	8000220 <__aeabi_dmul>
 80017b0:	0002      	movs	r2, r0
 80017b2:	000b      	movs	r3, r1
 80017b4:	0010      	movs	r0, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001964 <mapeoADC+0x29c>)
 80017ba:	4b6b      	ldr	r3, [pc, #428]	@ (8001968 <mapeoADC+0x2a0>)
 80017bc:	f7ff f816 	bl	80007ec <__aeabi_dsub>
 80017c0:	0002      	movs	r2, r0
 80017c2:	000b      	movs	r3, r1
 80017c4:	0010      	movs	r0, r2
 80017c6:	0019      	movs	r1, r3
 80017c8:	4a68      	ldr	r2, [pc, #416]	@ (800196c <mapeoADC+0x2a4>)
 80017ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001978 <mapeoADC+0x2b0>)
 80017cc:	f7fe fd28 	bl	8000220 <__aeabi_dmul>
 80017d0:	0002      	movs	r2, r0
 80017d2:	000b      	movs	r3, r1
 80017d4:	0010      	movs	r0, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	f7ff fc12 	bl	8001000 <__aeabi_d2iz>
 80017dc:	0003      	movs	r3, r0
 80017de:	b21a      	sxth	r2, r3
 80017e0:	4b68      	ldr	r3, [pc, #416]	@ (8001984 <mapeoADC+0x2bc>)
 80017e2:	801a      	strh	r2, [r3, #0]
	adc5 = ((value_adc[4] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 80017e4:	4b5c      	ldr	r3, [pc, #368]	@ (8001958 <mapeoADC+0x290>)
 80017e6:	891b      	ldrh	r3, [r3, #8]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff fc45 	bl	8001078 <__aeabi_i2d>
 80017ee:	4a5b      	ldr	r2, [pc, #364]	@ (800195c <mapeoADC+0x294>)
 80017f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001960 <mapeoADC+0x298>)
 80017f2:	f7fe fd15 	bl	8000220 <__aeabi_dmul>
 80017f6:	0002      	movs	r2, r0
 80017f8:	000b      	movs	r3, r1
 80017fa:	0010      	movs	r0, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	4a59      	ldr	r2, [pc, #356]	@ (8001964 <mapeoADC+0x29c>)
 8001800:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <mapeoADC+0x2a0>)
 8001802:	f7fe fff3 	bl	80007ec <__aeabi_dsub>
 8001806:	0002      	movs	r2, r0
 8001808:	000b      	movs	r3, r1
 800180a:	0010      	movs	r0, r2
 800180c:	0019      	movs	r1, r3
 800180e:	4a57      	ldr	r2, [pc, #348]	@ (800196c <mapeoADC+0x2a4>)
 8001810:	4b59      	ldr	r3, [pc, #356]	@ (8001978 <mapeoADC+0x2b0>)
 8001812:	f7fe fd05 	bl	8000220 <__aeabi_dmul>
 8001816:	0002      	movs	r2, r0
 8001818:	000b      	movs	r3, r1
 800181a:	0010      	movs	r0, r2
 800181c:	0019      	movs	r1, r3
 800181e:	f7ff fbef 	bl	8001000 <__aeabi_d2iz>
 8001822:	0003      	movs	r3, r0
 8001824:	b21a      	sxth	r2, r3
 8001826:	4b58      	ldr	r3, [pc, #352]	@ (8001988 <mapeoADC+0x2c0>)
 8001828:	801a      	strh	r2, [r3, #0]
	adc6 = ((value_adc[5] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 800182a:	4b4b      	ldr	r3, [pc, #300]	@ (8001958 <mapeoADC+0x290>)
 800182c:	895b      	ldrh	r3, [r3, #10]
 800182e:	0018      	movs	r0, r3
 8001830:	f7ff fc22 	bl	8001078 <__aeabi_i2d>
 8001834:	4a49      	ldr	r2, [pc, #292]	@ (800195c <mapeoADC+0x294>)
 8001836:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <mapeoADC+0x298>)
 8001838:	f7fe fcf2 	bl	8000220 <__aeabi_dmul>
 800183c:	0002      	movs	r2, r0
 800183e:	000b      	movs	r3, r1
 8001840:	0010      	movs	r0, r2
 8001842:	0019      	movs	r1, r3
 8001844:	4a47      	ldr	r2, [pc, #284]	@ (8001964 <mapeoADC+0x29c>)
 8001846:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <mapeoADC+0x2a0>)
 8001848:	f7fe ffd0 	bl	80007ec <__aeabi_dsub>
 800184c:	0002      	movs	r2, r0
 800184e:	000b      	movs	r3, r1
 8001850:	0010      	movs	r0, r2
 8001852:	0019      	movs	r1, r3
 8001854:	4a45      	ldr	r2, [pc, #276]	@ (800196c <mapeoADC+0x2a4>)
 8001856:	4b48      	ldr	r3, [pc, #288]	@ (8001978 <mapeoADC+0x2b0>)
 8001858:	f7fe fce2 	bl	8000220 <__aeabi_dmul>
 800185c:	0002      	movs	r2, r0
 800185e:	000b      	movs	r3, r1
 8001860:	0010      	movs	r0, r2
 8001862:	0019      	movs	r1, r3
 8001864:	f7ff fbcc 	bl	8001000 <__aeabi_d2iz>
 8001868:	0003      	movs	r3, r0
 800186a:	b21a      	sxth	r2, r3
 800186c:	4b47      	ldr	r3, [pc, #284]	@ (800198c <mapeoADC+0x2c4>)
 800186e:	801a      	strh	r2, [r3, #0]
	adc7 = ((value_adc[6] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //
 8001870:	4b39      	ldr	r3, [pc, #228]	@ (8001958 <mapeoADC+0x290>)
 8001872:	899b      	ldrh	r3, [r3, #12]
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff fbff 	bl	8001078 <__aeabi_i2d>
 800187a:	4a38      	ldr	r2, [pc, #224]	@ (800195c <mapeoADC+0x294>)
 800187c:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <mapeoADC+0x298>)
 800187e:	f7fe fccf 	bl	8000220 <__aeabi_dmul>
 8001882:	0002      	movs	r2, r0
 8001884:	000b      	movs	r3, r1
 8001886:	0010      	movs	r0, r2
 8001888:	0019      	movs	r1, r3
 800188a:	4a36      	ldr	r2, [pc, #216]	@ (8001964 <mapeoADC+0x29c>)
 800188c:	4b36      	ldr	r3, [pc, #216]	@ (8001968 <mapeoADC+0x2a0>)
 800188e:	f7fe ffad 	bl	80007ec <__aeabi_dsub>
 8001892:	0002      	movs	r2, r0
 8001894:	000b      	movs	r3, r1
 8001896:	0010      	movs	r0, r2
 8001898:	0019      	movs	r1, r3
 800189a:	4a34      	ldr	r2, [pc, #208]	@ (800196c <mapeoADC+0x2a4>)
 800189c:	4b36      	ldr	r3, [pc, #216]	@ (8001978 <mapeoADC+0x2b0>)
 800189e:	f7fe fcbf 	bl	8000220 <__aeabi_dmul>
 80018a2:	0002      	movs	r2, r0
 80018a4:	000b      	movs	r3, r1
 80018a6:	0010      	movs	r0, r2
 80018a8:	0019      	movs	r1, r3
 80018aa:	f7ff fba9 	bl	8001000 <__aeabi_d2iz>
 80018ae:	0003      	movs	r3, r0
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	4b37      	ldr	r3, [pc, #220]	@ (8001990 <mapeoADC+0x2c8>)
 80018b4:	801a      	strh	r2, [r3, #0]
	adc8 = ((value_adc[7] * (3.3 / 4095)) - 0.27) * (1000 / 0.088); // Alternator Esto debería de ser (value_adc[7] *(3.3/4095)-0.33) *(1000/0.264)
 80018b6:	4b28      	ldr	r3, [pc, #160]	@ (8001958 <mapeoADC+0x290>)
 80018b8:	89db      	ldrh	r3, [r3, #14]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff fbdc 	bl	8001078 <__aeabi_i2d>
 80018c0:	4a26      	ldr	r2, [pc, #152]	@ (800195c <mapeoADC+0x294>)
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <mapeoADC+0x298>)
 80018c4:	f7fe fcac 	bl	8000220 <__aeabi_dmul>
 80018c8:	0002      	movs	r2, r0
 80018ca:	000b      	movs	r3, r1
 80018cc:	0010      	movs	r0, r2
 80018ce:	0019      	movs	r1, r3
 80018d0:	4a30      	ldr	r2, [pc, #192]	@ (8001994 <mapeoADC+0x2cc>)
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <mapeoADC+0x2d0>)
 80018d4:	f7fe ff8a 	bl	80007ec <__aeabi_dsub>
 80018d8:	0002      	movs	r2, r0
 80018da:	000b      	movs	r3, r1
 80018dc:	0010      	movs	r0, r2
 80018de:	0019      	movs	r1, r3
 80018e0:	4a2e      	ldr	r2, [pc, #184]	@ (800199c <mapeoADC+0x2d4>)
 80018e2:	4b2f      	ldr	r3, [pc, #188]	@ (80019a0 <mapeoADC+0x2d8>)
 80018e4:	f7fe fc9c 	bl	8000220 <__aeabi_dmul>
 80018e8:	0002      	movs	r2, r0
 80018ea:	000b      	movs	r3, r1
 80018ec:	0010      	movs	r0, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	f7ff fb86 	bl	8001000 <__aeabi_d2iz>
 80018f4:	0003      	movs	r3, r0
 80018f6:	b21a      	sxth	r2, r3
 80018f8:	4b2a      	ldr	r3, [pc, #168]	@ (80019a4 <mapeoADC+0x2dc>)
 80018fa:	801a      	strh	r2, [r3, #0]
	adc9 = (((value_adc[8] * (3.3 / 4095) - 0.5)) * (1000 / 10) * 1000); // calibración del sensor 0.01V/ºC
 80018fc:	4b16      	ldr	r3, [pc, #88]	@ (8001958 <mapeoADC+0x290>)
 80018fe:	8a1b      	ldrh	r3, [r3, #16]
 8001900:	0018      	movs	r0, r3
 8001902:	f7ff fbb9 	bl	8001078 <__aeabi_i2d>
 8001906:	4a15      	ldr	r2, [pc, #84]	@ (800195c <mapeoADC+0x294>)
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <mapeoADC+0x298>)
 800190a:	f7fe fc89 	bl	8000220 <__aeabi_dmul>
 800190e:	0002      	movs	r2, r0
 8001910:	000b      	movs	r3, r1
 8001912:	0010      	movs	r0, r2
 8001914:	0019      	movs	r1, r3
 8001916:	2200      	movs	r2, #0
 8001918:	4b23      	ldr	r3, [pc, #140]	@ (80019a8 <mapeoADC+0x2e0>)
 800191a:	f7fe ff67 	bl	80007ec <__aeabi_dsub>
 800191e:	0002      	movs	r2, r0
 8001920:	000b      	movs	r3, r1
 8001922:	0010      	movs	r0, r2
 8001924:	0019      	movs	r1, r3
 8001926:	2200      	movs	r2, #0
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <mapeoADC+0x2e4>)
 800192a:	f7fe fc79 	bl	8000220 <__aeabi_dmul>
 800192e:	0002      	movs	r2, r0
 8001930:	000b      	movs	r3, r1
 8001932:	0010      	movs	r0, r2
 8001934:	0019      	movs	r1, r3
 8001936:	2200      	movs	r2, #0
 8001938:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <mapeoADC+0x2e8>)
 800193a:	f7fe fc71 	bl	8000220 <__aeabi_dmul>
 800193e:	0002      	movs	r2, r0
 8001940:	000b      	movs	r3, r1
 8001942:	0010      	movs	r0, r2
 8001944:	0019      	movs	r1, r3
 8001946:	f7ff fb5b 	bl	8001000 <__aeabi_d2iz>
 800194a:	0003      	movs	r3, r0
 800194c:	b21a      	sxth	r2, r3
 800194e:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <mapeoADC+0x2ec>)
 8001950:	801a      	strh	r2, [r3, #0]
}
 8001952:	46c0      	nop			@ (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	200003dc 	.word	0x200003dc
 800195c:	e734d9b4 	.word	0xe734d9b4
 8001960:	3f4a680c 	.word	0x3f4a680c
 8001964:	0a3d70a4 	.word	0x0a3d70a4
 8001968:	3fd0a3d7 	.word	0x3fd0a3d7
 800196c:	f07c1f07 	.word	0xf07c1f07
 8001970:	40bd97c1 	.word	0x40bd97c1
 8001974:	200003ee 	.word	0x200003ee
 8001978:	40ad97c1 	.word	0x40ad97c1
 800197c:	200003f0 	.word	0x200003f0
 8001980:	200003f2 	.word	0x200003f2
 8001984:	200003f4 	.word	0x200003f4
 8001988:	200003f6 	.word	0x200003f6
 800198c:	200003f8 	.word	0x200003f8
 8001990:	200003fa 	.word	0x200003fa
 8001994:	147ae148 	.word	0x147ae148
 8001998:	3fd147ae 	.word	0x3fd147ae
 800199c:	745d1746 	.word	0x745d1746
 80019a0:	40c631d1 	.word	0x40c631d1
 80019a4:	200003fc 	.word	0x200003fc
 80019a8:	3fe00000 	.word	0x3fe00000
 80019ac:	40590000 	.word	0x40590000
 80019b0:	408f4000 	.word	0x408f4000
 80019b4:	200003fe 	.word	0x200003fe

080019b8 <battControl>:

void battControl(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	battDataFlag = 0;
 80019be:	4b54      	ldr	r3, [pc, #336]	@ (8001b10 <battControl+0x158>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
	uint8_t arrayLength = (sizeof(dutyFanEctTh)/sizeof(dutyFanEctTh[0]));
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2203      	movs	r2, #3
 80019c8:	701a      	strb	r2, [r3, #0]
	if((battVoltAverage < battTh[2])&&(battVoltFlagDone[0] == 0)){
 80019ca:	4b52      	ldr	r3, [pc, #328]	@ (8001b14 <battControl+0x15c>)
 80019cc:	889a      	ldrh	r2, [r3, #4]
 80019ce:	4b52      	ldr	r3, [pc, #328]	@ (8001b18 <battControl+0x160>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d800      	bhi.n	80019d8 <battControl+0x20>
 80019d6:	e096      	b.n	8001b06 <battControl+0x14e>
 80019d8:	4b50      	ldr	r3, [pc, #320]	@ (8001b1c <battControl+0x164>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d000      	beq.n	80019e2 <battControl+0x2a>
 80019e0:	e091      	b.n	8001b06 <battControl+0x14e>
		battVoltFlagDone[0] = 1;
 80019e2:	4b4e      	ldr	r3, [pc, #312]	@ (8001b1c <battControl+0x164>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; (i<arrayLength); i++){
 80019e8:	1dfb      	adds	r3, r7, #7
 80019ea:	2200      	movs	r2, #0
 80019ec:	701a      	strb	r2, [r3, #0]
 80019ee:	e01c      	b.n	8001a2a <battControl+0x72>
			dutyFanEctTh[i] = dutyFanEctTh[i]-5;
 80019f0:	1dfb      	adds	r3, r7, #7
 80019f2:	781a      	ldrb	r2, [r3, #0]
 80019f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001b20 <battControl+0x168>)
 80019f6:	0052      	lsls	r2, r2, #1
 80019f8:	5ad3      	ldrh	r3, [r2, r3]
 80019fa:	1dfa      	adds	r2, r7, #7
 80019fc:	7812      	ldrb	r2, [r2, #0]
 80019fe:	3b05      	subs	r3, #5
 8001a00:	b299      	uxth	r1, r3
 8001a02:	4b47      	ldr	r3, [pc, #284]	@ (8001b20 <battControl+0x168>)
 8001a04:	0052      	lsls	r2, r2, #1
 8001a06:	52d1      	strh	r1, [r2, r3]
			dutyFanOilTh[i] = dutyFanOilTh[i]-5;
 8001a08:	1dfb      	adds	r3, r7, #7
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <battControl+0x16c>)
 8001a0e:	0052      	lsls	r2, r2, #1
 8001a10:	5ad3      	ldrh	r3, [r2, r3]
 8001a12:	1dfa      	adds	r2, r7, #7
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	3b05      	subs	r3, #5
 8001a18:	b299      	uxth	r1, r3
 8001a1a:	4b42      	ldr	r3, [pc, #264]	@ (8001b24 <battControl+0x16c>)
 8001a1c:	0052      	lsls	r2, r2, #1
 8001a1e:	52d1      	strh	r1, [r2, r3]
		for(uint8_t i=0; (i<arrayLength); i++){
 8001a20:	1dfb      	adds	r3, r7, #7
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	1dfb      	adds	r3, r7, #7
 8001a26:	3201      	adds	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
 8001a2a:	1dfa      	adds	r2, r7, #7
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	7812      	ldrb	r2, [r2, #0]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d3dc      	bcc.n	80019f0 <battControl+0x38>
		}
		if((battVoltAverage < battTh[1])&&(battVoltFlagDone[1] == 0)){
 8001a36:	4b37      	ldr	r3, [pc, #220]	@ (8001b14 <battControl+0x15c>)
 8001a38:	885a      	ldrh	r2, [r3, #2]
 8001a3a:	4b37      	ldr	r3, [pc, #220]	@ (8001b18 <battControl+0x160>)
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d961      	bls.n	8001b06 <battControl+0x14e>
 8001a42:	4b36      	ldr	r3, [pc, #216]	@ (8001b1c <battControl+0x164>)
 8001a44:	785b      	ldrb	r3, [r3, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d15d      	bne.n	8001b06 <battControl+0x14e>
			battVoltFlagDone[1] = 1;
 8001a4a:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <battControl+0x164>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	705a      	strb	r2, [r3, #1]
			for(uint8_t i=0; (i<arrayLength); i++){
 8001a50:	1dbb      	adds	r3, r7, #6
 8001a52:	2200      	movs	r2, #0
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e01c      	b.n	8001a92 <battControl+0xda>
				dutyFanEctTh[i] = dutyFanEctTh[i]-7;
 8001a58:	1dbb      	adds	r3, r7, #6
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b30      	ldr	r3, [pc, #192]	@ (8001b20 <battControl+0x168>)
 8001a5e:	0052      	lsls	r2, r2, #1
 8001a60:	5ad3      	ldrh	r3, [r2, r3]
 8001a62:	1dba      	adds	r2, r7, #6
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	3b07      	subs	r3, #7
 8001a68:	b299      	uxth	r1, r3
 8001a6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001b20 <battControl+0x168>)
 8001a6c:	0052      	lsls	r2, r2, #1
 8001a6e:	52d1      	strh	r1, [r2, r3]
				dutyFanOilTh[i] = dutyFanOilTh[i]-7;
 8001a70:	1dbb      	adds	r3, r7, #6
 8001a72:	781a      	ldrb	r2, [r3, #0]
 8001a74:	4b2b      	ldr	r3, [pc, #172]	@ (8001b24 <battControl+0x16c>)
 8001a76:	0052      	lsls	r2, r2, #1
 8001a78:	5ad3      	ldrh	r3, [r2, r3]
 8001a7a:	1dba      	adds	r2, r7, #6
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	3b07      	subs	r3, #7
 8001a80:	b299      	uxth	r1, r3
 8001a82:	4b28      	ldr	r3, [pc, #160]	@ (8001b24 <battControl+0x16c>)
 8001a84:	0052      	lsls	r2, r2, #1
 8001a86:	52d1      	strh	r1, [r2, r3]
			for(uint8_t i=0; (i<arrayLength); i++){
 8001a88:	1dbb      	adds	r3, r7, #6
 8001a8a:	781a      	ldrb	r2, [r3, #0]
 8001a8c:	1dbb      	adds	r3, r7, #6
 8001a8e:	3201      	adds	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	1dba      	adds	r2, r7, #6
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	7812      	ldrb	r2, [r2, #0]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d3dc      	bcc.n	8001a58 <battControl+0xa0>

			}
			if((battVoltAverage < battTh[0])&&(battVoltFlagDone[2] == 0)){
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b14 <battControl+0x15c>)
 8001aa0:	881a      	ldrh	r2, [r3, #0]
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b18 <battControl+0x160>)
 8001aa4:	881b      	ldrh	r3, [r3, #0]
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d92d      	bls.n	8001b06 <battControl+0x14e>
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b1c <battControl+0x164>)
 8001aac:	789b      	ldrb	r3, [r3, #2]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d129      	bne.n	8001b06 <battControl+0x14e>
				battVoltFlagDone[2] = 1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <battControl+0x164>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; (i<arrayLength); i++){
 8001ab8:	1d7b      	adds	r3, r7, #5
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e01c      	b.n	8001afa <battControl+0x142>
					dutyFanEctTh[i] = dutyFanEctTh[i]-10;
 8001ac0:	1d7b      	adds	r3, r7, #5
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <battControl+0x168>)
 8001ac6:	0052      	lsls	r2, r2, #1
 8001ac8:	5ad3      	ldrh	r3, [r2, r3]
 8001aca:	1d7a      	adds	r2, r7, #5
 8001acc:	7812      	ldrb	r2, [r2, #0]
 8001ace:	3b0a      	subs	r3, #10
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <battControl+0x168>)
 8001ad4:	0052      	lsls	r2, r2, #1
 8001ad6:	52d1      	strh	r1, [r2, r3]
					dutyFanOilTh[i] = dutyFanOilTh[i]-10;
 8001ad8:	1d7b      	adds	r3, r7, #5
 8001ada:	781a      	ldrb	r2, [r3, #0]
 8001adc:	4b11      	ldr	r3, [pc, #68]	@ (8001b24 <battControl+0x16c>)
 8001ade:	0052      	lsls	r2, r2, #1
 8001ae0:	5ad3      	ldrh	r3, [r2, r3]
 8001ae2:	1d7a      	adds	r2, r7, #5
 8001ae4:	7812      	ldrb	r2, [r2, #0]
 8001ae6:	3b0a      	subs	r3, #10
 8001ae8:	b299      	uxth	r1, r3
 8001aea:	4b0e      	ldr	r3, [pc, #56]	@ (8001b24 <battControl+0x16c>)
 8001aec:	0052      	lsls	r2, r2, #1
 8001aee:	52d1      	strh	r1, [r2, r3]
				for(uint8_t i=0; (i<arrayLength); i++){
 8001af0:	1d7b      	adds	r3, r7, #5
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	1d7b      	adds	r3, r7, #5
 8001af6:	3201      	adds	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	1d7a      	adds	r2, r7, #5
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	7812      	ldrb	r2, [r2, #0]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d3dc      	bcc.n	8001ac0 <battControl+0x108>

				}
			}
		}
	}
}
 8001b06:	46c0      	nop			@ (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	20000404 	.word	0x20000404
 8001b14:	20000010 	.word	0x20000010
 8001b18:	2000041c 	.word	0x2000041c
 8001b1c:	20000414 	.word	0x20000414
 8001b20:	20000018 	.word	0x20000018
 8001b24:	20000028 	.word	0x20000028

08001b28 <fillBatVoltBuffer>:

void fillBatVoltBuffer(){
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	uint8_t bufferSize = (sizeof(battVoltBuffer)/sizeof(battVoltBuffer[0]));
 8001b2e:	1dbb      	adds	r3, r7, #6
 8001b30:	220a      	movs	r2, #10
 8001b32:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; (i< bufferSize); i++) {
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e00f      	b.n	8001b5c <fillBatVoltBuffer+0x34>
	        battVoltBuffer[i] = battVoltBuffer[i + 1];
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	1c59      	adds	r1, r3, #1
 8001b42:	1dfb      	adds	r3, r7, #7
 8001b44:	781a      	ldrb	r2, [r3, #0]
 8001b46:	4b0e      	ldr	r3, [pc, #56]	@ (8001b80 <fillBatVoltBuffer+0x58>)
 8001b48:	0049      	lsls	r1, r1, #1
 8001b4a:	5ac9      	ldrh	r1, [r1, r3]
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b80 <fillBatVoltBuffer+0x58>)
 8001b4e:	0052      	lsls	r2, r2, #1
 8001b50:	52d1      	strh	r1, [r2, r3]
	for (uint8_t i = 0; (i< bufferSize); i++) {
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	1dfb      	adds	r3, r7, #7
 8001b58:	3201      	adds	r2, #1
 8001b5a:	701a      	strb	r2, [r3, #0]
 8001b5c:	1dfa      	adds	r2, r7, #7
 8001b5e:	1dbb      	adds	r3, r7, #6
 8001b60:	7812      	ldrb	r2, [r2, #0]
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d3e9      	bcc.n	8001b3c <fillBatVoltBuffer+0x14>
	}
	battVoltBuffer[bufferSize-1] = battVolt;
 8001b68:	1dbb      	adds	r3, r7, #6
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <fillBatVoltBuffer+0x5c>)
 8001b70:	8819      	ldrh	r1, [r3, #0]
 8001b72:	4b03      	ldr	r3, [pc, #12]	@ (8001b80 <fillBatVoltBuffer+0x58>)
 8001b74:	0052      	lsls	r2, r2, #1
 8001b76:	52d1      	strh	r1, [r2, r3]
}
 8001b78:	46c0      	nop			@ (mov r8, r8)
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	b002      	add	sp, #8
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000038 	.word	0x20000038
 8001b84:	2000040e 	.word	0x2000040e

08001b88 <gettBatVoltAverage>:

void gettBatVoltAverage(){
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	607b      	str	r3, [r7, #4]
	uint8_t bufferSize = (sizeof(battVoltBuffer)/sizeof(battVoltBuffer[0]));
 8001b92:	1cbb      	adds	r3, r7, #2
 8001b94:	220a      	movs	r2, #10
 8001b96:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < bufferSize; i++) {
 8001b98:	1cfb      	adds	r3, r7, #3
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e00d      	b.n	8001bbc <gettBatVoltAverage+0x34>
		sum += battVoltBuffer[i];
 8001ba0:	1cfb      	adds	r3, r7, #3
 8001ba2:	781a      	ldrb	r2, [r3, #0]
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <gettBatVoltAverage+0x5c>)
 8001ba6:	0052      	lsls	r2, r2, #1
 8001ba8:	5ad3      	ldrh	r3, [r2, r3]
 8001baa:	001a      	movs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	189b      	adds	r3, r3, r2
 8001bb0:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < bufferSize; i++) {
 8001bb2:	1cfb      	adds	r3, r7, #3
 8001bb4:	781a      	ldrb	r2, [r3, #0]
 8001bb6:	1cfb      	adds	r3, r7, #3
 8001bb8:	3201      	adds	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	1cfa      	adds	r2, r7, #3
 8001bbe:	1cbb      	adds	r3, r7, #2
 8001bc0:	7812      	ldrb	r2, [r2, #0]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d3eb      	bcc.n	8001ba0 <gettBatVoltAverage+0x18>
	}
	battVoltAverage = sum / bufferSize;
 8001bc8:	1cbb      	adds	r3, r7, #2
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	0019      	movs	r1, r3
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fa9a 	bl	8000108 <__udivsi3>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	4b03      	ldr	r3, [pc, #12]	@ (8001be8 <gettBatVoltAverage+0x60>)
 8001bda:	801a      	strh	r2, [r3, #0]
}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b002      	add	sp, #8
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000038 	.word	0x20000038
 8001be8:	2000041c 	.word	0x2000041c

08001bec <canResetEcu>:

void canResetEcu(){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, RESET);
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	019b      	lsls	r3, r3, #6
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <canResetEcu+0x3c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	f003 f911 	bl	8004e20 <HAL_GPIO_WritePin>
	if(resetCounter >= 2){
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001c2c <canResetEcu+0x40>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d90c      	bls.n	8001c20 <canResetEcu+0x34>
		canResetEcuFlag = 0;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <canResetEcu+0x44>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
		resetCounter = 0;
 8001c0c:	4b07      	ldr	r3, [pc, #28]	@ (8001c2c <canResetEcu+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <canResetEcu+0x3c>)
 8001c18:	2201      	movs	r2, #1
 8001c1a:	0019      	movs	r1, r3
 8001c1c:	f003 f900 	bl	8004e20 <HAL_GPIO_WritePin>
	}

}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			@ (mov r8, r8)
 8001c28:	48000800 	.word	0x48000800
 8001c2c:	2000041f 	.word	0x2000041f
 8001c30:	2000041e 	.word	0x2000041e

08001c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c38:	f001 f9e4 	bl	8003004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3c:	f000 f942 	bl	8001ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c40:	f000 fd94 	bl	800276c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c44:	f000 fd74 	bl	8002730 <MX_DMA_Init>
  MX_ADC_Init();
 8001c48:	f000 f98a 	bl	8001f60 <MX_ADC_Init>
  MX_CAN_Init();
 8001c4c:	f000 fa58 	bl	8002100 <MX_CAN_Init>
  MX_SPI2_Init();
 8001c50:	f000 faba 	bl	80021c8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001c54:	f000 fbf4 	bl	8002440 <MX_TIM3_Init>
  MX_TIM17_Init();
 8001c58:	f000 fce4 	bl	8002624 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001c5c:	f000 fc5c 	bl	8002518 <MX_TIM16_Init>
  MX_TIM2_Init();
 8001c60:	f000 fb84 	bl	800236c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001c64:	f000 faee 	bl	8002244 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adc_buff, 9); //Inicia el DMA se le pasa el ADC, la variable donde guardar los datos y el numero de canales
 8001c68:	4979      	ldr	r1, [pc, #484]	@ (8001e50 <main+0x21c>)
 8001c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8001e54 <main+0x220>)
 8001c6c:	2209      	movs	r2, #9
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f001 fbde 	bl	8003430 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc); //Se inicia la interrupcion de fin de conversion del ADC en el "Set-up"
 8001c74:	4b77      	ldr	r3, [pc, #476]	@ (8001e54 <main+0x220>)
 8001c76:	0018      	movs	r0, r3
 8001c78:	f001 fb68 	bl	800334c <HAL_ADC_Start_IT>
  HAL_CAN_Start(&hcan);
 8001c7c:	4b76      	ldr	r3, [pc, #472]	@ (8001e58 <main+0x224>)
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f002 f86e 	bl	8003d60 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001c84:	4b74      	ldr	r3, [pc, #464]	@ (8001e58 <main+0x224>)
 8001c86:	2102      	movs	r1, #2
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f002 faac 	bl	80041e6 <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim1);
 8001c8e:	4b73      	ldr	r3, [pc, #460]	@ (8001e5c <main+0x228>)
 8001c90:	0018      	movs	r0, r3
 8001c92:	f003 febf 	bl	8005a14 <HAL_TIM_Base_Start_IT>
  TIM2->CCR3 = dutyFanNill;
 8001c96:	4b72      	ldr	r3, [pc, #456]	@ (8001e60 <main+0x22c>)
 8001c98:	881a      	ldrh	r2, [r3, #0]
 8001c9a:	2380      	movs	r3, #128	@ 0x80
 8001c9c:	05db      	lsls	r3, r3, #23
 8001c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = dutyFanNill;
 8001ca0:	4b6f      	ldr	r3, [pc, #444]	@ (8001e60 <main+0x22c>)
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	@ 0x80
 8001ca6:	05db      	lsls	r3, r3, #23
 8001ca8:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = dutyFanNill;
 8001caa:	4b6d      	ldr	r3, [pc, #436]	@ (8001e60 <main+0x22c>)
 8001cac:	881a      	ldrh	r2, [r3, #0]
 8001cae:	4b6d      	ldr	r3, [pc, #436]	@ (8001e64 <main+0x230>)
 8001cb0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = dutyFanNill;
 8001cb2:	4b6b      	ldr	r3, [pc, #428]	@ (8001e60 <main+0x22c>)
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	@ (8001e64 <main+0x230>)
 8001cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM16->CCR1 = dutyPumpNill;
 8001cba:	4b6b      	ldr	r3, [pc, #428]	@ (8001e68 <main+0x234>)
 8001cbc:	881a      	ldrh	r2, [r3, #0]
 8001cbe:	4b6b      	ldr	r3, [pc, #428]	@ (8001e6c <main+0x238>)
 8001cc0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->CCR1 = dutyPumpNill;
 8001cc2:	4b69      	ldr	r3, [pc, #420]	@ (8001e68 <main+0x234>)
 8001cc4:	881a      	ldrh	r2, [r3, #0]
 8001cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8001e70 <main+0x23c>)
 8001cc8:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001cca:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <main+0x240>)
 8001ccc:	2100      	movs	r1, #0
 8001cce:	0018      	movs	r0, r3
 8001cd0:	f003 ff8c 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001cd4:	4b67      	ldr	r3, [pc, #412]	@ (8001e74 <main+0x240>)
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f003 ff87 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001cde:	4b66      	ldr	r3, [pc, #408]	@ (8001e78 <main+0x244>)
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f003 ff82 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8001ce8:	4b63      	ldr	r3, [pc, #396]	@ (8001e78 <main+0x244>)
 8001cea:	210c      	movs	r1, #12
 8001cec:	0018      	movs	r0, r3
 8001cee:	f003 ff7d 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8001cf2:	4b62      	ldr	r3, [pc, #392]	@ (8001e7c <main+0x248>)
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f003 ff78 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001cfc:	4b60      	ldr	r3, [pc, #384]	@ (8001e80 <main+0x24c>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	0018      	movs	r0, r3
 8001d02:	f003 ff73 	bl	8005bec <HAL_TIM_PWM_Start>


	TxHeader_adc.DLC = 8;
 8001d06:	4b5f      	ldr	r3, [pc, #380]	@ (8001e84 <main+0x250>)
 8001d08:	2208      	movs	r2, #8
 8001d0a:	611a      	str	r2, [r3, #16]
	TxHeader_adc.ExtId = 0;
 8001d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <main+0x250>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	605a      	str	r2, [r3, #4]
	TxHeader_adc.IDE = CAN_ID_STD;
 8001d12:	4b5c      	ldr	r3, [pc, #368]	@ (8001e84 <main+0x250>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	609a      	str	r2, [r3, #8]
	TxHeader_adc.RTR = CAN_RTR_DATA;
 8001d18:	4b5a      	ldr	r3, [pc, #360]	@ (8001e84 <main+0x250>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60da      	str	r2, [r3, #12]
	TxHeader_adc.StdId = ADC_ID;
 8001d1e:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <main+0x250>)
 8001d20:	4a59      	ldr	r2, [pc, #356]	@ (8001e88 <main+0x254>)
 8001d22:	601a      	str	r2, [r3, #0]
	TxHeader_adc.TransmitGlobalTime = DISABLE;
 8001d24:	4b57      	ldr	r3, [pc, #348]	@ (8001e84 <main+0x250>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	751a      	strb	r2, [r3, #20]

	TxHeader_adc1.DLC = 4;
 8001d2a:	4b58      	ldr	r3, [pc, #352]	@ (8001e8c <main+0x258>)
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	611a      	str	r2, [r3, #16]
	TxHeader_adc1.ExtId = 0;
 8001d30:	4b56      	ldr	r3, [pc, #344]	@ (8001e8c <main+0x258>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	605a      	str	r2, [r3, #4]
	TxHeader_adc1.IDE = CAN_ID_STD;
 8001d36:	4b55      	ldr	r3, [pc, #340]	@ (8001e8c <main+0x258>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
	TxHeader_adc1.RTR = CAN_RTR_DATA;
 8001d3c:	4b53      	ldr	r3, [pc, #332]	@ (8001e8c <main+0x258>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
	TxHeader_adc1.StdId = ADC_ID1;
 8001d42:	4b52      	ldr	r3, [pc, #328]	@ (8001e8c <main+0x258>)
 8001d44:	4a52      	ldr	r2, [pc, #328]	@ (8001e90 <main+0x25c>)
 8001d46:	601a      	str	r2, [r3, #0]
	TxHeader_adc1.TransmitGlobalTime = DISABLE;
 8001d48:	4b50      	ldr	r3, [pc, #320]	@ (8001e8c <main+0x258>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	751a      	strb	r2, [r3, #20]

	TxHeader_adc2.DLC = 4;
 8001d4e:	4b51      	ldr	r3, [pc, #324]	@ (8001e94 <main+0x260>)
 8001d50:	2204      	movs	r2, #4
 8001d52:	611a      	str	r2, [r3, #16]
	TxHeader_adc2.ExtId = 0;
 8001d54:	4b4f      	ldr	r3, [pc, #316]	@ (8001e94 <main+0x260>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	605a      	str	r2, [r3, #4]
	TxHeader_adc2.IDE = CAN_ID_STD;
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8001e94 <main+0x260>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
	TxHeader_adc2.RTR = CAN_RTR_DATA;
 8001d60:	4b4c      	ldr	r3, [pc, #304]	@ (8001e94 <main+0x260>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
	TxHeader_adc2.StdId = ADC_ID2;
 8001d66:	4b4b      	ldr	r3, [pc, #300]	@ (8001e94 <main+0x260>)
 8001d68:	4a4b      	ldr	r2, [pc, #300]	@ (8001e98 <main+0x264>)
 8001d6a:	601a      	str	r2, [r3, #0]
	TxHeader_adc2.TransmitGlobalTime = DISABLE;
 8001d6c:	4b49      	ldr	r3, [pc, #292]	@ (8001e94 <main+0x260>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	751a      	strb	r2, [r3, #20]

	TxHeader_adc3.DLC = 2; //AQUI ESTABA EL ERROR; ESO ESTABA COMO TxHeader_adc2
 8001d72:	4b4a      	ldr	r3, [pc, #296]	@ (8001e9c <main+0x268>)
 8001d74:	2202      	movs	r2, #2
 8001d76:	611a      	str	r2, [r3, #16]
	TxHeader_adc3.ExtId = 0;
 8001d78:	4b48      	ldr	r3, [pc, #288]	@ (8001e9c <main+0x268>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	605a      	str	r2, [r3, #4]
	TxHeader_adc3.IDE = CAN_ID_STD;
 8001d7e:	4b47      	ldr	r3, [pc, #284]	@ (8001e9c <main+0x268>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
	TxHeader_adc3.RTR = CAN_RTR_DATA;
 8001d84:	4b45      	ldr	r3, [pc, #276]	@ (8001e9c <main+0x268>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
	TxHeader_adc3.StdId = ADC_ID3;
 8001d8a:	4b44      	ldr	r3, [pc, #272]	@ (8001e9c <main+0x268>)
 8001d8c:	22ed      	movs	r2, #237	@ 0xed
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	601a      	str	r2, [r3, #0]
	TxHeader_adc3.TransmitGlobalTime = DISABLE;
 8001d92:	4b42      	ldr	r3, [pc, #264]	@ (8001e9c <main+0x268>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	751a      	strb	r2, [r3, #20]

	TxHeader_anw.DLC = 2;
 8001d98:	4b41      	ldr	r3, [pc, #260]	@ (8001ea0 <main+0x26c>)
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	611a      	str	r2, [r3, #16]
	TxHeader_anw.ExtId = 0;
 8001d9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ea0 <main+0x26c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	605a      	str	r2, [r3, #4]
	TxHeader_anw.IDE = CAN_ID_STD;
 8001da4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea0 <main+0x26c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
	TxHeader_anw.RTR = CAN_RTR_DATA;
 8001daa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ea0 <main+0x26c>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
	TxHeader_anw.StdId = ANW_ID;
 8001db0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea0 <main+0x26c>)
 8001db2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ea4 <main+0x270>)
 8001db4:	601a      	str	r2, [r3, #0]
	TxHeader_anw.TransmitGlobalTime = DISABLE;
 8001db6:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea0 <main+0x26c>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	751a      	strb	r2, [r3, #20]

	TxHeader_heartbeat.DLC = 1;
 8001dbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ea8 <main+0x274>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	611a      	str	r2, [r3, #16]
	TxHeader_heartbeat.ExtId = 0;
 8001dc2:	4b39      	ldr	r3, [pc, #228]	@ (8001ea8 <main+0x274>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
	TxHeader_heartbeat.IDE = CAN_ID_STD;
 8001dc8:	4b37      	ldr	r3, [pc, #220]	@ (8001ea8 <main+0x274>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
	TxHeader_heartbeat.RTR = CAN_RTR_DATA;
 8001dce:	4b36      	ldr	r3, [pc, #216]	@ (8001ea8 <main+0x274>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	60da      	str	r2, [r3, #12]
	TxHeader_heartbeat.StdId = HEARTBEAT_ID;
 8001dd4:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <main+0x274>)
 8001dd6:	22ec      	movs	r2, #236	@ 0xec
 8001dd8:	0092      	lsls	r2, r2, #2
 8001dda:	601a      	str	r2, [r3, #0]
	TxHeader_heartbeat.TransmitGlobalTime = DISABLE;
 8001ddc:	4b32      	ldr	r3, [pc, #200]	@ (8001ea8 <main+0x274>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8001de2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e58 <main+0x224>)
 8001de4:	2102      	movs	r1, #2
 8001de6:	0018      	movs	r0, r3
 8001de8:	f002 f9fd 	bl	80041e6 <HAL_CAN_ActivateNotification>
 8001dec:	1e03      	subs	r3, r0, #0
 8001dee:	d001      	beq.n	8001df4 <main+0x1c0>
			!= HAL_OK) {
		Error_Handler();
 8001df0:	f000 fdbc 	bl	800296c <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  mapeoADC();
 8001df4:	f7ff fc68 	bl	80016c8 <mapeoADC>
	  if(tempDataFlag){
 8001df8:	4b2c      	ldr	r3, [pc, #176]	@ (8001eac <main+0x278>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <main+0x1d0>
		  tempActions();
 8001e00:	f7ff fa6e 	bl	80012e0 <tempActions>
	  }
	  if(send){
 8001e04:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <main+0x27c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <main+0x1dc>
		  sendCan();
 8001e0c:	f7ff fb94 	bl	8001538 <sendCan>
	  }
	  if(heartbeatFlag > 5 ){
 8001e10:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <main+0x280>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d901      	bls.n	8001e1c <main+0x1e8>
		  heartbeat();
 8001e18:	f7ff fc3a 	bl	8001690 <heartbeat>
	  }
	  if(battDataFlag){
 8001e1c:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <main+0x284>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <main+0x1fc>
		  fillBatVoltBuffer();
 8001e24:	f7ff fe80 	bl	8001b28 <fillBatVoltBuffer>
		  gettBatVoltAverage();
 8001e28:	f7ff feae 	bl	8001b88 <gettBatVoltAverage>
		  battControl();
 8001e2c:	f7ff fdc4 	bl	80019b8 <battControl>
	  }
	  if(canResetEcuFlag){
 8001e30:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <main+0x288>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <main+0x20a>
		  canResetEcu();
 8001e38:	f7ff fed8 	bl	8001bec <canResetEcu>
 8001e3c:	e7da      	b.n	8001df4 <main+0x1c0>
	  }else{
		  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 8001e3e:	2380      	movs	r3, #128	@ 0x80
 8001e40:	019b      	lsls	r3, r3, #6
 8001e42:	481f      	ldr	r0, [pc, #124]	@ (8001ec0 <main+0x28c>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	0019      	movs	r1, r3
 8001e48:	f002 ffea 	bl	8004e20 <HAL_GPIO_WritePin>
	  mapeoADC();
 8001e4c:	e7d2      	b.n	8001df4 <main+0x1c0>
 8001e4e:	46c0      	nop			@ (mov r8, r8)
 8001e50:	200003b0 	.word	0x200003b0
 8001e54:	20000074 	.word	0x20000074
 8001e58:	200000f8 	.word	0x200000f8
 8001e5c:	20000184 	.word	0x20000184
 8001e60:	2000001e 	.word	0x2000001e
 8001e64:	40000400 	.word	0x40000400
 8001e68:	20000026 	.word	0x20000026
 8001e6c:	40014400 	.word	0x40014400
 8001e70:	40014800 	.word	0x40014800
 8001e74:	20000214 	.word	0x20000214
 8001e78:	200001cc 	.word	0x200001cc
 8001e7c:	2000025c 	.word	0x2000025c
 8001e80:	200002a4 	.word	0x200002a4
 8001e84:	20000308 	.word	0x20000308
 8001e88:	000003b1 	.word	0x000003b1
 8001e8c:	20000320 	.word	0x20000320
 8001e90:	000003b2 	.word	0x000003b2
 8001e94:	20000338 	.word	0x20000338
 8001e98:	000003b3 	.word	0x000003b3
 8001e9c:	20000350 	.word	0x20000350
 8001ea0:	20000368 	.word	0x20000368
 8001ea4:	000002b1 	.word	0x000002b1
 8001ea8:	20000380 	.word	0x20000380
 8001eac:	20000400 	.word	0x20000400
 8001eb0:	20000419 	.word	0x20000419
 8001eb4:	2000041a 	.word	0x2000041a
 8001eb8:	20000404 	.word	0x20000404
 8001ebc:	2000041e 	.word	0x2000041e
 8001ec0:	48000800 	.word	0x48000800

08001ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b093      	sub	sp, #76	@ 0x4c
 8001ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eca:	2414      	movs	r4, #20
 8001ecc:	193b      	adds	r3, r7, r4
 8001ece:	0018      	movs	r0, r3
 8001ed0:	2334      	movs	r3, #52	@ 0x34
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	f004 fcaf 	bl	8006838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	0018      	movs	r0, r3
 8001ede:	2310      	movs	r3, #16
 8001ee0:	001a      	movs	r2, r3
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	f004 fca8 	bl	8006838 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001ee8:	0021      	movs	r1, r4
 8001eea:	187b      	adds	r3, r7, r1
 8001eec:	2211      	movs	r2, #17
 8001eee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001ef6:	187b      	adds	r3, r7, r1
 8001ef8:	2201      	movs	r2, #1
 8001efa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001efc:	187b      	adds	r3, r7, r1
 8001efe:	2210      	movs	r2, #16
 8001f00:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f02:	187b      	adds	r3, r7, r1
 8001f04:	2202      	movs	r2, #2
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f08:	187b      	adds	r3, r7, r1
 8001f0a:	2280      	movs	r2, #128	@ 0x80
 8001f0c:	0252      	lsls	r2, r2, #9
 8001f0e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	2200      	movs	r2, #0
 8001f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001f16:	187b      	adds	r3, r7, r1
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f1c:	187b      	adds	r3, r7, r1
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f002 ff9c 	bl	8004e5c <HAL_RCC_OscConfig>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d001      	beq.n	8001f2c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001f28:	f000 fd20 	bl	800296c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2c:	1d3b      	adds	r3, r7, #4
 8001f2e:	2207      	movs	r2, #7
 8001f30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f32:	1d3b      	adds	r3, r7, #4
 8001f34:	2202      	movs	r2, #2
 8001f36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001f44:	1d3b      	adds	r3, r7, #4
 8001f46:	2101      	movs	r1, #1
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f003 fb0d 	bl	8005568 <HAL_RCC_ClockConfig>
 8001f4e:	1e03      	subs	r3, r0, #0
 8001f50:	d001      	beq.n	8001f56 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001f52:	f000 fd0b 	bl	800296c <Error_Handler>
  }
}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b013      	add	sp, #76	@ 0x4c
 8001f5c:	bd90      	pop	{r4, r7, pc}
	...

08001f60 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	0018      	movs	r0, r3
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	001a      	movs	r2, r3
 8001f6e:	2100      	movs	r1, #0
 8001f70:	f004 fc62 	bl	8006838 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001f74:	4b60      	ldr	r3, [pc, #384]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001f76:	4a61      	ldr	r2, [pc, #388]	@ (80020fc <MX_ADC_Init+0x19c>)
 8001f78:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f80:	4b5d      	ldr	r3, [pc, #372]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f86:	4b5c      	ldr	r3, [pc, #368]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f92:	4b59      	ldr	r3, [pc, #356]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001f94:	2204      	movs	r2, #4
 8001f96:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001f98:	4b57      	ldr	r3, [pc, #348]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001f9e:	4b56      	ldr	r3, [pc, #344]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001fa4:	4b54      	ldr	r3, [pc, #336]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001faa:	4b53      	ldr	r3, [pc, #332]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fb0:	4b51      	ldr	r3, [pc, #324]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001fb2:	22c2      	movs	r2, #194	@ 0xc2
 8001fb4:	32ff      	adds	r2, #255	@ 0xff
 8001fb6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8001fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001fc0:	2224      	movs	r2, #36	@ 0x24
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001fc6:	4b4c      	ldr	r3, [pc, #304]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001fcc:	4b4a      	ldr	r3, [pc, #296]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f001 f87c 	bl	80030cc <HAL_ADC_Init>
 8001fd4:	1e03      	subs	r3, r0, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001fd8:	f000 fcc8 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2280      	movs	r2, #128	@ 0x80
 8001fe6:	0152      	lsls	r2, r2, #5
 8001fe8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	2207      	movs	r2, #7
 8001fee:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ff0:	1d3a      	adds	r2, r7, #4
 8001ff2:	4b41      	ldr	r3, [pc, #260]	@ (80020f8 <MX_ADC_Init+0x198>)
 8001ff4:	0011      	movs	r1, r2
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f001 faac 	bl	8003554 <HAL_ADC_ConfigChannel>
 8001ffc:	1e03      	subs	r3, r0, #0
 8001ffe:	d001      	beq.n	8002004 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8002000:	f000 fcb4 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800200a:	1d3a      	adds	r2, r7, #4
 800200c:	4b3a      	ldr	r3, [pc, #232]	@ (80020f8 <MX_ADC_Init+0x198>)
 800200e:	0011      	movs	r1, r2
 8002010:	0018      	movs	r0, r3
 8002012:	f001 fa9f 	bl	8003554 <HAL_ADC_ConfigChannel>
 8002016:	1e03      	subs	r3, r0, #0
 8002018:	d001      	beq.n	800201e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800201a:	f000 fca7 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	2202      	movs	r2, #2
 8002022:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002024:	1d3a      	adds	r2, r7, #4
 8002026:	4b34      	ldr	r3, [pc, #208]	@ (80020f8 <MX_ADC_Init+0x198>)
 8002028:	0011      	movs	r1, r2
 800202a:	0018      	movs	r0, r3
 800202c:	f001 fa92 	bl	8003554 <HAL_ADC_ConfigChannel>
 8002030:	1e03      	subs	r3, r0, #0
 8002032:	d001      	beq.n	8002038 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002034:	f000 fc9a 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	2203      	movs	r2, #3
 800203c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800203e:	1d3a      	adds	r2, r7, #4
 8002040:	4b2d      	ldr	r3, [pc, #180]	@ (80020f8 <MX_ADC_Init+0x198>)
 8002042:	0011      	movs	r1, r2
 8002044:	0018      	movs	r0, r3
 8002046:	f001 fa85 	bl	8003554 <HAL_ADC_ConfigChannel>
 800204a:	1e03      	subs	r3, r0, #0
 800204c:	d001      	beq.n	8002052 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800204e:	f000 fc8d 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2204      	movs	r2, #4
 8002056:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002058:	1d3a      	adds	r2, r7, #4
 800205a:	4b27      	ldr	r3, [pc, #156]	@ (80020f8 <MX_ADC_Init+0x198>)
 800205c:	0011      	movs	r1, r2
 800205e:	0018      	movs	r0, r3
 8002060:	f001 fa78 	bl	8003554 <HAL_ADC_ConfigChannel>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d001      	beq.n	800206c <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002068:	f000 fc80 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800206c:	1d3b      	adds	r3, r7, #4
 800206e:	2205      	movs	r2, #5
 8002070:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002072:	1d3a      	adds	r2, r7, #4
 8002074:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <MX_ADC_Init+0x198>)
 8002076:	0011      	movs	r1, r2
 8002078:	0018      	movs	r0, r3
 800207a:	f001 fa6b 	bl	8003554 <HAL_ADC_ConfigChannel>
 800207e:	1e03      	subs	r3, r0, #0
 8002080:	d001      	beq.n	8002086 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8002082:	f000 fc73 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	2206      	movs	r2, #6
 800208a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800208c:	1d3a      	adds	r2, r7, #4
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <MX_ADC_Init+0x198>)
 8002090:	0011      	movs	r1, r2
 8002092:	0018      	movs	r0, r3
 8002094:	f001 fa5e 	bl	8003554 <HAL_ADC_ConfigChannel>
 8002098:	1e03      	subs	r3, r0, #0
 800209a:	d001      	beq.n	80020a0 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 800209c:	f000 fc66 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2207      	movs	r2, #7
 80020a4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020a6:	1d3a      	adds	r2, r7, #4
 80020a8:	4b13      	ldr	r3, [pc, #76]	@ (80020f8 <MX_ADC_Init+0x198>)
 80020aa:	0011      	movs	r1, r2
 80020ac:	0018      	movs	r0, r3
 80020ae:	f001 fa51 	bl	8003554 <HAL_ADC_ConfigChannel>
 80020b2:	1e03      	subs	r3, r0, #0
 80020b4:	d001      	beq.n	80020ba <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 80020b6:	f000 fc59 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2208      	movs	r2, #8
 80020be:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020c0:	1d3a      	adds	r2, r7, #4
 80020c2:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <MX_ADC_Init+0x198>)
 80020c4:	0011      	movs	r1, r2
 80020c6:	0018      	movs	r0, r3
 80020c8:	f001 fa44 	bl	8003554 <HAL_ADC_ConfigChannel>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d001      	beq.n	80020d4 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80020d0:	f000 fc4c 	bl	800296c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2209      	movs	r2, #9
 80020d8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020da:	1d3a      	adds	r2, r7, #4
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <MX_ADC_Init+0x198>)
 80020de:	0011      	movs	r1, r2
 80020e0:	0018      	movs	r0, r3
 80020e2:	f001 fa37 	bl	8003554 <HAL_ADC_ConfigChannel>
 80020e6:	1e03      	subs	r3, r0, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80020ea:	f000 fc3f 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80020ee:	46c0      	nop			@ (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b004      	add	sp, #16
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			@ (mov r8, r8)
 80020f8:	20000074 	.word	0x20000074
 80020fc:	40012400 	.word	0x40012400

08002100 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	@ 0x28
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8002106:	4b2e      	ldr	r3, [pc, #184]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002108:	4a2e      	ldr	r2, [pc, #184]	@ (80021c4 <MX_CAN_Init+0xc4>)
 800210a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800210c:	4b2c      	ldr	r3, [pc, #176]	@ (80021c0 <MX_CAN_Init+0xc0>)
 800210e:	2203      	movs	r2, #3
 8002110:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8002112:	4b2b      	ldr	r3, [pc, #172]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002114:	2200      	movs	r2, #0
 8002116:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002118:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <MX_CAN_Init+0xc0>)
 800211a:	2200      	movs	r2, #0
 800211c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800211e:	4b28      	ldr	r3, [pc, #160]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002120:	22c0      	movs	r2, #192	@ 0xc0
 8002122:	0312      	lsls	r2, r2, #12
 8002124:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002126:	4b26      	ldr	r3, [pc, #152]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002128:	2280      	movs	r2, #128	@ 0x80
 800212a:	0352      	lsls	r2, r2, #13
 800212c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800212e:	4b24      	ldr	r3, [pc, #144]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002130:	2200      	movs	r2, #0
 8002132:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002134:	4b22      	ldr	r3, [pc, #136]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002136:	2200      	movs	r2, #0
 8002138:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800213a:	4b21      	ldr	r3, [pc, #132]	@ (80021c0 <MX_CAN_Init+0xc0>)
 800213c:	2200      	movs	r2, #0
 800213e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002140:	4b1f      	ldr	r3, [pc, #124]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002142:	2201      	movs	r2, #1
 8002144:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002146:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002148:	2200      	movs	r2, #0
 800214a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800214c:	4b1c      	ldr	r3, [pc, #112]	@ (80021c0 <MX_CAN_Init+0xc0>)
 800214e:	2200      	movs	r2, #0
 8002150:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002152:	4b1b      	ldr	r3, [pc, #108]	@ (80021c0 <MX_CAN_Init+0xc0>)
 8002154:	0018      	movs	r0, r3
 8002156:	f001 fc13 	bl	8003980 <HAL_CAN_Init>
 800215a:	1e03      	subs	r3, r0, #0
 800215c:	d001      	beq.n	8002162 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800215e:	f000 fc05 	bl	800296c <Error_Handler>
//	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
//	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
//	canfilterconfig.FilterIdHigh = 0x1B1 << 5;
//	canfilterconfig.FilterIdLow = 0x3A1 << 5;
//	canfilterconfig.SlaveStartFilterBank = 0;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002162:	003b      	movs	r3, r7
 8002164:	2201      	movs	r2, #1
 8002166:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 10;
 8002168:	003b      	movs	r3, r7
 800216a:	220a      	movs	r2, #10
 800216c:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800216e:	003b      	movs	r3, r7
 8002170:	2200      	movs	r2, #0
 8002172:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Modo enmascarado
 8002174:	003b      	movs	r3, r7
 8002176:	2200      	movs	r2, #0
 8002178:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT; // Filtro de 32 bits
 800217a:	003b      	movs	r3, r7
 800217c:	2201      	movs	r2, #1
 800217e:	61da      	str	r2, [r3, #28]

	// Aceptar todos los IDs: ID = 0x00000000, Máscara = 0x00000000
	canfilterconfig.FilterIdHigh = 0x0000;
 8002180:	003b      	movs	r3, r7
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8002186:	003b      	movs	r3, r7
 8002188:	2200      	movs	r2, #0
 800218a:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 800218c:	003b      	movs	r3, r7
 800218e:	2200      	movs	r2, #0
 8002190:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8002192:	003b      	movs	r3, r7
 8002194:	2200      	movs	r2, #0
 8002196:	60da      	str	r2, [r3, #12]

	canfilterconfig.SlaveStartFilterBank = 0;
 8002198:	003b      	movs	r3, r7
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800219e:	003a      	movs	r2, r7
 80021a0:	4b07      	ldr	r3, [pc, #28]	@ (80021c0 <MX_CAN_Init+0xc0>)
 80021a2:	0011      	movs	r1, r2
 80021a4:	0018      	movs	r0, r3
 80021a6:	f001 fce9 	bl	8003b7c <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80021aa:	003a      	movs	r2, r7
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <MX_CAN_Init+0xc0>)
 80021ae:	0011      	movs	r1, r2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f001 fce3 	bl	8003b7c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 80021b6:	46c0      	nop			@ (mov r8, r8)
 80021b8:	46bd      	mov	sp, r7
 80021ba:	b00a      	add	sp, #40	@ 0x28
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	46c0      	nop			@ (mov r8, r8)
 80021c0:	200000f8 	.word	0x200000f8
 80021c4:	40006400 	.word	0x40006400

080021c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021cc:	4b1b      	ldr	r3, [pc, #108]	@ (800223c <MX_SPI2_Init+0x74>)
 80021ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002240 <MX_SPI2_Init+0x78>)
 80021d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	@ (800223c <MX_SPI2_Init+0x74>)
 80021d4:	2282      	movs	r2, #130	@ 0x82
 80021d6:	0052      	lsls	r2, r2, #1
 80021d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <MX_SPI2_Init+0x74>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80021e0:	4b16      	ldr	r3, [pc, #88]	@ (800223c <MX_SPI2_Init+0x74>)
 80021e2:	22f0      	movs	r2, #240	@ 0xf0
 80021e4:	0112      	lsls	r2, r2, #4
 80021e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e8:	4b14      	ldr	r3, [pc, #80]	@ (800223c <MX_SPI2_Init+0x74>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ee:	4b13      	ldr	r3, [pc, #76]	@ (800223c <MX_SPI2_Init+0x74>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <MX_SPI2_Init+0x74>)
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	0092      	lsls	r2, r2, #2
 80021fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <MX_SPI2_Init+0x74>)
 80021fe:	2208      	movs	r2, #8
 8002200:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002202:	4b0e      	ldr	r3, [pc, #56]	@ (800223c <MX_SPI2_Init+0x74>)
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <MX_SPI2_Init+0x74>)
 800220a:	2200      	movs	r2, #0
 800220c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220e:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <MX_SPI2_Init+0x74>)
 8002210:	2200      	movs	r2, #0
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002214:	4b09      	ldr	r3, [pc, #36]	@ (800223c <MX_SPI2_Init+0x74>)
 8002216:	2207      	movs	r2, #7
 8002218:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800221a:	4b08      	ldr	r3, [pc, #32]	@ (800223c <MX_SPI2_Init+0x74>)
 800221c:	2200      	movs	r2, #0
 800221e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002220:	4b06      	ldr	r3, [pc, #24]	@ (800223c <MX_SPI2_Init+0x74>)
 8002222:	2208      	movs	r2, #8
 8002224:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002226:	4b05      	ldr	r3, [pc, #20]	@ (800223c <MX_SPI2_Init+0x74>)
 8002228:	0018      	movs	r0, r3
 800222a:	f003 faeb 	bl	8005804 <HAL_SPI_Init>
 800222e:	1e03      	subs	r3, r0, #0
 8002230:	d001      	beq.n	8002236 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002232:	f000 fb9b 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002236:	46c0      	nop			@ (mov r8, r8)
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20000120 	.word	0x20000120
 8002240:	40003800 	.word	0x40003800

08002244 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b092      	sub	sp, #72	@ 0x48
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800224a:	2340      	movs	r3, #64	@ 0x40
 800224c:	18fb      	adds	r3, r7, r3
 800224e:	0018      	movs	r0, r3
 8002250:	2308      	movs	r3, #8
 8002252:	001a      	movs	r2, r3
 8002254:	2100      	movs	r1, #0
 8002256:	f004 faef 	bl	8006838 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800225a:	2324      	movs	r3, #36	@ 0x24
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	0018      	movs	r0, r3
 8002260:	231c      	movs	r3, #28
 8002262:	001a      	movs	r2, r3
 8002264:	2100      	movs	r1, #0
 8002266:	f004 fae7 	bl	8006838 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800226a:	1d3b      	adds	r3, r7, #4
 800226c:	0018      	movs	r0, r3
 800226e:	2320      	movs	r3, #32
 8002270:	001a      	movs	r2, r3
 8002272:	2100      	movs	r1, #0
 8002274:	f004 fae0 	bl	8006838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002278:	4b38      	ldr	r3, [pc, #224]	@ (800235c <MX_TIM1_Init+0x118>)
 800227a:	4a39      	ldr	r2, [pc, #228]	@ (8002360 <MX_TIM1_Init+0x11c>)
 800227c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800227e:	4b37      	ldr	r3, [pc, #220]	@ (800235c <MX_TIM1_Init+0x118>)
 8002280:	4a38      	ldr	r2, [pc, #224]	@ (8002364 <MX_TIM1_Init+0x120>)
 8002282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002284:	4b35      	ldr	r3, [pc, #212]	@ (800235c <MX_TIM1_Init+0x118>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000;
 800228a:	4b34      	ldr	r3, [pc, #208]	@ (800235c <MX_TIM1_Init+0x118>)
 800228c:	4a36      	ldr	r2, [pc, #216]	@ (8002368 <MX_TIM1_Init+0x124>)
 800228e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002290:	4b32      	ldr	r3, [pc, #200]	@ (800235c <MX_TIM1_Init+0x118>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <MX_TIM1_Init+0x118>)
 8002298:	2200      	movs	r2, #0
 800229a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229c:	4b2f      	ldr	r3, [pc, #188]	@ (800235c <MX_TIM1_Init+0x118>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80022a2:	4b2e      	ldr	r3, [pc, #184]	@ (800235c <MX_TIM1_Init+0x118>)
 80022a4:	0018      	movs	r0, r3
 80022a6:	f003 fc01 	bl	8005aac <HAL_TIM_OC_Init>
 80022aa:	1e03      	subs	r3, r0, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80022ae:	f000 fb5d 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b2:	2140      	movs	r1, #64	@ 0x40
 80022b4:	187b      	adds	r3, r7, r1
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ba:	187b      	adds	r3, r7, r1
 80022bc:	2200      	movs	r2, #0
 80022be:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022c0:	187a      	adds	r2, r7, r1
 80022c2:	4b26      	ldr	r3, [pc, #152]	@ (800235c <MX_TIM1_Init+0x118>)
 80022c4:	0011      	movs	r1, r2
 80022c6:	0018      	movs	r0, r3
 80022c8:	f004 f9f0 	bl	80066ac <HAL_TIMEx_MasterConfigSynchronization>
 80022cc:	1e03      	subs	r3, r0, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80022d0:	f000 fb4c 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80022d4:	2124      	movs	r1, #36	@ 0x24
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	2200      	movs	r2, #0
 80022e0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2200      	movs	r2, #0
 80022ec:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ee:	187b      	adds	r3, r7, r1
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022f4:	187b      	adds	r3, r7, r1
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022fa:	187b      	adds	r3, r7, r1
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002300:	1879      	adds	r1, r7, r1
 8002302:	4b16      	ldr	r3, [pc, #88]	@ (800235c <MX_TIM1_Init+0x118>)
 8002304:	2200      	movs	r2, #0
 8002306:	0018      	movs	r0, r3
 8002308:	f003 fe0a 	bl	8005f20 <HAL_TIM_OC_ConfigChannel>
 800230c:	1e03      	subs	r3, r0, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002310:	f000 fb2c 	bl	800296c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2200      	movs	r2, #0
 800231e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2200      	movs	r2, #0
 8002324:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002326:	1d3b      	adds	r3, r7, #4
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	2280      	movs	r2, #128	@ 0x80
 8002336:	0192      	lsls	r2, r2, #6
 8002338:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800233a:	1d3b      	adds	r3, r7, #4
 800233c:	2200      	movs	r2, #0
 800233e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002340:	1d3a      	adds	r2, r7, #4
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <MX_TIM1_Init+0x118>)
 8002344:	0011      	movs	r1, r2
 8002346:	0018      	movs	r0, r3
 8002348:	f004 fa08 	bl	800675c <HAL_TIMEx_ConfigBreakDeadTime>
 800234c:	1e03      	subs	r3, r0, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002350:	f000 fb0c 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002354:	46c0      	nop			@ (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b012      	add	sp, #72	@ 0x48
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000184 	.word	0x20000184
 8002360:	40012c00 	.word	0x40012c00
 8002364:	000003e7 	.word	0x000003e7
 8002368:	0000bb80 	.word	0x0000bb80

0800236c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	@ 0x28
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	2320      	movs	r3, #32
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	0018      	movs	r0, r3
 8002378:	2308      	movs	r3, #8
 800237a:	001a      	movs	r2, r3
 800237c:	2100      	movs	r1, #0
 800237e:	f004 fa5b 	bl	8006838 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002382:	1d3b      	adds	r3, r7, #4
 8002384:	0018      	movs	r0, r3
 8002386:	231c      	movs	r3, #28
 8002388:	001a      	movs	r2, r3
 800238a:	2100      	movs	r1, #0
 800238c:	f004 fa54 	bl	8006838 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002390:	4b29      	ldr	r3, [pc, #164]	@ (8002438 <MX_TIM2_Init+0xcc>)
 8002392:	2280      	movs	r2, #128	@ 0x80
 8002394:	05d2      	lsls	r2, r2, #23
 8002396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9504;
 8002398:	4b27      	ldr	r3, [pc, #156]	@ (8002438 <MX_TIM2_Init+0xcc>)
 800239a:	4a28      	ldr	r2, [pc, #160]	@ (800243c <MX_TIM2_Init+0xd0>)
 800239c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b26      	ldr	r3, [pc, #152]	@ (8002438 <MX_TIM2_Init+0xcc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80023a4:	4b24      	ldr	r3, [pc, #144]	@ (8002438 <MX_TIM2_Init+0xcc>)
 80023a6:	2264      	movs	r2, #100	@ 0x64
 80023a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023aa:	4b23      	ldr	r3, [pc, #140]	@ (8002438 <MX_TIM2_Init+0xcc>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b21      	ldr	r3, [pc, #132]	@ (8002438 <MX_TIM2_Init+0xcc>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023b6:	4b20      	ldr	r3, [pc, #128]	@ (8002438 <MX_TIM2_Init+0xcc>)
 80023b8:	0018      	movs	r0, r3
 80023ba:	f003 fbc7 	bl	8005b4c <HAL_TIM_PWM_Init>
 80023be:	1e03      	subs	r3, r0, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80023c2:	f000 fad3 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c6:	2120      	movs	r1, #32
 80023c8:	187b      	adds	r3, r7, r1
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ce:	187b      	adds	r3, r7, r1
 80023d0:	2200      	movs	r2, #0
 80023d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023d4:	187a      	adds	r2, r7, r1
 80023d6:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <MX_TIM2_Init+0xcc>)
 80023d8:	0011      	movs	r1, r2
 80023da:	0018      	movs	r0, r3
 80023dc:	f004 f966 	bl	80066ac <HAL_TIMEx_MasterConfigSynchronization>
 80023e0:	1e03      	subs	r3, r0, #0
 80023e2:	d001      	beq.n	80023e8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80023e4:	f000 fac2 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	2260      	movs	r2, #96	@ 0x60
 80023ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002400:	1d39      	adds	r1, r7, #4
 8002402:	4b0d      	ldr	r3, [pc, #52]	@ (8002438 <MX_TIM2_Init+0xcc>)
 8002404:	2208      	movs	r2, #8
 8002406:	0018      	movs	r0, r3
 8002408:	f003 fde2 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 800240c:	1e03      	subs	r3, r0, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8002410:	f000 faac 	bl	800296c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002414:	1d39      	adds	r1, r7, #4
 8002416:	4b08      	ldr	r3, [pc, #32]	@ (8002438 <MX_TIM2_Init+0xcc>)
 8002418:	220c      	movs	r2, #12
 800241a:	0018      	movs	r0, r3
 800241c:	f003 fdd8 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 8002420:	1e03      	subs	r3, r0, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002424:	f000 faa2 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <MX_TIM2_Init+0xcc>)
 800242a:	0018      	movs	r0, r3
 800242c:	f000 fc92 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 8002430:	46c0      	nop			@ (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b00a      	add	sp, #40	@ 0x28
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200001cc 	.word	0x200001cc
 800243c:	00002520 	.word	0x00002520

08002440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002446:	2320      	movs	r3, #32
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	0018      	movs	r0, r3
 800244c:	2308      	movs	r3, #8
 800244e:	001a      	movs	r2, r3
 8002450:	2100      	movs	r1, #0
 8002452:	f004 f9f1 	bl	8006838 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	0018      	movs	r0, r3
 800245a:	231c      	movs	r3, #28
 800245c:	001a      	movs	r2, r3
 800245e:	2100      	movs	r1, #0
 8002460:	f004 f9ea 	bl	8006838 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002464:	4b29      	ldr	r3, [pc, #164]	@ (800250c <MX_TIM3_Init+0xcc>)
 8002466:	4a2a      	ldr	r2, [pc, #168]	@ (8002510 <MX_TIM3_Init+0xd0>)
 8002468:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9504;
 800246a:	4b28      	ldr	r3, [pc, #160]	@ (800250c <MX_TIM3_Init+0xcc>)
 800246c:	4a29      	ldr	r2, [pc, #164]	@ (8002514 <MX_TIM3_Init+0xd4>)
 800246e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002470:	4b26      	ldr	r3, [pc, #152]	@ (800250c <MX_TIM3_Init+0xcc>)
 8002472:	2200      	movs	r2, #0
 8002474:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002476:	4b25      	ldr	r3, [pc, #148]	@ (800250c <MX_TIM3_Init+0xcc>)
 8002478:	2264      	movs	r2, #100	@ 0x64
 800247a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247c:	4b23      	ldr	r3, [pc, #140]	@ (800250c <MX_TIM3_Init+0xcc>)
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002482:	4b22      	ldr	r3, [pc, #136]	@ (800250c <MX_TIM3_Init+0xcc>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002488:	4b20      	ldr	r3, [pc, #128]	@ (800250c <MX_TIM3_Init+0xcc>)
 800248a:	0018      	movs	r0, r3
 800248c:	f003 fb5e 	bl	8005b4c <HAL_TIM_PWM_Init>
 8002490:	1e03      	subs	r3, r0, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002494:	f000 fa6a 	bl	800296c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002498:	2120      	movs	r1, #32
 800249a:	187b      	adds	r3, r7, r1
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024a0:	187b      	adds	r3, r7, r1
 80024a2:	2200      	movs	r2, #0
 80024a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80024a6:	187a      	adds	r2, r7, r1
 80024a8:	4b18      	ldr	r3, [pc, #96]	@ (800250c <MX_TIM3_Init+0xcc>)
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f004 f8fd 	bl	80066ac <HAL_TIMEx_MasterConfigSynchronization>
 80024b2:	1e03      	subs	r3, r0, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80024b6:	f000 fa59 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	2260      	movs	r2, #96	@ 0x60
 80024be:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80024c0:	1d3b      	adds	r3, r7, #4
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c6:	1d3b      	adds	r3, r7, #4
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d2:	1d39      	adds	r1, r7, #4
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <MX_TIM3_Init+0xcc>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	0018      	movs	r0, r3
 80024da:	f003 fd79 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 80024de:	1e03      	subs	r3, r0, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80024e2:	f000 fa43 	bl	800296c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80024e6:	1d39      	adds	r1, r7, #4
 80024e8:	4b08      	ldr	r3, [pc, #32]	@ (800250c <MX_TIM3_Init+0xcc>)
 80024ea:	2204      	movs	r2, #4
 80024ec:	0018      	movs	r0, r3
 80024ee:	f003 fd6f 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 80024f2:	1e03      	subs	r3, r0, #0
 80024f4:	d001      	beq.n	80024fa <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80024f6:	f000 fa39 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024fa:	4b04      	ldr	r3, [pc, #16]	@ (800250c <MX_TIM3_Init+0xcc>)
 80024fc:	0018      	movs	r0, r3
 80024fe:	f000 fc29 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	46bd      	mov	sp, r7
 8002506:	b00a      	add	sp, #40	@ 0x28
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	20000214 	.word	0x20000214
 8002510:	40000400 	.word	0x40000400
 8002514:	00002520 	.word	0x00002520

08002518 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b090      	sub	sp, #64	@ 0x40
 800251c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800251e:	2324      	movs	r3, #36	@ 0x24
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	0018      	movs	r0, r3
 8002524:	231c      	movs	r3, #28
 8002526:	001a      	movs	r2, r3
 8002528:	2100      	movs	r1, #0
 800252a:	f004 f985 	bl	8006838 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	0018      	movs	r0, r3
 8002532:	2320      	movs	r3, #32
 8002534:	001a      	movs	r2, r3
 8002536:	2100      	movs	r1, #0
 8002538:	f004 f97e 	bl	8006838 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800253c:	4b36      	ldr	r3, [pc, #216]	@ (8002618 <MX_TIM16_Init+0x100>)
 800253e:	4a37      	ldr	r2, [pc, #220]	@ (800261c <MX_TIM16_Init+0x104>)
 8002540:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3170;
 8002542:	4b35      	ldr	r3, [pc, #212]	@ (8002618 <MX_TIM16_Init+0x100>)
 8002544:	4a36      	ldr	r2, [pc, #216]	@ (8002620 <MX_TIM16_Init+0x108>)
 8002546:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002548:	4b33      	ldr	r3, [pc, #204]	@ (8002618 <MX_TIM16_Init+0x100>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800254e:	4b32      	ldr	r3, [pc, #200]	@ (8002618 <MX_TIM16_Init+0x100>)
 8002550:	2264      	movs	r2, #100	@ 0x64
 8002552:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002554:	4b30      	ldr	r3, [pc, #192]	@ (8002618 <MX_TIM16_Init+0x100>)
 8002556:	2200      	movs	r2, #0
 8002558:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800255a:	4b2f      	ldr	r3, [pc, #188]	@ (8002618 <MX_TIM16_Init+0x100>)
 800255c:	2200      	movs	r2, #0
 800255e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002560:	4b2d      	ldr	r3, [pc, #180]	@ (8002618 <MX_TIM16_Init+0x100>)
 8002562:	2200      	movs	r2, #0
 8002564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002566:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <MX_TIM16_Init+0x100>)
 8002568:	0018      	movs	r0, r3
 800256a:	f003 fa03 	bl	8005974 <HAL_TIM_Base_Init>
 800256e:	1e03      	subs	r3, r0, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002572:	f000 f9fb 	bl	800296c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002576:	4b28      	ldr	r3, [pc, #160]	@ (8002618 <MX_TIM16_Init+0x100>)
 8002578:	0018      	movs	r0, r3
 800257a:	f003 fae7 	bl	8005b4c <HAL_TIM_PWM_Init>
 800257e:	1e03      	subs	r3, r0, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8002582:	f000 f9f3 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002586:	2124      	movs	r1, #36	@ 0x24
 8002588:	187b      	adds	r3, r7, r1
 800258a:	2260      	movs	r2, #96	@ 0x60
 800258c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800258e:	187b      	adds	r3, r7, r1
 8002590:	2200      	movs	r2, #0
 8002592:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002594:	187b      	adds	r3, r7, r1
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800259a:	187b      	adds	r3, r7, r1
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a0:	187b      	adds	r3, r7, r1
 80025a2:	2200      	movs	r2, #0
 80025a4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025a6:	187b      	adds	r3, r7, r1
 80025a8:	2200      	movs	r2, #0
 80025aa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	2200      	movs	r2, #0
 80025b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b2:	1879      	adds	r1, r7, r1
 80025b4:	4b18      	ldr	r3, [pc, #96]	@ (8002618 <MX_TIM16_Init+0x100>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	0018      	movs	r0, r3
 80025ba:	f003 fd09 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 80025be:	1e03      	subs	r3, r0, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80025c2:	f000 f9d3 	bl	800296c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025cc:	1d3b      	adds	r3, r7, #4
 80025ce:	2200      	movs	r2, #0
 80025d0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025d8:	1d3b      	adds	r3, r7, #4
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025de:	1d3b      	adds	r3, r7, #4
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2280      	movs	r2, #128	@ 0x80
 80025e8:	0192      	lsls	r2, r2, #6
 80025ea:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	2200      	movs	r2, #0
 80025f0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80025f2:	1d3a      	adds	r2, r7, #4
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <MX_TIM16_Init+0x100>)
 80025f6:	0011      	movs	r1, r2
 80025f8:	0018      	movs	r0, r3
 80025fa:	f004 f8af 	bl	800675c <HAL_TIMEx_ConfigBreakDeadTime>
 80025fe:	1e03      	subs	r3, r0, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8002602:	f000 f9b3 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002606:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <MX_TIM16_Init+0x100>)
 8002608:	0018      	movs	r0, r3
 800260a:	f000 fba3 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 800260e:	46c0      	nop			@ (mov r8, r8)
 8002610:	46bd      	mov	sp, r7
 8002612:	b010      	add	sp, #64	@ 0x40
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	2000025c 	.word	0x2000025c
 800261c:	40014400 	.word	0x40014400
 8002620:	00000c62 	.word	0x00000c62

08002624 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b090      	sub	sp, #64	@ 0x40
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800262a:	2324      	movs	r3, #36	@ 0x24
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	0018      	movs	r0, r3
 8002630:	231c      	movs	r3, #28
 8002632:	001a      	movs	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f004 f8ff 	bl	8006838 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800263a:	1d3b      	adds	r3, r7, #4
 800263c:	0018      	movs	r0, r3
 800263e:	2320      	movs	r3, #32
 8002640:	001a      	movs	r2, r3
 8002642:	2100      	movs	r1, #0
 8002644:	f004 f8f8 	bl	8006838 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002648:	4b36      	ldr	r3, [pc, #216]	@ (8002724 <MX_TIM17_Init+0x100>)
 800264a:	4a37      	ldr	r2, [pc, #220]	@ (8002728 <MX_TIM17_Init+0x104>)
 800264c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3170;
 800264e:	4b35      	ldr	r3, [pc, #212]	@ (8002724 <MX_TIM17_Init+0x100>)
 8002650:	4a36      	ldr	r2, [pc, #216]	@ (800272c <MX_TIM17_Init+0x108>)
 8002652:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002654:	4b33      	ldr	r3, [pc, #204]	@ (8002724 <MX_TIM17_Init+0x100>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 800265a:	4b32      	ldr	r3, [pc, #200]	@ (8002724 <MX_TIM17_Init+0x100>)
 800265c:	2264      	movs	r2, #100	@ 0x64
 800265e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002660:	4b30      	ldr	r3, [pc, #192]	@ (8002724 <MX_TIM17_Init+0x100>)
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002666:	4b2f      	ldr	r3, [pc, #188]	@ (8002724 <MX_TIM17_Init+0x100>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266c:	4b2d      	ldr	r3, [pc, #180]	@ (8002724 <MX_TIM17_Init+0x100>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002672:	4b2c      	ldr	r3, [pc, #176]	@ (8002724 <MX_TIM17_Init+0x100>)
 8002674:	0018      	movs	r0, r3
 8002676:	f003 f97d 	bl	8005974 <HAL_TIM_Base_Init>
 800267a:	1e03      	subs	r3, r0, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800267e:	f000 f975 	bl	800296c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002682:	4b28      	ldr	r3, [pc, #160]	@ (8002724 <MX_TIM17_Init+0x100>)
 8002684:	0018      	movs	r0, r3
 8002686:	f003 fa61 	bl	8005b4c <HAL_TIM_PWM_Init>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800268e:	f000 f96d 	bl	800296c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002692:	2124      	movs	r1, #36	@ 0x24
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2260      	movs	r2, #96	@ 0x60
 8002698:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026a0:	187b      	adds	r3, r7, r1
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	2200      	movs	r2, #0
 80026aa:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2200      	movs	r2, #0
 80026b6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2200      	movs	r2, #0
 80026bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026be:	1879      	adds	r1, r7, r1
 80026c0:	4b18      	ldr	r3, [pc, #96]	@ (8002724 <MX_TIM17_Init+0x100>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	0018      	movs	r0, r3
 80026c6:	f003 fc83 	bl	8005fd0 <HAL_TIM_PWM_ConfigChannel>
 80026ca:	1e03      	subs	r3, r0, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80026ce:	f000 f94d 	bl	800296c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	2200      	movs	r2, #0
 80026dc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	2200      	movs	r2, #0
 80026e2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026e4:	1d3b      	adds	r3, r7, #4
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026ea:	1d3b      	adds	r3, r7, #4
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026f0:	1d3b      	adds	r3, r7, #4
 80026f2:	2280      	movs	r2, #128	@ 0x80
 80026f4:	0192      	lsls	r2, r2, #6
 80026f6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026f8:	1d3b      	adds	r3, r7, #4
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80026fe:	1d3a      	adds	r2, r7, #4
 8002700:	4b08      	ldr	r3, [pc, #32]	@ (8002724 <MX_TIM17_Init+0x100>)
 8002702:	0011      	movs	r1, r2
 8002704:	0018      	movs	r0, r3
 8002706:	f004 f829 	bl	800675c <HAL_TIMEx_ConfigBreakDeadTime>
 800270a:	1e03      	subs	r3, r0, #0
 800270c:	d001      	beq.n	8002712 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 800270e:	f000 f92d 	bl	800296c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002712:	4b04      	ldr	r3, [pc, #16]	@ (8002724 <MX_TIM17_Init+0x100>)
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fb1d 	bl	8002d54 <HAL_TIM_MspPostInit>

}
 800271a:	46c0      	nop			@ (mov r8, r8)
 800271c:	46bd      	mov	sp, r7
 800271e:	b010      	add	sp, #64	@ 0x40
 8002720:	bd80      	pop	{r7, pc}
 8002722:	46c0      	nop			@ (mov r8, r8)
 8002724:	200002a4 	.word	0x200002a4
 8002728:	40014800 	.word	0x40014800
 800272c:	00000c62 	.word	0x00000c62

08002730 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002736:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <MX_DMA_Init+0x38>)
 8002738:	695a      	ldr	r2, [r3, #20]
 800273a:	4b0b      	ldr	r3, [pc, #44]	@ (8002768 <MX_DMA_Init+0x38>)
 800273c:	2101      	movs	r1, #1
 800273e:	430a      	orrs	r2, r1
 8002740:	615a      	str	r2, [r3, #20]
 8002742:	4b09      	ldr	r3, [pc, #36]	@ (8002768 <MX_DMA_Init+0x38>)
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2201      	movs	r2, #1
 8002748:	4013      	ands	r3, r2
 800274a:	607b      	str	r3, [r7, #4]
 800274c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	2009      	movs	r0, #9
 8002754:	f002 f832 	bl	80047bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002758:	2009      	movs	r0, #9
 800275a:	f002 f844 	bl	80047e6 <HAL_NVIC_EnableIRQ>

}
 800275e:	46c0      	nop			@ (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b002      	add	sp, #8
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	40021000 	.word	0x40021000

0800276c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800276c:	b590      	push	{r4, r7, lr}
 800276e:	b08b      	sub	sp, #44	@ 0x2c
 8002770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002772:	2414      	movs	r4, #20
 8002774:	193b      	adds	r3, r7, r4
 8002776:	0018      	movs	r0, r3
 8002778:	2314      	movs	r3, #20
 800277a:	001a      	movs	r2, r3
 800277c:	2100      	movs	r1, #0
 800277e:	f004 f85b 	bl	8006838 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002782:	4b45      	ldr	r3, [pc, #276]	@ (8002898 <MX_GPIO_Init+0x12c>)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	4b44      	ldr	r3, [pc, #272]	@ (8002898 <MX_GPIO_Init+0x12c>)
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	0309      	lsls	r1, r1, #12
 800278c:	430a      	orrs	r2, r1
 800278e:	615a      	str	r2, [r3, #20]
 8002790:	4b41      	ldr	r3, [pc, #260]	@ (8002898 <MX_GPIO_Init+0x12c>)
 8002792:	695a      	ldr	r2, [r3, #20]
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	031b      	lsls	r3, r3, #12
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800279e:	4b3e      	ldr	r3, [pc, #248]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027a4:	2180      	movs	r1, #128	@ 0x80
 80027a6:	03c9      	lsls	r1, r1, #15
 80027a8:	430a      	orrs	r2, r1
 80027aa:	615a      	str	r2, [r3, #20]
 80027ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	03db      	lsls	r3, r3, #15
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	4b37      	ldr	r3, [pc, #220]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027bc:	695a      	ldr	r2, [r3, #20]
 80027be:	4b36      	ldr	r3, [pc, #216]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027c0:	2180      	movs	r1, #128	@ 0x80
 80027c2:	0289      	lsls	r1, r1, #10
 80027c4:	430a      	orrs	r2, r1
 80027c6:	615a      	str	r2, [r3, #20]
 80027c8:	4b33      	ldr	r3, [pc, #204]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	2380      	movs	r3, #128	@ 0x80
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	4013      	ands	r3, r2
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d6:	4b30      	ldr	r3, [pc, #192]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	4b2f      	ldr	r3, [pc, #188]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027dc:	2180      	movs	r1, #128	@ 0x80
 80027de:	02c9      	lsls	r1, r1, #11
 80027e0:	430a      	orrs	r2, r1
 80027e2:	615a      	str	r2, [r3, #20]
 80027e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002898 <MX_GPIO_Init+0x12c>)
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	02db      	lsls	r3, r3, #11
 80027ec:	4013      	ands	r3, r2
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, GPIO_PIN_RESET);
 80027f2:	2380      	movs	r3, #128	@ 0x80
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	4829      	ldr	r0, [pc, #164]	@ (800289c <MX_GPIO_Init+0x130>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	0019      	movs	r1, r3
 80027fc:	f002 fb10 	bl	8004e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V12_NP_Signal_Pin|F1R_Signal_Pin|F2L_Signal_Pin|F1L_Signal_Pin, GPIO_PIN_RESET);
 8002800:	4b27      	ldr	r3, [pc, #156]	@ (80028a0 <MX_GPIO_Init+0x134>)
 8002802:	2200      	movs	r2, #0
 8002804:	21cc      	movs	r1, #204	@ 0xcc
 8002806:	0018      	movs	r0, r3
 8002808:	f002 fb0a 	bl	8004e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin, GPIO_PIN_RESET);
 800280c:	2387      	movs	r3, #135	@ 0x87
 800280e:	0219      	lsls	r1, r3, #8
 8002810:	2390      	movs	r3, #144	@ 0x90
 8002812:	05db      	lsls	r3, r3, #23
 8002814:	2200      	movs	r2, #0
 8002816:	0018      	movs	r0, r3
 8002818:	f002 fb02 	bl	8004e20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ecu_Signal_Pin */
  GPIO_InitStruct.Pin = Ecu_Signal_Pin;
 800281c:	193b      	adds	r3, r7, r4
 800281e:	2280      	movs	r2, #128	@ 0x80
 8002820:	0192      	lsls	r2, r2, #6
 8002822:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002824:	193b      	adds	r3, r7, r4
 8002826:	2201      	movs	r2, #1
 8002828:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282a:	193b      	adds	r3, r7, r4
 800282c:	2200      	movs	r2, #0
 800282e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	193b      	adds	r3, r7, r4
 8002832:	2200      	movs	r2, #0
 8002834:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ecu_Signal_GPIO_Port, &GPIO_InitStruct);
 8002836:	193b      	adds	r3, r7, r4
 8002838:	4a18      	ldr	r2, [pc, #96]	@ (800289c <MX_GPIO_Init+0x130>)
 800283a:	0019      	movs	r1, r3
 800283c:	0010      	movs	r0, r2
 800283e:	f002 f987 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : V12_NP_Signal_Pin F1R_Signal_Pin F2L_Signal_Pin F1L_Signal_Pin */
  GPIO_InitStruct.Pin = V12_NP_Signal_Pin|F1R_Signal_Pin|F2L_Signal_Pin|F1L_Signal_Pin;
 8002842:	193b      	adds	r3, r7, r4
 8002844:	22cc      	movs	r2, #204	@ 0xcc
 8002846:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002848:	193b      	adds	r3, r7, r4
 800284a:	2201      	movs	r2, #1
 800284c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	193b      	adds	r3, r7, r4
 8002850:	2200      	movs	r2, #0
 8002852:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	193b      	adds	r3, r7, r4
 8002856:	2200      	movs	r2, #0
 8002858:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	193b      	adds	r3, r7, r4
 800285c:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <MX_GPIO_Init+0x134>)
 800285e:	0019      	movs	r1, r3
 8002860:	0010      	movs	r0, r2
 8002862:	f002 f975 	bl	8004b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : WPR_Signal_Pin WPL_Signal_Pin Reset_Pin F2R_Signal_Pin */
  GPIO_InitStruct.Pin = WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin;
 8002866:	0021      	movs	r1, r4
 8002868:	187b      	adds	r3, r7, r1
 800286a:	2287      	movs	r2, #135	@ 0x87
 800286c:	0212      	lsls	r2, r2, #8
 800286e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002870:	187b      	adds	r3, r7, r1
 8002872:	2201      	movs	r2, #1
 8002874:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	187b      	adds	r3, r7, r1
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800287c:	187b      	adds	r3, r7, r1
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	187a      	adds	r2, r7, r1
 8002884:	2390      	movs	r3, #144	@ 0x90
 8002886:	05db      	lsls	r3, r3, #23
 8002888:	0011      	movs	r1, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f002 f960 	bl	8004b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002890:	46c0      	nop			@ (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b00b      	add	sp, #44	@ 0x2c
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	48000800 	.word	0x48000800
 80028a0:	48000400 	.word	0x48000400

080028a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a0c      	ldr	r2, [pc, #48]	@ (80028e4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d112      	bne.n	80028dc <HAL_TIM_PeriodElapsedCallback+0x38>
		send = 1;
 80028b6:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
		heartbeatFlag = heartbeatFlag+1;
 80028bc:	4b0b      	ldr	r3, [pc, #44]	@ (80028ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b09      	ldr	r3, [pc, #36]	@ (80028ec <HAL_TIM_PeriodElapsedCallback+0x48>)
 80028c6:	701a      	strb	r2, [r3, #0]
		if(canResetEcuFlag == 1){
 80028c8:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d105      	bne.n	80028dc <HAL_TIM_PeriodElapsedCallback+0x38>
			resetCounter = resetCounter+1;
 80028d0:	4b08      	ldr	r3, [pc, #32]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	4b06      	ldr	r3, [pc, #24]	@ (80028f4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80028da:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80028dc:	46c0      	nop			@ (mov r8, r8)
 80028de:	46bd      	mov	sp, r7
 80028e0:	b002      	add	sp, #8
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	20000419 	.word	0x20000419
 80028ec:	2000041a 	.word	0x2000041a
 80028f0:	2000041e 	.word	0x2000041e
 80028f4:	2000041f 	.word	0x2000041f

080028f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	value_adc[0] = (uint16_t) adc_buff[0];	//Los valores pasan de 32 a 16 bits
 8002900:	4b18      	ldr	r3, [pc, #96]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b29a      	uxth	r2, r3
 8002906:	4b18      	ldr	r3, [pc, #96]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 8002908:	801a      	strh	r2, [r3, #0]
	value_adc[1] = (uint16_t) adc_buff[1];
 800290a:	4b16      	ldr	r3, [pc, #88]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	b29a      	uxth	r2, r3
 8002910:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 8002912:	805a      	strh	r2, [r3, #2]
	value_adc[2] = (uint16_t) adc_buff[2];
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	b29a      	uxth	r2, r3
 800291a:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 800291c:	809a      	strh	r2, [r3, #4]
	value_adc[3] = (uint16_t) adc_buff[3];
 800291e:	4b11      	ldr	r3, [pc, #68]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	b29a      	uxth	r2, r3
 8002924:	4b10      	ldr	r3, [pc, #64]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 8002926:	80da      	strh	r2, [r3, #6]
	value_adc[4] = (uint16_t) adc_buff[4];
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	b29a      	uxth	r2, r3
 800292e:	4b0e      	ldr	r3, [pc, #56]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 8002930:	811a      	strh	r2, [r3, #8]
	value_adc[5] = (uint16_t) adc_buff[5];
 8002932:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	b29a      	uxth	r2, r3
 8002938:	4b0b      	ldr	r3, [pc, #44]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 800293a:	815a      	strh	r2, [r3, #10]
	value_adc[6] = (uint16_t) adc_buff[6];
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	b29a      	uxth	r2, r3
 8002942:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 8002944:	819a      	strh	r2, [r3, #12]
	value_adc[7] = (uint16_t) adc_buff[7];
 8002946:	4b07      	ldr	r3, [pc, #28]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	b29a      	uxth	r2, r3
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 800294e:	81da      	strh	r2, [r3, #14]
	value_adc[8] = (uint16_t) adc_buff[8];
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	b29a      	uxth	r2, r3
 8002956:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <HAL_ADC_ConvCpltCallback+0x70>)
 8002958:	821a      	strh	r2, [r3, #16]
}
 800295a:	46c0      	nop			@ (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}
 8002962:	46c0      	nop			@ (mov r8, r8)
 8002964:	200003b0 	.word	0x200003b0
 8002968:	200003dc 	.word	0x200003dc

0800296c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002974:	46c0      	nop			@ (mov r8, r8)
 8002976:	e7fd      	b.n	8002974 <Error_Handler+0x8>

08002978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297e:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <HAL_MspInit+0x44>)
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	4b0e      	ldr	r3, [pc, #56]	@ (80029bc <HAL_MspInit+0x44>)
 8002984:	2101      	movs	r1, #1
 8002986:	430a      	orrs	r2, r1
 8002988:	619a      	str	r2, [r3, #24]
 800298a:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <HAL_MspInit+0x44>)
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	2201      	movs	r2, #1
 8002990:	4013      	ands	r3, r2
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_MspInit+0x44>)
 8002998:	69da      	ldr	r2, [r3, #28]
 800299a:	4b08      	ldr	r3, [pc, #32]	@ (80029bc <HAL_MspInit+0x44>)
 800299c:	2180      	movs	r1, #128	@ 0x80
 800299e:	0549      	lsls	r1, r1, #21
 80029a0:	430a      	orrs	r2, r1
 80029a2:	61da      	str	r2, [r3, #28]
 80029a4:	4b05      	ldr	r3, [pc, #20]	@ (80029bc <HAL_MspInit+0x44>)
 80029a6:	69da      	ldr	r2, [r3, #28]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	055b      	lsls	r3, r3, #21
 80029ac:	4013      	ands	r3, r2
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029b2:	46c0      	nop			@ (mov r8, r8)
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b002      	add	sp, #8
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	46c0      	nop			@ (mov r8, r8)
 80029bc:	40021000 	.word	0x40021000

080029c0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029c0:	b590      	push	{r4, r7, lr}
 80029c2:	b08b      	sub	sp, #44	@ 0x2c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c8:	2414      	movs	r4, #20
 80029ca:	193b      	adds	r3, r7, r4
 80029cc:	0018      	movs	r0, r3
 80029ce:	2314      	movs	r3, #20
 80029d0:	001a      	movs	r2, r3
 80029d2:	2100      	movs	r1, #0
 80029d4:	f003 ff30 	bl	8006838 <memset>
  if(hadc->Instance==ADC1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a3b      	ldr	r2, [pc, #236]	@ (8002acc <HAL_ADC_MspInit+0x10c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d170      	bne.n	8002ac4 <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029e2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 80029e8:	2180      	movs	r1, #128	@ 0x80
 80029ea:	0089      	lsls	r1, r1, #2
 80029ec:	430a      	orrs	r2, r1
 80029ee:	619a      	str	r2, [r3, #24]
 80029f0:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]
 80029fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fe:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	4b33      	ldr	r3, [pc, #204]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 8002a04:	2180      	movs	r1, #128	@ 0x80
 8002a06:	0289      	lsls	r1, r1, #10
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	615a      	str	r2, [r3, #20]
 8002a0c:	4b30      	ldr	r3, [pc, #192]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 8002a0e:	695a      	ldr	r2, [r3, #20]
 8002a10:	2380      	movs	r3, #128	@ 0x80
 8002a12:	029b      	lsls	r3, r3, #10
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 8002a20:	2180      	movs	r1, #128	@ 0x80
 8002a22:	02c9      	lsls	r1, r1, #11
 8002a24:	430a      	orrs	r2, r1
 8002a26:	615a      	str	r2, [r3, #20]
 8002a28:	4b29      	ldr	r3, [pc, #164]	@ (8002ad0 <HAL_ADC_MspInit+0x110>)
 8002a2a:	695a      	ldr	r2, [r3, #20]
 8002a2c:	2380      	movs	r3, #128	@ 0x80
 8002a2e:	02db      	lsls	r3, r3, #11
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
 8002a34:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Altrnator_Sens_Pin|WPL_Sens_Pin|WPR_Sens_Pin|F1R_Sens_Pin
 8002a36:	193b      	adds	r3, r7, r4
 8002a38:	22ff      	movs	r2, #255	@ 0xff
 8002a3a:	601a      	str	r2, [r3, #0]
                          |F2R_Sens_Pin|F1L_Sens_Pin|F2L_Sens_Pin|V12_NP_Sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3c:	193b      	adds	r3, r7, r4
 8002a3e:	2203      	movs	r2, #3
 8002a40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	193b      	adds	r3, r7, r4
 8002a44:	2200      	movs	r2, #0
 8002a46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a48:	193a      	adds	r2, r7, r4
 8002a4a:	2390      	movs	r3, #144	@ 0x90
 8002a4c:	05db      	lsls	r3, r3, #23
 8002a4e:	0011      	movs	r1, r2
 8002a50:	0018      	movs	r0, r3
 8002a52:	f002 f87d 	bl	8004b50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V12_P_Sens_Pin|Temp_Sens_Pin;
 8002a56:	193b      	adds	r3, r7, r4
 8002a58:	2203      	movs	r2, #3
 8002a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a5c:	193b      	adds	r3, r7, r4
 8002a5e:	2203      	movs	r2, #3
 8002a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	193b      	adds	r3, r7, r4
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a68:	193b      	adds	r3, r7, r4
 8002a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ad4 <HAL_ADC_MspInit+0x114>)
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	0010      	movs	r0, r2
 8002a70:	f002 f86e 	bl	8004b50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002a76:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <HAL_ADC_MspInit+0x11c>)
 8002a78:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a80:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002a88:	2280      	movs	r2, #128	@ 0x80
 8002a8a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a8c:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002a8e:	2280      	movs	r2, #128	@ 0x80
 8002a90:	0092      	lsls	r2, r2, #2
 8002a92:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a94:	4b10      	ldr	r3, [pc, #64]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002a96:	2280      	movs	r2, #128	@ 0x80
 8002a98:	0112      	lsls	r2, r2, #4
 8002a9a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f001 feb8 	bl	8004820 <HAL_DMA_Init>
 8002ab0:	1e03      	subs	r3, r0, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8002ab4:	f7ff ff5a 	bl	800296c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a07      	ldr	r2, [pc, #28]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002abc:	631a      	str	r2, [r3, #48]	@ 0x30
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_ADC_MspInit+0x118>)
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ac4:	46c0      	nop			@ (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b00b      	add	sp, #44	@ 0x2c
 8002aca:	bd90      	pop	{r4, r7, pc}
 8002acc:	40012400 	.word	0x40012400
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	48000400 	.word	0x48000400
 8002ad8:	200000b4 	.word	0x200000b4
 8002adc:	40020008 	.word	0x40020008

08002ae0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002ae0:	b590      	push	{r4, r7, lr}
 8002ae2:	b08b      	sub	sp, #44	@ 0x2c
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	2414      	movs	r4, #20
 8002aea:	193b      	adds	r3, r7, r4
 8002aec:	0018      	movs	r0, r3
 8002aee:	2314      	movs	r3, #20
 8002af0:	001a      	movs	r2, r3
 8002af2:	2100      	movs	r1, #0
 8002af4:	f003 fea0 	bl	8006838 <memset>
  if(hcan->Instance==CAN)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a21      	ldr	r2, [pc, #132]	@ (8002b84 <HAL_CAN_MspInit+0xa4>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d13b      	bne.n	8002b7a <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002b02:	4b21      	ldr	r3, [pc, #132]	@ (8002b88 <HAL_CAN_MspInit+0xa8>)
 8002b04:	69da      	ldr	r2, [r3, #28]
 8002b06:	4b20      	ldr	r3, [pc, #128]	@ (8002b88 <HAL_CAN_MspInit+0xa8>)
 8002b08:	2180      	movs	r1, #128	@ 0x80
 8002b0a:	0489      	lsls	r1, r1, #18
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	61da      	str	r2, [r3, #28]
 8002b10:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_CAN_MspInit+0xa8>)
 8002b12:	69da      	ldr	r2, [r3, #28]
 8002b14:	2380      	movs	r3, #128	@ 0x80
 8002b16:	049b      	lsls	r3, r3, #18
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002b88 <HAL_CAN_MspInit+0xa8>)
 8002b20:	695a      	ldr	r2, [r3, #20]
 8002b22:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <HAL_CAN_MspInit+0xa8>)
 8002b24:	2180      	movs	r1, #128	@ 0x80
 8002b26:	0289      	lsls	r1, r1, #10
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	615a      	str	r2, [r3, #20]
 8002b2c:	4b16      	ldr	r3, [pc, #88]	@ (8002b88 <HAL_CAN_MspInit+0xa8>)
 8002b2e:	695a      	ldr	r2, [r3, #20]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	029b      	lsls	r3, r3, #10
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002b3a:	193b      	adds	r3, r7, r4
 8002b3c:	22c0      	movs	r2, #192	@ 0xc0
 8002b3e:	0152      	lsls	r2, r2, #5
 8002b40:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b42:	0021      	movs	r1, r4
 8002b44:	187b      	adds	r3, r7, r1
 8002b46:	2202      	movs	r2, #2
 8002b48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	187b      	adds	r3, r7, r1
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	2203      	movs	r2, #3
 8002b54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002b56:	187b      	adds	r3, r7, r1
 8002b58:	2204      	movs	r2, #4
 8002b5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	187a      	adds	r2, r7, r1
 8002b5e:	2390      	movs	r3, #144	@ 0x90
 8002b60:	05db      	lsls	r3, r3, #23
 8002b62:	0011      	movs	r1, r2
 8002b64:	0018      	movs	r0, r3
 8002b66:	f001 fff3 	bl	8004b50 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	201e      	movs	r0, #30
 8002b70:	f001 fe24 	bl	80047bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002b74:	201e      	movs	r0, #30
 8002b76:	f001 fe36 	bl	80047e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8002b7a:	46c0      	nop			@ (mov r8, r8)
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	b00b      	add	sp, #44	@ 0x2c
 8002b80:	bd90      	pop	{r4, r7, pc}
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	40006400 	.word	0x40006400
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b08b      	sub	sp, #44	@ 0x2c
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	2414      	movs	r4, #20
 8002b96:	193b      	adds	r3, r7, r4
 8002b98:	0018      	movs	r0, r3
 8002b9a:	2314      	movs	r3, #20
 8002b9c:	001a      	movs	r2, r3
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	f003 fe4a 	bl	8006838 <memset>
  if(hspi->Instance==SPI2)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	@ (8002c1c <HAL_SPI_MspInit+0x90>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d132      	bne.n	8002c14 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002bae:	4b1c      	ldr	r3, [pc, #112]	@ (8002c20 <HAL_SPI_MspInit+0x94>)
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <HAL_SPI_MspInit+0x94>)
 8002bb4:	2180      	movs	r1, #128	@ 0x80
 8002bb6:	01c9      	lsls	r1, r1, #7
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
 8002bbc:	4b18      	ldr	r3, [pc, #96]	@ (8002c20 <HAL_SPI_MspInit+0x94>)
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	4b15      	ldr	r3, [pc, #84]	@ (8002c20 <HAL_SPI_MspInit+0x94>)
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	4b14      	ldr	r3, [pc, #80]	@ (8002c20 <HAL_SPI_MspInit+0x94>)
 8002bd0:	2180      	movs	r1, #128	@ 0x80
 8002bd2:	02c9      	lsls	r1, r1, #11
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	615a      	str	r2, [r3, #20]
 8002bd8:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_SPI_MspInit+0x94>)
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	02db      	lsls	r3, r3, #11
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002be6:	193b      	adds	r3, r7, r4
 8002be8:	22f0      	movs	r2, #240	@ 0xf0
 8002bea:	0212      	lsls	r2, r2, #8
 8002bec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	0021      	movs	r1, r4
 8002bf0:	187b      	adds	r3, r7, r1
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf6:	187b      	adds	r3, r7, r1
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bfc:	187b      	adds	r3, r7, r1
 8002bfe:	2203      	movs	r2, #3
 8002c00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002c02:	187b      	adds	r3, r7, r1
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c08:	187b      	adds	r3, r7, r1
 8002c0a:	4a06      	ldr	r2, [pc, #24]	@ (8002c24 <HAL_SPI_MspInit+0x98>)
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	0010      	movs	r0, r2
 8002c10:	f001 ff9e 	bl	8004b50 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002c14:	46c0      	nop			@ (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b00b      	add	sp, #44	@ 0x2c
 8002c1a:	bd90      	pop	{r4, r7, pc}
 8002c1c:	40003800 	.word	0x40003800
 8002c20:	40021000 	.word	0x40021000
 8002c24:	48000400 	.word	0x48000400

08002c28 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a12      	ldr	r2, [pc, #72]	@ (8002c80 <HAL_TIM_OC_MspInit+0x58>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d11d      	bne.n	8002c76 <HAL_TIM_OC_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c3a:	4b12      	ldr	r3, [pc, #72]	@ (8002c84 <HAL_TIM_OC_MspInit+0x5c>)
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_TIM_OC_MspInit+0x5c>)
 8002c40:	2180      	movs	r1, #128	@ 0x80
 8002c42:	0109      	lsls	r1, r1, #4
 8002c44:	430a      	orrs	r2, r1
 8002c46:	619a      	str	r2, [r3, #24]
 8002c48:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <HAL_TIM_OC_MspInit+0x5c>)
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	2380      	movs	r3, #128	@ 0x80
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	200d      	movs	r0, #13
 8002c5c:	f001 fdae 	bl	80047bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002c60:	200d      	movs	r0, #13
 8002c62:	f001 fdc0 	bl	80047e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002c66:	2200      	movs	r2, #0
 8002c68:	2100      	movs	r1, #0
 8002c6a:	200e      	movs	r0, #14
 8002c6c:	f001 fda6 	bl	80047bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002c70:	200e      	movs	r0, #14
 8002c72:	f001 fdb8 	bl	80047e6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b004      	add	sp, #16
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	46c0      	nop			@ (mov r8, r8)
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40021000 	.word	0x40021000

08002c88 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	2380      	movs	r3, #128	@ 0x80
 8002c96:	05db      	lsls	r3, r3, #23
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x58>)
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x58>)
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	61da      	str	r2, [r3, #28]
 8002ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x58>)
 8002caa:	69db      	ldr	r3, [r3, #28]
 8002cac:	2201      	movs	r2, #1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cb4:	e010      	b.n	8002cd8 <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ce4 <HAL_TIM_PWM_MspInit+0x5c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cc0:	4b07      	ldr	r3, [pc, #28]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x58>)
 8002cc2:	69da      	ldr	r2, [r3, #28]
 8002cc4:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x58>)
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	61da      	str	r2, [r3, #28]
 8002ccc:	4b04      	ldr	r3, [pc, #16]	@ (8002ce0 <HAL_TIM_PWM_MspInit+0x58>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	b004      	add	sp, #16
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40000400 	.word	0x40000400

08002ce8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a14      	ldr	r2, [pc, #80]	@ (8002d48 <HAL_TIM_Base_MspInit+0x60>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d10e      	bne.n	8002d18 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002cfa:	4b14      	ldr	r3, [pc, #80]	@ (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d00:	2180      	movs	r1, #128	@ 0x80
 8002d02:	0289      	lsls	r1, r1, #10
 8002d04:	430a      	orrs	r2, r1
 8002d06:	619a      	str	r2, [r3, #24]
 8002d08:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d0a:	699a      	ldr	r2, [r3, #24]
 8002d0c:	2380      	movs	r3, #128	@ 0x80
 8002d0e:	029b      	lsls	r3, r3, #10
 8002d10:	4013      	ands	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002d16:	e012      	b.n	8002d3e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d50 <HAL_TIM_Base_MspInit+0x68>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d10d      	bne.n	8002d3e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002d22:	4b0a      	ldr	r3, [pc, #40]	@ (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d24:	699a      	ldr	r2, [r3, #24]
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d28:	2180      	movs	r1, #128	@ 0x80
 8002d2a:	02c9      	lsls	r1, r1, #11
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	619a      	str	r2, [r3, #24]
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_TIM_Base_MspInit+0x64>)
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	02db      	lsls	r3, r3, #11
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
 8002d3c:	68bb      	ldr	r3, [r7, #8]
}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b004      	add	sp, #16
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	40014400 	.word	0x40014400
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	40014800 	.word	0x40014800

08002d54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b08d      	sub	sp, #52	@ 0x34
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	241c      	movs	r4, #28
 8002d5e:	193b      	adds	r3, r7, r4
 8002d60:	0018      	movs	r0, r3
 8002d62:	2314      	movs	r3, #20
 8002d64:	001a      	movs	r2, r3
 8002d66:	2100      	movs	r1, #0
 8002d68:	f003 fd66 	bl	8006838 <memset>
  if(htim->Instance==TIM2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	05db      	lsls	r3, r3, #23
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d125      	bne.n	8002dc4 <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d78:	4b54      	ldr	r3, [pc, #336]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002d7e:	2180      	movs	r1, #128	@ 0x80
 8002d80:	02c9      	lsls	r1, r1, #11
 8002d82:	430a      	orrs	r2, r1
 8002d84:	615a      	str	r2, [r3, #20]
 8002d86:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	2380      	movs	r3, #128	@ 0x80
 8002d8c:	02db      	lsls	r3, r3, #11
 8002d8e:	4013      	ands	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = F1L_pwm_Pin|F2L_pwm_Pin;
 8002d94:	193b      	adds	r3, r7, r4
 8002d96:	22c0      	movs	r2, #192	@ 0xc0
 8002d98:	0112      	lsls	r2, r2, #4
 8002d9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d9c:	0021      	movs	r1, r4
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	2202      	movs	r2, #2
 8002da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da4:	187b      	adds	r3, r7, r1
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	2200      	movs	r2, #0
 8002dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002db0:	187b      	adds	r3, r7, r1
 8002db2:	2202      	movs	r2, #2
 8002db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002db6:	187b      	adds	r3, r7, r1
 8002db8:	4a45      	ldr	r2, [pc, #276]	@ (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002dba:	0019      	movs	r1, r3
 8002dbc:	0010      	movs	r0, r2
 8002dbe:	f001 fec7 	bl	8004b50 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002dc2:	e07e      	b.n	8002ec2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a42      	ldr	r2, [pc, #264]	@ (8002ed4 <HAL_TIM_MspPostInit+0x180>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d124      	bne.n	8002e18 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002dd0:	695a      	ldr	r2, [r3, #20]
 8002dd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002dd4:	2180      	movs	r1, #128	@ 0x80
 8002dd6:	02c9      	lsls	r1, r1, #11
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	615a      	str	r2, [r3, #20]
 8002ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	2380      	movs	r3, #128	@ 0x80
 8002de2:	02db      	lsls	r3, r3, #11
 8002de4:	4013      	ands	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = F1R_pwm_Pin|F2R_pwm_Pin;
 8002dea:	211c      	movs	r1, #28
 8002dec:	187b      	adds	r3, r7, r1
 8002dee:	2230      	movs	r2, #48	@ 0x30
 8002df0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df2:	187b      	adds	r3, r7, r1
 8002df4:	2202      	movs	r2, #2
 8002df6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	187b      	adds	r3, r7, r1
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	187b      	adds	r3, r7, r1
 8002e00:	2200      	movs	r2, #0
 8002e02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002e04:	187b      	adds	r3, r7, r1
 8002e06:	2201      	movs	r2, #1
 8002e08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e0a:	187b      	adds	r3, r7, r1
 8002e0c:	4a30      	ldr	r2, [pc, #192]	@ (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e0e:	0019      	movs	r1, r3
 8002e10:	0010      	movs	r0, r2
 8002e12:	f001 fe9d 	bl	8004b50 <HAL_GPIO_Init>
}
 8002e16:	e054      	b.n	8002ec2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM16)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	@ (8002ed8 <HAL_TIM_MspPostInit+0x184>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d125      	bne.n	8002e6e <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	4b2a      	ldr	r3, [pc, #168]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	4b29      	ldr	r3, [pc, #164]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002e28:	2180      	movs	r1, #128	@ 0x80
 8002e2a:	02c9      	lsls	r1, r1, #11
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	615a      	str	r2, [r3, #20]
 8002e30:	4b26      	ldr	r3, [pc, #152]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	02db      	lsls	r3, r3, #11
 8002e38:	4013      	ands	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = WPL_pwm_Pin;
 8002e3e:	211c      	movs	r1, #28
 8002e40:	187b      	adds	r3, r7, r1
 8002e42:	2280      	movs	r2, #128	@ 0x80
 8002e44:	0052      	lsls	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	187b      	adds	r3, r7, r1
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4e:	187b      	adds	r3, r7, r1
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8002e5a:	187b      	adds	r3, r7, r1
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPL_pwm_GPIO_Port, &GPIO_InitStruct);
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002e64:	0019      	movs	r1, r3
 8002e66:	0010      	movs	r0, r2
 8002e68:	f001 fe72 	bl	8004b50 <HAL_GPIO_Init>
}
 8002e6c:	e029      	b.n	8002ec2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM17)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1a      	ldr	r2, [pc, #104]	@ (8002edc <HAL_TIM_MspPostInit+0x188>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d124      	bne.n	8002ec2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e78:	4b14      	ldr	r3, [pc, #80]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002e7e:	2180      	movs	r1, #128	@ 0x80
 8002e80:	02c9      	lsls	r1, r1, #11
 8002e82:	430a      	orrs	r2, r1
 8002e84:	615a      	str	r2, [r3, #20]
 8002e86:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <HAL_TIM_MspPostInit+0x178>)
 8002e88:	695a      	ldr	r2, [r3, #20]
 8002e8a:	2380      	movs	r3, #128	@ 0x80
 8002e8c:	02db      	lsls	r3, r3, #11
 8002e8e:	4013      	ands	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPR_pwm_Pin;
 8002e94:	211c      	movs	r1, #28
 8002e96:	187b      	adds	r3, r7, r1
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	0092      	lsls	r2, r2, #2
 8002e9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	187b      	adds	r3, r7, r1
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	2200      	movs	r2, #0
 8002eae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8002eb0:	187b      	adds	r3, r7, r1
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPR_pwm_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	4a05      	ldr	r2, [pc, #20]	@ (8002ed0 <HAL_TIM_MspPostInit+0x17c>)
 8002eba:	0019      	movs	r1, r3
 8002ebc:	0010      	movs	r0, r2
 8002ebe:	f001 fe47 	bl	8004b50 <HAL_GPIO_Init>
}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b00d      	add	sp, #52	@ 0x34
 8002ec8:	bd90      	pop	{r4, r7, pc}
 8002eca:	46c0      	nop			@ (mov r8, r8)
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	48000400 	.word	0x48000400
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40014400 	.word	0x40014400
 8002edc:	40014800 	.word	0x40014800

08002ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ee4:	46c0      	nop			@ (mov r8, r8)
 8002ee6:	e7fd      	b.n	8002ee4 <NMI_Handler+0x4>

08002ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	e7fd      	b.n	8002eec <HardFault_Handler+0x4>

08002ef0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f08:	f000 f8c4 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f0c:	46c0      	nop			@ (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <DMA1_Channel1_IRQHandler+0x14>)
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f001 fd2e 	bl	800497c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	46c0      	nop			@ (mov r8, r8)
 8002f28:	200000b4 	.word	0x200000b4

08002f2c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f30:	4b03      	ldr	r3, [pc, #12]	@ (8002f40 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002f32:	0018      	movs	r0, r3
 8002f34:	f002 ff06 	bl	8005d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002f38:	46c0      	nop			@ (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	20000184 	.word	0x20000184

08002f44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f48:	4b03      	ldr	r3, [pc, #12]	@ (8002f58 <TIM1_CC_IRQHandler+0x14>)
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	f002 fefa 	bl	8005d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	20000184 	.word	0x20000184

08002f5c <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <CEC_CAN_IRQHandler+0x14>)
 8002f62:	0018      	movs	r0, r3
 8002f64:	f001 f969 	bl	800423a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	200000f8 	.word	0x200000f8

08002f74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002f78:	46c0      	nop			@ (mov r8, r8)
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f80:	4813      	ldr	r0, [pc, #76]	@ (8002fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f82:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f84:	f7ff fff6 	bl	8002f74 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002f88:	4812      	ldr	r0, [pc, #72]	@ (8002fd4 <LoopForever+0x6>)
    LDR R1, [R0]
 8002f8a:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002f8c:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8002f8e:	4a12      	ldr	r2, [pc, #72]	@ (8002fd8 <LoopForever+0xa>)
    CMP R1, R2
 8002f90:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8002f92:	d105      	bne.n	8002fa0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002f94:	4811      	ldr	r0, [pc, #68]	@ (8002fdc <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002f96:	4912      	ldr	r1, [pc, #72]	@ (8002fe0 <LoopForever+0x12>)
    STR R1, [R0]
 8002f98:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002f9a:	4812      	ldr	r0, [pc, #72]	@ (8002fe4 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002f9c:	4912      	ldr	r1, [pc, #72]	@ (8002fe8 <LoopForever+0x1a>)
    STR R1, [R0]
 8002f9e:	6001      	str	r1, [r0, #0]

08002fa0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fa0:	4812      	ldr	r0, [pc, #72]	@ (8002fec <LoopForever+0x1e>)
  ldr r1, =_edata
 8002fa2:	4913      	ldr	r1, [pc, #76]	@ (8002ff0 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002fa4:	4a13      	ldr	r2, [pc, #76]	@ (8002ff4 <LoopForever+0x26>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fa8:	e002      	b.n	8002fb0 <LoopCopyDataInit>

08002faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fae:	3304      	adds	r3, #4

08002fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb4:	d3f9      	bcc.n	8002faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fb6:	4a10      	ldr	r2, [pc, #64]	@ (8002ff8 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002fb8:	4c10      	ldr	r4, [pc, #64]	@ (8002ffc <LoopForever+0x2e>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fbc:	e001      	b.n	8002fc2 <LoopFillZerobss>

08002fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc0:	3204      	adds	r2, #4

08002fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc4:	d3fb      	bcc.n	8002fbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002fc6:	f003 fc3f 	bl	8006848 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002fca:	f7fe fe33 	bl	8001c34 <main>

08002fce <LoopForever>:

LoopForever:
    b LoopForever
 8002fce:	e7fe      	b.n	8002fce <LoopForever>
  ldr   r0, =_estack
 8002fd0:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002fd4:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002fd8:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002fdc:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002fe0:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002fe4:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002fe8:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8002ff4:	080068e0 	.word	0x080068e0
  ldr r2, =_sbss
 8002ff8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8002ffc:	20000424 	.word	0x20000424

08003000 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC1_IRQHandler>
	...

08003004 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003008:	4b07      	ldr	r3, [pc, #28]	@ (8003028 <HAL_Init+0x24>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <HAL_Init+0x24>)
 800300e:	2110      	movs	r1, #16
 8003010:	430a      	orrs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003014:	2003      	movs	r0, #3
 8003016:	f000 f809 	bl	800302c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800301a:	f7ff fcad 	bl	8002978 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	0018      	movs	r0, r3
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	40022000 	.word	0x40022000

0800302c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003034:	4b14      	ldr	r3, [pc, #80]	@ (8003088 <HAL_InitTick+0x5c>)
 8003036:	681c      	ldr	r4, [r3, #0]
 8003038:	4b14      	ldr	r3, [pc, #80]	@ (800308c <HAL_InitTick+0x60>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	0019      	movs	r1, r3
 800303e:	23fa      	movs	r3, #250	@ 0xfa
 8003040:	0098      	lsls	r0, r3, #2
 8003042:	f7fd f861 	bl	8000108 <__udivsi3>
 8003046:	0003      	movs	r3, r0
 8003048:	0019      	movs	r1, r3
 800304a:	0020      	movs	r0, r4
 800304c:	f7fd f85c 	bl	8000108 <__udivsi3>
 8003050:	0003      	movs	r3, r0
 8003052:	0018      	movs	r0, r3
 8003054:	f001 fbd7 	bl	8004806 <HAL_SYSTICK_Config>
 8003058:	1e03      	subs	r3, r0, #0
 800305a:	d001      	beq.n	8003060 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e00f      	b.n	8003080 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b03      	cmp	r3, #3
 8003064:	d80b      	bhi.n	800307e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	2301      	movs	r3, #1
 800306a:	425b      	negs	r3, r3
 800306c:	2200      	movs	r2, #0
 800306e:	0018      	movs	r0, r3
 8003070:	f001 fba4 	bl	80047bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_InitTick+0x64>)
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	0018      	movs	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	b003      	add	sp, #12
 8003086:	bd90      	pop	{r4, r7, pc}
 8003088:	2000004c 	.word	0x2000004c
 800308c:	20000054 	.word	0x20000054
 8003090:	20000050 	.word	0x20000050

08003094 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_IncTick+0x1c>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	001a      	movs	r2, r3
 800309e:	4b05      	ldr	r3, [pc, #20]	@ (80030b4 <HAL_IncTick+0x20>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	18d2      	adds	r2, r2, r3
 80030a4:	4b03      	ldr	r3, [pc, #12]	@ (80030b4 <HAL_IncTick+0x20>)
 80030a6:	601a      	str	r2, [r3, #0]
}
 80030a8:	46c0      	nop			@ (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	46c0      	nop			@ (mov r8, r8)
 80030b0:	20000054 	.word	0x20000054
 80030b4:	20000420 	.word	0x20000420

080030b8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  return uwTick;
 80030bc:	4b02      	ldr	r3, [pc, #8]	@ (80030c8 <HAL_GetTick+0x10>)
 80030be:	681b      	ldr	r3, [r3, #0]
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			@ (mov r8, r8)
 80030c8:	20000420 	.word	0x20000420

080030cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030d4:	230f      	movs	r3, #15
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e125      	b.n	8003336 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10a      	bne.n	8003108 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2234      	movs	r2, #52	@ 0x34
 80030fc:	2100      	movs	r1, #0
 80030fe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	0018      	movs	r0, r3
 8003104:	f7ff fc5c 	bl	80029c0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	2210      	movs	r2, #16
 800310e:	4013      	ands	r3, r2
 8003110:	d000      	beq.n	8003114 <HAL_ADC_Init+0x48>
 8003112:	e103      	b.n	800331c <HAL_ADC_Init+0x250>
 8003114:	230f      	movs	r3, #15
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d000      	beq.n	8003120 <HAL_ADC_Init+0x54>
 800311e:	e0fd      	b.n	800331c <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	2204      	movs	r2, #4
 8003128:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800312a:	d000      	beq.n	800312e <HAL_ADC_Init+0x62>
 800312c:	e0f6      	b.n	800331c <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003132:	4a83      	ldr	r2, [pc, #524]	@ (8003340 <HAL_ADC_Init+0x274>)
 8003134:	4013      	ands	r3, r2
 8003136:	2202      	movs	r2, #2
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2203      	movs	r2, #3
 8003146:	4013      	ands	r3, r2
 8003148:	2b01      	cmp	r3, #1
 800314a:	d112      	bne.n	8003172 <HAL_ADC_Init+0xa6>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2201      	movs	r2, #1
 8003154:	4013      	ands	r3, r2
 8003156:	2b01      	cmp	r3, #1
 8003158:	d009      	beq.n	800316e <HAL_ADC_Init+0xa2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68da      	ldr	r2, [r3, #12]
 8003160:	2380      	movs	r3, #128	@ 0x80
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	401a      	ands	r2, r3
 8003166:	2380      	movs	r3, #128	@ 0x80
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	429a      	cmp	r2, r3
 800316c:	d101      	bne.n	8003172 <HAL_ADC_Init+0xa6>
 800316e:	2301      	movs	r3, #1
 8003170:	e000      	b.n	8003174 <HAL_ADC_Init+0xa8>
 8003172:	2300      	movs	r3, #0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d116      	bne.n	80031a6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	2218      	movs	r2, #24
 8003180:	4393      	bics	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	0899      	lsrs	r1, r3, #2
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4964      	ldr	r1, [pc, #400]	@ (8003344 <HAL_ADC_Init+0x278>)
 80031b2:	400a      	ands	r2, r1
 80031b4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	7e1b      	ldrb	r3, [r3, #24]
 80031ba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	7e5b      	ldrb	r3, [r3, #25]
 80031c0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	7e9b      	ldrb	r3, [r3, #26]
 80031c8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80031ca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d002      	beq.n	80031da <HAL_ADC_Init+0x10e>
 80031d4:	2380      	movs	r3, #128	@ 0x80
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	e000      	b.n	80031dc <HAL_ADC_Init+0x110>
 80031da:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80031dc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80031e2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_Init+0x124>
 80031ec:	2304      	movs	r3, #4
 80031ee:	e000      	b.n	80031f2 <HAL_ADC_Init+0x126>
 80031f0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80031f2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2124      	movs	r1, #36	@ 0x24
 80031f8:	5c5b      	ldrb	r3, [r3, r1]
 80031fa:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80031fc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4313      	orrs	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7edb      	ldrb	r3, [r3, #27]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d115      	bne.n	8003238 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	7e9b      	ldrb	r3, [r3, #26]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d105      	bne.n	8003220 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2280      	movs	r2, #128	@ 0x80
 8003218:	0252      	lsls	r2, r2, #9
 800321a:	4313      	orrs	r3, r2
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	e00b      	b.n	8003238 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	2220      	movs	r2, #32
 8003226:	431a      	orrs	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003230:	2201      	movs	r2, #1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	69da      	ldr	r2, [r3, #28]
 800323c:	23c2      	movs	r3, #194	@ 0xc2
 800323e:	33ff      	adds	r3, #255	@ 0xff
 8003240:	429a      	cmp	r2, r3
 8003242:	d007      	beq.n	8003254 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800324c:	4313      	orrs	r3, r2
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	4313      	orrs	r3, r2
 8003252:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68d9      	ldr	r1, [r3, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	430a      	orrs	r2, r1
 8003262:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003268:	2380      	movs	r3, #128	@ 0x80
 800326a:	055b      	lsls	r3, r3, #21
 800326c:	429a      	cmp	r2, r3
 800326e:	d01b      	beq.n	80032a8 <HAL_ADC_Init+0x1dc>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	2b01      	cmp	r3, #1
 8003276:	d017      	beq.n	80032a8 <HAL_ADC_Init+0x1dc>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	2b02      	cmp	r3, #2
 800327e:	d013      	beq.n	80032a8 <HAL_ADC_Init+0x1dc>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	2b03      	cmp	r3, #3
 8003286:	d00f      	beq.n	80032a8 <HAL_ADC_Init+0x1dc>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	2b04      	cmp	r3, #4
 800328e:	d00b      	beq.n	80032a8 <HAL_ADC_Init+0x1dc>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	2b05      	cmp	r3, #5
 8003296:	d007      	beq.n	80032a8 <HAL_ADC_Init+0x1dc>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	2b06      	cmp	r3, #6
 800329e:	d003      	beq.n	80032a8 <HAL_ADC_Init+0x1dc>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	d112      	bne.n	80032ce <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	2107      	movs	r1, #7
 80032b4:	438a      	bics	r2, r1
 80032b6:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6959      	ldr	r1, [r3, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	2207      	movs	r2, #7
 80032c4:	401a      	ands	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003348 <HAL_ADC_Init+0x27c>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d10b      	bne.n	80032f6 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032e8:	2203      	movs	r2, #3
 80032ea:	4393      	bics	r3, r2
 80032ec:	2201      	movs	r2, #1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80032f4:	e01c      	b.n	8003330 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fa:	2212      	movs	r2, #18
 80032fc:	4393      	bics	r3, r2
 80032fe:	2210      	movs	r2, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330a:	2201      	movs	r2, #1
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003312:	230f      	movs	r3, #15
 8003314:	18fb      	adds	r3, r7, r3
 8003316:	2201      	movs	r2, #1
 8003318:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800331a:	e009      	b.n	8003330 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003320:	2210      	movs	r2, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003328:	230f      	movs	r3, #15
 800332a:	18fb      	adds	r3, r7, r3
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003330:	230f      	movs	r3, #15
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	781b      	ldrb	r3, [r3, #0]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b004      	add	sp, #16
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	fffffefd 	.word	0xfffffefd
 8003344:	fffe0219 	.word	0xfffe0219
 8003348:	833fffe7 	.word	0x833fffe7

0800334c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800334c:	b590      	push	{r4, r7, lr}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003354:	230f      	movs	r3, #15
 8003356:	18fb      	adds	r3, r7, r3
 8003358:	2200      	movs	r2, #0
 800335a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2204      	movs	r2, #4
 8003364:	4013      	ands	r3, r2
 8003366:	d156      	bne.n	8003416 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2234      	movs	r2, #52	@ 0x34
 800336c:	5c9b      	ldrb	r3, [r3, r2]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d101      	bne.n	8003376 <HAL_ADC_Start_IT+0x2a>
 8003372:	2302      	movs	r3, #2
 8003374:	e056      	b.n	8003424 <HAL_ADC_Start_IT+0xd8>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2234      	movs	r2, #52	@ 0x34
 800337a:	2101      	movs	r1, #1
 800337c:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7e5b      	ldrb	r3, [r3, #25]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d007      	beq.n	8003396 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003386:	230f      	movs	r3, #15
 8003388:	18fc      	adds	r4, r7, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0018      	movs	r0, r3
 800338e:	f000 f9ef 	bl	8003770 <ADC_Enable>
 8003392:	0003      	movs	r3, r0
 8003394:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003396:	230f      	movs	r3, #15
 8003398:	18fb      	adds	r3, r7, r3
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d13e      	bne.n	800341e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a4:	4a21      	ldr	r2, [pc, #132]	@ (800342c <HAL_ADC_Start_IT+0xe0>)
 80033a6:	4013      	ands	r3, r2
 80033a8:	2280      	movs	r2, #128	@ 0x80
 80033aa:	0052      	lsls	r2, r2, #1
 80033ac:	431a      	orrs	r2, r3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2234      	movs	r2, #52	@ 0x34
 80033bc:	2100      	movs	r1, #0
 80033be:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	221c      	movs	r2, #28
 80033c6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d110      	bne.n	80033f2 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2104      	movs	r1, #4
 80033dc:	438a      	bics	r2, r1
 80033de:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2118      	movs	r1, #24
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
          break;
 80033f0:	e008      	b.n	8003404 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	211c      	movs	r1, #28
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]
          break;
 8003402:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2104      	movs	r1, #4
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e003      	b.n	800341e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003416:	230f      	movs	r3, #15
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	2202      	movs	r2, #2
 800341c:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800341e:	230f      	movs	r3, #15
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	781b      	ldrb	r3, [r3, #0]
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	b005      	add	sp, #20
 800342a:	bd90      	pop	{r4, r7, pc}
 800342c:	fffff0fe 	.word	0xfffff0fe

08003430 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003430:	b590      	push	{r4, r7, lr}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800343c:	2317      	movs	r3, #23
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2200      	movs	r2, #0
 8003442:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2204      	movs	r2, #4
 800344c:	4013      	ands	r3, r2
 800344e:	d15e      	bne.n	800350e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2234      	movs	r2, #52	@ 0x34
 8003454:	5c9b      	ldrb	r3, [r3, r2]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d101      	bne.n	800345e <HAL_ADC_Start_DMA+0x2e>
 800345a:	2302      	movs	r3, #2
 800345c:	e05e      	b.n	800351c <HAL_ADC_Start_DMA+0xec>
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2234      	movs	r2, #52	@ 0x34
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	7e5b      	ldrb	r3, [r3, #25]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d007      	beq.n	800347e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800346e:	2317      	movs	r3, #23
 8003470:	18fc      	adds	r4, r7, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	0018      	movs	r0, r3
 8003476:	f000 f97b 	bl	8003770 <ADC_Enable>
 800347a:	0003      	movs	r3, r0
 800347c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800347e:	2317      	movs	r3, #23
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d146      	bne.n	8003516 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800348c:	4a25      	ldr	r2, [pc, #148]	@ (8003524 <HAL_ADC_Start_DMA+0xf4>)
 800348e:	4013      	ands	r3, r2
 8003490:	2280      	movs	r2, #128	@ 0x80
 8003492:	0052      	lsls	r2, r2, #1
 8003494:	431a      	orrs	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2234      	movs	r2, #52	@ 0x34
 80034a4:	2100      	movs	r1, #0
 80034a6:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	4a1e      	ldr	r2, [pc, #120]	@ (8003528 <HAL_ADC_Start_DMA+0xf8>)
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	4a1d      	ldr	r2, [pc, #116]	@ (800352c <HAL_ADC_Start_DMA+0xfc>)
 80034b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003530 <HAL_ADC_Start_DMA+0x100>)
 80034be:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	221c      	movs	r2, #28
 80034c6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2110      	movs	r1, #16
 80034d4:	430a      	orrs	r2, r1
 80034d6:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	3340      	adds	r3, #64	@ 0x40
 80034f2:	0019      	movs	r1, r3
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f001 f9da 	bl	80048b0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689a      	ldr	r2, [r3, #8]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2104      	movs	r1, #4
 8003508:	430a      	orrs	r2, r1
 800350a:	609a      	str	r2, [r3, #8]
 800350c:	e003      	b.n	8003516 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800350e:	2317      	movs	r3, #23
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	2202      	movs	r2, #2
 8003514:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003516:	2317      	movs	r3, #23
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	781b      	ldrb	r3, [r3, #0]
}
 800351c:	0018      	movs	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	b007      	add	sp, #28
 8003522:	bd90      	pop	{r4, r7, pc}
 8003524:	fffff0fe 	.word	0xfffff0fe
 8003528:	08003879 	.word	0x08003879
 800352c:	0800392d 	.word	0x0800392d
 8003530:	0800394b 	.word	0x0800394b

08003534 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800353c:	46c0      	nop			@ (mov r8, r8)
 800353e:	46bd      	mov	sp, r7
 8003540:	b002      	add	sp, #8
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800354c:	46c0      	nop			@ (mov r8, r8)
 800354e:	46bd      	mov	sp, r7
 8003550:	b002      	add	sp, #8
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800355e:	230f      	movs	r3, #15
 8003560:	18fb      	adds	r3, r7, r3
 8003562:	2200      	movs	r2, #0
 8003564:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356e:	2380      	movs	r3, #128	@ 0x80
 8003570:	055b      	lsls	r3, r3, #21
 8003572:	429a      	cmp	r2, r3
 8003574:	d011      	beq.n	800359a <HAL_ADC_ConfigChannel+0x46>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	2b01      	cmp	r3, #1
 800357c:	d00d      	beq.n	800359a <HAL_ADC_ConfigChannel+0x46>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003582:	2b02      	cmp	r3, #2
 8003584:	d009      	beq.n	800359a <HAL_ADC_ConfigChannel+0x46>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358a:	2b03      	cmp	r3, #3
 800358c:	d005      	beq.n	800359a <HAL_ADC_ConfigChannel+0x46>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003592:	2b04      	cmp	r3, #4
 8003594:	d001      	beq.n	800359a <HAL_ADC_ConfigChannel+0x46>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2234      	movs	r2, #52	@ 0x34
 800359e:	5c9b      	ldrb	r3, [r3, r2]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0x54>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e0d0      	b.n	800374a <HAL_ADC_ConfigChannel+0x1f6>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2234      	movs	r2, #52	@ 0x34
 80035ac:	2101      	movs	r1, #1
 80035ae:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2204      	movs	r2, #4
 80035b8:	4013      	ands	r3, r2
 80035ba:	d000      	beq.n	80035be <HAL_ADC_ConfigChannel+0x6a>
 80035bc:	e0b4      	b.n	8003728 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	4a64      	ldr	r2, [pc, #400]	@ (8003754 <HAL_ADC_ConfigChannel+0x200>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d100      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x76>
 80035c8:	e082      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2201      	movs	r2, #1
 80035d6:	409a      	lsls	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e4:	2380      	movs	r3, #128	@ 0x80
 80035e6:	055b      	lsls	r3, r3, #21
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d037      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d033      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	2b02      	cmp	r3, #2
 80035fa:	d02f      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003600:	2b03      	cmp	r3, #3
 8003602:	d02b      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	2b04      	cmp	r3, #4
 800360a:	d027      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	2b05      	cmp	r3, #5
 8003612:	d023      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003618:	2b06      	cmp	r3, #6
 800361a:	d01f      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	2b07      	cmp	r3, #7
 8003622:	d01b      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	2107      	movs	r1, #7
 8003630:	400b      	ands	r3, r1
 8003632:	429a      	cmp	r2, r3
 8003634:	d012      	beq.n	800365c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2107      	movs	r1, #7
 8003642:	438a      	bics	r2, r1
 8003644:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6959      	ldr	r1, [r3, #20]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2207      	movs	r2, #7
 8003652:	401a      	ands	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d007      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x120>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b11      	cmp	r3, #17
 800366a:	d003      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x120>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b12      	cmp	r3, #18
 8003672:	d163      	bne.n	800373c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003674:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <HAL_ADC_ConfigChannel+0x204>)
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2b10      	cmp	r3, #16
 800367e:	d009      	beq.n	8003694 <HAL_ADC_ConfigChannel+0x140>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b11      	cmp	r3, #17
 8003686:	d102      	bne.n	800368e <HAL_ADC_ConfigChannel+0x13a>
 8003688:	2380      	movs	r3, #128	@ 0x80
 800368a:	03db      	lsls	r3, r3, #15
 800368c:	e004      	b.n	8003698 <HAL_ADC_ConfigChannel+0x144>
 800368e:	2380      	movs	r3, #128	@ 0x80
 8003690:	045b      	lsls	r3, r3, #17
 8003692:	e001      	b.n	8003698 <HAL_ADC_ConfigChannel+0x144>
 8003694:	2380      	movs	r3, #128	@ 0x80
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	4a2f      	ldr	r2, [pc, #188]	@ (8003758 <HAL_ADC_ConfigChannel+0x204>)
 800369a:	430b      	orrs	r3, r1
 800369c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d14a      	bne.n	800373c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036a6:	4b2d      	ldr	r3, [pc, #180]	@ (800375c <HAL_ADC_ConfigChannel+0x208>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	492d      	ldr	r1, [pc, #180]	@ (8003760 <HAL_ADC_ConfigChannel+0x20c>)
 80036ac:	0018      	movs	r0, r3
 80036ae:	f7fc fd2b 	bl	8000108 <__udivsi3>
 80036b2:	0003      	movs	r3, r0
 80036b4:	001a      	movs	r2, r3
 80036b6:	0013      	movs	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036c0:	e002      	b.n	80036c8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f9      	bne.n	80036c2 <HAL_ADC_ConfigChannel+0x16e>
 80036ce:	e035      	b.n	800373c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2101      	movs	r1, #1
 80036dc:	4099      	lsls	r1, r3
 80036de:	000b      	movs	r3, r1
 80036e0:	43d9      	mvns	r1, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	400a      	ands	r2, r1
 80036e8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2b10      	cmp	r3, #16
 80036f0:	d007      	beq.n	8003702 <HAL_ADC_ConfigChannel+0x1ae>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b11      	cmp	r3, #17
 80036f8:	d003      	beq.n	8003702 <HAL_ADC_ConfigChannel+0x1ae>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b12      	cmp	r3, #18
 8003700:	d11c      	bne.n	800373c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003702:	4b15      	ldr	r3, [pc, #84]	@ (8003758 <HAL_ADC_ConfigChannel+0x204>)
 8003704:	6819      	ldr	r1, [r3, #0]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b10      	cmp	r3, #16
 800370c:	d007      	beq.n	800371e <HAL_ADC_ConfigChannel+0x1ca>
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b11      	cmp	r3, #17
 8003714:	d101      	bne.n	800371a <HAL_ADC_ConfigChannel+0x1c6>
 8003716:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <HAL_ADC_ConfigChannel+0x210>)
 8003718:	e002      	b.n	8003720 <HAL_ADC_ConfigChannel+0x1cc>
 800371a:	4b13      	ldr	r3, [pc, #76]	@ (8003768 <HAL_ADC_ConfigChannel+0x214>)
 800371c:	e000      	b.n	8003720 <HAL_ADC_ConfigChannel+0x1cc>
 800371e:	4b13      	ldr	r3, [pc, #76]	@ (800376c <HAL_ADC_ConfigChannel+0x218>)
 8003720:	4a0d      	ldr	r2, [pc, #52]	@ (8003758 <HAL_ADC_ConfigChannel+0x204>)
 8003722:	400b      	ands	r3, r1
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e009      	b.n	800373c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	2220      	movs	r2, #32
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003734:	230f      	movs	r3, #15
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2234      	movs	r2, #52	@ 0x34
 8003740:	2100      	movs	r1, #0
 8003742:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003744:	230f      	movs	r3, #15
 8003746:	18fb      	adds	r3, r7, r3
 8003748:	781b      	ldrb	r3, [r3, #0]
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b004      	add	sp, #16
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	00001001 	.word	0x00001001
 8003758:	40012708 	.word	0x40012708
 800375c:	2000004c 	.word	0x2000004c
 8003760:	000f4240 	.word	0x000f4240
 8003764:	ffbfffff 	.word	0xffbfffff
 8003768:	feffffff 	.word	0xfeffffff
 800376c:	ff7fffff 	.word	0xff7fffff

08003770 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	2203      	movs	r2, #3
 8003788:	4013      	ands	r3, r2
 800378a:	2b01      	cmp	r3, #1
 800378c:	d112      	bne.n	80037b4 <ADC_Enable+0x44>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2201      	movs	r2, #1
 8003796:	4013      	ands	r3, r2
 8003798:	2b01      	cmp	r3, #1
 800379a:	d009      	beq.n	80037b0 <ADC_Enable+0x40>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	2380      	movs	r3, #128	@ 0x80
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	401a      	ands	r2, r3
 80037a8:	2380      	movs	r3, #128	@ 0x80
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d101      	bne.n	80037b4 <ADC_Enable+0x44>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <ADC_Enable+0x46>
 80037b4:	2300      	movs	r3, #0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d152      	bne.n	8003860 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <ADC_Enable+0xfc>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	d00d      	beq.n	80037e2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ca:	2210      	movs	r2, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d6:	2201      	movs	r2, #1
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e03f      	b.n	8003862 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2101      	movs	r1, #1
 80037ee:	430a      	orrs	r2, r1
 80037f0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80037f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <ADC_Enable+0x100>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	491f      	ldr	r1, [pc, #124]	@ (8003874 <ADC_Enable+0x104>)
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7fc fc85 	bl	8000108 <__udivsi3>
 80037fe:	0003      	movs	r3, r0
 8003800:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003802:	e002      	b.n	800380a <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	3b01      	subs	r3, #1
 8003808:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f9      	bne.n	8003804 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003810:	f7ff fc52 	bl	80030b8 <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003818:	e01b      	b.n	8003852 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800381a:	f7ff fc4d 	bl	80030b8 <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d914      	bls.n	8003852 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2201      	movs	r2, #1
 8003830:	4013      	ands	r3, r2
 8003832:	2b01      	cmp	r3, #1
 8003834:	d00d      	beq.n	8003852 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800383a:	2210      	movs	r2, #16
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	2201      	movs	r2, #1
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e007      	b.n	8003862 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2201      	movs	r2, #1
 800385a:	4013      	ands	r3, r2
 800385c:	2b01      	cmp	r3, #1
 800385e:	d1dc      	bne.n	800381a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b004      	add	sp, #16
 8003868:	bd80      	pop	{r7, pc}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	80000017 	.word	0x80000017
 8003870:	2000004c 	.word	0x2000004c
 8003874:	000f4240 	.word	0x000f4240

08003878 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388a:	2250      	movs	r2, #80	@ 0x50
 800388c:	4013      	ands	r3, r2
 800388e:	d140      	bne.n	8003912 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003894:	2280      	movs	r2, #128	@ 0x80
 8003896:	0092      	lsls	r2, r2, #2
 8003898:	431a      	orrs	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68da      	ldr	r2, [r3, #12]
 80038a4:	23c0      	movs	r3, #192	@ 0xc0
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	4013      	ands	r3, r2
 80038aa:	d12d      	bne.n	8003908 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d129      	bne.n	8003908 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2208      	movs	r2, #8
 80038bc:	4013      	ands	r3, r2
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d122      	bne.n	8003908 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2204      	movs	r2, #4
 80038ca:	4013      	ands	r3, r2
 80038cc:	d110      	bne.n	80038f0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685a      	ldr	r2, [r3, #4]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	210c      	movs	r1, #12
 80038da:	438a      	bics	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	4a11      	ldr	r2, [pc, #68]	@ (8003928 <ADC_DMAConvCplt+0xb0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	2201      	movs	r2, #1
 80038e8:	431a      	orrs	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80038ee:	e00b      	b.n	8003908 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f4:	2220      	movs	r2, #32
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003900:	2201      	movs	r2, #1
 8003902:	431a      	orrs	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	0018      	movs	r0, r3
 800390c:	f7fe fff4 	bl	80028f8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003910:	e005      	b.n	800391e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	0010      	movs	r0, r2
 800391c:	4798      	blx	r3
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b004      	add	sp, #16
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	fffffefe 	.word	0xfffffefe

0800392c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	0018      	movs	r0, r3
 800393e:	f7ff fdf9 	bl	8003534 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b004      	add	sp, #16
 8003948:	bd80      	pop	{r7, pc}

0800394a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395c:	2240      	movs	r2, #64	@ 0x40
 800395e:	431a      	orrs	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003968:	2204      	movs	r2, #4
 800396a:	431a      	orrs	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	0018      	movs	r0, r3
 8003974:	f7ff fde6 	bl	8003544 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0f0      	b.n	8003b74 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d103      	bne.n	80039a6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7ff f89d 	bl	8002ae0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2101      	movs	r1, #1
 80039b2:	430a      	orrs	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039b6:	f7ff fb7f 	bl	80030b8 <HAL_GetTick>
 80039ba:	0003      	movs	r3, r0
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039be:	e013      	b.n	80039e8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80039c0:	f7ff fb7a 	bl	80030b8 <HAL_GetTick>
 80039c4:	0002      	movs	r2, r0
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b0a      	cmp	r3, #10
 80039cc:	d90c      	bls.n	80039e8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	2280      	movs	r2, #128	@ 0x80
 80039d4:	0292      	lsls	r2, r2, #10
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	2105      	movs	r1, #5
 80039e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0c5      	b.n	8003b74 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	4013      	ands	r3, r2
 80039f2:	d0e5      	beq.n	80039c0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2102      	movs	r1, #2
 8003a00:	438a      	bics	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a04:	f7ff fb58 	bl	80030b8 <HAL_GetTick>
 8003a08:	0003      	movs	r3, r0
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a0c:	e013      	b.n	8003a36 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003a0e:	f7ff fb53 	bl	80030b8 <HAL_GetTick>
 8003a12:	0002      	movs	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b0a      	cmp	r3, #10
 8003a1a:	d90c      	bls.n	8003a36 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a20:	2280      	movs	r2, #128	@ 0x80
 8003a22:	0292      	lsls	r2, r2, #10
 8003a24:	431a      	orrs	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	2105      	movs	r1, #5
 8003a30:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e09e      	b.n	8003b74 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d1e5      	bne.n	8003a0e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	7e1b      	ldrb	r3, [r3, #24]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d108      	bne.n	8003a5c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2180      	movs	r1, #128	@ 0x80
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e007      	b.n	8003a6c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2180      	movs	r1, #128	@ 0x80
 8003a68:	438a      	bics	r2, r1
 8003a6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7e5b      	ldrb	r3, [r3, #25]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d108      	bne.n	8003a86 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2140      	movs	r1, #64	@ 0x40
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e007      	b.n	8003a96 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2140      	movs	r1, #64	@ 0x40
 8003a92:	438a      	bics	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	7e9b      	ldrb	r3, [r3, #26]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d108      	bne.n	8003ab0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2120      	movs	r1, #32
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	e007      	b.n	8003ac0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2120      	movs	r1, #32
 8003abc:	438a      	bics	r2, r1
 8003abe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	7edb      	ldrb	r3, [r3, #27]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2110      	movs	r1, #16
 8003ad4:	438a      	bics	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
 8003ad8:	e007      	b.n	8003aea <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2110      	movs	r1, #16
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	7f1b      	ldrb	r3, [r3, #28]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d108      	bne.n	8003b04 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2108      	movs	r1, #8
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	e007      	b.n	8003b14 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2108      	movs	r1, #8
 8003b10:	438a      	bics	r2, r1
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	7f5b      	ldrb	r3, [r3, #29]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d108      	bne.n	8003b2e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	2104      	movs	r1, #4
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	601a      	str	r2, [r3, #0]
 8003b2c:	e007      	b.n	8003b3e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2104      	movs	r1, #4
 8003b3a:	438a      	bics	r2, r1
 8003b3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	0011      	movs	r1, r2
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	1e5a      	subs	r2, r3, #1
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b004      	add	sp, #16
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b8c:	2013      	movs	r0, #19
 8003b8e:	183b      	adds	r3, r7, r0
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	2120      	movs	r1, #32
 8003b94:	5c52      	ldrb	r2, [r2, r1]
 8003b96:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003b98:	0002      	movs	r2, r0
 8003b9a:	18bb      	adds	r3, r7, r2
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d004      	beq.n	8003bac <HAL_CAN_ConfigFilter+0x30>
 8003ba2:	18bb      	adds	r3, r7, r2
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d000      	beq.n	8003bac <HAL_CAN_ConfigFilter+0x30>
 8003baa:	e0cd      	b.n	8003d48 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	2380      	movs	r3, #128	@ 0x80
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	58d3      	ldr	r3, [r2, r3]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	0011      	movs	r1, r2
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	2380      	movs	r3, #128	@ 0x80
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	221f      	movs	r2, #31
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2201      	movs	r2, #1
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	0013      	movs	r3, r2
 8003bd0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	2387      	movs	r3, #135	@ 0x87
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	58d3      	ldr	r3, [r2, r3]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	43d2      	mvns	r2, r2
 8003bde:	401a      	ands	r2, r3
 8003be0:	0011      	movs	r1, r2
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	2387      	movs	r3, #135	@ 0x87
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	69db      	ldr	r3, [r3, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d129      	bne.n	8003c46 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	2383      	movs	r3, #131	@ 0x83
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	58d3      	ldr	r3, [r2, r3]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	43d2      	mvns	r2, r2
 8003bfe:	401a      	ands	r2, r3
 8003c00:	0011      	movs	r1, r2
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	2383      	movs	r3, #131	@ 0x83
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	041b      	lsls	r3, r3, #16
 8003c16:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003c1c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3248      	adds	r2, #72	@ 0x48
 8003c22:	00d2      	lsls	r2, r2, #3
 8003c24:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	041b      	lsls	r3, r3, #16
 8003c32:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c3a:	6979      	ldr	r1, [r7, #20]
 8003c3c:	3348      	adds	r3, #72	@ 0x48
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	18cb      	adds	r3, r1, r3
 8003c42:	3304      	adds	r3, #4
 8003c44:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d128      	bne.n	8003ca0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	2383      	movs	r3, #131	@ 0x83
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	58d2      	ldr	r2, [r2, r3]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	0011      	movs	r1, r2
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	2383      	movs	r3, #131	@ 0x83
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	041b      	lsls	r3, r3, #16
 8003c70:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003c76:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	3248      	adds	r2, #72	@ 0x48
 8003c7c:	00d2      	lsls	r2, r2, #3
 8003c7e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	041b      	lsls	r3, r3, #16
 8003c8c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003c92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003c94:	6979      	ldr	r1, [r7, #20]
 8003c96:	3348      	adds	r3, #72	@ 0x48
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	18cb      	adds	r3, r1, r3
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10c      	bne.n	8003cc2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	2381      	movs	r3, #129	@ 0x81
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	58d3      	ldr	r3, [r2, r3]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	43d2      	mvns	r2, r2
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	0011      	movs	r1, r2
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	2381      	movs	r3, #129	@ 0x81
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	50d1      	str	r1, [r2, r3]
 8003cc0:	e00a      	b.n	8003cd8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	2381      	movs	r3, #129	@ 0x81
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	58d2      	ldr	r2, [r2, r3]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	0011      	movs	r1, r2
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	2381      	movs	r3, #129	@ 0x81
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10c      	bne.n	8003cfa <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	2385      	movs	r3, #133	@ 0x85
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	58d3      	ldr	r3, [r2, r3]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	43d2      	mvns	r2, r2
 8003cec:	401a      	ands	r2, r3
 8003cee:	0011      	movs	r1, r2
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	2385      	movs	r3, #133	@ 0x85
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	50d1      	str	r1, [r2, r3]
 8003cf8:	e00a      	b.n	8003d10 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	2385      	movs	r3, #133	@ 0x85
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	58d2      	ldr	r2, [r2, r3]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	431a      	orrs	r2, r3
 8003d06:	0011      	movs	r1, r2
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	2385      	movs	r3, #133	@ 0x85
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10a      	bne.n	8003d2e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003d18:	697a      	ldr	r2, [r7, #20]
 8003d1a:	2387      	movs	r3, #135	@ 0x87
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	58d2      	ldr	r2, [r2, r3]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	0011      	movs	r1, r2
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	2387      	movs	r3, #135	@ 0x87
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	2380      	movs	r3, #128	@ 0x80
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	58d3      	ldr	r3, [r2, r3]
 8003d36:	2201      	movs	r2, #1
 8003d38:	4393      	bics	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	2380      	movs	r3, #128	@ 0x80
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e007      	b.n	8003d58 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	2280      	movs	r2, #128	@ 0x80
 8003d4e:	02d2      	lsls	r2, r2, #11
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
  }
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b006      	add	sp, #24
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	5c9b      	ldrb	r3, [r3, r2]
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d12f      	bne.n	8003dd4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	2102      	movs	r1, #2
 8003d7a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d8c:	f7ff f994 	bl	80030b8 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003d94:	e013      	b.n	8003dbe <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003d96:	f7ff f98f 	bl	80030b8 <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b0a      	cmp	r3, #10
 8003da2:	d90c      	bls.n	8003dbe <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da8:	2280      	movs	r2, #128	@ 0x80
 8003daa:	0292      	lsls	r2, r2, #10
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2220      	movs	r2, #32
 8003db6:	2105      	movs	r1, #5
 8003db8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e012      	b.n	8003de4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	d1e5      	bne.n	8003d96 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	e007      	b.n	8003de4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd8:	2280      	movs	r2, #128	@ 0x80
 8003dda:	0312      	lsls	r2, r2, #12
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
  }
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b004      	add	sp, #16
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003dfa:	201f      	movs	r0, #31
 8003dfc:	183b      	adds	r3, r7, r0
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	2120      	movs	r1, #32
 8003e02:	5c52      	ldrb	r2, [r2, r1]
 8003e04:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e0e:	183b      	adds	r3, r7, r0
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d004      	beq.n	8003e20 <HAL_CAN_AddTxMessage+0x34>
 8003e16:	183b      	adds	r3, r7, r0
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d000      	beq.n	8003e20 <HAL_CAN_AddTxMessage+0x34>
 8003e1e:	e0ab      	b.n	8003f78 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	04db      	lsls	r3, r3, #19
 8003e26:	4013      	ands	r3, r2
 8003e28:	d10a      	bne.n	8003e40 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	051b      	lsls	r3, r3, #20
 8003e30:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003e32:	d105      	bne.n	8003e40 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	2380      	movs	r3, #128	@ 0x80
 8003e38:	055b      	lsls	r3, r3, #21
 8003e3a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003e3c:	d100      	bne.n	8003e40 <HAL_CAN_AddTxMessage+0x54>
 8003e3e:	e092      	b.n	8003f66 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	0e1b      	lsrs	r3, r3, #24
 8003e44:	2203      	movs	r2, #3
 8003e46:	4013      	ands	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10c      	bne.n	8003e76 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	697a      	ldr	r2, [r7, #20]
 8003e6e:	3218      	adds	r2, #24
 8003e70:	0112      	lsls	r2, r2, #4
 8003e72:	50d1      	str	r1, [r2, r3]
 8003e74:	e00f      	b.n	8003e96 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e80:	431a      	orrs	r2, r3
 8003e82:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8003e8c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	3218      	adds	r2, #24
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6819      	ldr	r1, [r3, #0]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3318      	adds	r3, #24
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	18cb      	adds	r3, r1, r3
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	7d1b      	ldrb	r3, [r3, #20]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d112      	bne.n	8003ed8 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3318      	adds	r3, #24
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	18d3      	adds	r3, r2, r3
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6819      	ldr	r1, [r3, #0]
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	3318      	adds	r3, #24
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	18cb      	adds	r3, r1, r3
 8003ed4:	3304      	adds	r3, #4
 8003ed6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3307      	adds	r3, #7
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	061a      	lsls	r2, r3, #24
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3306      	adds	r3, #6
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	3305      	adds	r3, #5
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	0019      	movs	r1, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	23c6      	movs	r3, #198	@ 0xc6
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	0109      	lsls	r1, r1, #4
 8003f0a:	1841      	adds	r1, r0, r1
 8003f0c:	18cb      	adds	r3, r1, r3
 8003f0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	3303      	adds	r3, #3
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	061a      	lsls	r2, r3, #24
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	431a      	orrs	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	3301      	adds	r3, #1
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	0019      	movs	r1, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	6979      	ldr	r1, [r7, #20]
 8003f3a:	23c4      	movs	r3, #196	@ 0xc4
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	0109      	lsls	r1, r1, #4
 8003f40:	1841      	adds	r1, r0, r1
 8003f42:	18cb      	adds	r3, r1, r3
 8003f44:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	3218      	adds	r2, #24
 8003f4e:	0112      	lsls	r2, r2, #4
 8003f50:	58d2      	ldr	r2, [r2, r3]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2101      	movs	r1, #1
 8003f58:	4311      	orrs	r1, r2
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	3218      	adds	r2, #24
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e010      	b.n	8003f88 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	2280      	movs	r2, #128	@ 0x80
 8003f6c:	0392      	lsls	r2, r2, #14
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e007      	b.n	8003f88 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7c:	2280      	movs	r2, #128	@ 0x80
 8003f7e:	02d2      	lsls	r2, r2, #11
 8003f80:	431a      	orrs	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
  }
}
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b008      	add	sp, #32
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b086      	sub	sp, #24
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003f9e:	2017      	movs	r0, #23
 8003fa0:	183b      	adds	r3, r7, r0
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	5c52      	ldrb	r2, [r2, r1]
 8003fa8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003faa:	0002      	movs	r2, r0
 8003fac:	18bb      	adds	r3, r7, r2
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d004      	beq.n	8003fbe <HAL_CAN_GetRxMessage+0x2e>
 8003fb4:	18bb      	adds	r3, r7, r2
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d000      	beq.n	8003fbe <HAL_CAN_GetRxMessage+0x2e>
 8003fbc:	e107      	b.n	80041ce <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2203      	movs	r2, #3
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d117      	bne.n	8004000 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd4:	2280      	movs	r2, #128	@ 0x80
 8003fd6:	0392      	lsls	r2, r2, #14
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0fd      	b.n	80041de <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	2203      	movs	r2, #3
 8003fea:	4013      	ands	r3, r2
 8003fec:	d108      	bne.n	8004000 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	2280      	movs	r2, #128	@ 0x80
 8003ff4:	0392      	lsls	r2, r2, #14
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0ee      	b.n	80041de <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	321b      	adds	r2, #27
 8004008:	0112      	lsls	r2, r2, #4
 800400a:	58d3      	ldr	r3, [r2, r3]
 800400c:	2204      	movs	r2, #4
 800400e:	401a      	ands	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	321b      	adds	r2, #27
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	58d3      	ldr	r3, [r2, r3]
 8004028:	0d5b      	lsrs	r3, r3, #21
 800402a:	055b      	lsls	r3, r3, #21
 800402c:	0d5a      	lsrs	r2, r3, #21
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e00a      	b.n	800404a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	321b      	adds	r2, #27
 800403c:	0112      	lsls	r2, r2, #4
 800403e:	58d3      	ldr	r3, [r2, r3]
 8004040:	08db      	lsrs	r3, r3, #3
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	321b      	adds	r2, #27
 8004052:	0112      	lsls	r2, r2, #4
 8004054:	58d3      	ldr	r3, [r2, r3]
 8004056:	2202      	movs	r2, #2
 8004058:	401a      	ands	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	331b      	adds	r3, #27
 8004066:	011b      	lsls	r3, r3, #4
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	3304      	adds	r3, #4
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2208      	movs	r2, #8
 8004070:	4013      	ands	r3, r2
 8004072:	d003      	beq.n	800407c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2208      	movs	r2, #8
 8004078:	611a      	str	r2, [r3, #16]
 800407a:	e00b      	b.n	8004094 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	331b      	adds	r3, #27
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	18d3      	adds	r3, r2, r3
 8004088:	3304      	adds	r3, #4
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	220f      	movs	r2, #15
 800408e:	401a      	ands	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	331b      	adds	r3, #27
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	18d3      	adds	r3, r2, r3
 80040a0:	3304      	adds	r3, #4
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0a1b      	lsrs	r3, r3, #8
 80040a6:	22ff      	movs	r2, #255	@ 0xff
 80040a8:	401a      	ands	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	331b      	adds	r3, #27
 80040b6:	011b      	lsls	r3, r3, #4
 80040b8:	18d3      	adds	r3, r2, r3
 80040ba:	3304      	adds	r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	0c1b      	lsrs	r3, r3, #16
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	0c1a      	lsrs	r2, r3, #16
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6819      	ldr	r1, [r3, #0]
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	23dc      	movs	r3, #220	@ 0xdc
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	188a      	adds	r2, r1, r2
 80040d6:	18d3      	adds	r3, r2, r3
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	23dc      	movs	r3, #220	@ 0xdc
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	188a      	adds	r2, r1, r2
 80040ee:	18d3      	adds	r3, r2, r3
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	0a1a      	lsrs	r2, r3, #8
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	23dc      	movs	r3, #220	@ 0xdc
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	188a      	adds	r2, r1, r2
 800410a:	18d3      	adds	r3, r2, r3
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	0c1a      	lsrs	r2, r3, #16
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	3302      	adds	r3, #2
 8004114:	b2d2      	uxtb	r2, r2
 8004116:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6819      	ldr	r1, [r3, #0]
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	23dc      	movs	r3, #220	@ 0xdc
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	0112      	lsls	r2, r2, #4
 8004124:	188a      	adds	r2, r1, r2
 8004126:	18d3      	adds	r3, r2, r3
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	0e1a      	lsrs	r2, r3, #24
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	3303      	adds	r3, #3
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6819      	ldr	r1, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	23de      	movs	r3, #222	@ 0xde
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	0112      	lsls	r2, r2, #4
 8004140:	188a      	adds	r2, r1, r2
 8004142:	18d3      	adds	r3, r2, r3
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	3304      	adds	r3, #4
 800414a:	b2d2      	uxtb	r2, r2
 800414c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	23de      	movs	r3, #222	@ 0xde
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	0112      	lsls	r2, r2, #4
 800415a:	188a      	adds	r2, r1, r2
 800415c:	18d3      	adds	r3, r2, r3
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	0a1a      	lsrs	r2, r3, #8
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	3305      	adds	r3, #5
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	68ba      	ldr	r2, [r7, #8]
 8004170:	23de      	movs	r3, #222	@ 0xde
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	0112      	lsls	r2, r2, #4
 8004176:	188a      	adds	r2, r1, r2
 8004178:	18d3      	adds	r3, r2, r3
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0c1a      	lsrs	r2, r3, #16
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	3306      	adds	r3, #6
 8004182:	b2d2      	uxtb	r2, r2
 8004184:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6819      	ldr	r1, [r3, #0]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	23de      	movs	r3, #222	@ 0xde
 800418e:	005b      	lsls	r3, r3, #1
 8004190:	0112      	lsls	r2, r2, #4
 8004192:	188a      	adds	r2, r1, r2
 8004194:	18d3      	adds	r3, r2, r3
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	0e1a      	lsrs	r2, r3, #24
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	3307      	adds	r3, #7
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d108      	bne.n	80041ba <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68da      	ldr	r2, [r3, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2120      	movs	r1, #32
 80041b4:	430a      	orrs	r2, r1
 80041b6:	60da      	str	r2, [r3, #12]
 80041b8:	e007      	b.n	80041ca <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2120      	movs	r1, #32
 80041c6:	430a      	orrs	r2, r1
 80041c8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	e007      	b.n	80041de <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d2:	2280      	movs	r2, #128	@ 0x80
 80041d4:	02d2      	lsls	r2, r2, #11
 80041d6:	431a      	orrs	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
  }
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b006      	add	sp, #24
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80041f0:	200f      	movs	r0, #15
 80041f2:	183b      	adds	r3, r7, r0
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	2120      	movs	r1, #32
 80041f8:	5c52      	ldrb	r2, [r2, r1]
 80041fa:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80041fc:	0002      	movs	r2, r0
 80041fe:	18bb      	adds	r3, r7, r2
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d003      	beq.n	800420e <HAL_CAN_ActivateNotification+0x28>
 8004206:	18bb      	adds	r3, r7, r2
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b02      	cmp	r3, #2
 800420c:	d109      	bne.n	8004222 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6959      	ldr	r1, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800421e:	2300      	movs	r3, #0
 8004220:	e007      	b.n	8004232 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004226:	2280      	movs	r2, #128	@ 0x80
 8004228:	02d2      	lsls	r2, r2, #11
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
  }
}
 8004232:	0018      	movs	r0, r3
 8004234:	46bd      	mov	sp, r7
 8004236:	b004      	add	sp, #16
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b08a      	sub	sp, #40	@ 0x28
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	695b      	ldr	r3, [r3, #20]
 800424c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	2201      	movs	r2, #1
 800427a:	4013      	ands	r3, r2
 800427c:	d100      	bne.n	8004280 <HAL_CAN_IRQHandler+0x46>
 800427e:	e084      	b.n	800438a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	2201      	movs	r2, #1
 8004284:	4013      	ands	r3, r2
 8004286:	d024      	beq.n	80042d2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2201      	movs	r2, #1
 800428e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2202      	movs	r2, #2
 8004294:	4013      	ands	r3, r2
 8004296:	d004      	beq.n	80042a2 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0018      	movs	r0, r3
 800429c:	f000 f981 	bl	80045a2 <HAL_CAN_TxMailbox0CompleteCallback>
 80042a0:	e017      	b.n	80042d2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	2204      	movs	r2, #4
 80042a6:	4013      	ands	r3, r2
 80042a8:	d005      	beq.n	80042b6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	2280      	movs	r2, #128	@ 0x80
 80042ae:	0112      	lsls	r2, r2, #4
 80042b0:	4313      	orrs	r3, r2
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80042b4:	e00d      	b.n	80042d2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2208      	movs	r2, #8
 80042ba:	4013      	ands	r3, r2
 80042bc:	d005      	beq.n	80042ca <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	2280      	movs	r2, #128	@ 0x80
 80042c2:	0152      	lsls	r2, r2, #5
 80042c4:	4313      	orrs	r3, r2
 80042c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80042c8:	e003      	b.n	80042d2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	0018      	movs	r0, r3
 80042ce:	f000 f980 	bl	80045d2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	2380      	movs	r3, #128	@ 0x80
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4013      	ands	r3, r2
 80042da:	d028      	beq.n	800432e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2280      	movs	r2, #128	@ 0x80
 80042e2:	0052      	lsls	r2, r2, #1
 80042e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80042e6:	69ba      	ldr	r2, [r7, #24]
 80042e8:	2380      	movs	r3, #128	@ 0x80
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4013      	ands	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 f95d 	bl	80045b2 <HAL_CAN_TxMailbox1CompleteCallback>
 80042f8:	e019      	b.n	800432e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	2380      	movs	r3, #128	@ 0x80
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4013      	ands	r3, r2
 8004302:	d005      	beq.n	8004310 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	2280      	movs	r2, #128	@ 0x80
 8004308:	0192      	lsls	r2, r2, #6
 800430a:	4313      	orrs	r3, r2
 800430c:	627b      	str	r3, [r7, #36]	@ 0x24
 800430e:	e00e      	b.n	800432e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	2380      	movs	r3, #128	@ 0x80
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	4013      	ands	r3, r2
 8004318:	d005      	beq.n	8004326 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	2280      	movs	r2, #128	@ 0x80
 800431e:	01d2      	lsls	r2, r2, #7
 8004320:	4313      	orrs	r3, r2
 8004322:	627b      	str	r3, [r7, #36]	@ 0x24
 8004324:	e003      	b.n	800432e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 f95a 	bl	80045e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	2380      	movs	r3, #128	@ 0x80
 8004332:	025b      	lsls	r3, r3, #9
 8004334:	4013      	ands	r3, r2
 8004336:	d028      	beq.n	800438a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2280      	movs	r2, #128	@ 0x80
 800433e:	0252      	lsls	r2, r2, #9
 8004340:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	2380      	movs	r3, #128	@ 0x80
 8004346:	029b      	lsls	r3, r3, #10
 8004348:	4013      	ands	r3, r2
 800434a:	d004      	beq.n	8004356 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	0018      	movs	r0, r3
 8004350:	f000 f937 	bl	80045c2 <HAL_CAN_TxMailbox2CompleteCallback>
 8004354:	e019      	b.n	800438a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	2380      	movs	r3, #128	@ 0x80
 800435a:	02db      	lsls	r3, r3, #11
 800435c:	4013      	ands	r3, r2
 800435e:	d005      	beq.n	800436c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	2280      	movs	r2, #128	@ 0x80
 8004364:	0212      	lsls	r2, r2, #8
 8004366:	4313      	orrs	r3, r2
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
 800436a:	e00e      	b.n	800438a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	2380      	movs	r3, #128	@ 0x80
 8004370:	031b      	lsls	r3, r3, #12
 8004372:	4013      	ands	r3, r2
 8004374:	d005      	beq.n	8004382 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004378:	2280      	movs	r2, #128	@ 0x80
 800437a:	0252      	lsls	r2, r2, #9
 800437c:	4313      	orrs	r3, r2
 800437e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004380:	e003      	b.n	800438a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	0018      	movs	r0, r3
 8004386:	f000 f934 	bl	80045f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2208      	movs	r2, #8
 800438e:	4013      	ands	r3, r2
 8004390:	d00c      	beq.n	80043ac <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2210      	movs	r2, #16
 8004396:	4013      	ands	r3, r2
 8004398:	d008      	beq.n	80043ac <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	2280      	movs	r2, #128	@ 0x80
 800439e:	0092      	lsls	r2, r2, #2
 80043a0:	4313      	orrs	r3, r2
 80043a2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2210      	movs	r2, #16
 80043aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80043ac:	6a3b      	ldr	r3, [r7, #32]
 80043ae:	2204      	movs	r2, #4
 80043b0:	4013      	ands	r3, r2
 80043b2:	d00b      	beq.n	80043cc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2208      	movs	r2, #8
 80043b8:	4013      	ands	r3, r2
 80043ba:	d007      	beq.n	80043cc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2208      	movs	r2, #8
 80043c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 f91b 	bl	8004602 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	2202      	movs	r2, #2
 80043d0:	4013      	ands	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2203      	movs	r2, #3
 80043dc:	4013      	ands	r3, r2
 80043de:	d003      	beq.n	80043e8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0018      	movs	r0, r3
 80043e4:	f7fc fe94 	bl	8001110 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2240      	movs	r2, #64	@ 0x40
 80043ec:	4013      	ands	r3, r2
 80043ee:	d00c      	beq.n	800440a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	2210      	movs	r2, #16
 80043f4:	4013      	ands	r3, r2
 80043f6:	d008      	beq.n	800440a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fa:	2280      	movs	r2, #128	@ 0x80
 80043fc:	00d2      	lsls	r2, r2, #3
 80043fe:	4313      	orrs	r3, r2
 8004400:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2210      	movs	r2, #16
 8004408:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2220      	movs	r2, #32
 800440e:	4013      	ands	r3, r2
 8004410:	d00b      	beq.n	800442a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2208      	movs	r2, #8
 8004416:	4013      	ands	r3, r2
 8004418:	d007      	beq.n	800442a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2208      	movs	r2, #8
 8004420:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	0018      	movs	r0, r3
 8004426:	f000 f8fc 	bl	8004622 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	2210      	movs	r2, #16
 800442e:	4013      	ands	r3, r2
 8004430:	d009      	beq.n	8004446 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2203      	movs	r2, #3
 800443a:	4013      	ands	r3, r2
 800443c:	d003      	beq.n	8004446 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	0018      	movs	r0, r3
 8004442:	f000 f8e6 	bl	8004612 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004446:	6a3a      	ldr	r2, [r7, #32]
 8004448:	2380      	movs	r3, #128	@ 0x80
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	4013      	ands	r3, r2
 800444e:	d00b      	beq.n	8004468 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	2210      	movs	r2, #16
 8004454:	4013      	ands	r3, r2
 8004456:	d007      	beq.n	8004468 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2210      	movs	r2, #16
 800445e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	0018      	movs	r0, r3
 8004464:	f000 f8e5 	bl	8004632 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004468:	6a3a      	ldr	r2, [r7, #32]
 800446a:	2380      	movs	r3, #128	@ 0x80
 800446c:	025b      	lsls	r3, r3, #9
 800446e:	4013      	ands	r3, r2
 8004470:	d00b      	beq.n	800448a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2208      	movs	r2, #8
 8004476:	4013      	ands	r3, r2
 8004478:	d007      	beq.n	800448a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2208      	movs	r2, #8
 8004480:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	0018      	movs	r0, r3
 8004486:	f000 f8dc 	bl	8004642 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800448a:	6a3a      	ldr	r2, [r7, #32]
 800448c:	2380      	movs	r3, #128	@ 0x80
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	4013      	ands	r3, r2
 8004492:	d100      	bne.n	8004496 <HAL_CAN_IRQHandler+0x25c>
 8004494:	e074      	b.n	8004580 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2204      	movs	r2, #4
 800449a:	4013      	ands	r3, r2
 800449c:	d100      	bne.n	80044a0 <HAL_CAN_IRQHandler+0x266>
 800449e:	e06b      	b.n	8004578 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	2380      	movs	r3, #128	@ 0x80
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4013      	ands	r3, r2
 80044a8:	d007      	beq.n	80044ba <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80044b0:	d003      	beq.n	80044ba <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	2201      	movs	r2, #1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044ba:	6a3a      	ldr	r2, [r7, #32]
 80044bc:	2380      	movs	r3, #128	@ 0x80
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4013      	ands	r3, r2
 80044c2:	d007      	beq.n	80044d4 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2202      	movs	r2, #2
 80044c8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80044ca:	d003      	beq.n	80044d4 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80044cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ce:	2202      	movs	r2, #2
 80044d0:	4313      	orrs	r3, r2
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044d4:	6a3a      	ldr	r2, [r7, #32]
 80044d6:	2380      	movs	r3, #128	@ 0x80
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	4013      	ands	r3, r2
 80044dc:	d007      	beq.n	80044ee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2204      	movs	r2, #4
 80044e2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80044e4:	d003      	beq.n	80044ee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80044e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044e8:	2204      	movs	r2, #4
 80044ea:	4313      	orrs	r3, r2
 80044ec:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044ee:	6a3a      	ldr	r2, [r7, #32]
 80044f0:	2380      	movs	r3, #128	@ 0x80
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	4013      	ands	r3, r2
 80044f6:	d03f      	beq.n	8004578 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2270      	movs	r2, #112	@ 0x70
 80044fc:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80044fe:	d03b      	beq.n	8004578 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2270      	movs	r2, #112	@ 0x70
 8004504:	4013      	ands	r3, r2
 8004506:	2b60      	cmp	r3, #96	@ 0x60
 8004508:	d027      	beq.n	800455a <HAL_CAN_IRQHandler+0x320>
 800450a:	d82c      	bhi.n	8004566 <HAL_CAN_IRQHandler+0x32c>
 800450c:	2b50      	cmp	r3, #80	@ 0x50
 800450e:	d01f      	beq.n	8004550 <HAL_CAN_IRQHandler+0x316>
 8004510:	d829      	bhi.n	8004566 <HAL_CAN_IRQHandler+0x32c>
 8004512:	2b40      	cmp	r3, #64	@ 0x40
 8004514:	d017      	beq.n	8004546 <HAL_CAN_IRQHandler+0x30c>
 8004516:	d826      	bhi.n	8004566 <HAL_CAN_IRQHandler+0x32c>
 8004518:	2b30      	cmp	r3, #48	@ 0x30
 800451a:	d00f      	beq.n	800453c <HAL_CAN_IRQHandler+0x302>
 800451c:	d823      	bhi.n	8004566 <HAL_CAN_IRQHandler+0x32c>
 800451e:	2b10      	cmp	r3, #16
 8004520:	d002      	beq.n	8004528 <HAL_CAN_IRQHandler+0x2ee>
 8004522:	2b20      	cmp	r3, #32
 8004524:	d005      	beq.n	8004532 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004526:	e01e      	b.n	8004566 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	2208      	movs	r2, #8
 800452c:	4313      	orrs	r3, r2
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004530:	e01a      	b.n	8004568 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	2210      	movs	r2, #16
 8004536:	4313      	orrs	r3, r2
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800453a:	e015      	b.n	8004568 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800453c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453e:	2220      	movs	r2, #32
 8004540:	4313      	orrs	r3, r2
 8004542:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004544:	e010      	b.n	8004568 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8004546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004548:	2240      	movs	r2, #64	@ 0x40
 800454a:	4313      	orrs	r3, r2
 800454c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800454e:	e00b      	b.n	8004568 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	2280      	movs	r2, #128	@ 0x80
 8004554:	4313      	orrs	r3, r2
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004558:	e006      	b.n	8004568 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	2280      	movs	r2, #128	@ 0x80
 800455e:	0052      	lsls	r2, r2, #1
 8004560:	4313      	orrs	r3, r2
 8004562:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004564:	e000      	b.n	8004568 <HAL_CAN_IRQHandler+0x32e>
            break;
 8004566:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	699a      	ldr	r2, [r3, #24]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2170      	movs	r1, #112	@ 0x70
 8004574:	438a      	bics	r2, r1
 8004576:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2204      	movs	r2, #4
 800457e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 f85c 	bl	8004652 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800459a:	46c0      	nop			@ (mov r8, r8)
 800459c:	46bd      	mov	sp, r7
 800459e:	b00a      	add	sp, #40	@ 0x28
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b082      	sub	sp, #8
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80045aa:	46c0      	nop			@ (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	b002      	add	sp, #8
 80045b0:	bd80      	pop	{r7, pc}

080045b2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b082      	sub	sp, #8
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	46bd      	mov	sp, r7
 80045be:	b002      	add	sp, #8
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80045ca:	46c0      	nop			@ (mov r8, r8)
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b002      	add	sp, #8
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045d2:	b580      	push	{r7, lr}
 80045d4:	b082      	sub	sp, #8
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80045da:	46c0      	nop			@ (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	b002      	add	sp, #8
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80045ea:	46c0      	nop			@ (mov r8, r8)
 80045ec:	46bd      	mov	sp, r7
 80045ee:	b002      	add	sp, #8
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b082      	sub	sp, #8
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b002      	add	sp, #8
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800460a:	46c0      	nop			@ (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b002      	add	sp, #8
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800461a:	46c0      	nop			@ (mov r8, r8)
 800461c:	46bd      	mov	sp, r7
 800461e:	b002      	add	sp, #8
 8004620:	bd80      	pop	{r7, pc}

08004622 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004622:	b580      	push	{r7, lr}
 8004624:	b082      	sub	sp, #8
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800462a:	46c0      	nop			@ (mov r8, r8)
 800462c:	46bd      	mov	sp, r7
 800462e:	b002      	add	sp, #8
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800463a:	46c0      	nop			@ (mov r8, r8)
 800463c:	46bd      	mov	sp, r7
 800463e:	b002      	add	sp, #8
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b082      	sub	sp, #8
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800464a:	46c0      	nop			@ (mov r8, r8)
 800464c:	46bd      	mov	sp, r7
 800464e:	b002      	add	sp, #8
 8004650:	bd80      	pop	{r7, pc}

08004652 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004652:	b580      	push	{r7, lr}
 8004654:	b082      	sub	sp, #8
 8004656:	af00      	add	r7, sp, #0
 8004658:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800465a:	46c0      	nop			@ (mov r8, r8)
 800465c:	46bd      	mov	sp, r7
 800465e:	b002      	add	sp, #8
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	0002      	movs	r2, r0
 800466c:	1dfb      	adds	r3, r7, #7
 800466e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004670:	1dfb      	adds	r3, r7, #7
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b7f      	cmp	r3, #127	@ 0x7f
 8004676:	d809      	bhi.n	800468c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004678:	1dfb      	adds	r3, r7, #7
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	001a      	movs	r2, r3
 800467e:	231f      	movs	r3, #31
 8004680:	401a      	ands	r2, r3
 8004682:	4b04      	ldr	r3, [pc, #16]	@ (8004694 <__NVIC_EnableIRQ+0x30>)
 8004684:	2101      	movs	r1, #1
 8004686:	4091      	lsls	r1, r2
 8004688:	000a      	movs	r2, r1
 800468a:	601a      	str	r2, [r3, #0]
  }
}
 800468c:	46c0      	nop			@ (mov r8, r8)
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}
 8004694:	e000e100 	.word	0xe000e100

08004698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004698:	b590      	push	{r4, r7, lr}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	0002      	movs	r2, r0
 80046a0:	6039      	str	r1, [r7, #0]
 80046a2:	1dfb      	adds	r3, r7, #7
 80046a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80046a6:	1dfb      	adds	r3, r7, #7
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80046ac:	d828      	bhi.n	8004700 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046ae:	4a2f      	ldr	r2, [pc, #188]	@ (800476c <__NVIC_SetPriority+0xd4>)
 80046b0:	1dfb      	adds	r3, r7, #7
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	b25b      	sxtb	r3, r3
 80046b6:	089b      	lsrs	r3, r3, #2
 80046b8:	33c0      	adds	r3, #192	@ 0xc0
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	589b      	ldr	r3, [r3, r2]
 80046be:	1dfa      	adds	r2, r7, #7
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	0011      	movs	r1, r2
 80046c4:	2203      	movs	r2, #3
 80046c6:	400a      	ands	r2, r1
 80046c8:	00d2      	lsls	r2, r2, #3
 80046ca:	21ff      	movs	r1, #255	@ 0xff
 80046cc:	4091      	lsls	r1, r2
 80046ce:	000a      	movs	r2, r1
 80046d0:	43d2      	mvns	r2, r2
 80046d2:	401a      	ands	r2, r3
 80046d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	019b      	lsls	r3, r3, #6
 80046da:	22ff      	movs	r2, #255	@ 0xff
 80046dc:	401a      	ands	r2, r3
 80046de:	1dfb      	adds	r3, r7, #7
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	0018      	movs	r0, r3
 80046e4:	2303      	movs	r3, #3
 80046e6:	4003      	ands	r3, r0
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046ec:	481f      	ldr	r0, [pc, #124]	@ (800476c <__NVIC_SetPriority+0xd4>)
 80046ee:	1dfb      	adds	r3, r7, #7
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	b25b      	sxtb	r3, r3
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	430a      	orrs	r2, r1
 80046f8:	33c0      	adds	r3, #192	@ 0xc0
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046fe:	e031      	b.n	8004764 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004700:	4a1b      	ldr	r2, [pc, #108]	@ (8004770 <__NVIC_SetPriority+0xd8>)
 8004702:	1dfb      	adds	r3, r7, #7
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	0019      	movs	r1, r3
 8004708:	230f      	movs	r3, #15
 800470a:	400b      	ands	r3, r1
 800470c:	3b08      	subs	r3, #8
 800470e:	089b      	lsrs	r3, r3, #2
 8004710:	3306      	adds	r3, #6
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	18d3      	adds	r3, r2, r3
 8004716:	3304      	adds	r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	1dfa      	adds	r2, r7, #7
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	0011      	movs	r1, r2
 8004720:	2203      	movs	r2, #3
 8004722:	400a      	ands	r2, r1
 8004724:	00d2      	lsls	r2, r2, #3
 8004726:	21ff      	movs	r1, #255	@ 0xff
 8004728:	4091      	lsls	r1, r2
 800472a:	000a      	movs	r2, r1
 800472c:	43d2      	mvns	r2, r2
 800472e:	401a      	ands	r2, r3
 8004730:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	019b      	lsls	r3, r3, #6
 8004736:	22ff      	movs	r2, #255	@ 0xff
 8004738:	401a      	ands	r2, r3
 800473a:	1dfb      	adds	r3, r7, #7
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	0018      	movs	r0, r3
 8004740:	2303      	movs	r3, #3
 8004742:	4003      	ands	r3, r0
 8004744:	00db      	lsls	r3, r3, #3
 8004746:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004748:	4809      	ldr	r0, [pc, #36]	@ (8004770 <__NVIC_SetPriority+0xd8>)
 800474a:	1dfb      	adds	r3, r7, #7
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	001c      	movs	r4, r3
 8004750:	230f      	movs	r3, #15
 8004752:	4023      	ands	r3, r4
 8004754:	3b08      	subs	r3, #8
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	430a      	orrs	r2, r1
 800475a:	3306      	adds	r3, #6
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	18c3      	adds	r3, r0, r3
 8004760:	3304      	adds	r3, #4
 8004762:	601a      	str	r2, [r3, #0]
}
 8004764:	46c0      	nop			@ (mov r8, r8)
 8004766:	46bd      	mov	sp, r7
 8004768:	b003      	add	sp, #12
 800476a:	bd90      	pop	{r4, r7, pc}
 800476c:	e000e100 	.word	0xe000e100
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	045b      	lsls	r3, r3, #17
 8004784:	429a      	cmp	r2, r3
 8004786:	d301      	bcc.n	800478c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004788:	2301      	movs	r3, #1
 800478a:	e010      	b.n	80047ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478c:	4b0a      	ldr	r3, [pc, #40]	@ (80047b8 <SysTick_Config+0x44>)
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	3a01      	subs	r2, #1
 8004792:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004794:	2301      	movs	r3, #1
 8004796:	425b      	negs	r3, r3
 8004798:	2103      	movs	r1, #3
 800479a:	0018      	movs	r0, r3
 800479c:	f7ff ff7c 	bl	8004698 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a0:	4b05      	ldr	r3, [pc, #20]	@ (80047b8 <SysTick_Config+0x44>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a6:	4b04      	ldr	r3, [pc, #16]	@ (80047b8 <SysTick_Config+0x44>)
 80047a8:	2207      	movs	r2, #7
 80047aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	0018      	movs	r0, r3
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b002      	add	sp, #8
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	e000e010 	.word	0xe000e010

080047bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	210f      	movs	r1, #15
 80047c8:	187b      	adds	r3, r7, r1
 80047ca:	1c02      	adds	r2, r0, #0
 80047cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	187b      	adds	r3, r7, r1
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	b25b      	sxtb	r3, r3
 80047d6:	0011      	movs	r1, r2
 80047d8:	0018      	movs	r0, r3
 80047da:	f7ff ff5d 	bl	8004698 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b004      	add	sp, #16
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	0002      	movs	r2, r0
 80047ee:	1dfb      	adds	r3, r7, #7
 80047f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047f2:	1dfb      	adds	r3, r7, #7
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	b25b      	sxtb	r3, r3
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7ff ff33 	bl	8004664 <__NVIC_EnableIRQ>
}
 80047fe:	46c0      	nop			@ (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b002      	add	sp, #8
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f7ff ffaf 	bl	8004774 <SysTick_Config>
 8004816:	0003      	movs	r3, r0
}
 8004818:	0018      	movs	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	b002      	add	sp, #8
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e036      	b.n	80048a4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2221      	movs	r2, #33	@ 0x21
 800483a:	2102      	movs	r1, #2
 800483c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	4a18      	ldr	r2, [pc, #96]	@ (80048ac <HAL_DMA_Init+0x8c>)
 800484a:	4013      	ands	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800486e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	0018      	movs	r0, r3
 8004888:	f000 f946 	bl	8004b18 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2221      	movs	r2, #33	@ 0x21
 8004896:	2101      	movs	r1, #1
 8004898:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	2100      	movs	r1, #0
 80048a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	0018      	movs	r0, r3
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b004      	add	sp, #16
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	ffffc00f 	.word	0xffffc00f

080048b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2317      	movs	r3, #23
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2220      	movs	r2, #32
 80048ca:	5c9b      	ldrb	r3, [r3, r2]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d101      	bne.n	80048d4 <HAL_DMA_Start_IT+0x24>
 80048d0:	2302      	movs	r3, #2
 80048d2:	e04f      	b.n	8004974 <HAL_DMA_Start_IT+0xc4>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	2101      	movs	r1, #1
 80048da:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2221      	movs	r2, #33	@ 0x21
 80048e0:	5c9b      	ldrb	r3, [r3, r2]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d13a      	bne.n	800495e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2221      	movs	r2, #33	@ 0x21
 80048ec:	2102      	movs	r1, #2
 80048ee:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2101      	movs	r1, #1
 8004902:	438a      	bics	r2, r1
 8004904:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	68b9      	ldr	r1, [r7, #8]
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f8d7 	bl	8004ac0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	210e      	movs	r1, #14
 8004926:	430a      	orrs	r2, r1
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e00f      	b.n	800494c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	210a      	movs	r1, #10
 8004938:	430a      	orrs	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2104      	movs	r1, #4
 8004948:	438a      	bics	r2, r1
 800494a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	430a      	orrs	r2, r1
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e007      	b.n	800496e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2220      	movs	r2, #32
 8004962:	2100      	movs	r1, #0
 8004964:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004966:	2317      	movs	r3, #23
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2202      	movs	r2, #2
 800496c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800496e:	2317      	movs	r3, #23
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	781b      	ldrb	r3, [r3, #0]
}
 8004974:	0018      	movs	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	b006      	add	sp, #24
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004998:	2204      	movs	r2, #4
 800499a:	409a      	lsls	r2, r3
 800499c:	0013      	movs	r3, r2
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4013      	ands	r3, r2
 80049a2:	d024      	beq.n	80049ee <HAL_DMA_IRQHandler+0x72>
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2204      	movs	r2, #4
 80049a8:	4013      	ands	r3, r2
 80049aa:	d020      	beq.n	80049ee <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2220      	movs	r2, #32
 80049b4:	4013      	ands	r3, r2
 80049b6:	d107      	bne.n	80049c8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2104      	movs	r1, #4
 80049c4:	438a      	bics	r2, r1
 80049c6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	2104      	movs	r1, #4
 80049d2:	4091      	lsls	r1, r2
 80049d4:	000a      	movs	r2, r1
 80049d6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d100      	bne.n	80049e2 <HAL_DMA_IRQHandler+0x66>
 80049e0:	e06a      	b.n	8004ab8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	0010      	movs	r0, r2
 80049ea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80049ec:	e064      	b.n	8004ab8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	2202      	movs	r2, #2
 80049f4:	409a      	lsls	r2, r3
 80049f6:	0013      	movs	r3, r2
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	4013      	ands	r3, r2
 80049fc:	d02b      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xda>
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	2202      	movs	r2, #2
 8004a02:	4013      	ands	r3, r2
 8004a04:	d027      	beq.n	8004a56 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	4013      	ands	r3, r2
 8004a10:	d10b      	bne.n	8004a2a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	210a      	movs	r1, #10
 8004a1e:	438a      	bics	r2, r1
 8004a20:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2221      	movs	r2, #33	@ 0x21
 8004a26:	2101      	movs	r1, #1
 8004a28:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a32:	2102      	movs	r1, #2
 8004a34:	4091      	lsls	r1, r2
 8004a36:	000a      	movs	r2, r1
 8004a38:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	2100      	movs	r1, #0
 8004a40:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d036      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	0010      	movs	r0, r2
 8004a52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004a54:	e030      	b.n	8004ab8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5a:	2208      	movs	r2, #8
 8004a5c:	409a      	lsls	r2, r3
 8004a5e:	0013      	movs	r3, r2
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	4013      	ands	r3, r2
 8004a64:	d028      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x13c>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d024      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	210e      	movs	r1, #14
 8004a7a:	438a      	bics	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a86:	2101      	movs	r1, #1
 8004a88:	4091      	lsls	r1, r2
 8004a8a:	000a      	movs	r2, r1
 8004a8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2201      	movs	r2, #1
 8004a92:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2221      	movs	r2, #33	@ 0x21
 8004a98:	2101      	movs	r1, #1
 8004a9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	0010      	movs	r0, r2
 8004ab4:	4798      	blx	r3
    }
  }
}
 8004ab6:	e7ff      	b.n	8004ab8 <HAL_DMA_IRQHandler+0x13c>
 8004ab8:	46c0      	nop			@ (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b004      	add	sp, #16
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	4091      	lsls	r1, r2
 8004ada:	000a      	movs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d108      	bne.n	8004b00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004afe:	e007      	b.n	8004b10 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
}
 8004b10:	46c0      	nop			@ (mov r8, r8)
 8004b12:	46bd      	mov	sp, r7
 8004b14:	b004      	add	sp, #16
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a08      	ldr	r2, [pc, #32]	@ (8004b48 <DMA_CalcBaseAndBitshift+0x30>)
 8004b26:	4694      	mov	ip, r2
 8004b28:	4463      	add	r3, ip
 8004b2a:	2114      	movs	r1, #20
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f7fb faeb 	bl	8000108 <__udivsi3>
 8004b32:	0003      	movs	r3, r0
 8004b34:	009a      	lsls	r2, r3, #2
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a03      	ldr	r2, [pc, #12]	@ (8004b4c <DMA_CalcBaseAndBitshift+0x34>)
 8004b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004b40:	46c0      	nop			@ (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	bffdfff8 	.word	0xbffdfff8
 8004b4c:	40020000 	.word	0x40020000

08004b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b5e:	e149      	b.n	8004df4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2101      	movs	r1, #1
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4091      	lsls	r1, r2
 8004b6a:	000a      	movs	r2, r1
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d100      	bne.n	8004b78 <HAL_GPIO_Init+0x28>
 8004b76:	e13a      	b.n	8004dee <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	4013      	ands	r3, r2
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d005      	beq.n	8004b90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2203      	movs	r2, #3
 8004b8a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d130      	bne.n	8004bf2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	2203      	movs	r2, #3
 8004b9c:	409a      	lsls	r2, r3
 8004b9e:	0013      	movs	r3, r2
 8004ba0:	43da      	mvns	r2, r3
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68da      	ldr	r2, [r3, #12]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	409a      	lsls	r2, r3
 8004bb2:	0013      	movs	r3, r2
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	0013      	movs	r3, r2
 8004bce:	43da      	mvns	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	2201      	movs	r2, #1
 8004bde:	401a      	ands	r2, r3
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	409a      	lsls	r2, r3
 8004be4:	0013      	movs	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2203      	movs	r2, #3
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d017      	beq.n	8004c2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	2203      	movs	r2, #3
 8004c0a:	409a      	lsls	r2, r3
 8004c0c:	0013      	movs	r3, r2
 8004c0e:	43da      	mvns	r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4013      	ands	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	0013      	movs	r3, r2
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	693a      	ldr	r2, [r7, #16]
 8004c2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2203      	movs	r2, #3
 8004c34:	4013      	ands	r3, r2
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d123      	bne.n	8004c82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	08da      	lsrs	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3208      	adds	r2, #8
 8004c42:	0092      	lsls	r2, r2, #2
 8004c44:	58d3      	ldr	r3, [r2, r3]
 8004c46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2207      	movs	r2, #7
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	220f      	movs	r2, #15
 8004c52:	409a      	lsls	r2, r3
 8004c54:	0013      	movs	r3, r2
 8004c56:	43da      	mvns	r2, r3
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	691a      	ldr	r2, [r3, #16]
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2107      	movs	r1, #7
 8004c66:	400b      	ands	r3, r1
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	409a      	lsls	r2, r3
 8004c6c:	0013      	movs	r3, r2
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	08da      	lsrs	r2, r3, #3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3208      	adds	r2, #8
 8004c7c:	0092      	lsls	r2, r2, #2
 8004c7e:	6939      	ldr	r1, [r7, #16]
 8004c80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	2203      	movs	r2, #3
 8004c8e:	409a      	lsls	r2, r3
 8004c90:	0013      	movs	r3, r2
 8004c92:	43da      	mvns	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4013      	ands	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	401a      	ands	r2, r3
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	0013      	movs	r3, r2
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	23c0      	movs	r3, #192	@ 0xc0
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d100      	bne.n	8004cc4 <HAL_GPIO_Init+0x174>
 8004cc2:	e094      	b.n	8004dee <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cc4:	4b51      	ldr	r3, [pc, #324]	@ (8004e0c <HAL_GPIO_Init+0x2bc>)
 8004cc6:	699a      	ldr	r2, [r3, #24]
 8004cc8:	4b50      	ldr	r3, [pc, #320]	@ (8004e0c <HAL_GPIO_Init+0x2bc>)
 8004cca:	2101      	movs	r1, #1
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	619a      	str	r2, [r3, #24]
 8004cd0:	4b4e      	ldr	r3, [pc, #312]	@ (8004e0c <HAL_GPIO_Init+0x2bc>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004cdc:	4a4c      	ldr	r2, [pc, #304]	@ (8004e10 <HAL_GPIO_Init+0x2c0>)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	089b      	lsrs	r3, r3, #2
 8004ce2:	3302      	adds	r3, #2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	589b      	ldr	r3, [r3, r2]
 8004ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2203      	movs	r2, #3
 8004cee:	4013      	ands	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	220f      	movs	r2, #15
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	0013      	movs	r3, r2
 8004cf8:	43da      	mvns	r2, r3
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	2390      	movs	r3, #144	@ 0x90
 8004d04:	05db      	lsls	r3, r3, #23
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d00d      	beq.n	8004d26 <HAL_GPIO_Init+0x1d6>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a41      	ldr	r2, [pc, #260]	@ (8004e14 <HAL_GPIO_Init+0x2c4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <HAL_GPIO_Init+0x1d2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a40      	ldr	r2, [pc, #256]	@ (8004e18 <HAL_GPIO_Init+0x2c8>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d101      	bne.n	8004d1e <HAL_GPIO_Init+0x1ce>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e004      	b.n	8004d28 <HAL_GPIO_Init+0x1d8>
 8004d1e:	2305      	movs	r3, #5
 8004d20:	e002      	b.n	8004d28 <HAL_GPIO_Init+0x1d8>
 8004d22:	2301      	movs	r3, #1
 8004d24:	e000      	b.n	8004d28 <HAL_GPIO_Init+0x1d8>
 8004d26:	2300      	movs	r3, #0
 8004d28:	697a      	ldr	r2, [r7, #20]
 8004d2a:	2103      	movs	r1, #3
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	0092      	lsls	r2, r2, #2
 8004d30:	4093      	lsls	r3, r2
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004d38:	4935      	ldr	r1, [pc, #212]	@ (8004e10 <HAL_GPIO_Init+0x2c0>)
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	089b      	lsrs	r3, r3, #2
 8004d3e:	3302      	adds	r3, #2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d46:	4b35      	ldr	r3, [pc, #212]	@ (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4013      	ands	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	2380      	movs	r3, #128	@ 0x80
 8004d5c:	035b      	lsls	r3, r3, #13
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d003      	beq.n	8004d6a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004d6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004d70:	4b2a      	ldr	r3, [pc, #168]	@ (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	43da      	mvns	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	2380      	movs	r3, #128	@ 0x80
 8004d86:	039b      	lsls	r3, r3, #14
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d94:	4b21      	ldr	r3, [pc, #132]	@ (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004d9a:	4b20      	ldr	r3, [pc, #128]	@ (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	43da      	mvns	r2, r3
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	4013      	ands	r3, r2
 8004da8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	2380      	movs	r3, #128	@ 0x80
 8004db0:	029b      	lsls	r3, r3, #10
 8004db2:	4013      	ands	r3, r2
 8004db4:	d003      	beq.n	8004dbe <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004dbe:	4b17      	ldr	r3, [pc, #92]	@ (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8004dc4:	4b15      	ldr	r3, [pc, #84]	@ (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	43da      	mvns	r2, r3
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	2380      	movs	r3, #128	@ 0x80
 8004dda:	025b      	lsls	r3, r3, #9
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d003      	beq.n	8004de8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004de8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <HAL_GPIO_Init+0x2cc>)
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	3301      	adds	r3, #1
 8004df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	40da      	lsrs	r2, r3
 8004dfc:	1e13      	subs	r3, r2, #0
 8004dfe:	d000      	beq.n	8004e02 <HAL_GPIO_Init+0x2b2>
 8004e00:	e6ae      	b.n	8004b60 <HAL_GPIO_Init+0x10>
  } 
}
 8004e02:	46c0      	nop			@ (mov r8, r8)
 8004e04:	46c0      	nop			@ (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b006      	add	sp, #24
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	40010000 	.word	0x40010000
 8004e14:	48000400 	.word	0x48000400
 8004e18:	48000800 	.word	0x48000800
 8004e1c:	40010400 	.word	0x40010400

08004e20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	0008      	movs	r0, r1
 8004e2a:	0011      	movs	r1, r2
 8004e2c:	1cbb      	adds	r3, r7, #2
 8004e2e:	1c02      	adds	r2, r0, #0
 8004e30:	801a      	strh	r2, [r3, #0]
 8004e32:	1c7b      	adds	r3, r7, #1
 8004e34:	1c0a      	adds	r2, r1, #0
 8004e36:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e38:	1c7b      	adds	r3, r7, #1
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d004      	beq.n	8004e4a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e40:	1cbb      	adds	r3, r7, #2
 8004e42:	881a      	ldrh	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e48:	e003      	b.n	8004e52 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e4a:	1cbb      	adds	r3, r7, #2
 8004e4c:	881a      	ldrh	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b002      	add	sp, #8
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d102      	bne.n	8004e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f000 fb76 	bl	800555c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2201      	movs	r2, #1
 8004e76:	4013      	ands	r3, r2
 8004e78:	d100      	bne.n	8004e7c <HAL_RCC_OscConfig+0x20>
 8004e7a:	e08e      	b.n	8004f9a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004e7c:	4bc5      	ldr	r3, [pc, #788]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	220c      	movs	r2, #12
 8004e82:	4013      	ands	r3, r2
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d00e      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e88:	4bc2      	ldr	r3, [pc, #776]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	220c      	movs	r2, #12
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d117      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x68>
 8004e94:	4bbf      	ldr	r3, [pc, #764]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	23c0      	movs	r3, #192	@ 0xc0
 8004e9a:	025b      	lsls	r3, r3, #9
 8004e9c:	401a      	ands	r2, r3
 8004e9e:	2380      	movs	r3, #128	@ 0x80
 8004ea0:	025b      	lsls	r3, r3, #9
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d10e      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea6:	4bbb      	ldr	r3, [pc, #748]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	2380      	movs	r3, #128	@ 0x80
 8004eac:	029b      	lsls	r3, r3, #10
 8004eae:	4013      	ands	r3, r2
 8004eb0:	d100      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x58>
 8004eb2:	e071      	b.n	8004f98 <HAL_RCC_OscConfig+0x13c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d000      	beq.n	8004ebe <HAL_RCC_OscConfig+0x62>
 8004ebc:	e06c      	b.n	8004f98 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	f000 fb4c 	bl	800555c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d107      	bne.n	8004edc <HAL_RCC_OscConfig+0x80>
 8004ecc:	4bb1      	ldr	r3, [pc, #708]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	4bb0      	ldr	r3, [pc, #704]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004ed2:	2180      	movs	r1, #128	@ 0x80
 8004ed4:	0249      	lsls	r1, r1, #9
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e02f      	b.n	8004f3c <HAL_RCC_OscConfig+0xe0>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10c      	bne.n	8004efe <HAL_RCC_OscConfig+0xa2>
 8004ee4:	4bab      	ldr	r3, [pc, #684]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4baa      	ldr	r3, [pc, #680]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004eea:	49ab      	ldr	r1, [pc, #684]	@ (8005198 <HAL_RCC_OscConfig+0x33c>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]
 8004ef0:	4ba8      	ldr	r3, [pc, #672]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	4ba7      	ldr	r3, [pc, #668]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004ef6:	49a9      	ldr	r1, [pc, #676]	@ (800519c <HAL_RCC_OscConfig+0x340>)
 8004ef8:	400a      	ands	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	e01e      	b.n	8004f3c <HAL_RCC_OscConfig+0xe0>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	2b05      	cmp	r3, #5
 8004f04:	d10e      	bne.n	8004f24 <HAL_RCC_OscConfig+0xc8>
 8004f06:	4ba3      	ldr	r3, [pc, #652]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4ba2      	ldr	r3, [pc, #648]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f0c:	2180      	movs	r1, #128	@ 0x80
 8004f0e:	02c9      	lsls	r1, r1, #11
 8004f10:	430a      	orrs	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	4b9f      	ldr	r3, [pc, #636]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	4b9e      	ldr	r3, [pc, #632]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f1a:	2180      	movs	r1, #128	@ 0x80
 8004f1c:	0249      	lsls	r1, r1, #9
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	601a      	str	r2, [r3, #0]
 8004f22:	e00b      	b.n	8004f3c <HAL_RCC_OscConfig+0xe0>
 8004f24:	4b9b      	ldr	r3, [pc, #620]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4b9a      	ldr	r3, [pc, #616]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f2a:	499b      	ldr	r1, [pc, #620]	@ (8005198 <HAL_RCC_OscConfig+0x33c>)
 8004f2c:	400a      	ands	r2, r1
 8004f2e:	601a      	str	r2, [r3, #0]
 8004f30:	4b98      	ldr	r3, [pc, #608]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	4b97      	ldr	r3, [pc, #604]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f36:	4999      	ldr	r1, [pc, #612]	@ (800519c <HAL_RCC_OscConfig+0x340>)
 8004f38:	400a      	ands	r2, r1
 8004f3a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d014      	beq.n	8004f6e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f44:	f7fe f8b8 	bl	80030b8 <HAL_GetTick>
 8004f48:	0003      	movs	r3, r0
 8004f4a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f4e:	f7fe f8b3 	bl	80030b8 <HAL_GetTick>
 8004f52:	0002      	movs	r2, r0
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b64      	cmp	r3, #100	@ 0x64
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e2fd      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f60:	4b8c      	ldr	r3, [pc, #560]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	2380      	movs	r3, #128	@ 0x80
 8004f66:	029b      	lsls	r3, r3, #10
 8004f68:	4013      	ands	r3, r2
 8004f6a:	d0f0      	beq.n	8004f4e <HAL_RCC_OscConfig+0xf2>
 8004f6c:	e015      	b.n	8004f9a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6e:	f7fe f8a3 	bl	80030b8 <HAL_GetTick>
 8004f72:	0003      	movs	r3, r0
 8004f74:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f78:	f7fe f89e 	bl	80030b8 <HAL_GetTick>
 8004f7c:	0002      	movs	r2, r0
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b64      	cmp	r3, #100	@ 0x64
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e2e8      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	4b82      	ldr	r3, [pc, #520]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	2380      	movs	r3, #128	@ 0x80
 8004f90:	029b      	lsls	r3, r3, #10
 8004f92:	4013      	ands	r3, r2
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x11c>
 8004f96:	e000      	b.n	8004f9a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f98:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d100      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x14a>
 8004fa4:	e06c      	b.n	8005080 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004fa6:	4b7b      	ldr	r3, [pc, #492]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	220c      	movs	r2, #12
 8004fac:	4013      	ands	r3, r2
 8004fae:	d00e      	beq.n	8004fce <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004fb0:	4b78      	ldr	r3, [pc, #480]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	220c      	movs	r2, #12
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	2b08      	cmp	r3, #8
 8004fba:	d11f      	bne.n	8004ffc <HAL_RCC_OscConfig+0x1a0>
 8004fbc:	4b75      	ldr	r3, [pc, #468]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	23c0      	movs	r3, #192	@ 0xc0
 8004fc2:	025b      	lsls	r3, r3, #9
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	2380      	movs	r3, #128	@ 0x80
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d116      	bne.n	8004ffc <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fce:	4b71      	ldr	r3, [pc, #452]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x188>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e2bb      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe4:	4b6b      	ldr	r3, [pc, #428]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	22f8      	movs	r2, #248	@ 0xf8
 8004fea:	4393      	bics	r3, r2
 8004fec:	0019      	movs	r1, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	00da      	lsls	r2, r3, #3
 8004ff4:	4b67      	ldr	r3, [pc, #412]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffa:	e041      	b.n	8005080 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d024      	beq.n	800504e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005004:	4b63      	ldr	r3, [pc, #396]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4b62      	ldr	r3, [pc, #392]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 800500a:	2101      	movs	r1, #1
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005010:	f7fe f852 	bl	80030b8 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005018:	e008      	b.n	800502c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800501a:	f7fe f84d 	bl	80030b8 <HAL_GetTick>
 800501e:	0002      	movs	r2, r0
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e297      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502c:	4b59      	ldr	r3, [pc, #356]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2202      	movs	r2, #2
 8005032:	4013      	ands	r3, r2
 8005034:	d0f1      	beq.n	800501a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005036:	4b57      	ldr	r3, [pc, #348]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	22f8      	movs	r2, #248	@ 0xf8
 800503c:	4393      	bics	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	00da      	lsls	r2, r3, #3
 8005046:	4b53      	ldr	r3, [pc, #332]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005048:	430a      	orrs	r2, r1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	e018      	b.n	8005080 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800504e:	4b51      	ldr	r3, [pc, #324]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	4b50      	ldr	r3, [pc, #320]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005054:	2101      	movs	r1, #1
 8005056:	438a      	bics	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505a:	f7fe f82d 	bl	80030b8 <HAL_GetTick>
 800505e:	0003      	movs	r3, r0
 8005060:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005064:	f7fe f828 	bl	80030b8 <HAL_GetTick>
 8005068:	0002      	movs	r2, r0
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e272      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005076:	4b47      	ldr	r3, [pc, #284]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2202      	movs	r2, #2
 800507c:	4013      	ands	r3, r2
 800507e:	d1f1      	bne.n	8005064 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2208      	movs	r2, #8
 8005086:	4013      	ands	r3, r2
 8005088:	d036      	beq.n	80050f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d019      	beq.n	80050c6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005092:	4b40      	ldr	r3, [pc, #256]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005094:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005096:	4b3f      	ldr	r3, [pc, #252]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005098:	2101      	movs	r1, #1
 800509a:	430a      	orrs	r2, r1
 800509c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800509e:	f7fe f80b 	bl	80030b8 <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7fe f806 	bl	80030b8 <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e250      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b36      	ldr	r3, [pc, #216]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 80050bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	d0f1      	beq.n	80050a8 <HAL_RCC_OscConfig+0x24c>
 80050c4:	e018      	b.n	80050f8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c6:	4b33      	ldr	r3, [pc, #204]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 80050c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050ca:	4b32      	ldr	r3, [pc, #200]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 80050cc:	2101      	movs	r1, #1
 80050ce:	438a      	bics	r2, r1
 80050d0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d2:	f7fd fff1 	bl	80030b8 <HAL_GetTick>
 80050d6:	0003      	movs	r3, r0
 80050d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050dc:	f7fd ffec 	bl	80030b8 <HAL_GetTick>
 80050e0:	0002      	movs	r2, r0
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e236      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ee:	4b29      	ldr	r3, [pc, #164]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 80050f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f2:	2202      	movs	r2, #2
 80050f4:	4013      	ands	r3, r2
 80050f6:	d1f1      	bne.n	80050dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2204      	movs	r2, #4
 80050fe:	4013      	ands	r3, r2
 8005100:	d100      	bne.n	8005104 <HAL_RCC_OscConfig+0x2a8>
 8005102:	e0b5      	b.n	8005270 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005104:	201f      	movs	r0, #31
 8005106:	183b      	adds	r3, r7, r0
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510c:	4b21      	ldr	r3, [pc, #132]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	2380      	movs	r3, #128	@ 0x80
 8005112:	055b      	lsls	r3, r3, #21
 8005114:	4013      	ands	r3, r2
 8005116:	d110      	bne.n	800513a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005118:	4b1e      	ldr	r3, [pc, #120]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	4b1d      	ldr	r3, [pc, #116]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 800511e:	2180      	movs	r1, #128	@ 0x80
 8005120:	0549      	lsls	r1, r1, #21
 8005122:	430a      	orrs	r2, r1
 8005124:	61da      	str	r2, [r3, #28]
 8005126:	4b1b      	ldr	r3, [pc, #108]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	2380      	movs	r3, #128	@ 0x80
 800512c:	055b      	lsls	r3, r3, #21
 800512e:	4013      	ands	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005134:	183b      	adds	r3, r7, r0
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513a:	4b19      	ldr	r3, [pc, #100]	@ (80051a0 <HAL_RCC_OscConfig+0x344>)
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	2380      	movs	r3, #128	@ 0x80
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4013      	ands	r3, r2
 8005144:	d11a      	bne.n	800517c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005146:	4b16      	ldr	r3, [pc, #88]	@ (80051a0 <HAL_RCC_OscConfig+0x344>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <HAL_RCC_OscConfig+0x344>)
 800514c:	2180      	movs	r1, #128	@ 0x80
 800514e:	0049      	lsls	r1, r1, #1
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005154:	f7fd ffb0 	bl	80030b8 <HAL_GetTick>
 8005158:	0003      	movs	r3, r0
 800515a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515e:	f7fd ffab 	bl	80030b8 <HAL_GetTick>
 8005162:	0002      	movs	r2, r0
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b64      	cmp	r3, #100	@ 0x64
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e1f5      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b0b      	ldr	r3, [pc, #44]	@ (80051a0 <HAL_RCC_OscConfig+0x344>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	2380      	movs	r3, #128	@ 0x80
 8005176:	005b      	lsls	r3, r3, #1
 8005178:	4013      	ands	r3, r2
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10f      	bne.n	80051a4 <HAL_RCC_OscConfig+0x348>
 8005184:	4b03      	ldr	r3, [pc, #12]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 8005186:	6a1a      	ldr	r2, [r3, #32]
 8005188:	4b02      	ldr	r3, [pc, #8]	@ (8005194 <HAL_RCC_OscConfig+0x338>)
 800518a:	2101      	movs	r1, #1
 800518c:	430a      	orrs	r2, r1
 800518e:	621a      	str	r2, [r3, #32]
 8005190:	e036      	b.n	8005200 <HAL_RCC_OscConfig+0x3a4>
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	40021000 	.word	0x40021000
 8005198:	fffeffff 	.word	0xfffeffff
 800519c:	fffbffff 	.word	0xfffbffff
 80051a0:	40007000 	.word	0x40007000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10c      	bne.n	80051c6 <HAL_RCC_OscConfig+0x36a>
 80051ac:	4bca      	ldr	r3, [pc, #808]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051ae:	6a1a      	ldr	r2, [r3, #32]
 80051b0:	4bc9      	ldr	r3, [pc, #804]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051b2:	2101      	movs	r1, #1
 80051b4:	438a      	bics	r2, r1
 80051b6:	621a      	str	r2, [r3, #32]
 80051b8:	4bc7      	ldr	r3, [pc, #796]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051ba:	6a1a      	ldr	r2, [r3, #32]
 80051bc:	4bc6      	ldr	r3, [pc, #792]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051be:	2104      	movs	r1, #4
 80051c0:	438a      	bics	r2, r1
 80051c2:	621a      	str	r2, [r3, #32]
 80051c4:	e01c      	b.n	8005200 <HAL_RCC_OscConfig+0x3a4>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b05      	cmp	r3, #5
 80051cc:	d10c      	bne.n	80051e8 <HAL_RCC_OscConfig+0x38c>
 80051ce:	4bc2      	ldr	r3, [pc, #776]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	4bc1      	ldr	r3, [pc, #772]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051d4:	2104      	movs	r1, #4
 80051d6:	430a      	orrs	r2, r1
 80051d8:	621a      	str	r2, [r3, #32]
 80051da:	4bbf      	ldr	r3, [pc, #764]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051dc:	6a1a      	ldr	r2, [r3, #32]
 80051de:	4bbe      	ldr	r3, [pc, #760]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051e0:	2101      	movs	r1, #1
 80051e2:	430a      	orrs	r2, r1
 80051e4:	621a      	str	r2, [r3, #32]
 80051e6:	e00b      	b.n	8005200 <HAL_RCC_OscConfig+0x3a4>
 80051e8:	4bbb      	ldr	r3, [pc, #748]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051ea:	6a1a      	ldr	r2, [r3, #32]
 80051ec:	4bba      	ldr	r3, [pc, #744]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051ee:	2101      	movs	r1, #1
 80051f0:	438a      	bics	r2, r1
 80051f2:	621a      	str	r2, [r3, #32]
 80051f4:	4bb8      	ldr	r3, [pc, #736]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051f6:	6a1a      	ldr	r2, [r3, #32]
 80051f8:	4bb7      	ldr	r3, [pc, #732]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80051fa:	2104      	movs	r1, #4
 80051fc:	438a      	bics	r2, r1
 80051fe:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d014      	beq.n	8005232 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005208:	f7fd ff56 	bl	80030b8 <HAL_GetTick>
 800520c:	0003      	movs	r3, r0
 800520e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005210:	e009      	b.n	8005226 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fd ff51 	bl	80030b8 <HAL_GetTick>
 8005216:	0002      	movs	r2, r0
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	4aaf      	ldr	r2, [pc, #700]	@ (80054dc <HAL_RCC_OscConfig+0x680>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e19a      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005226:	4bac      	ldr	r3, [pc, #688]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	2202      	movs	r2, #2
 800522c:	4013      	ands	r3, r2
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x3b6>
 8005230:	e013      	b.n	800525a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005232:	f7fd ff41 	bl	80030b8 <HAL_GetTick>
 8005236:	0003      	movs	r3, r0
 8005238:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800523a:	e009      	b.n	8005250 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fd ff3c 	bl	80030b8 <HAL_GetTick>
 8005240:	0002      	movs	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	4aa5      	ldr	r2, [pc, #660]	@ (80054dc <HAL_RCC_OscConfig+0x680>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d901      	bls.n	8005250 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e185      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005250:	4ba1      	ldr	r3, [pc, #644]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	2202      	movs	r2, #2
 8005256:	4013      	ands	r3, r2
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800525a:	231f      	movs	r3, #31
 800525c:	18fb      	adds	r3, r7, r3
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005264:	4b9c      	ldr	r3, [pc, #624]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005266:	69da      	ldr	r2, [r3, #28]
 8005268:	4b9b      	ldr	r3, [pc, #620]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800526a:	499d      	ldr	r1, [pc, #628]	@ (80054e0 <HAL_RCC_OscConfig+0x684>)
 800526c:	400a      	ands	r2, r1
 800526e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2210      	movs	r2, #16
 8005276:	4013      	ands	r3, r2
 8005278:	d063      	beq.n	8005342 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d12a      	bne.n	80052d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005282:	4b95      	ldr	r3, [pc, #596]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005284:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005286:	4b94      	ldr	r3, [pc, #592]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005288:	2104      	movs	r1, #4
 800528a:	430a      	orrs	r2, r1
 800528c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800528e:	4b92      	ldr	r3, [pc, #584]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005292:	4b91      	ldr	r3, [pc, #580]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005294:	2101      	movs	r1, #1
 8005296:	430a      	orrs	r2, r1
 8005298:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529a:	f7fd ff0d 	bl	80030b8 <HAL_GetTick>
 800529e:	0003      	movs	r3, r0
 80052a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80052a4:	f7fd ff08 	bl	80030b8 <HAL_GetTick>
 80052a8:	0002      	movs	r2, r0
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e152      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80052b6:	4b88      	ldr	r3, [pc, #544]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80052b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052ba:	2202      	movs	r2, #2
 80052bc:	4013      	ands	r3, r2
 80052be:	d0f1      	beq.n	80052a4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052c0:	4b85      	ldr	r3, [pc, #532]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80052c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052c4:	22f8      	movs	r2, #248	@ 0xf8
 80052c6:	4393      	bics	r3, r2
 80052c8:	0019      	movs	r1, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	00da      	lsls	r2, r3, #3
 80052d0:	4b81      	ldr	r3, [pc, #516]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80052d2:	430a      	orrs	r2, r1
 80052d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80052d6:	e034      	b.n	8005342 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	3305      	adds	r3, #5
 80052de:	d111      	bne.n	8005304 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80052e0:	4b7d      	ldr	r3, [pc, #500]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80052e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e4:	4b7c      	ldr	r3, [pc, #496]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80052e6:	2104      	movs	r1, #4
 80052e8:	438a      	bics	r2, r1
 80052ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80052ec:	4b7a      	ldr	r3, [pc, #488]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80052ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052f0:	22f8      	movs	r2, #248	@ 0xf8
 80052f2:	4393      	bics	r3, r2
 80052f4:	0019      	movs	r1, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	00da      	lsls	r2, r3, #3
 80052fc:	4b76      	ldr	r3, [pc, #472]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80052fe:	430a      	orrs	r2, r1
 8005300:	635a      	str	r2, [r3, #52]	@ 0x34
 8005302:	e01e      	b.n	8005342 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005304:	4b74      	ldr	r3, [pc, #464]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005306:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005308:	4b73      	ldr	r3, [pc, #460]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800530a:	2104      	movs	r1, #4
 800530c:	430a      	orrs	r2, r1
 800530e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005310:	4b71      	ldr	r3, [pc, #452]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005314:	4b70      	ldr	r3, [pc, #448]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005316:	2101      	movs	r1, #1
 8005318:	438a      	bics	r2, r1
 800531a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800531c:	f7fd fecc 	bl	80030b8 <HAL_GetTick>
 8005320:	0003      	movs	r3, r0
 8005322:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005326:	f7fd fec7 	bl	80030b8 <HAL_GetTick>
 800532a:	0002      	movs	r2, r0
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e111      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005338:	4b67      	ldr	r3, [pc, #412]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800533a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800533c:	2202      	movs	r2, #2
 800533e:	4013      	ands	r3, r2
 8005340:	d1f1      	bne.n	8005326 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2220      	movs	r2, #32
 8005348:	4013      	ands	r3, r2
 800534a:	d05c      	beq.n	8005406 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800534c:	4b62      	ldr	r3, [pc, #392]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	220c      	movs	r2, #12
 8005352:	4013      	ands	r3, r2
 8005354:	2b0c      	cmp	r3, #12
 8005356:	d00e      	beq.n	8005376 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005358:	4b5f      	ldr	r3, [pc, #380]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	220c      	movs	r2, #12
 800535e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005360:	2b08      	cmp	r3, #8
 8005362:	d114      	bne.n	800538e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005364:	4b5c      	ldr	r3, [pc, #368]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	23c0      	movs	r3, #192	@ 0xc0
 800536a:	025b      	lsls	r3, r3, #9
 800536c:	401a      	ands	r2, r3
 800536e:	23c0      	movs	r3, #192	@ 0xc0
 8005370:	025b      	lsls	r3, r3, #9
 8005372:	429a      	cmp	r2, r3
 8005374:	d10b      	bne.n	800538e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005376:	4b58      	ldr	r3, [pc, #352]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800537a:	2380      	movs	r3, #128	@ 0x80
 800537c:	029b      	lsls	r3, r3, #10
 800537e:	4013      	ands	r3, r2
 8005380:	d040      	beq.n	8005404 <HAL_RCC_OscConfig+0x5a8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d03c      	beq.n	8005404 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e0e6      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01b      	beq.n	80053ce <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005396:	4b50      	ldr	r3, [pc, #320]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800539a:	4b4f      	ldr	r3, [pc, #316]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800539c:	2180      	movs	r1, #128	@ 0x80
 800539e:	0249      	lsls	r1, r1, #9
 80053a0:	430a      	orrs	r2, r1
 80053a2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a4:	f7fd fe88 	bl	80030b8 <HAL_GetTick>
 80053a8:	0003      	movs	r3, r0
 80053aa:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053ae:	f7fd fe83 	bl	80030b8 <HAL_GetTick>
 80053b2:	0002      	movs	r2, r0
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e0cd      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80053c0:	4b45      	ldr	r3, [pc, #276]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80053c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	029b      	lsls	r3, r3, #10
 80053c8:	4013      	ands	r3, r2
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x552>
 80053cc:	e01b      	b.n	8005406 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80053ce:	4b42      	ldr	r3, [pc, #264]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80053d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d2:	4b41      	ldr	r3, [pc, #260]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80053d4:	4943      	ldr	r1, [pc, #268]	@ (80054e4 <HAL_RCC_OscConfig+0x688>)
 80053d6:	400a      	ands	r2, r1
 80053d8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053da:	f7fd fe6d 	bl	80030b8 <HAL_GetTick>
 80053de:	0003      	movs	r3, r0
 80053e0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053e4:	f7fd fe68 	bl	80030b8 <HAL_GetTick>
 80053e8:	0002      	movs	r2, r0
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e0b2      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80053f6:	4b38      	ldr	r3, [pc, #224]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80053f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	029b      	lsls	r3, r3, #10
 80053fe:	4013      	ands	r3, r2
 8005400:	d1f0      	bne.n	80053e4 <HAL_RCC_OscConfig+0x588>
 8005402:	e000      	b.n	8005406 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005404:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d100      	bne.n	8005410 <HAL_RCC_OscConfig+0x5b4>
 800540e:	e0a4      	b.n	800555a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005410:	4b31      	ldr	r3, [pc, #196]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	220c      	movs	r2, #12
 8005416:	4013      	ands	r3, r2
 8005418:	2b08      	cmp	r3, #8
 800541a:	d100      	bne.n	800541e <HAL_RCC_OscConfig+0x5c2>
 800541c:	e078      	b.n	8005510 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	2b02      	cmp	r3, #2
 8005424:	d14c      	bne.n	80054c0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b2c      	ldr	r3, [pc, #176]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	4b2b      	ldr	r3, [pc, #172]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800542c:	492e      	ldr	r1, [pc, #184]	@ (80054e8 <HAL_RCC_OscConfig+0x68c>)
 800542e:	400a      	ands	r2, r1
 8005430:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005432:	f7fd fe41 	bl	80030b8 <HAL_GetTick>
 8005436:	0003      	movs	r3, r0
 8005438:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800543a:	e008      	b.n	800544e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800543c:	f7fd fe3c 	bl	80030b8 <HAL_GetTick>
 8005440:	0002      	movs	r2, r0
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d901      	bls.n	800544e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e086      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800544e:	4b22      	ldr	r3, [pc, #136]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	2380      	movs	r3, #128	@ 0x80
 8005454:	049b      	lsls	r3, r3, #18
 8005456:	4013      	ands	r3, r2
 8005458:	d1f0      	bne.n	800543c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800545a:	4b1f      	ldr	r3, [pc, #124]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800545c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545e:	220f      	movs	r2, #15
 8005460:	4393      	bics	r3, r2
 8005462:	0019      	movs	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005468:	4b1b      	ldr	r3, [pc, #108]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800546a:	430a      	orrs	r2, r1
 800546c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800546e:	4b1a      	ldr	r3, [pc, #104]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4a1e      	ldr	r2, [pc, #120]	@ (80054ec <HAL_RCC_OscConfig+0x690>)
 8005474:	4013      	ands	r3, r2
 8005476:	0019      	movs	r1, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005480:	431a      	orrs	r2, r3
 8005482:	4b15      	ldr	r3, [pc, #84]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 8005484:	430a      	orrs	r2, r1
 8005486:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005488:	4b13      	ldr	r3, [pc, #76]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b12      	ldr	r3, [pc, #72]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 800548e:	2180      	movs	r1, #128	@ 0x80
 8005490:	0449      	lsls	r1, r1, #17
 8005492:	430a      	orrs	r2, r1
 8005494:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005496:	f7fd fe0f 	bl	80030b8 <HAL_GetTick>
 800549a:	0003      	movs	r3, r0
 800549c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054a0:	f7fd fe0a 	bl	80030b8 <HAL_GetTick>
 80054a4:	0002      	movs	r2, r0
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e054      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054b2:	4b09      	ldr	r3, [pc, #36]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	2380      	movs	r3, #128	@ 0x80
 80054b8:	049b      	lsls	r3, r3, #18
 80054ba:	4013      	ands	r3, r2
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0x644>
 80054be:	e04c      	b.n	800555a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054c0:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b04      	ldr	r3, [pc, #16]	@ (80054d8 <HAL_RCC_OscConfig+0x67c>)
 80054c6:	4908      	ldr	r1, [pc, #32]	@ (80054e8 <HAL_RCC_OscConfig+0x68c>)
 80054c8:	400a      	ands	r2, r1
 80054ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054cc:	f7fd fdf4 	bl	80030b8 <HAL_GetTick>
 80054d0:	0003      	movs	r3, r0
 80054d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80054d4:	e015      	b.n	8005502 <HAL_RCC_OscConfig+0x6a6>
 80054d6:	46c0      	nop			@ (mov r8, r8)
 80054d8:	40021000 	.word	0x40021000
 80054dc:	00001388 	.word	0x00001388
 80054e0:	efffffff 	.word	0xefffffff
 80054e4:	fffeffff 	.word	0xfffeffff
 80054e8:	feffffff 	.word	0xfeffffff
 80054ec:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f0:	f7fd fde2 	bl	80030b8 <HAL_GetTick>
 80054f4:	0002      	movs	r2, r0
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e02c      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005502:	4b18      	ldr	r3, [pc, #96]	@ (8005564 <HAL_RCC_OscConfig+0x708>)
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	2380      	movs	r3, #128	@ 0x80
 8005508:	049b      	lsls	r3, r3, #18
 800550a:	4013      	ands	r3, r2
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x694>
 800550e:	e024      	b.n	800555a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e01f      	b.n	800555c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800551c:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <HAL_RCC_OscConfig+0x708>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005522:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <HAL_RCC_OscConfig+0x708>)
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005528:	697a      	ldr	r2, [r7, #20]
 800552a:	23c0      	movs	r3, #192	@ 0xc0
 800552c:	025b      	lsls	r3, r3, #9
 800552e:	401a      	ands	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005534:	429a      	cmp	r2, r3
 8005536:	d10e      	bne.n	8005556 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	220f      	movs	r2, #15
 800553c:	401a      	ands	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d107      	bne.n	8005556 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	23f0      	movs	r3, #240	@ 0xf0
 800554a:	039b      	lsls	r3, r3, #14
 800554c:	401a      	ands	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d001      	beq.n	800555a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e000      	b.n	800555c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	0018      	movs	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	b008      	add	sp, #32
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40021000 	.word	0x40021000

08005568 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0bf      	b.n	80056fc <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800557c:	4b61      	ldr	r3, [pc, #388]	@ (8005704 <HAL_RCC_ClockConfig+0x19c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2201      	movs	r2, #1
 8005582:	4013      	ands	r3, r2
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d911      	bls.n	80055ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b5e      	ldr	r3, [pc, #376]	@ (8005704 <HAL_RCC_ClockConfig+0x19c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2201      	movs	r2, #1
 8005590:	4393      	bics	r3, r2
 8005592:	0019      	movs	r1, r3
 8005594:	4b5b      	ldr	r3, [pc, #364]	@ (8005704 <HAL_RCC_ClockConfig+0x19c>)
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559c:	4b59      	ldr	r3, [pc, #356]	@ (8005704 <HAL_RCC_ClockConfig+0x19c>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2201      	movs	r2, #1
 80055a2:	4013      	ands	r3, r2
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d001      	beq.n	80055ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e0a6      	b.n	80056fc <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2202      	movs	r2, #2
 80055b4:	4013      	ands	r3, r2
 80055b6:	d015      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2204      	movs	r2, #4
 80055be:	4013      	ands	r3, r2
 80055c0:	d006      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80055c2:	4b51      	ldr	r3, [pc, #324]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	4b50      	ldr	r3, [pc, #320]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 80055c8:	21e0      	movs	r1, #224	@ 0xe0
 80055ca:	00c9      	lsls	r1, r1, #3
 80055cc:	430a      	orrs	r2, r1
 80055ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d0:	4b4d      	ldr	r3, [pc, #308]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	22f0      	movs	r2, #240	@ 0xf0
 80055d6:	4393      	bics	r3, r2
 80055d8:	0019      	movs	r1, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689a      	ldr	r2, [r3, #8]
 80055de:	4b4a      	ldr	r3, [pc, #296]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 80055e0:	430a      	orrs	r2, r1
 80055e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	2201      	movs	r2, #1
 80055ea:	4013      	ands	r3, r2
 80055ec:	d04c      	beq.n	8005688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	4b44      	ldr	r3, [pc, #272]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	2380      	movs	r3, #128	@ 0x80
 80055fc:	029b      	lsls	r3, r3, #10
 80055fe:	4013      	ands	r3, r2
 8005600:	d120      	bne.n	8005644 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e07a      	b.n	80056fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d107      	bne.n	800561e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800560e:	4b3e      	ldr	r3, [pc, #248]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	2380      	movs	r3, #128	@ 0x80
 8005614:	049b      	lsls	r3, r3, #18
 8005616:	4013      	ands	r3, r2
 8005618:	d114      	bne.n	8005644 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e06e      	b.n	80056fc <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	2b03      	cmp	r3, #3
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005626:	4b38      	ldr	r3, [pc, #224]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 8005628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800562a:	2380      	movs	r3, #128	@ 0x80
 800562c:	029b      	lsls	r3, r3, #10
 800562e:	4013      	ands	r3, r2
 8005630:	d108      	bne.n	8005644 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e062      	b.n	80056fc <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005636:	4b34      	ldr	r3, [pc, #208]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2202      	movs	r2, #2
 800563c:	4013      	ands	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e05b      	b.n	80056fc <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005644:	4b30      	ldr	r3, [pc, #192]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2203      	movs	r2, #3
 800564a:	4393      	bics	r3, r2
 800564c:	0019      	movs	r1, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	4b2d      	ldr	r3, [pc, #180]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 8005654:	430a      	orrs	r2, r1
 8005656:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005658:	f7fd fd2e 	bl	80030b8 <HAL_GetTick>
 800565c:	0003      	movs	r3, r0
 800565e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005660:	e009      	b.n	8005676 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005662:	f7fd fd29 	bl	80030b8 <HAL_GetTick>
 8005666:	0002      	movs	r2, r0
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	4a27      	ldr	r2, [pc, #156]	@ (800570c <HAL_RCC_ClockConfig+0x1a4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e042      	b.n	80056fc <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	4b24      	ldr	r3, [pc, #144]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	220c      	movs	r2, #12
 800567c:	401a      	ands	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1ec      	bne.n	8005662 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b1e      	ldr	r3, [pc, #120]	@ (8005704 <HAL_RCC_ClockConfig+0x19c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2201      	movs	r2, #1
 800568e:	4013      	ands	r3, r2
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d211      	bcs.n	80056ba <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b1b      	ldr	r3, [pc, #108]	@ (8005704 <HAL_RCC_ClockConfig+0x19c>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2201      	movs	r2, #1
 800569c:	4393      	bics	r3, r2
 800569e:	0019      	movs	r1, r3
 80056a0:	4b18      	ldr	r3, [pc, #96]	@ (8005704 <HAL_RCC_ClockConfig+0x19c>)
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a8:	4b16      	ldr	r3, [pc, #88]	@ (8005704 <HAL_RCC_ClockConfig+0x19c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2201      	movs	r2, #1
 80056ae:	4013      	ands	r3, r2
 80056b0:	683a      	ldr	r2, [r7, #0]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d001      	beq.n	80056ba <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e020      	b.n	80056fc <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2204      	movs	r2, #4
 80056c0:	4013      	ands	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80056c4:	4b10      	ldr	r3, [pc, #64]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	4a11      	ldr	r2, [pc, #68]	@ (8005710 <HAL_RCC_ClockConfig+0x1a8>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	0019      	movs	r1, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68da      	ldr	r2, [r3, #12]
 80056d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80056d8:	f000 f820 	bl	800571c <HAL_RCC_GetSysClockFreq>
 80056dc:	0001      	movs	r1, r0
 80056de:	4b0a      	ldr	r3, [pc, #40]	@ (8005708 <HAL_RCC_ClockConfig+0x1a0>)
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	091b      	lsrs	r3, r3, #4
 80056e4:	220f      	movs	r2, #15
 80056e6:	4013      	ands	r3, r2
 80056e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005714 <HAL_RCC_ClockConfig+0x1ac>)
 80056ea:	5cd3      	ldrb	r3, [r2, r3]
 80056ec:	000a      	movs	r2, r1
 80056ee:	40da      	lsrs	r2, r3
 80056f0:	4b09      	ldr	r3, [pc, #36]	@ (8005718 <HAL_RCC_ClockConfig+0x1b0>)
 80056f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80056f4:	2003      	movs	r0, #3
 80056f6:	f7fd fc99 	bl	800302c <HAL_InitTick>
  
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	0018      	movs	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	b004      	add	sp, #16
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40022000 	.word	0x40022000
 8005708:	40021000 	.word	0x40021000
 800570c:	00001388 	.word	0x00001388
 8005710:	fffff8ff 	.word	0xfffff8ff
 8005714:	080068a8 	.word	0x080068a8
 8005718:	2000004c 	.word	0x2000004c

0800571c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b086      	sub	sp, #24
 8005720:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005736:	4b2d      	ldr	r3, [pc, #180]	@ (80057ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	220c      	movs	r2, #12
 8005740:	4013      	ands	r3, r2
 8005742:	2b0c      	cmp	r3, #12
 8005744:	d046      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0xb8>
 8005746:	d848      	bhi.n	80057da <HAL_RCC_GetSysClockFreq+0xbe>
 8005748:	2b04      	cmp	r3, #4
 800574a:	d002      	beq.n	8005752 <HAL_RCC_GetSysClockFreq+0x36>
 800574c:	2b08      	cmp	r3, #8
 800574e:	d003      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x3c>
 8005750:	e043      	b.n	80057da <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005752:	4b27      	ldr	r3, [pc, #156]	@ (80057f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005754:	613b      	str	r3, [r7, #16]
      break;
 8005756:	e043      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	0c9b      	lsrs	r3, r3, #18
 800575c:	220f      	movs	r2, #15
 800575e:	4013      	ands	r3, r2
 8005760:	4a24      	ldr	r2, [pc, #144]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005762:	5cd3      	ldrb	r3, [r2, r3]
 8005764:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005766:	4b21      	ldr	r3, [pc, #132]	@ (80057ec <HAL_RCC_GetSysClockFreq+0xd0>)
 8005768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576a:	220f      	movs	r2, #15
 800576c:	4013      	ands	r3, r2
 800576e:	4a22      	ldr	r2, [pc, #136]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005770:	5cd3      	ldrb	r3, [r2, r3]
 8005772:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	23c0      	movs	r3, #192	@ 0xc0
 8005778:	025b      	lsls	r3, r3, #9
 800577a:	401a      	ands	r2, r3
 800577c:	2380      	movs	r3, #128	@ 0x80
 800577e:	025b      	lsls	r3, r3, #9
 8005780:	429a      	cmp	r2, r3
 8005782:	d109      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	481a      	ldr	r0, [pc, #104]	@ (80057f0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005788:	f7fa fcbe 	bl	8000108 <__udivsi3>
 800578c:	0003      	movs	r3, r0
 800578e:	001a      	movs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4353      	muls	r3, r2
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e01a      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	23c0      	movs	r3, #192	@ 0xc0
 800579c:	025b      	lsls	r3, r3, #9
 800579e:	401a      	ands	r2, r3
 80057a0:	23c0      	movs	r3, #192	@ 0xc0
 80057a2:	025b      	lsls	r3, r3, #9
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d109      	bne.n	80057bc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4814      	ldr	r0, [pc, #80]	@ (80057fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80057ac:	f7fa fcac 	bl	8000108 <__udivsi3>
 80057b0:	0003      	movs	r3, r0
 80057b2:	001a      	movs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4353      	muls	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	e008      	b.n	80057ce <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	4810      	ldr	r0, [pc, #64]	@ (8005800 <HAL_RCC_GetSysClockFreq+0xe4>)
 80057c0:	f7fa fca2 	bl	8000108 <__udivsi3>
 80057c4:	0003      	movs	r3, r0
 80057c6:	001a      	movs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4353      	muls	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	613b      	str	r3, [r7, #16]
      break;
 80057d2:	e005      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80057d4:	4b09      	ldr	r3, [pc, #36]	@ (80057fc <HAL_RCC_GetSysClockFreq+0xe0>)
 80057d6:	613b      	str	r3, [r7, #16]
      break;
 80057d8:	e002      	b.n	80057e0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057da:	4b09      	ldr	r3, [pc, #36]	@ (8005800 <HAL_RCC_GetSysClockFreq+0xe4>)
 80057dc:	613b      	str	r3, [r7, #16]
      break;
 80057de:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80057e0:	693b      	ldr	r3, [r7, #16]
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b006      	add	sp, #24
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	40021000 	.word	0x40021000
 80057f0:	016e3600 	.word	0x016e3600
 80057f4:	080068b8 	.word	0x080068b8
 80057f8:	080068c8 	.word	0x080068c8
 80057fc:	02dc6c00 	.word	0x02dc6c00
 8005800:	007a1200 	.word	0x007a1200

08005804 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d101      	bne.n	8005816 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e0a8      	b.n	8005968 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	2382      	movs	r3, #130	@ 0x82
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	429a      	cmp	r2, r3
 8005828:	d009      	beq.n	800583e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	61da      	str	r2, [r3, #28]
 8005830:	e005      	b.n	800583e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	225d      	movs	r2, #93	@ 0x5d
 8005848:	5c9b      	ldrb	r3, [r3, r2]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d107      	bne.n	8005860 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	225c      	movs	r2, #92	@ 0x5c
 8005854:	2100      	movs	r1, #0
 8005856:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	0018      	movs	r0, r3
 800585c:	f7fd f996 	bl	8002b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	225d      	movs	r2, #93	@ 0x5d
 8005864:	2102      	movs	r1, #2
 8005866:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2140      	movs	r1, #64	@ 0x40
 8005874:	438a      	bics	r2, r1
 8005876:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	23e0      	movs	r3, #224	@ 0xe0
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	429a      	cmp	r2, r3
 8005882:	d902      	bls.n	800588a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005884:	2300      	movs	r3, #0
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e002      	b.n	8005890 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800588a:	2380      	movs	r3, #128	@ 0x80
 800588c:	015b      	lsls	r3, r3, #5
 800588e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68da      	ldr	r2, [r3, #12]
 8005894:	23f0      	movs	r3, #240	@ 0xf0
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	429a      	cmp	r2, r3
 800589a:	d008      	beq.n	80058ae <HAL_SPI_Init+0xaa>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	23e0      	movs	r3, #224	@ 0xe0
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d002      	beq.n	80058ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	2382      	movs	r3, #130	@ 0x82
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	401a      	ands	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6899      	ldr	r1, [r3, #8]
 80058bc:	2384      	movs	r3, #132	@ 0x84
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	400b      	ands	r3, r1
 80058c2:	431a      	orrs	r2, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	2102      	movs	r1, #2
 80058ca:	400b      	ands	r3, r1
 80058cc:	431a      	orrs	r2, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	2101      	movs	r1, #1
 80058d4:	400b      	ands	r3, r1
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6999      	ldr	r1, [r3, #24]
 80058dc:	2380      	movs	r3, #128	@ 0x80
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	400b      	ands	r3, r1
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	2138      	movs	r1, #56	@ 0x38
 80058ea:	400b      	ands	r3, r1
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	2180      	movs	r1, #128	@ 0x80
 80058f4:	400b      	ands	r3, r1
 80058f6:	431a      	orrs	r2, r3
 80058f8:	0011      	movs	r1, r2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058fe:	2380      	movs	r3, #128	@ 0x80
 8005900:	019b      	lsls	r3, r3, #6
 8005902:	401a      	ands	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	2204      	movs	r2, #4
 8005914:	401a      	ands	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	2110      	movs	r1, #16
 800591c:	400b      	ands	r3, r1
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005924:	2108      	movs	r1, #8
 8005926:	400b      	ands	r3, r1
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	68d9      	ldr	r1, [r3, #12]
 800592e:	23f0      	movs	r3, #240	@ 0xf0
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	400b      	ands	r3, r1
 8005934:	431a      	orrs	r2, r3
 8005936:	0011      	movs	r1, r2
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	2380      	movs	r3, #128	@ 0x80
 800593c:	015b      	lsls	r3, r3, #5
 800593e:	401a      	ands	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69da      	ldr	r2, [r3, #28]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4907      	ldr	r1, [pc, #28]	@ (8005970 <HAL_SPI_Init+0x16c>)
 8005954:	400a      	ands	r2, r1
 8005956:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	225d      	movs	r2, #93	@ 0x5d
 8005962:	2101      	movs	r1, #1
 8005964:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	0018      	movs	r0, r3
 800596a:	46bd      	mov	sp, r7
 800596c:	b004      	add	sp, #16
 800596e:	bd80      	pop	{r7, pc}
 8005970:	fffff7ff 	.word	0xfffff7ff

08005974 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e042      	b.n	8005a0c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	223d      	movs	r2, #61	@ 0x3d
 800598a:	5c9b      	ldrb	r3, [r3, r2]
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d107      	bne.n	80059a2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	223c      	movs	r2, #60	@ 0x3c
 8005996:	2100      	movs	r1, #0
 8005998:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	0018      	movs	r0, r3
 800599e:	f7fd f9a3 	bl	8002ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	223d      	movs	r2, #61	@ 0x3d
 80059a6:	2102      	movs	r1, #2
 80059a8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	3304      	adds	r3, #4
 80059b2:	0019      	movs	r1, r3
 80059b4:	0010      	movs	r0, r2
 80059b6:	f000 fbf1 	bl	800619c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2246      	movs	r2, #70	@ 0x46
 80059be:	2101      	movs	r1, #1
 80059c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	223e      	movs	r2, #62	@ 0x3e
 80059c6:	2101      	movs	r1, #1
 80059c8:	5499      	strb	r1, [r3, r2]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	223f      	movs	r2, #63	@ 0x3f
 80059ce:	2101      	movs	r1, #1
 80059d0:	5499      	strb	r1, [r3, r2]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2240      	movs	r2, #64	@ 0x40
 80059d6:	2101      	movs	r1, #1
 80059d8:	5499      	strb	r1, [r3, r2]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2241      	movs	r2, #65	@ 0x41
 80059de:	2101      	movs	r1, #1
 80059e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2242      	movs	r2, #66	@ 0x42
 80059e6:	2101      	movs	r1, #1
 80059e8:	5499      	strb	r1, [r3, r2]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2243      	movs	r2, #67	@ 0x43
 80059ee:	2101      	movs	r1, #1
 80059f0:	5499      	strb	r1, [r3, r2]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2244      	movs	r2, #68	@ 0x44
 80059f6:	2101      	movs	r1, #1
 80059f8:	5499      	strb	r1, [r3, r2]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2245      	movs	r2, #69	@ 0x45
 80059fe:	2101      	movs	r1, #1
 8005a00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	223d      	movs	r2, #61	@ 0x3d
 8005a06:	2101      	movs	r1, #1
 8005a08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	b002      	add	sp, #8
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	223d      	movs	r2, #61	@ 0x3d
 8005a20:	5c9b      	ldrb	r3, [r3, r2]
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d001      	beq.n	8005a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e036      	b.n	8005a9a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	223d      	movs	r2, #61	@ 0x3d
 8005a30:	2102      	movs	r1, #2
 8005a32:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2101      	movs	r1, #1
 8005a40:	430a      	orrs	r2, r1
 8005a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a16      	ldr	r2, [pc, #88]	@ (8005aa4 <HAL_TIM_Base_Start_IT+0x90>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d00a      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x50>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	05db      	lsls	r3, r3, #23
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d004      	beq.n	8005a64 <HAL_TIM_Base_Start_IT+0x50>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a12      	ldr	r2, [pc, #72]	@ (8005aa8 <HAL_TIM_Base_Start_IT+0x94>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d111      	bne.n	8005a88 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2207      	movs	r2, #7
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2b06      	cmp	r3, #6
 8005a74:	d010      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2101      	movs	r1, #1
 8005a82:	430a      	orrs	r2, r1
 8005a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a86:	e007      	b.n	8005a98 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2101      	movs	r1, #1
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b004      	add	sp, #16
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	40000400 	.word	0x40000400

08005aac <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d101      	bne.n	8005abe <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e042      	b.n	8005b44 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	223d      	movs	r2, #61	@ 0x3d
 8005ac2:	5c9b      	ldrb	r3, [r3, r2]
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	223c      	movs	r2, #60	@ 0x3c
 8005ace:	2100      	movs	r1, #0
 8005ad0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	f7fd f8a7 	bl	8002c28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	223d      	movs	r2, #61	@ 0x3d
 8005ade:	2102      	movs	r1, #2
 8005ae0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	0019      	movs	r1, r3
 8005aec:	0010      	movs	r0, r2
 8005aee:	f000 fb55 	bl	800619c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2246      	movs	r2, #70	@ 0x46
 8005af6:	2101      	movs	r1, #1
 8005af8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	223e      	movs	r2, #62	@ 0x3e
 8005afe:	2101      	movs	r1, #1
 8005b00:	5499      	strb	r1, [r3, r2]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	223f      	movs	r2, #63	@ 0x3f
 8005b06:	2101      	movs	r1, #1
 8005b08:	5499      	strb	r1, [r3, r2]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2240      	movs	r2, #64	@ 0x40
 8005b0e:	2101      	movs	r1, #1
 8005b10:	5499      	strb	r1, [r3, r2]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2241      	movs	r2, #65	@ 0x41
 8005b16:	2101      	movs	r1, #1
 8005b18:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2242      	movs	r2, #66	@ 0x42
 8005b1e:	2101      	movs	r1, #1
 8005b20:	5499      	strb	r1, [r3, r2]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2243      	movs	r2, #67	@ 0x43
 8005b26:	2101      	movs	r1, #1
 8005b28:	5499      	strb	r1, [r3, r2]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2244      	movs	r2, #68	@ 0x44
 8005b2e:	2101      	movs	r1, #1
 8005b30:	5499      	strb	r1, [r3, r2]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2245      	movs	r2, #69	@ 0x45
 8005b36:	2101      	movs	r1, #1
 8005b38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	223d      	movs	r2, #61	@ 0x3d
 8005b3e:	2101      	movs	r1, #1
 8005b40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	0018      	movs	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	b002      	add	sp, #8
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d101      	bne.n	8005b5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e042      	b.n	8005be4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	223d      	movs	r2, #61	@ 0x3d
 8005b62:	5c9b      	ldrb	r3, [r3, r2]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d107      	bne.n	8005b7a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	223c      	movs	r2, #60	@ 0x3c
 8005b6e:	2100      	movs	r1, #0
 8005b70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	0018      	movs	r0, r3
 8005b76:	f7fd f887 	bl	8002c88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	223d      	movs	r2, #61	@ 0x3d
 8005b7e:	2102      	movs	r1, #2
 8005b80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	3304      	adds	r3, #4
 8005b8a:	0019      	movs	r1, r3
 8005b8c:	0010      	movs	r0, r2
 8005b8e:	f000 fb05 	bl	800619c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2246      	movs	r2, #70	@ 0x46
 8005b96:	2101      	movs	r1, #1
 8005b98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	223e      	movs	r2, #62	@ 0x3e
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	5499      	strb	r1, [r3, r2]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	223f      	movs	r2, #63	@ 0x3f
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	5499      	strb	r1, [r3, r2]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2240      	movs	r2, #64	@ 0x40
 8005bae:	2101      	movs	r1, #1
 8005bb0:	5499      	strb	r1, [r3, r2]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2241      	movs	r2, #65	@ 0x41
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2242      	movs	r2, #66	@ 0x42
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	5499      	strb	r1, [r3, r2]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2243      	movs	r2, #67	@ 0x43
 8005bc6:	2101      	movs	r1, #1
 8005bc8:	5499      	strb	r1, [r3, r2]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2244      	movs	r2, #68	@ 0x44
 8005bce:	2101      	movs	r1, #1
 8005bd0:	5499      	strb	r1, [r3, r2]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2245      	movs	r2, #69	@ 0x45
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	223d      	movs	r2, #61	@ 0x3d
 8005bde:	2101      	movs	r1, #1
 8005be0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	0018      	movs	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	b002      	add	sp, #8
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d108      	bne.n	8005c0e <HAL_TIM_PWM_Start+0x22>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	223e      	movs	r2, #62	@ 0x3e
 8005c00:	5c9b      	ldrb	r3, [r3, r2]
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	1e5a      	subs	r2, r3, #1
 8005c08:	4193      	sbcs	r3, r2
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	e01f      	b.n	8005c4e <HAL_TIM_PWM_Start+0x62>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d108      	bne.n	8005c26 <HAL_TIM_PWM_Start+0x3a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	223f      	movs	r2, #63	@ 0x3f
 8005c18:	5c9b      	ldrb	r3, [r3, r2]
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	1e5a      	subs	r2, r3, #1
 8005c20:	4193      	sbcs	r3, r2
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	e013      	b.n	8005c4e <HAL_TIM_PWM_Start+0x62>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d108      	bne.n	8005c3e <HAL_TIM_PWM_Start+0x52>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2240      	movs	r2, #64	@ 0x40
 8005c30:	5c9b      	ldrb	r3, [r3, r2]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	1e5a      	subs	r2, r3, #1
 8005c38:	4193      	sbcs	r3, r2
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	e007      	b.n	8005c4e <HAL_TIM_PWM_Start+0x62>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2241      	movs	r2, #65	@ 0x41
 8005c42:	5c9b      	ldrb	r3, [r3, r2]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	1e5a      	subs	r2, r3, #1
 8005c4a:	4193      	sbcs	r3, r2
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d001      	beq.n	8005c56 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e06a      	b.n	8005d2c <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d104      	bne.n	8005c66 <HAL_TIM_PWM_Start+0x7a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	223e      	movs	r2, #62	@ 0x3e
 8005c60:	2102      	movs	r1, #2
 8005c62:	5499      	strb	r1, [r3, r2]
 8005c64:	e013      	b.n	8005c8e <HAL_TIM_PWM_Start+0xa2>
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b04      	cmp	r3, #4
 8005c6a:	d104      	bne.n	8005c76 <HAL_TIM_PWM_Start+0x8a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	223f      	movs	r2, #63	@ 0x3f
 8005c70:	2102      	movs	r1, #2
 8005c72:	5499      	strb	r1, [r3, r2]
 8005c74:	e00b      	b.n	8005c8e <HAL_TIM_PWM_Start+0xa2>
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x9a>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2240      	movs	r2, #64	@ 0x40
 8005c80:	2102      	movs	r1, #2
 8005c82:	5499      	strb	r1, [r3, r2]
 8005c84:	e003      	b.n	8005c8e <HAL_TIM_PWM_Start+0xa2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2241      	movs	r2, #65	@ 0x41
 8005c8a:	2102      	movs	r1, #2
 8005c8c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6839      	ldr	r1, [r7, #0]
 8005c94:	2201      	movs	r2, #1
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 fce4 	bl	8006664 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a24      	ldr	r2, [pc, #144]	@ (8005d34 <HAL_TIM_PWM_Start+0x148>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d009      	beq.n	8005cba <HAL_TIM_PWM_Start+0xce>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a23      	ldr	r2, [pc, #140]	@ (8005d38 <HAL_TIM_PWM_Start+0x14c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d004      	beq.n	8005cba <HAL_TIM_PWM_Start+0xce>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a21      	ldr	r2, [pc, #132]	@ (8005d3c <HAL_TIM_PWM_Start+0x150>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d101      	bne.n	8005cbe <HAL_TIM_PWM_Start+0xd2>
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e000      	b.n	8005cc0 <HAL_TIM_PWM_Start+0xd4>
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d008      	beq.n	8005cd6 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	0209      	lsls	r1, r1, #8
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a16      	ldr	r2, [pc, #88]	@ (8005d34 <HAL_TIM_PWM_Start+0x148>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00a      	beq.n	8005cf6 <HAL_TIM_PWM_Start+0x10a>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	2380      	movs	r3, #128	@ 0x80
 8005ce6:	05db      	lsls	r3, r3, #23
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d004      	beq.n	8005cf6 <HAL_TIM_PWM_Start+0x10a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a13      	ldr	r2, [pc, #76]	@ (8005d40 <HAL_TIM_PWM_Start+0x154>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d111      	bne.n	8005d1a <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	2207      	movs	r2, #7
 8005cfe:	4013      	ands	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b06      	cmp	r3, #6
 8005d06:	d010      	beq.n	8005d2a <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2101      	movs	r1, #1
 8005d14:	430a      	orrs	r2, r1
 8005d16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d18:	e007      	b.n	8005d2a <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2101      	movs	r1, #1
 8005d26:	430a      	orrs	r2, r1
 8005d28:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b004      	add	sp, #16
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40012c00 	.word	0x40012c00
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800
 8005d40:	40000400 	.word	0x40000400

08005d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2202      	movs	r2, #2
 8005d60:	4013      	ands	r3, r2
 8005d62:	d021      	beq.n	8005da8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2202      	movs	r2, #2
 8005d68:	4013      	ands	r3, r2
 8005d6a:	d01d      	beq.n	8005da8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2203      	movs	r2, #3
 8005d72:	4252      	negs	r2, r2
 8005d74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2203      	movs	r2, #3
 8005d84:	4013      	ands	r3, r2
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	f000 f9ee 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005d90:	e007      	b.n	8005da2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f000 f9e1 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	f000 f9ed 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	2204      	movs	r2, #4
 8005dac:	4013      	ands	r3, r2
 8005dae:	d022      	beq.n	8005df6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2204      	movs	r2, #4
 8005db4:	4013      	ands	r3, r2
 8005db6:	d01e      	beq.n	8005df6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2205      	movs	r2, #5
 8005dbe:	4252      	negs	r2, r2
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	23c0      	movs	r3, #192	@ 0xc0
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 f9c7 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005dde:	e007      	b.n	8005df0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f000 f9ba 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 f9c6 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d021      	beq.n	8005e42 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2208      	movs	r2, #8
 8005e02:	4013      	ands	r3, r2
 8005e04:	d01d      	beq.n	8005e42 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2209      	movs	r2, #9
 8005e0c:	4252      	negs	r2, r2
 8005e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2204      	movs	r2, #4
 8005e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	4013      	ands	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f000 f9a1 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005e2a:	e007      	b.n	8005e3c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f000 f994 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	0018      	movs	r0, r3
 8005e38:	f000 f9a0 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2210      	movs	r2, #16
 8005e46:	4013      	ands	r3, r2
 8005e48:	d022      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2210      	movs	r2, #16
 8005e4e:	4013      	ands	r3, r2
 8005e50:	d01e      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2211      	movs	r2, #17
 8005e58:	4252      	negs	r2, r2
 8005e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2208      	movs	r2, #8
 8005e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	23c0      	movs	r3, #192	@ 0xc0
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	d004      	beq.n	8005e7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	0018      	movs	r0, r3
 8005e74:	f000 f97a 	bl	800616c <HAL_TIM_IC_CaptureCallback>
 8005e78:	e007      	b.n	8005e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	0018      	movs	r0, r3
 8005e7e:	f000 f96d 	bl	800615c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	0018      	movs	r0, r3
 8005e86:	f000 f979 	bl	800617c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2201      	movs	r2, #1
 8005e94:	4013      	ands	r3, r2
 8005e96:	d00c      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	d008      	beq.n	8005eb2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	4252      	negs	r2, r2
 8005ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7fc fcf9 	bl	80028a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2280      	movs	r2, #128	@ 0x80
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d00c      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2280      	movs	r2, #128	@ 0x80
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d008      	beq.n	8005ed4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2281      	movs	r2, #129	@ 0x81
 8005ec8:	4252      	negs	r2, r2
 8005eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	0018      	movs	r0, r3
 8005ed0:	f000 fcaa 	bl	8006828 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2240      	movs	r2, #64	@ 0x40
 8005ed8:	4013      	ands	r3, r2
 8005eda:	d00c      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2240      	movs	r2, #64	@ 0x40
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d008      	beq.n	8005ef6 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2241      	movs	r2, #65	@ 0x41
 8005eea:	4252      	negs	r2, r2
 8005eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f000 f94b 	bl	800618c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	4013      	ands	r3, r2
 8005efc:	d00c      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2220      	movs	r2, #32
 8005f02:	4013      	ands	r3, r2
 8005f04:	d008      	beq.n	8005f18 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2221      	movs	r2, #33	@ 0x21
 8005f0c:	4252      	negs	r2, r2
 8005f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	0018      	movs	r0, r3
 8005f14:	f000 fc80 	bl	8006818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f18:	46c0      	nop			@ (mov r8, r8)
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b004      	add	sp, #16
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2c:	2317      	movs	r3, #23
 8005f2e:	18fb      	adds	r3, r7, r3
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	223c      	movs	r2, #60	@ 0x3c
 8005f38:	5c9b      	ldrb	r3, [r3, r2]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_OC_ConfigChannel+0x22>
 8005f3e:	2302      	movs	r3, #2
 8005f40:	e042      	b.n	8005fc8 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	223c      	movs	r2, #60	@ 0x3c
 8005f46:	2101      	movs	r1, #1
 8005f48:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b0c      	cmp	r3, #12
 8005f4e:	d027      	beq.n	8005fa0 <HAL_TIM_OC_ConfigChannel+0x80>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b0c      	cmp	r3, #12
 8005f54:	d82c      	bhi.n	8005fb0 <HAL_TIM_OC_ConfigChannel+0x90>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d019      	beq.n	8005f90 <HAL_TIM_OC_ConfigChannel+0x70>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d826      	bhi.n	8005fb0 <HAL_TIM_OC_ConfigChannel+0x90>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <HAL_TIM_OC_ConfigChannel+0x50>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b04      	cmp	r3, #4
 8005f6c:	d008      	beq.n	8005f80 <HAL_TIM_OC_ConfigChannel+0x60>
 8005f6e:	e01f      	b.n	8005fb0 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	0011      	movs	r1, r2
 8005f78:	0018      	movs	r0, r3
 8005f7a:	f000 f993 	bl	80062a4 <TIM_OC1_SetConfig>
      break;
 8005f7e:	e01c      	b.n	8005fba <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	0011      	movs	r1, r2
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f000 fa09 	bl	80063a0 <TIM_OC2_SetConfig>
      break;
 8005f8e:	e014      	b.n	8005fba <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	0011      	movs	r1, r2
 8005f98:	0018      	movs	r0, r3
 8005f9a:	f000 fa7f 	bl	800649c <TIM_OC3_SetConfig>
      break;
 8005f9e:	e00c      	b.n	8005fba <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	0011      	movs	r1, r2
 8005fa8:	0018      	movs	r0, r3
 8005faa:	f000 faf7 	bl	800659c <TIM_OC4_SetConfig>
      break;
 8005fae:	e004      	b.n	8005fba <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005fb0:	2317      	movs	r3, #23
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
      break;
 8005fb8:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	223c      	movs	r2, #60	@ 0x3c
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	5499      	strb	r1, [r3, r2]

  return status;
 8005fc2:	2317      	movs	r3, #23
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	781b      	ldrb	r3, [r3, #0]
}
 8005fc8:	0018      	movs	r0, r3
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	b006      	add	sp, #24
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fdc:	2317      	movs	r3, #23
 8005fde:	18fb      	adds	r3, r7, r3
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	223c      	movs	r2, #60	@ 0x3c
 8005fe8:	5c9b      	ldrb	r3, [r3, r2]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e0ad      	b.n	800614e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	223c      	movs	r2, #60	@ 0x3c
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d100      	bne.n	8006002 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006000:	e076      	b.n	80060f0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b0c      	cmp	r3, #12
 8006006:	d900      	bls.n	800600a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006008:	e095      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x166>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d04e      	beq.n	80060ae <HAL_TIM_PWM_ConfigChannel+0xde>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2b08      	cmp	r3, #8
 8006014:	d900      	bls.n	8006018 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006016:	e08e      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_TIM_PWM_ConfigChannel+0x56>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2b04      	cmp	r3, #4
 8006022:	d021      	beq.n	8006068 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006024:	e087      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	0011      	movs	r1, r2
 800602e:	0018      	movs	r0, r3
 8006030:	f000 f938 	bl	80062a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699a      	ldr	r2, [r3, #24]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2108      	movs	r1, #8
 8006040:	430a      	orrs	r2, r1
 8006042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	699a      	ldr	r2, [r3, #24]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2104      	movs	r1, #4
 8006050:	438a      	bics	r2, r1
 8006052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6999      	ldr	r1, [r3, #24]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	619a      	str	r2, [r3, #24]
      break;
 8006066:	e06b      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	0011      	movs	r1, r2
 8006070:	0018      	movs	r0, r3
 8006072:	f000 f995 	bl	80063a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2180      	movs	r1, #128	@ 0x80
 8006082:	0109      	lsls	r1, r1, #4
 8006084:	430a      	orrs	r2, r1
 8006086:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	699a      	ldr	r2, [r3, #24]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4931      	ldr	r1, [pc, #196]	@ (8006158 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006094:	400a      	ands	r2, r1
 8006096:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6999      	ldr	r1, [r3, #24]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	021a      	lsls	r2, r3, #8
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	619a      	str	r2, [r3, #24]
      break;
 80060ac:	e048      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	0011      	movs	r1, r2
 80060b6:	0018      	movs	r0, r3
 80060b8:	f000 f9f0 	bl	800649c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69da      	ldr	r2, [r3, #28]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2108      	movs	r1, #8
 80060c8:	430a      	orrs	r2, r1
 80060ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69da      	ldr	r2, [r3, #28]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2104      	movs	r1, #4
 80060d8:	438a      	bics	r2, r1
 80060da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69d9      	ldr	r1, [r3, #28]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	430a      	orrs	r2, r1
 80060ec:	61da      	str	r2, [r3, #28]
      break;
 80060ee:	e027      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	0011      	movs	r1, r2
 80060f8:	0018      	movs	r0, r3
 80060fa:	f000 fa4f 	bl	800659c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69da      	ldr	r2, [r3, #28]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2180      	movs	r1, #128	@ 0x80
 800610a:	0109      	lsls	r1, r1, #4
 800610c:	430a      	orrs	r2, r1
 800610e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	490f      	ldr	r1, [pc, #60]	@ (8006158 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800611c:	400a      	ands	r2, r1
 800611e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69d9      	ldr	r1, [r3, #28]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	021a      	lsls	r2, r3, #8
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	61da      	str	r2, [r3, #28]
      break;
 8006134:	e004      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006136:	2317      	movs	r3, #23
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	2201      	movs	r2, #1
 800613c:	701a      	strb	r2, [r3, #0]
      break;
 800613e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	223c      	movs	r2, #60	@ 0x3c
 8006144:	2100      	movs	r1, #0
 8006146:	5499      	strb	r1, [r3, r2]

  return status;
 8006148:	2317      	movs	r3, #23
 800614a:	18fb      	adds	r3, r7, r3
 800614c:	781b      	ldrb	r3, [r3, #0]
}
 800614e:	0018      	movs	r0, r3
 8006150:	46bd      	mov	sp, r7
 8006152:	b006      	add	sp, #24
 8006154:	bd80      	pop	{r7, pc}
 8006156:	46c0      	nop			@ (mov r8, r8)
 8006158:	fffffbff 	.word	0xfffffbff

0800615c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b082      	sub	sp, #8
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006164:	46c0      	nop			@ (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	b002      	add	sp, #8
 800616a:	bd80      	pop	{r7, pc}

0800616c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006174:	46c0      	nop			@ (mov r8, r8)
 8006176:	46bd      	mov	sp, r7
 8006178:	b002      	add	sp, #8
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006184:	46c0      	nop			@ (mov r8, r8)
 8006186:	46bd      	mov	sp, r7
 8006188:	b002      	add	sp, #8
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006194:	46c0      	nop			@ (mov r8, r8)
 8006196:	46bd      	mov	sp, r7
 8006198:	b002      	add	sp, #8
 800619a:	bd80      	pop	{r7, pc}

0800619c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a37      	ldr	r2, [pc, #220]	@ (800628c <TIM_Base_SetConfig+0xf0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d008      	beq.n	80061c6 <TIM_Base_SetConfig+0x2a>
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	2380      	movs	r3, #128	@ 0x80
 80061b8:	05db      	lsls	r3, r3, #23
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d003      	beq.n	80061c6 <TIM_Base_SetConfig+0x2a>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a33      	ldr	r2, [pc, #204]	@ (8006290 <TIM_Base_SetConfig+0xf4>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d108      	bne.n	80061d8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2270      	movs	r2, #112	@ 0x70
 80061ca:	4393      	bics	r3, r2
 80061cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a2c      	ldr	r2, [pc, #176]	@ (800628c <TIM_Base_SetConfig+0xf0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d014      	beq.n	800620a <TIM_Base_SetConfig+0x6e>
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	2380      	movs	r3, #128	@ 0x80
 80061e4:	05db      	lsls	r3, r3, #23
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d00f      	beq.n	800620a <TIM_Base_SetConfig+0x6e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a28      	ldr	r2, [pc, #160]	@ (8006290 <TIM_Base_SetConfig+0xf4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d00b      	beq.n	800620a <TIM_Base_SetConfig+0x6e>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a27      	ldr	r2, [pc, #156]	@ (8006294 <TIM_Base_SetConfig+0xf8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d007      	beq.n	800620a <TIM_Base_SetConfig+0x6e>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a26      	ldr	r2, [pc, #152]	@ (8006298 <TIM_Base_SetConfig+0xfc>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d003      	beq.n	800620a <TIM_Base_SetConfig+0x6e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a25      	ldr	r2, [pc, #148]	@ (800629c <TIM_Base_SetConfig+0x100>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d108      	bne.n	800621c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	4a24      	ldr	r2, [pc, #144]	@ (80062a0 <TIM_Base_SetConfig+0x104>)
 800620e:	4013      	ands	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2280      	movs	r2, #128	@ 0x80
 8006220:	4393      	bics	r3, r2
 8006222:	001a      	movs	r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	689a      	ldr	r2, [r3, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a11      	ldr	r2, [pc, #68]	@ (800628c <TIM_Base_SetConfig+0xf0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <TIM_Base_SetConfig+0xbe>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a12      	ldr	r2, [pc, #72]	@ (8006298 <TIM_Base_SetConfig+0xfc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d003      	beq.n	800625a <TIM_Base_SetConfig+0xbe>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a11      	ldr	r2, [pc, #68]	@ (800629c <TIM_Base_SetConfig+0x100>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d103      	bne.n	8006262 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	691a      	ldr	r2, [r3, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	2201      	movs	r2, #1
 800626e:	4013      	ands	r3, r2
 8006270:	2b01      	cmp	r3, #1
 8006272:	d106      	bne.n	8006282 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	2201      	movs	r2, #1
 800627a:	4393      	bics	r3, r2
 800627c:	001a      	movs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	611a      	str	r2, [r3, #16]
  }
}
 8006282:	46c0      	nop			@ (mov r8, r8)
 8006284:	46bd      	mov	sp, r7
 8006286:	b004      	add	sp, #16
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			@ (mov r8, r8)
 800628c:	40012c00 	.word	0x40012c00
 8006290:	40000400 	.word	0x40000400
 8006294:	40002000 	.word	0x40002000
 8006298:	40014400 	.word	0x40014400
 800629c:	40014800 	.word	0x40014800
 80062a0:	fffffcff 	.word	0xfffffcff

080062a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a1b      	ldr	r3, [r3, #32]
 80062b8:	2201      	movs	r2, #1
 80062ba:	4393      	bics	r3, r2
 80062bc:	001a      	movs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2270      	movs	r2, #112	@ 0x70
 80062d2:	4393      	bics	r3, r2
 80062d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2203      	movs	r2, #3
 80062da:	4393      	bics	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2202      	movs	r2, #2
 80062ec:	4393      	bics	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a23      	ldr	r2, [pc, #140]	@ (800638c <TIM_OC1_SetConfig+0xe8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d007      	beq.n	8006312 <TIM_OC1_SetConfig+0x6e>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a22      	ldr	r2, [pc, #136]	@ (8006390 <TIM_OC1_SetConfig+0xec>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_OC1_SetConfig+0x6e>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a21      	ldr	r2, [pc, #132]	@ (8006394 <TIM_OC1_SetConfig+0xf0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10c      	bne.n	800632c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2208      	movs	r2, #8
 8006316:	4393      	bics	r3, r2
 8006318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	4313      	orrs	r3, r2
 8006322:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	2204      	movs	r2, #4
 8006328:	4393      	bics	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a17      	ldr	r2, [pc, #92]	@ (800638c <TIM_OC1_SetConfig+0xe8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d007      	beq.n	8006344 <TIM_OC1_SetConfig+0xa0>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a16      	ldr	r2, [pc, #88]	@ (8006390 <TIM_OC1_SetConfig+0xec>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d003      	beq.n	8006344 <TIM_OC1_SetConfig+0xa0>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a15      	ldr	r2, [pc, #84]	@ (8006394 <TIM_OC1_SetConfig+0xf0>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d111      	bne.n	8006368 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4a14      	ldr	r2, [pc, #80]	@ (8006398 <TIM_OC1_SetConfig+0xf4>)
 8006348:	4013      	ands	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	4a13      	ldr	r2, [pc, #76]	@ (800639c <TIM_OC1_SetConfig+0xf8>)
 8006350:	4013      	ands	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	695b      	ldr	r3, [r3, #20]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	621a      	str	r2, [r3, #32]
}
 8006382:	46c0      	nop			@ (mov r8, r8)
 8006384:	46bd      	mov	sp, r7
 8006386:	b006      	add	sp, #24
 8006388:	bd80      	pop	{r7, pc}
 800638a:	46c0      	nop			@ (mov r8, r8)
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40014400 	.word	0x40014400
 8006394:	40014800 	.word	0x40014800
 8006398:	fffffeff 	.word	0xfffffeff
 800639c:	fffffdff 	.word	0xfffffdff

080063a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b086      	sub	sp, #24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	2210      	movs	r2, #16
 80063b6:	4393      	bics	r3, r2
 80063b8:	001a      	movs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006480 <TIM_OC2_SetConfig+0xe0>)
 80063ce:	4013      	ands	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4a2b      	ldr	r2, [pc, #172]	@ (8006484 <TIM_OC2_SetConfig+0xe4>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	021b      	lsls	r3, r3, #8
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2220      	movs	r2, #32
 80063ea:	4393      	bics	r3, r2
 80063ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	011b      	lsls	r3, r3, #4
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	4a22      	ldr	r2, [pc, #136]	@ (8006488 <TIM_OC2_SetConfig+0xe8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d10d      	bne.n	800641e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	2280      	movs	r2, #128	@ 0x80
 8006406:	4393      	bics	r3, r2
 8006408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2240      	movs	r2, #64	@ 0x40
 800641a:	4393      	bics	r3, r2
 800641c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a19      	ldr	r2, [pc, #100]	@ (8006488 <TIM_OC2_SetConfig+0xe8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <TIM_OC2_SetConfig+0x96>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a18      	ldr	r2, [pc, #96]	@ (800648c <TIM_OC2_SetConfig+0xec>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_OC2_SetConfig+0x96>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a17      	ldr	r2, [pc, #92]	@ (8006490 <TIM_OC2_SetConfig+0xf0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d113      	bne.n	800645e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	4a16      	ldr	r2, [pc, #88]	@ (8006494 <TIM_OC2_SetConfig+0xf4>)
 800643a:	4013      	ands	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	4a15      	ldr	r2, [pc, #84]	@ (8006498 <TIM_OC2_SetConfig+0xf8>)
 8006442:	4013      	ands	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	621a      	str	r2, [r3, #32]
}
 8006478:	46c0      	nop			@ (mov r8, r8)
 800647a:	46bd      	mov	sp, r7
 800647c:	b006      	add	sp, #24
 800647e:	bd80      	pop	{r7, pc}
 8006480:	ffff8fff 	.word	0xffff8fff
 8006484:	fffffcff 	.word	0xfffffcff
 8006488:	40012c00 	.word	0x40012c00
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800
 8006494:	fffffbff 	.word	0xfffffbff
 8006498:	fffff7ff 	.word	0xfffff7ff

0800649c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	4a31      	ldr	r2, [pc, #196]	@ (8006578 <TIM_OC3_SetConfig+0xdc>)
 80064b2:	401a      	ands	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	69db      	ldr	r3, [r3, #28]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2270      	movs	r2, #112	@ 0x70
 80064c8:	4393      	bics	r3, r2
 80064ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2203      	movs	r2, #3
 80064d0:	4393      	bics	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	68fa      	ldr	r2, [r7, #12]
 80064da:	4313      	orrs	r3, r2
 80064dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4a26      	ldr	r2, [pc, #152]	@ (800657c <TIM_OC3_SetConfig+0xe0>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a22      	ldr	r2, [pc, #136]	@ (8006580 <TIM_OC3_SetConfig+0xe4>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d10d      	bne.n	8006516 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4a21      	ldr	r2, [pc, #132]	@ (8006584 <TIM_OC3_SetConfig+0xe8>)
 80064fe:	4013      	ands	r3, r2
 8006500:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	021b      	lsls	r3, r3, #8
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	4313      	orrs	r3, r2
 800650c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	4a1d      	ldr	r2, [pc, #116]	@ (8006588 <TIM_OC3_SetConfig+0xec>)
 8006512:	4013      	ands	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a19      	ldr	r2, [pc, #100]	@ (8006580 <TIM_OC3_SetConfig+0xe4>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d007      	beq.n	800652e <TIM_OC3_SetConfig+0x92>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a1a      	ldr	r2, [pc, #104]	@ (800658c <TIM_OC3_SetConfig+0xf0>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_OC3_SetConfig+0x92>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a19      	ldr	r2, [pc, #100]	@ (8006590 <TIM_OC3_SetConfig+0xf4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d113      	bne.n	8006556 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4a18      	ldr	r2, [pc, #96]	@ (8006594 <TIM_OC3_SetConfig+0xf8>)
 8006532:	4013      	ands	r3, r2
 8006534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	4a17      	ldr	r2, [pc, #92]	@ (8006598 <TIM_OC3_SetConfig+0xfc>)
 800653a:	4013      	ands	r3, r2
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	693a      	ldr	r2, [r7, #16]
 8006546:	4313      	orrs	r3, r2
 8006548:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	011b      	lsls	r3, r3, #4
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	4313      	orrs	r3, r2
 8006554:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68fa      	ldr	r2, [r7, #12]
 8006560:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	621a      	str	r2, [r3, #32]
}
 8006570:	46c0      	nop			@ (mov r8, r8)
 8006572:	46bd      	mov	sp, r7
 8006574:	b006      	add	sp, #24
 8006576:	bd80      	pop	{r7, pc}
 8006578:	fffffeff 	.word	0xfffffeff
 800657c:	fffffdff 	.word	0xfffffdff
 8006580:	40012c00 	.word	0x40012c00
 8006584:	fffff7ff 	.word	0xfffff7ff
 8006588:	fffffbff 	.word	0xfffffbff
 800658c:	40014400 	.word	0x40014400
 8006590:	40014800 	.word	0x40014800
 8006594:	ffffefff 	.word	0xffffefff
 8006598:	ffffdfff 	.word	0xffffdfff

0800659c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	4a24      	ldr	r2, [pc, #144]	@ (8006644 <TIM_OC4_SetConfig+0xa8>)
 80065b2:	401a      	ands	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4a20      	ldr	r2, [pc, #128]	@ (8006648 <TIM_OC4_SetConfig+0xac>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4a1f      	ldr	r2, [pc, #124]	@ (800664c <TIM_OC4_SetConfig+0xb0>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	021b      	lsls	r3, r3, #8
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006650 <TIM_OC4_SetConfig+0xb4>)
 80065e4:	4013      	ands	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	031b      	lsls	r3, r3, #12
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a17      	ldr	r2, [pc, #92]	@ (8006654 <TIM_OC4_SetConfig+0xb8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_OC4_SetConfig+0x70>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a16      	ldr	r2, [pc, #88]	@ (8006658 <TIM_OC4_SetConfig+0xbc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC4_SetConfig+0x70>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a15      	ldr	r2, [pc, #84]	@ (800665c <TIM_OC4_SetConfig+0xc0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d109      	bne.n	8006620 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	4a14      	ldr	r2, [pc, #80]	@ (8006660 <TIM_OC4_SetConfig+0xc4>)
 8006610:	4013      	ands	r3, r2
 8006612:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	019b      	lsls	r3, r3, #6
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	46c0      	nop			@ (mov r8, r8)
 800663c:	46bd      	mov	sp, r7
 800663e:	b006      	add	sp, #24
 8006640:	bd80      	pop	{r7, pc}
 8006642:	46c0      	nop			@ (mov r8, r8)
 8006644:	ffffefff 	.word	0xffffefff
 8006648:	ffff8fff 	.word	0xffff8fff
 800664c:	fffffcff 	.word	0xfffffcff
 8006650:	ffffdfff 	.word	0xffffdfff
 8006654:	40012c00 	.word	0x40012c00
 8006658:	40014400 	.word	0x40014400
 800665c:	40014800 	.word	0x40014800
 8006660:	ffffbfff 	.word	0xffffbfff

08006664 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	221f      	movs	r2, #31
 8006674:	4013      	ands	r3, r2
 8006676:	2201      	movs	r2, #1
 8006678:	409a      	lsls	r2, r3
 800667a:	0013      	movs	r3, r2
 800667c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	43d2      	mvns	r2, r2
 8006686:	401a      	ands	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a1a      	ldr	r2, [r3, #32]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	211f      	movs	r1, #31
 8006694:	400b      	ands	r3, r1
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	4099      	lsls	r1, r3
 800669a:	000b      	movs	r3, r1
 800669c:	431a      	orrs	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	621a      	str	r2, [r3, #32]
}
 80066a2:	46c0      	nop			@ (mov r8, r8)
 80066a4:	46bd      	mov	sp, r7
 80066a6:	b006      	add	sp, #24
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	223c      	movs	r2, #60	@ 0x3c
 80066ba:	5c9b      	ldrb	r3, [r3, r2]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e042      	b.n	800674a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	223c      	movs	r2, #60	@ 0x3c
 80066c8:	2101      	movs	r1, #1
 80066ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	223d      	movs	r2, #61	@ 0x3d
 80066d0:	2102      	movs	r1, #2
 80066d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2270      	movs	r2, #112	@ 0x70
 80066e8:	4393      	bics	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a14      	ldr	r2, [pc, #80]	@ (8006754 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d00a      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	2380      	movs	r3, #128	@ 0x80
 800670e:	05db      	lsls	r3, r3, #23
 8006710:	429a      	cmp	r2, r3
 8006712:	d004      	beq.n	800671e <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a0f      	ldr	r2, [pc, #60]	@ (8006758 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d10c      	bne.n	8006738 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2280      	movs	r2, #128	@ 0x80
 8006722:	4393      	bics	r3, r2
 8006724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4313      	orrs	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68ba      	ldr	r2, [r7, #8]
 8006736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	223d      	movs	r2, #61	@ 0x3d
 800673c:	2101      	movs	r1, #1
 800673e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	223c      	movs	r2, #60	@ 0x3c
 8006744:	2100      	movs	r1, #0
 8006746:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	0018      	movs	r0, r3
 800674c:	46bd      	mov	sp, r7
 800674e:	b004      	add	sp, #16
 8006750:	bd80      	pop	{r7, pc}
 8006752:	46c0      	nop			@ (mov r8, r8)
 8006754:	40012c00 	.word	0x40012c00
 8006758:	40000400 	.word	0x40000400

0800675c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	223c      	movs	r2, #60	@ 0x3c
 800676e:	5c9b      	ldrb	r3, [r3, r2]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d101      	bne.n	8006778 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006774:	2302      	movs	r3, #2
 8006776:	e03e      	b.n	80067f6 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	223c      	movs	r2, #60	@ 0x3c
 800677c:	2101      	movs	r1, #1
 800677e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	22ff      	movs	r2, #255	@ 0xff
 8006784:	4393      	bics	r3, r2
 8006786:	001a      	movs	r2, r3
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4a1b      	ldr	r2, [pc, #108]	@ (8006800 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006794:	401a      	ands	r2, r3
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	4a18      	ldr	r2, [pc, #96]	@ (8006804 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80067a2:	401a      	ands	r2, r3
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a16      	ldr	r2, [pc, #88]	@ (8006808 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80067b0:	401a      	ands	r2, r3
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	4a13      	ldr	r2, [pc, #76]	@ (800680c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80067be:	401a      	ands	r2, r3
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	4a11      	ldr	r2, [pc, #68]	@ (8006810 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80067cc:	401a      	ands	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80067da:	401a      	ands	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	223c      	movs	r2, #60	@ 0x3c
 80067f0:	2100      	movs	r1, #0
 80067f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	0018      	movs	r0, r3
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b004      	add	sp, #16
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			@ (mov r8, r8)
 8006800:	fffffcff 	.word	0xfffffcff
 8006804:	fffffbff 	.word	0xfffffbff
 8006808:	fffff7ff 	.word	0xfffff7ff
 800680c:	ffffefff 	.word	0xffffefff
 8006810:	ffffdfff 	.word	0xffffdfff
 8006814:	ffffbfff 	.word	0xffffbfff

08006818 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006820:	46c0      	nop			@ (mov r8, r8)
 8006822:	46bd      	mov	sp, r7
 8006824:	b002      	add	sp, #8
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006830:	46c0      	nop			@ (mov r8, r8)
 8006832:	46bd      	mov	sp, r7
 8006834:	b002      	add	sp, #8
 8006836:	bd80      	pop	{r7, pc}

08006838 <memset>:
 8006838:	0003      	movs	r3, r0
 800683a:	1882      	adds	r2, r0, r2
 800683c:	4293      	cmp	r3, r2
 800683e:	d100      	bne.n	8006842 <memset+0xa>
 8006840:	4770      	bx	lr
 8006842:	7019      	strb	r1, [r3, #0]
 8006844:	3301      	adds	r3, #1
 8006846:	e7f9      	b.n	800683c <memset+0x4>

08006848 <__libc_init_array>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	2600      	movs	r6, #0
 800684c:	4c0c      	ldr	r4, [pc, #48]	@ (8006880 <__libc_init_array+0x38>)
 800684e:	4d0d      	ldr	r5, [pc, #52]	@ (8006884 <__libc_init_array+0x3c>)
 8006850:	1b64      	subs	r4, r4, r5
 8006852:	10a4      	asrs	r4, r4, #2
 8006854:	42a6      	cmp	r6, r4
 8006856:	d109      	bne.n	800686c <__libc_init_array+0x24>
 8006858:	2600      	movs	r6, #0
 800685a:	f000 f819 	bl	8006890 <_init>
 800685e:	4c0a      	ldr	r4, [pc, #40]	@ (8006888 <__libc_init_array+0x40>)
 8006860:	4d0a      	ldr	r5, [pc, #40]	@ (800688c <__libc_init_array+0x44>)
 8006862:	1b64      	subs	r4, r4, r5
 8006864:	10a4      	asrs	r4, r4, #2
 8006866:	42a6      	cmp	r6, r4
 8006868:	d105      	bne.n	8006876 <__libc_init_array+0x2e>
 800686a:	bd70      	pop	{r4, r5, r6, pc}
 800686c:	00b3      	lsls	r3, r6, #2
 800686e:	58eb      	ldr	r3, [r5, r3]
 8006870:	4798      	blx	r3
 8006872:	3601      	adds	r6, #1
 8006874:	e7ee      	b.n	8006854 <__libc_init_array+0xc>
 8006876:	00b3      	lsls	r3, r6, #2
 8006878:	58eb      	ldr	r3, [r5, r3]
 800687a:	4798      	blx	r3
 800687c:	3601      	adds	r6, #1
 800687e:	e7f2      	b.n	8006866 <__libc_init_array+0x1e>
 8006880:	080068d8 	.word	0x080068d8
 8006884:	080068d8 	.word	0x080068d8
 8006888:	080068dc 	.word	0x080068dc
 800688c:	080068d8 	.word	0x080068d8

08006890 <_init>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr

0800689c <_fini>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	46c0      	nop			@ (mov r8, r8)
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr
