
pdm-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b14  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003bd4  08003bd4  00004bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c04  08003c04  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003c04  08003c04  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003c04  08003c04  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c04  08003c04  00004c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c08  08003c08  00004c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c0c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  08003c18  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003c18  000051ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c877  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb3  00000000  00000000  000118ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00013860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aaf  00000000  00000000  00014610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b7e  00000000  00000000  000150bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7da  00000000  00000000  0002dc3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009132d  00000000  00000000  0003d417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b8  00000000  00000000  000ce788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d1940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003bbc 	.word	0x08003bbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003bbc 	.word	0x08003bbc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint16_t fuelPress;
uint16_t battVolt;
uint16_t rpm;
uint16_t instFuelConsumption;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000228:	4b47      	ldr	r3, [pc, #284]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800022a:	4a48      	ldr	r2, [pc, #288]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 800022c:	6878      	ldr	r0, [r7, #4]
 800022e:	2100      	movs	r1, #0
 8000230:	f001 fbfe 	bl	8001a30 <HAL_CAN_GetRxMessage>
 8000234:	1e03      	subs	r3, r0, #0
 8000236:	d001      	beq.n	800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>

		Error_Handler();
 8000238:	f000 fc08 	bl	8000a4c <Error_Handler>
	}

	if (RxHeader.StdId == 0x3A1) {
 800023c:	4b43      	ldr	r3, [pc, #268]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a43      	ldr	r2, [pc, #268]	@ (8000350 <HAL_CAN_RxFifo0MsgPendingCallback+0x130>)
 8000242:	4293      	cmp	r3, r2
 8000244:	d125      	bne.n	8000292 <HAL_CAN_RxFifo0MsgPendingCallback+0x72>
			//ectFlag = 1;
			ect = (RxData[3] << 8) | RxData[2];
 8000246:	4b40      	ldr	r3, [pc, #256]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000248:	78db      	ldrb	r3, [r3, #3]
 800024a:	b21b      	sxth	r3, r3
 800024c:	021b      	lsls	r3, r3, #8
 800024e:	b21a      	sxth	r2, r3
 8000250:	4b3d      	ldr	r3, [pc, #244]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000252:	789b      	ldrb	r3, [r3, #2]
 8000254:	b21b      	sxth	r3, r3
 8000256:	4313      	orrs	r3, r2
 8000258:	b21b      	sxth	r3, r3
 800025a:	b29a      	uxth	r2, r3
 800025c:	4b3d      	ldr	r3, [pc, #244]	@ (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800025e:	801a      	strh	r2, [r3, #0]
			ect = ect - 50;
 8000260:	4b3c      	ldr	r3, [pc, #240]	@ (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8000262:	881b      	ldrh	r3, [r3, #0]
 8000264:	3b32      	subs	r3, #50	@ 0x32
 8000266:	b29a      	uxth	r2, r3
 8000268:	4b3a      	ldr	r3, [pc, #232]	@ (8000354 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 800026a:	801a      	strh	r2, [r3, #0]
			oilTemp = (RxData[5] << 8) | RxData[4];
 800026c:	4b36      	ldr	r3, [pc, #216]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800026e:	795b      	ldrb	r3, [r3, #5]
 8000270:	b21b      	sxth	r3, r3
 8000272:	021b      	lsls	r3, r3, #8
 8000274:	b21a      	sxth	r2, r3
 8000276:	4b34      	ldr	r3, [pc, #208]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000278:	791b      	ldrb	r3, [r3, #4]
 800027a:	b21b      	sxth	r3, r3
 800027c:	4313      	orrs	r3, r2
 800027e:	b21b      	sxth	r3, r3
 8000280:	b29a      	uxth	r2, r3
 8000282:	4b35      	ldr	r3, [pc, #212]	@ (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000284:	801a      	strh	r2, [r3, #0]
			oilTemp = oilTemp - 50;
 8000286:	4b34      	ldr	r3, [pc, #208]	@ (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000288:	881b      	ldrh	r3, [r3, #0]
 800028a:	3b32      	subs	r3, #50	@ 0x32
 800028c:	b29a      	uxth	r2, r3
 800028e:	4b32      	ldr	r3, [pc, #200]	@ (8000358 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8000290:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A2){
 8000292:	4b2e      	ldr	r3, [pc, #184]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a31      	ldr	r2, [pc, #196]	@ (800035c <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d119      	bne.n	80002d0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>
			fuelPress = (RxData[1] << 8) | RxData[0];
 800029c:	4b2a      	ldr	r3, [pc, #168]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800029e:	785b      	ldrb	r3, [r3, #1]
 80002a0:	b21b      	sxth	r3, r3
 80002a2:	021b      	lsls	r3, r3, #8
 80002a4:	b21a      	sxth	r2, r3
 80002a6:	4b28      	ldr	r3, [pc, #160]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	b21b      	sxth	r3, r3
 80002ac:	4313      	orrs	r3, r2
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	b29a      	uxth	r2, r3
 80002b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000360 <HAL_CAN_RxFifo0MsgPendingCallback+0x140>)
 80002b4:	801a      	strh	r2, [r3, #0]
			oilPress = (RxData[3] << 8) | RxData[2];
 80002b6:	4b24      	ldr	r3, [pc, #144]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80002b8:	78db      	ldrb	r3, [r3, #3]
 80002ba:	b21b      	sxth	r3, r3
 80002bc:	021b      	lsls	r3, r3, #8
 80002be:	b21a      	sxth	r2, r3
 80002c0:	4b21      	ldr	r3, [pc, #132]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80002c2:	789b      	ldrb	r3, [r3, #2]
 80002c4:	b21b      	sxth	r3, r3
 80002c6:	4313      	orrs	r3, r2
 80002c8:	b21b      	sxth	r3, r3
 80002ca:	b29a      	uxth	r2, r3
 80002cc:	4b25      	ldr	r3, [pc, #148]	@ (8000364 <HAL_CAN_RxFifo0MsgPendingCallback+0x144>)
 80002ce:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x3A3){
 80002d0:	4b1e      	ldr	r3, [pc, #120]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a24      	ldr	r2, [pc, #144]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0x148>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d10c      	bne.n	80002f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>
			instFuelConsumption = (RxData[3] << 8) | RxData[2];
 80002da:	4b1b      	ldr	r3, [pc, #108]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80002dc:	78db      	ldrb	r3, [r3, #3]
 80002de:	b21b      	sxth	r3, r3
 80002e0:	021b      	lsls	r3, r3, #8
 80002e2:	b21a      	sxth	r2, r3
 80002e4:	4b18      	ldr	r3, [pc, #96]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 80002e6:	789b      	ldrb	r3, [r3, #2]
 80002e8:	b21b      	sxth	r3, r3
 80002ea:	4313      	orrs	r3, r2
 80002ec:	b21b      	sxth	r3, r3
 80002ee:	b29a      	uxth	r2, r3
 80002f0:	4b1e      	ldr	r3, [pc, #120]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0x14c>)
 80002f2:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A4){
 80002f4:	4b15      	ldr	r3, [pc, #84]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	23e9      	movs	r3, #233	@ 0xe9
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d10c      	bne.n	800031a <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
			rpm = (RxData[6] << 8) | RxData[5];
 8000300:	4b11      	ldr	r3, [pc, #68]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000302:	799b      	ldrb	r3, [r3, #6]
 8000304:	b21b      	sxth	r3, r3
 8000306:	021b      	lsls	r3, r3, #8
 8000308:	b21a      	sxth	r2, r3
 800030a:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 800030c:	795b      	ldrb	r3, [r3, #5]
 800030e:	b21b      	sxth	r3, r3
 8000310:	4313      	orrs	r3, r2
 8000312:	b21b      	sxth	r3, r3
 8000314:	b29a      	uxth	r2, r3
 8000316:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x150>)
 8000318:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A5){
 800031a:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <HAL_CAN_RxFifo0MsgPendingCallback+0x12c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a15      	ldr	r2, [pc, #84]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x154>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d10c      	bne.n	800033e <HAL_CAN_RxFifo0MsgPendingCallback+0x11e>
			battVolt = (RxData[1] << 8) | RxData[0];
 8000324:	4b08      	ldr	r3, [pc, #32]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000326:	785b      	ldrb	r3, [r3, #1]
 8000328:	b21b      	sxth	r3, r3
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	b21a      	sxth	r2, r3
 800032e:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>)
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	b21b      	sxth	r3, r3
 8000334:	4313      	orrs	r3, r2
 8000336:	b21b      	sxth	r3, r3
 8000338:	b29a      	uxth	r2, r3
 800033a:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x158>)
 800033c:	801a      	strh	r2, [r3, #0]
	}
}
 800033e:	46c0      	nop			@ (mov r8, r8)
 8000340:	46bd      	mov	sp, r7
 8000342:	b002      	add	sp, #8
 8000344:	bd80      	pop	{r7, pc}
 8000346:	46c0      	nop			@ (mov r8, r8)
 8000348:	200001c0 	.word	0x200001c0
 800034c:	20000180 	.word	0x20000180
 8000350:	000003a1 	.word	0x000003a1
 8000354:	200001da 	.word	0x200001da
 8000358:	200001dc 	.word	0x200001dc
 800035c:	000003a2 	.word	0x000003a2
 8000360:	200001e0 	.word	0x200001e0
 8000364:	200001de 	.word	0x200001de
 8000368:	000003a3 	.word	0x000003a3
 800036c:	200001e6 	.word	0x200001e6
 8000370:	200001e4 	.word	0x200001e4
 8000374:	000003a5 	.word	0x000003a5
 8000378:	200001e2 	.word	0x200001e2

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000380:	f000 fd9a 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000384:	f000 f824 	bl	80003d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000388:	f000 fa42 	bl	8000810 <MX_GPIO_Init>
  MX_DMA_Init();
 800038c:	f000 fa22 	bl	80007d4 <MX_DMA_Init>
  MX_ADC_Init();
 8000390:	f000 f86c 	bl	800046c <MX_ADC_Init>
  MX_CAN_Init();
 8000394:	f000 f93a 	bl	800060c <MX_CAN_Init>
  MX_SPI2_Init();
 8000398:	f000 f970 	bl	800067c <MX_SPI2_Init>
  MX_TIM3_Init();
 800039c:	f000 f9ac 	bl	80006f8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adc_buff, 9); //Inicia el DMA se le pasa el ADC, la variable donde guardar los datos y el numero de canales
 80003a0:	4909      	ldr	r1, [pc, #36]	@ (80003c8 <main+0x4c>)
 80003a2:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <main+0x50>)
 80003a4:	2209      	movs	r2, #9
 80003a6:	0018      	movs	r0, r3
 80003a8:	f000 ff9c 	bl	80012e4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc); //Se inicia la interrupcion de fin de conversion del ADC en el "Set-up"
 80003ac:	4b07      	ldr	r3, [pc, #28]	@ (80003cc <main+0x50>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 ff26 	bl	8001200 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOA, WPR_Signal_Pin, SET);
 80003b4:	2380      	movs	r3, #128	@ 0x80
 80003b6:	0059      	lsls	r1, r3, #1
 80003b8:	2390      	movs	r3, #144	@ 0x90
 80003ba:	05db      	lsls	r3, r3, #23
 80003bc:	2201      	movs	r2, #1
 80003be:	0018      	movs	r0, r3
 80003c0:	f002 fa54 	bl	800286c <HAL_GPIO_WritePin>
 80003c4:	e7f6      	b.n	80003b4 <main+0x38>
 80003c6:	46c0      	nop			@ (mov r8, r8)
 80003c8:	2000019c 	.word	0x2000019c
 80003cc:	20000028 	.word	0x20000028

080003d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b093      	sub	sp, #76	@ 0x4c
 80003d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d6:	2414      	movs	r4, #20
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2334      	movs	r3, #52	@ 0x34
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f003 fbbf 	bl	8003b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	0018      	movs	r0, r3
 80003ea:	2310      	movs	r3, #16
 80003ec:	001a      	movs	r2, r3
 80003ee:	2100      	movs	r1, #0
 80003f0:	f003 fbb8 	bl	8003b64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80003f4:	0021      	movs	r1, r4
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2211      	movs	r2, #17
 80003fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003fc:	187b      	adds	r3, r7, r1
 80003fe:	2201      	movs	r2, #1
 8000400:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000402:	187b      	adds	r3, r7, r1
 8000404:	2201      	movs	r2, #1
 8000406:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000408:	187b      	adds	r3, r7, r1
 800040a:	2210      	movs	r2, #16
 800040c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800040e:	187b      	adds	r3, r7, r1
 8000410:	2202      	movs	r2, #2
 8000412:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000414:	187b      	adds	r3, r7, r1
 8000416:	2280      	movs	r2, #128	@ 0x80
 8000418:	0252      	lsls	r2, r2, #9
 800041a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2200      	movs	r2, #0
 8000420:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	187b      	adds	r3, r7, r1
 800042a:	0018      	movs	r0, r3
 800042c:	f002 fa3c 	bl	80028a8 <HAL_RCC_OscConfig>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000434:	f000 fb0a 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000438:	1d3b      	adds	r3, r7, #4
 800043a:	2207      	movs	r2, #7
 800043c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	2202      	movs	r2, #2
 8000442:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800044a:	1d3b      	adds	r3, r7, #4
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	2101      	movs	r1, #1
 8000454:	0018      	movs	r0, r3
 8000456:	f002 fdad 	bl	8002fb4 <HAL_RCC_ClockConfig>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800045e:	f000 faf5 	bl	8000a4c <Error_Handler>
  }
}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b013      	add	sp, #76	@ 0x4c
 8000468:	bd90      	pop	{r4, r7, pc}
	...

0800046c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	0018      	movs	r0, r3
 8000476:	230c      	movs	r3, #12
 8000478:	001a      	movs	r2, r3
 800047a:	2100      	movs	r1, #0
 800047c:	f003 fb72 	bl	8003b64 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000480:	4b60      	ldr	r3, [pc, #384]	@ (8000604 <MX_ADC_Init+0x198>)
 8000482:	4a61      	ldr	r2, [pc, #388]	@ (8000608 <MX_ADC_Init+0x19c>)
 8000484:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000486:	4b5f      	ldr	r3, [pc, #380]	@ (8000604 <MX_ADC_Init+0x198>)
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800048c:	4b5d      	ldr	r3, [pc, #372]	@ (8000604 <MX_ADC_Init+0x198>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000492:	4b5c      	ldr	r3, [pc, #368]	@ (8000604 <MX_ADC_Init+0x198>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000498:	4b5a      	ldr	r3, [pc, #360]	@ (8000604 <MX_ADC_Init+0x198>)
 800049a:	2201      	movs	r2, #1
 800049c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800049e:	4b59      	ldr	r3, [pc, #356]	@ (8000604 <MX_ADC_Init+0x198>)
 80004a0:	2204      	movs	r2, #4
 80004a2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004a4:	4b57      	ldr	r3, [pc, #348]	@ (8000604 <MX_ADC_Init+0x198>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004aa:	4b56      	ldr	r3, [pc, #344]	@ (8000604 <MX_ADC_Init+0x198>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80004b0:	4b54      	ldr	r3, [pc, #336]	@ (8000604 <MX_ADC_Init+0x198>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004b6:	4b53      	ldr	r3, [pc, #332]	@ (8000604 <MX_ADC_Init+0x198>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004bc:	4b51      	ldr	r3, [pc, #324]	@ (8000604 <MX_ADC_Init+0x198>)
 80004be:	22c2      	movs	r2, #194	@ 0xc2
 80004c0:	32ff      	adds	r2, #255	@ 0xff
 80004c2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004c4:	4b4f      	ldr	r3, [pc, #316]	@ (8000604 <MX_ADC_Init+0x198>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80004ca:	4b4e      	ldr	r3, [pc, #312]	@ (8000604 <MX_ADC_Init+0x198>)
 80004cc:	2224      	movs	r2, #36	@ 0x24
 80004ce:	2101      	movs	r1, #1
 80004d0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000604 <MX_ADC_Init+0x198>)
 80004d4:	2201      	movs	r2, #1
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000604 <MX_ADC_Init+0x198>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 fd50 	bl	8000f80 <HAL_ADC_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80004e4:	f000 fab2 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004ee:	1d3b      	adds	r3, r7, #4
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	0152      	lsls	r2, r2, #5
 80004f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80004f6:	1d3b      	adds	r3, r7, #4
 80004f8:	2207      	movs	r2, #7
 80004fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004fc:	1d3a      	adds	r2, r7, #4
 80004fe:	4b41      	ldr	r3, [pc, #260]	@ (8000604 <MX_ADC_Init+0x198>)
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f000 ff80 	bl	8001408 <HAL_ADC_ConfigChannel>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800050c:	f000 fa9e 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000516:	1d3a      	adds	r2, r7, #4
 8000518:	4b3a      	ldr	r3, [pc, #232]	@ (8000604 <MX_ADC_Init+0x198>)
 800051a:	0011      	movs	r1, r2
 800051c:	0018      	movs	r0, r3
 800051e:	f000 ff73 	bl	8001408 <HAL_ADC_ConfigChannel>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000526:	f000 fa91 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2202      	movs	r2, #2
 800052e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000530:	1d3a      	adds	r2, r7, #4
 8000532:	4b34      	ldr	r3, [pc, #208]	@ (8000604 <MX_ADC_Init+0x198>)
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f000 ff66 	bl	8001408 <HAL_ADC_ConfigChannel>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000540:	f000 fa84 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2203      	movs	r2, #3
 8000548:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800054a:	1d3a      	adds	r2, r7, #4
 800054c:	4b2d      	ldr	r3, [pc, #180]	@ (8000604 <MX_ADC_Init+0x198>)
 800054e:	0011      	movs	r1, r2
 8000550:	0018      	movs	r0, r3
 8000552:	f000 ff59 	bl	8001408 <HAL_ADC_ConfigChannel>
 8000556:	1e03      	subs	r3, r0, #0
 8000558:	d001      	beq.n	800055e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800055a:	f000 fa77 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2204      	movs	r2, #4
 8000562:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000564:	1d3a      	adds	r2, r7, #4
 8000566:	4b27      	ldr	r3, [pc, #156]	@ (8000604 <MX_ADC_Init+0x198>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f000 ff4c 	bl	8001408 <HAL_ADC_ConfigChannel>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000574:	f000 fa6a 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2205      	movs	r2, #5
 800057c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800057e:	1d3a      	adds	r2, r7, #4
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <MX_ADC_Init+0x198>)
 8000582:	0011      	movs	r1, r2
 8000584:	0018      	movs	r0, r3
 8000586:	f000 ff3f 	bl	8001408 <HAL_ADC_ConfigChannel>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800058e:	f000 fa5d 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2206      	movs	r2, #6
 8000596:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000598:	1d3a      	adds	r2, r7, #4
 800059a:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <MX_ADC_Init+0x198>)
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f000 ff32 	bl	8001408 <HAL_ADC_ConfigChannel>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC_Init+0x140>
  {
    Error_Handler();
 80005a8:	f000 fa50 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2207      	movs	r2, #7
 80005b0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005b2:	1d3a      	adds	r2, r7, #4
 80005b4:	4b13      	ldr	r3, [pc, #76]	@ (8000604 <MX_ADC_Init+0x198>)
 80005b6:	0011      	movs	r1, r2
 80005b8:	0018      	movs	r0, r3
 80005ba:	f000 ff25 	bl	8001408 <HAL_ADC_ConfigChannel>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 80005c2:	f000 fa43 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2208      	movs	r2, #8
 80005ca:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005cc:	1d3a      	adds	r2, r7, #4
 80005ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000604 <MX_ADC_Init+0x198>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 ff18 	bl	8001408 <HAL_ADC_ConfigChannel>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80005dc:	f000 fa36 	bl	8000a4c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2209      	movs	r2, #9
 80005e4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80005e6:	1d3a      	adds	r2, r7, #4
 80005e8:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_ADC_Init+0x198>)
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f000 ff0b 	bl	8001408 <HAL_ADC_ConfigChannel>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80005f6:	f000 fa29 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80005fa:	46c0      	nop			@ (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b004      	add	sp, #16
 8000600:	bd80      	pop	{r7, pc}
 8000602:	46c0      	nop			@ (mov r8, r8)
 8000604:	20000028 	.word	0x20000028
 8000608:	40012400 	.word	0x40012400

0800060c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_CAN_Init+0x68>)
 8000612:	4a19      	ldr	r2, [pc, #100]	@ (8000678 <MX_CAN_Init+0x6c>)
 8000614:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_CAN_Init+0x68>)
 8000618:	2203      	movs	r2, #3
 800061a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_CAN_Init+0x68>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_CAN_Init+0x68>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_CAN_Init+0x68>)
 800062a:	22c0      	movs	r2, #192	@ 0xc0
 800062c:	0312      	lsls	r2, r2, #12
 800062e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000630:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_CAN_Init+0x68>)
 8000632:	2280      	movs	r2, #128	@ 0x80
 8000634:	0352      	lsls	r2, r2, #13
 8000636:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_CAN_Init+0x68>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <MX_CAN_Init+0x68>)
 8000640:	2200      	movs	r2, #0
 8000642:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000644:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <MX_CAN_Init+0x68>)
 8000646:	2200      	movs	r2, #0
 8000648:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 800064a:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <MX_CAN_Init+0x68>)
 800064c:	2201      	movs	r2, #1
 800064e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000650:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <MX_CAN_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000656:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <MX_CAN_Init+0x68>)
 8000658:	2200      	movs	r2, #0
 800065a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <MX_CAN_Init+0x68>)
 800065e:	0018      	movs	r0, r3
 8000660:	f001 f8e8 	bl	8001834 <HAL_CAN_Init>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000668:	f000 f9f0 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	200000ac 	.word	0x200000ac
 8000678:	40006400 	.word	0x40006400

0800067c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000680:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_SPI2_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <MX_SPI2_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <MX_SPI2_Init+0x74>)
 8000688:	2282      	movs	r2, #130	@ 0x82
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b18      	ldr	r3, [pc, #96]	@ (80006f0 <MX_SPI2_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <MX_SPI2_Init+0x74>)
 8000696:	22f0      	movs	r2, #240	@ 0xf0
 8000698:	0112      	lsls	r2, r2, #4
 800069a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069c:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_SPI2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006a8:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006aa:	2280      	movs	r2, #128	@ 0x80
 80006ac:	0092      	lsls	r2, r2, #2
 80006ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006b2:	2208      	movs	r2, #8
 80006b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006ca:	2207      	movs	r2, #7
 80006cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006d6:	2208      	movs	r2, #8
 80006d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006da:	4b05      	ldr	r3, [pc, #20]	@ (80006f0 <MX_SPI2_Init+0x74>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f002 fdb7 	bl	8003250 <HAL_SPI_Init>
 80006e2:	1e03      	subs	r3, r0, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80006e6:	f000 f9b1 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	200000d4 	.word	0x200000d4
 80006f4:	40003800 	.word	0x40003800

080006f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fe:	2320      	movs	r3, #32
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	0018      	movs	r0, r3
 8000704:	2308      	movs	r3, #8
 8000706:	001a      	movs	r2, r3
 8000708:	2100      	movs	r1, #0
 800070a:	f003 fa2b 	bl	8003b64 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	0018      	movs	r0, r3
 8000712:	231c      	movs	r3, #28
 8000714:	001a      	movs	r2, r3
 8000716:	2100      	movs	r1, #0
 8000718:	f003 fa24 	bl	8003b64 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800071c:	4b29      	ldr	r3, [pc, #164]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 800071e:	4a2a      	ldr	r2, [pc, #168]	@ (80007c8 <MX_TIM3_Init+0xd0>)
 8000720:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 960-1;
 8000722:	4b28      	ldr	r3, [pc, #160]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 8000724:	4a29      	ldr	r2, [pc, #164]	@ (80007cc <MX_TIM3_Init+0xd4>)
 8000726:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000728:	4b26      	ldr	r3, [pc, #152]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800072e:	4b25      	ldr	r3, [pc, #148]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 8000730:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <MX_TIM3_Init+0xd8>)
 8000732:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000734:	4b23      	ldr	r3, [pc, #140]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800073a:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000740:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 8000742:	0018      	movs	r0, r3
 8000744:	f002 fe3c 	bl	80033c0 <HAL_TIM_PWM_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800074c:	f000 f97e 	bl	8000a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000750:	2120      	movs	r1, #32
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800075e:	187a      	adds	r2, r7, r1
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f003 f9a5 	bl	8003ab4 <HAL_TIMEx_MasterConfigSynchronization>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800076e:	f000 f96d 	bl	8000a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2260      	movs	r2, #96	@ 0x60
 8000776:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000784:	1d3b      	adds	r3, r7, #4
 8000786:	2200      	movs	r2, #0
 8000788:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800078a:	1d39      	adds	r1, r7, #4
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 800078e:	2200      	movs	r2, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f002 fe65 	bl	8003460 <HAL_TIM_PWM_ConfigChannel>
 8000796:	1e03      	subs	r3, r0, #0
 8000798:	d001      	beq.n	800079e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800079a:	f000 f957 	bl	8000a4c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800079e:	1d39      	adds	r1, r7, #4
 80007a0:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 fe5b 	bl	8003460 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80007ae:	f000 f94d 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80007b2:	4b04      	ldr	r3, [pc, #16]	@ (80007c4 <MX_TIM3_Init+0xcc>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f000 fac5 	bl	8000d44 <HAL_TIM_MspPostInit>

}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	b00a      	add	sp, #40	@ 0x28
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	46c0      	nop			@ (mov r8, r8)
 80007c4:	20000138 	.word	0x20000138
 80007c8:	40000400 	.word	0x40000400
 80007cc:	000003bf 	.word	0x000003bf
 80007d0:	000003e7 	.word	0x000003e7

080007d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007da:	4b0c      	ldr	r3, [pc, #48]	@ (800080c <MX_DMA_Init+0x38>)
 80007dc:	695a      	ldr	r2, [r3, #20]
 80007de:	4b0b      	ldr	r3, [pc, #44]	@ (800080c <MX_DMA_Init+0x38>)
 80007e0:	2101      	movs	r1, #1
 80007e2:	430a      	orrs	r2, r1
 80007e4:	615a      	str	r2, [r3, #20]
 80007e6:	4b09      	ldr	r3, [pc, #36]	@ (800080c <MX_DMA_Init+0x38>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	2201      	movs	r2, #1
 80007ec:	4013      	ands	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2009      	movs	r0, #9
 80007f8:	f001 fd06 	bl	8002208 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007fc:	2009      	movs	r0, #9
 80007fe:	f001 fd18 	bl	8002232 <HAL_NVIC_EnableIRQ>

}
 8000802:	46c0      	nop			@ (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b002      	add	sp, #8
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	40021000 	.word	0x40021000

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b590      	push	{r4, r7, lr}
 8000812:	b08b      	sub	sp, #44	@ 0x2c
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	2414      	movs	r4, #20
 8000818:	193b      	adds	r3, r7, r4
 800081a:	0018      	movs	r0, r3
 800081c:	2314      	movs	r3, #20
 800081e:	001a      	movs	r2, r3
 8000820:	2100      	movs	r1, #0
 8000822:	f003 f99f 	bl	8003b64 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b69      	ldr	r3, [pc, #420]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b68      	ldr	r3, [pc, #416]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0309      	lsls	r1, r1, #12
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b65      	ldr	r3, [pc, #404]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	031b      	lsls	r3, r3, #12
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000842:	4b62      	ldr	r3, [pc, #392]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 8000844:	695a      	ldr	r2, [r3, #20]
 8000846:	4b61      	ldr	r3, [pc, #388]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 8000848:	2180      	movs	r1, #128	@ 0x80
 800084a:	03c9      	lsls	r1, r1, #15
 800084c:	430a      	orrs	r2, r1
 800084e:	615a      	str	r2, [r3, #20]
 8000850:	4b5e      	ldr	r3, [pc, #376]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 8000852:	695a      	ldr	r2, [r3, #20]
 8000854:	2380      	movs	r3, #128	@ 0x80
 8000856:	03db      	lsls	r3, r3, #15
 8000858:	4013      	ands	r3, r2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b5b      	ldr	r3, [pc, #364]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b5a      	ldr	r3, [pc, #360]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b57      	ldr	r3, [pc, #348]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	4b54      	ldr	r3, [pc, #336]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 800087c:	695a      	ldr	r2, [r3, #20]
 800087e:	4b53      	ldr	r3, [pc, #332]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	02c9      	lsls	r1, r1, #11
 8000884:	430a      	orrs	r2, r1
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	4b50      	ldr	r3, [pc, #320]	@ (80009cc <MX_GPIO_Init+0x1bc>)
 800088a:	695a      	ldr	r2, [r3, #20]
 800088c:	2380      	movs	r3, #128	@ 0x80
 800088e:	02db      	lsls	r3, r3, #11
 8000890:	4013      	ands	r3, r2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, GPIO_PIN_RESET);
 8000896:	2380      	movs	r3, #128	@ 0x80
 8000898:	019b      	lsls	r3, r3, #6
 800089a:	484d      	ldr	r0, [pc, #308]	@ (80009d0 <MX_GPIO_Init+0x1c0>)
 800089c:	2200      	movs	r2, #0
 800089e:	0019      	movs	r1, r3
 80008a0:	f001 ffe4 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V12_NP_Signal_Pin|F1R_Signal_Pin|F2L_Signal_Pin|F1L_Signal_Pin, GPIO_PIN_RESET);
 80008a4:	4b4b      	ldr	r3, [pc, #300]	@ (80009d4 <MX_GPIO_Init+0x1c4>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	21cc      	movs	r1, #204	@ 0xcc
 80008aa:	0018      	movs	r0, r3
 80008ac:	f001 ffde 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin, GPIO_PIN_RESET);
 80008b0:	2387      	movs	r3, #135	@ 0x87
 80008b2:	0219      	lsls	r1, r3, #8
 80008b4:	2390      	movs	r3, #144	@ 0x90
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2200      	movs	r2, #0
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 ffd6 	bl	800286c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ecu_Signal_Pin */
  GPIO_InitStruct.Pin = Ecu_Signal_Pin;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2280      	movs	r2, #128	@ 0x80
 80008c4:	0192      	lsls	r2, r2, #6
 80008c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	2201      	movs	r2, #1
 80008cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ecu_Signal_GPIO_Port, &GPIO_InitStruct);
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	4a3c      	ldr	r2, [pc, #240]	@ (80009d0 <MX_GPIO_Init+0x1c0>)
 80008de:	0019      	movs	r1, r3
 80008e0:	0010      	movs	r0, r2
 80008e2:	f001 fe5b 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : V12_NP_Signal_Pin F1R_Signal_Pin F2L_Signal_Pin F1L_Signal_Pin */
  GPIO_InitStruct.Pin = V12_NP_Signal_Pin|F1R_Signal_Pin|F2L_Signal_Pin|F1L_Signal_Pin;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	22cc      	movs	r2, #204	@ 0xcc
 80008ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2201      	movs	r2, #1
 80008f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	4a34      	ldr	r2, [pc, #208]	@ (80009d4 <MX_GPIO_Init+0x1c4>)
 8000902:	0019      	movs	r1, r3
 8000904:	0010      	movs	r0, r2
 8000906:	f001 fe49 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : F1L_pwm_Pin F2L_pwm_Pin */
  GPIO_InitStruct.Pin = F1L_pwm_Pin|F2L_pwm_Pin;
 800090a:	0021      	movs	r1, r4
 800090c:	187b      	adds	r3, r7, r1
 800090e:	22c0      	movs	r2, #192	@ 0xc0
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	000c      	movs	r4, r1
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2202      	movs	r2, #2
 800091a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000928:	193b      	adds	r3, r7, r4
 800092a:	2202      	movs	r2, #2
 800092c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092e:	193b      	adds	r3, r7, r4
 8000930:	4a28      	ldr	r2, [pc, #160]	@ (80009d4 <MX_GPIO_Init+0x1c4>)
 8000932:	0019      	movs	r1, r3
 8000934:	0010      	movs	r0, r2
 8000936:	f001 fe31 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pins : WPR_Signal_Pin WPL_Signal_Pin Reset_Pin F2R_Signal_Pin */
  GPIO_InitStruct.Pin = WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin;
 800093a:	0021      	movs	r1, r4
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2287      	movs	r2, #135	@ 0x87
 8000940:	0212      	lsls	r2, r2, #8
 8000942:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000944:	000c      	movs	r4, r1
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2201      	movs	r2, #1
 800094a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	193b      	adds	r3, r7, r4
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	193b      	adds	r3, r7, r4
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	193a      	adds	r2, r7, r4
 800095a:	2390      	movs	r3, #144	@ 0x90
 800095c:	05db      	lsls	r3, r3, #23
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fe1b 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : WPL_pwm_Pin */
  GPIO_InitStruct.Pin = WPL_pwm_Pin;
 8000966:	0021      	movs	r1, r4
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2280      	movs	r2, #128	@ 0x80
 800096c:	0052      	lsls	r2, r2, #1
 800096e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	000c      	movs	r4, r1
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2202      	movs	r2, #2
 8000976:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	193b      	adds	r3, r7, r4
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2200      	movs	r2, #0
 8000982:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2202      	movs	r2, #2
 8000988:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(WPL_pwm_GPIO_Port, &GPIO_InitStruct);
 800098a:	193b      	adds	r3, r7, r4
 800098c:	4a11      	ldr	r2, [pc, #68]	@ (80009d4 <MX_GPIO_Init+0x1c4>)
 800098e:	0019      	movs	r1, r3
 8000990:	0010      	movs	r0, r2
 8000992:	f001 fe03 	bl	800259c <HAL_GPIO_Init>

  /*Configure GPIO pin : WPR_pwm_Pin */
  GPIO_InitStruct.Pin = WPR_pwm_Pin;
 8000996:	0021      	movs	r1, r4
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2280      	movs	r2, #128	@ 0x80
 800099c:	0092      	lsls	r2, r2, #2
 800099e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2202      	movs	r2, #2
 80009a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2202      	movs	r2, #2
 80009b6:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(WPR_pwm_GPIO_Port, &GPIO_InitStruct);
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	4a06      	ldr	r2, [pc, #24]	@ (80009d4 <MX_GPIO_Init+0x1c4>)
 80009bc:	0019      	movs	r1, r3
 80009be:	0010      	movs	r0, r2
 80009c0:	f001 fdec 	bl	800259c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b00b      	add	sp, #44	@ 0x2c
 80009ca:	bd90      	pop	{r4, r7, pc}
 80009cc:	40021000 	.word	0x40021000
 80009d0:	48000800 	.word	0x48000800
 80009d4:	48000400 	.word	0x48000400

080009d8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	value_adc[0] = (uint16_t) adc_buff[0];	//Los valores pasan de 32 a 16 bits
 80009e0:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 80009e8:	801a      	strh	r2, [r3, #0]
	value_adc[1] = (uint16_t) adc_buff[1];
 80009ea:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 80009f2:	805a      	strh	r2, [r3, #2]
	value_adc[2] = (uint16_t) adc_buff[2];
 80009f4:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 80009fc:	809a      	strh	r2, [r3, #4]
	value_adc[3] = (uint16_t) adc_buff[3];
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000a00:	68db      	ldr	r3, [r3, #12]
 8000a02:	b29a      	uxth	r2, r3
 8000a04:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a06:	80da      	strh	r2, [r3, #6]
	value_adc[4] = (uint16_t) adc_buff[4];
 8000a08:	4b0e      	ldr	r3, [pc, #56]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a10:	811a      	strh	r2, [r3, #8]
	value_adc[5] = (uint16_t) adc_buff[5];
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b0b      	ldr	r3, [pc, #44]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a1a:	815a      	strh	r2, [r3, #10]
	value_adc[6] = (uint16_t) adc_buff[6];
 8000a1c:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a24:	819a      	strh	r2, [r3, #12]
	value_adc[7] = (uint16_t) adc_buff[7];
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000a28:	69db      	ldr	r3, [r3, #28]
 8000a2a:	b29a      	uxth	r2, r3
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a2e:	81da      	strh	r2, [r3, #14]
	value_adc[8] = (uint16_t) adc_buff[8];
 8000a30:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000a32:	6a1b      	ldr	r3, [r3, #32]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <HAL_ADC_ConvCpltCallback+0x70>)
 8000a38:	821a      	strh	r2, [r3, #16]
}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	2000019c 	.word	0x2000019c
 8000a48:	200001c8 	.word	0x200001c8

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a60:	699a      	ldr	r2, [r3, #24]
 8000a62:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	430a      	orrs	r2, r1
 8000a68:	619a      	str	r2, [r3, #24]
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	4013      	ands	r3, r2
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b09      	ldr	r3, [pc, #36]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a78:	69da      	ldr	r2, [r3, #28]
 8000a7a:	4b08      	ldr	r3, [pc, #32]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a7c:	2180      	movs	r1, #128	@ 0x80
 8000a7e:	0549      	lsls	r1, r1, #21
 8000a80:	430a      	orrs	r2, r1
 8000a82:	61da      	str	r2, [r3, #28]
 8000a84:	4b05      	ldr	r3, [pc, #20]	@ (8000a9c <HAL_MspInit+0x44>)
 8000a86:	69da      	ldr	r2, [r3, #28]
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	055b      	lsls	r3, r3, #21
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b08b      	sub	sp, #44	@ 0x2c
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	2414      	movs	r4, #20
 8000aaa:	193b      	adds	r3, r7, r4
 8000aac:	0018      	movs	r0, r3
 8000aae:	2314      	movs	r3, #20
 8000ab0:	001a      	movs	r2, r3
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	f003 f856 	bl	8003b64 <memset>
  if(hadc->Instance==ADC1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a3b      	ldr	r2, [pc, #236]	@ (8000bac <HAL_ADC_MspInit+0x10c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d170      	bne.n	8000ba4 <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000ac4:	699a      	ldr	r2, [r3, #24]
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	0089      	lsls	r1, r1, #2
 8000acc:	430a      	orrs	r2, r1
 8000ace:	619a      	str	r2, [r3, #24]
 8000ad0:	4b37      	ldr	r3, [pc, #220]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000ad2:	699a      	ldr	r2, [r3, #24]
 8000ad4:	2380      	movs	r3, #128	@ 0x80
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4013      	ands	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	4b34      	ldr	r3, [pc, #208]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000ae4:	2180      	movs	r1, #128	@ 0x80
 8000ae6:	0289      	lsls	r1, r1, #10
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	4b30      	ldr	r3, [pc, #192]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000aee:	695a      	ldr	r2, [r3, #20]
 8000af0:	2380      	movs	r3, #128	@ 0x80
 8000af2:	029b      	lsls	r3, r3, #10
 8000af4:	4013      	ands	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b2d      	ldr	r3, [pc, #180]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	02c9      	lsls	r1, r1, #11
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b29      	ldr	r3, [pc, #164]	@ (8000bb0 <HAL_ADC_MspInit+0x110>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2380      	movs	r3, #128	@ 0x80
 8000b0e:	02db      	lsls	r3, r3, #11
 8000b10:	4013      	ands	r3, r2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Altrnator_Sens_Pin|WPL_Sens_Pin|WPR_Sens_Pin|F1R_Sens_Pin
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	22ff      	movs	r2, #255	@ 0xff
 8000b1a:	601a      	str	r2, [r3, #0]
                          |F2R_Sens_Pin|F1L_Sens_Pin|F2L_Sens_Pin|V12_NP_Sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2203      	movs	r2, #3
 8000b20:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	193a      	adds	r2, r7, r4
 8000b2a:	2390      	movs	r3, #144	@ 0x90
 8000b2c:	05db      	lsls	r3, r3, #23
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f001 fd33 	bl	800259c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V12_P_Sens_Pin|Temp_Sens_Pin;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2203      	movs	r2, #3
 8000b3a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2203      	movs	r2, #3
 8000b40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	193b      	adds	r3, r7, r4
 8000b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb4 <HAL_ADC_MspInit+0x114>)
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	0010      	movs	r0, r2
 8000b50:	f001 fd24 	bl	800259c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000b54:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b56:	4a19      	ldr	r2, [pc, #100]	@ (8000bbc <HAL_ADC_MspInit+0x11c>)
 8000b58:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000b66:	4b14      	ldr	r3, [pc, #80]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b68:	2280      	movs	r2, #128	@ 0x80
 8000b6a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b74:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b76:	2280      	movs	r2, #128	@ 0x80
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b7e:	2220      	movs	r2, #32
 8000b80:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b88:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f001 fb6e 	bl	800226c <HAL_DMA_Init>
 8000b90:	1e03      	subs	r3, r0, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8000b94:	f7ff ff5a 	bl	8000a4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000b9c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <HAL_ADC_MspInit+0x118>)
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b00b      	add	sp, #44	@ 0x2c
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	40012400 	.word	0x40012400
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	48000400 	.word	0x48000400
 8000bb8:	20000068 	.word	0x20000068
 8000bbc:	40020008 	.word	0x40020008

08000bc0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b08b      	sub	sp, #44	@ 0x2c
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	2414      	movs	r4, #20
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	0018      	movs	r0, r3
 8000bce:	2314      	movs	r3, #20
 8000bd0:	001a      	movs	r2, r3
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	f002 ffc6 	bl	8003b64 <memset>
  if(hcan->Instance==CAN)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <HAL_CAN_MspInit+0xa4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d13b      	bne.n	8000c5a <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000be2:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000be4:	69da      	ldr	r2, [r3, #28]
 8000be6:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000be8:	2180      	movs	r1, #128	@ 0x80
 8000bea:	0489      	lsls	r1, r1, #18
 8000bec:	430a      	orrs	r2, r1
 8000bee:	61da      	str	r2, [r3, #28]
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000bf2:	69da      	ldr	r2, [r3, #28]
 8000bf4:	2380      	movs	r3, #128	@ 0x80
 8000bf6:	049b      	lsls	r3, r3, #18
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000c04:	2180      	movs	r1, #128	@ 0x80
 8000c06:	0289      	lsls	r1, r1, #10
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	615a      	str	r2, [r3, #20]
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_CAN_MspInit+0xa8>)
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	029b      	lsls	r3, r3, #10
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	22c0      	movs	r2, #192	@ 0xc0
 8000c1e:	0152      	lsls	r2, r2, #5
 8000c20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	0021      	movs	r1, r4
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2202      	movs	r2, #2
 8000c28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	2203      	movs	r2, #3
 8000c34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2204      	movs	r2, #4
 8000c3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	187a      	adds	r2, r7, r1
 8000c3e:	2390      	movs	r3, #144	@ 0x90
 8000c40:	05db      	lsls	r3, r3, #23
 8000c42:	0011      	movs	r1, r2
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 fca9 	bl	800259c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	201e      	movs	r0, #30
 8000c50:	f001 fada 	bl	8002208 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8000c54:	201e      	movs	r0, #30
 8000c56:	f001 faec 	bl	8002232 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8000c5a:	46c0      	nop			@ (mov r8, r8)
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b00b      	add	sp, #44	@ 0x2c
 8000c60:	bd90      	pop	{r4, r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	40006400 	.word	0x40006400
 8000c68:	40021000 	.word	0x40021000

08000c6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b08b      	sub	sp, #44	@ 0x2c
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	2414      	movs	r4, #20
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	0018      	movs	r0, r3
 8000c7a:	2314      	movs	r3, #20
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f002 ff70 	bl	8003b64 <memset>
  if(hspi->Instance==SPI2)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a1c      	ldr	r2, [pc, #112]	@ (8000cfc <HAL_SPI_MspInit+0x90>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d132      	bne.n	8000cf4 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <HAL_SPI_MspInit+0x94>)
 8000c90:	69da      	ldr	r2, [r3, #28]
 8000c92:	4b1b      	ldr	r3, [pc, #108]	@ (8000d00 <HAL_SPI_MspInit+0x94>)
 8000c94:	2180      	movs	r1, #128	@ 0x80
 8000c96:	01c9      	lsls	r1, r1, #7
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	61da      	str	r2, [r3, #28]
 8000c9c:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_SPI_MspInit+0x94>)
 8000c9e:	69da      	ldr	r2, [r3, #28]
 8000ca0:	2380      	movs	r3, #128	@ 0x80
 8000ca2:	01db      	lsls	r3, r3, #7
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_SPI_MspInit+0x94>)
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	4b14      	ldr	r3, [pc, #80]	@ (8000d00 <HAL_SPI_MspInit+0x94>)
 8000cb0:	2180      	movs	r1, #128	@ 0x80
 8000cb2:	02c9      	lsls	r1, r1, #11
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	615a      	str	r2, [r3, #20]
 8000cb8:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_SPI_MspInit+0x94>)
 8000cba:	695a      	ldr	r2, [r3, #20]
 8000cbc:	2380      	movs	r3, #128	@ 0x80
 8000cbe:	02db      	lsls	r3, r3, #11
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cc6:	193b      	adds	r3, r7, r4
 8000cc8:	22f0      	movs	r2, #240	@ 0xf0
 8000cca:	0212      	lsls	r2, r2, #8
 8000ccc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	0021      	movs	r1, r4
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	4a06      	ldr	r2, [pc, #24]	@ (8000d04 <HAL_SPI_MspInit+0x98>)
 8000cec:	0019      	movs	r1, r3
 8000cee:	0010      	movs	r0, r2
 8000cf0:	f001 fc54 	bl	800259c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b00b      	add	sp, #44	@ 0x2c
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	40003800 	.word	0x40003800
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48000400 	.word	0x48000400

08000d08 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <HAL_TIM_PWM_MspInit+0x34>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d10b      	bne.n	8000d32 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d1a:	4b09      	ldr	r3, [pc, #36]	@ (8000d40 <HAL_TIM_PWM_MspInit+0x38>)
 8000d1c:	69da      	ldr	r2, [r3, #28]
 8000d1e:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <HAL_TIM_PWM_MspInit+0x38>)
 8000d20:	2102      	movs	r1, #2
 8000d22:	430a      	orrs	r2, r1
 8000d24:	61da      	str	r2, [r3, #28]
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <HAL_TIM_PWM_MspInit+0x38>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d32:	46c0      	nop			@ (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b004      	add	sp, #16
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	40000400 	.word	0x40000400
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b089      	sub	sp, #36	@ 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	240c      	movs	r4, #12
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	0018      	movs	r0, r3
 8000d52:	2314      	movs	r3, #20
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f002 ff04 	bl	8003b64 <memset>
  if(htim->Instance==TIM3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a15      	ldr	r2, [pc, #84]	@ (8000db8 <HAL_TIM_MspPostInit+0x74>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d123      	bne.n	8000dae <HAL_TIM_MspPostInit+0x6a>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <HAL_TIM_MspPostInit+0x78>)
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	4b14      	ldr	r3, [pc, #80]	@ (8000dbc <HAL_TIM_MspPostInit+0x78>)
 8000d6c:	2180      	movs	r1, #128	@ 0x80
 8000d6e:	02c9      	lsls	r1, r1, #11
 8000d70:	430a      	orrs	r2, r1
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <HAL_TIM_MspPostInit+0x78>)
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	2380      	movs	r3, #128	@ 0x80
 8000d7a:	02db      	lsls	r3, r3, #11
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = F1R_pwm_Pin|F2R_pwm_Pin;
 8000d82:	0021      	movs	r1, r4
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2230      	movs	r2, #48	@ 0x30
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2201      	movs	r2, #1
 8000da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	4a06      	ldr	r2, [pc, #24]	@ (8000dc0 <HAL_TIM_MspPostInit+0x7c>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	0010      	movs	r0, r2
 8000daa:	f001 fbf7 	bl	800259c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b009      	add	sp, #36	@ 0x24
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	40000400 	.word	0x40000400
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	e7fd      	b.n	8000dc8 <NMI_Handler+0x4>

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	e7fd      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	46c0      	nop			@ (mov r8, r8)
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dec:	f000 f8ac 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df0:	46c0      	nop			@ (mov r8, r8)
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <DMA1_Channel1_IRQHandler+0x14>)
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 fae2 	bl	80023c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	20000068 	.word	0x20000068

08000e10 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e14:	4b03      	ldr	r3, [pc, #12]	@ (8000e24 <CEC_CAN_IRQHandler+0x14>)
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 ff35 	bl	8001c86 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	200000ac 	.word	0x200000ac

08000e28 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
	...

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	4813      	ldr	r0, [pc, #76]	@ (8000e84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e38:	f7ff fff6 	bl	8000e28 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000e3c:	4812      	ldr	r0, [pc, #72]	@ (8000e88 <LoopForever+0x6>)
    LDR R1, [R0]
 8000e3e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000e40:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <LoopForever+0xa>)
    CMP R1, R2
 8000e44:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000e46:	d105      	bne.n	8000e54 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000e48:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000e4a:	4912      	ldr	r1, [pc, #72]	@ (8000e94 <LoopForever+0x12>)
    STR R1, [R0]
 8000e4c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000e4e:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000e50:	4912      	ldr	r1, [pc, #72]	@ (8000e9c <LoopForever+0x1a>)
    STR R1, [R0]
 8000e52:	6001      	str	r1, [r0, #0]

08000e54 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e54:	4812      	ldr	r0, [pc, #72]	@ (8000ea0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000e56:	4913      	ldr	r1, [pc, #76]	@ (8000ea4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000e58:	4a13      	ldr	r2, [pc, #76]	@ (8000ea8 <LoopForever+0x26>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e5c:	e002      	b.n	8000e64 <LoopCopyDataInit>

08000e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e62:	3304      	adds	r3, #4

08000e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e68:	d3f9      	bcc.n	8000e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6a:	4a10      	ldr	r2, [pc, #64]	@ (8000eac <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000e6c:	4c10      	ldr	r4, [pc, #64]	@ (8000eb0 <LoopForever+0x2e>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e70:	e001      	b.n	8000e76 <LoopFillZerobss>

08000e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e74:	3204      	adds	r2, #4

08000e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e78:	d3fb      	bcc.n	8000e72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e7a:	f002 fe7b 	bl	8003b74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7e:	f7ff fa7d 	bl	800037c <main>

08000e82 <LoopForever>:

LoopForever:
    b LoopForever
 8000e82:	e7fe      	b.n	8000e82 <LoopForever>
  ldr   r0, =_estack
 8000e84:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000e88:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000e8c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000e90:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000e94:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e98:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e9c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ea8:	08003c0c 	.word	0x08003c0c
  ldr r2, =_sbss
 8000eac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eb0:	200001ec 	.word	0x200001ec

08000eb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <HAL_Init+0x24>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_Init+0x24>)
 8000ec2:	2110      	movs	r1, #16
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f809 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ece:	f7ff fdc3 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	40022000 	.word	0x40022000

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <HAL_InitTick+0x5c>)
 8000eea:	681c      	ldr	r4, [r3, #0]
 8000eec:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <HAL_InitTick+0x60>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	0019      	movs	r1, r3
 8000ef2:	23fa      	movs	r3, #250	@ 0xfa
 8000ef4:	0098      	lsls	r0, r3, #2
 8000ef6:	f7ff f907 	bl	8000108 <__udivsi3>
 8000efa:	0003      	movs	r3, r0
 8000efc:	0019      	movs	r1, r3
 8000efe:	0020      	movs	r0, r4
 8000f00:	f7ff f902 	bl	8000108 <__udivsi3>
 8000f04:	0003      	movs	r3, r0
 8000f06:	0018      	movs	r0, r3
 8000f08:	f001 f9a3 	bl	8002252 <HAL_SYSTICK_Config>
 8000f0c:	1e03      	subs	r3, r0, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f10:	2301      	movs	r3, #1
 8000f12:	e00f      	b.n	8000f34 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d80b      	bhi.n	8000f32 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	425b      	negs	r3, r3
 8000f20:	2200      	movs	r2, #0
 8000f22:	0018      	movs	r0, r3
 8000f24:	f001 f970 	bl	8002208 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_InitTick+0x64>)
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	e000      	b.n	8000f34 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b003      	add	sp, #12
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000004 	.word	0x20000004

08000f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <HAL_IncTick+0x1c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	001a      	movs	r2, r3
 8000f52:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	18d2      	adds	r2, r2, r3
 8000f58:	4b03      	ldr	r3, [pc, #12]	@ (8000f68 <HAL_IncTick+0x20>)
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	46c0      	nop			@ (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			@ (mov r8, r8)
 8000f64:	20000008 	.word	0x20000008
 8000f68:	200001e8 	.word	0x200001e8

08000f6c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b02      	ldr	r3, [pc, #8]	@ (8000f7c <HAL_GetTick+0x10>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	200001e8 	.word	0x200001e8

08000f80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000f90:	2300      	movs	r3, #0
 8000f92:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e125      	b.n	80011ea <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10a      	bne.n	8000fbc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2234      	movs	r2, #52	@ 0x34
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f7ff fd72 	bl	8000aa0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	d000      	beq.n	8000fc8 <HAL_ADC_Init+0x48>
 8000fc6:	e103      	b.n	80011d0 <HAL_ADC_Init+0x250>
 8000fc8:	230f      	movs	r3, #15
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d000      	beq.n	8000fd4 <HAL_ADC_Init+0x54>
 8000fd2:	e0fd      	b.n	80011d0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	689b      	ldr	r3, [r3, #8]
 8000fda:	2204      	movs	r2, #4
 8000fdc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000fde:	d000      	beq.n	8000fe2 <HAL_ADC_Init+0x62>
 8000fe0:	e0f6      	b.n	80011d0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe6:	4a83      	ldr	r2, [pc, #524]	@ (80011f4 <HAL_ADC_Init+0x274>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	2202      	movs	r2, #2
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d112      	bne.n	8001026 <HAL_ADC_Init+0xa6>
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	4013      	ands	r3, r2
 800100a:	2b01      	cmp	r3, #1
 800100c:	d009      	beq.n	8001022 <HAL_ADC_Init+0xa2>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	2380      	movs	r3, #128	@ 0x80
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	401a      	ands	r2, r3
 800101a:	2380      	movs	r3, #128	@ 0x80
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	429a      	cmp	r2, r3
 8001020:	d101      	bne.n	8001026 <HAL_ADC_Init+0xa6>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <HAL_ADC_Init+0xa8>
 8001026:	2300      	movs	r3, #0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d116      	bne.n	800105a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	68db      	ldr	r3, [r3, #12]
 8001032:	2218      	movs	r2, #24
 8001034:	4393      	bics	r3, r2
 8001036:	0019      	movs	r1, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	0899      	lsrs	r1, r3, #2
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	430a      	orrs	r2, r1
 8001058:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68da      	ldr	r2, [r3, #12]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4964      	ldr	r1, [pc, #400]	@ (80011f8 <HAL_ADC_Init+0x278>)
 8001066:	400a      	ands	r2, r1
 8001068:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7e1b      	ldrb	r3, [r3, #24]
 800106e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7e5b      	ldrb	r3, [r3, #25]
 8001074:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001076:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7e9b      	ldrb	r3, [r3, #26]
 800107c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800107e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001084:	2b01      	cmp	r3, #1
 8001086:	d002      	beq.n	800108e <HAL_ADC_Init+0x10e>
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	015b      	lsls	r3, r3, #5
 800108c:	e000      	b.n	8001090 <HAL_ADC_Init+0x110>
 800108e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001090:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001096:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b02      	cmp	r3, #2
 800109e:	d101      	bne.n	80010a4 <HAL_ADC_Init+0x124>
 80010a0:	2304      	movs	r3, #4
 80010a2:	e000      	b.n	80010a6 <HAL_ADC_Init+0x126>
 80010a4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80010a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2124      	movs	r1, #36	@ 0x24
 80010ac:	5c5b      	ldrb	r3, [r3, r1]
 80010ae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80010b0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7edb      	ldrb	r3, [r3, #27]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d115      	bne.n	80010ec <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	7e9b      	ldrb	r3, [r3, #26]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d105      	bne.n	80010d4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2280      	movs	r2, #128	@ 0x80
 80010cc:	0252      	lsls	r2, r2, #9
 80010ce:	4313      	orrs	r3, r2
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	e00b      	b.n	80010ec <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010d8:	2220      	movs	r2, #32
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010e4:	2201      	movs	r2, #1
 80010e6:	431a      	orrs	r2, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69da      	ldr	r2, [r3, #28]
 80010f0:	23c2      	movs	r3, #194	@ 0xc2
 80010f2:	33ff      	adds	r3, #255	@ 0xff
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d007      	beq.n	8001108 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001100:	4313      	orrs	r3, r2
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	4313      	orrs	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68d9      	ldr	r1, [r3, #12]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	430a      	orrs	r2, r1
 8001116:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800111c:	2380      	movs	r3, #128	@ 0x80
 800111e:	055b      	lsls	r3, r3, #21
 8001120:	429a      	cmp	r2, r3
 8001122:	d01b      	beq.n	800115c <HAL_ADC_Init+0x1dc>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001128:	2b01      	cmp	r3, #1
 800112a:	d017      	beq.n	800115c <HAL_ADC_Init+0x1dc>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001130:	2b02      	cmp	r3, #2
 8001132:	d013      	beq.n	800115c <HAL_ADC_Init+0x1dc>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001138:	2b03      	cmp	r3, #3
 800113a:	d00f      	beq.n	800115c <HAL_ADC_Init+0x1dc>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001140:	2b04      	cmp	r3, #4
 8001142:	d00b      	beq.n	800115c <HAL_ADC_Init+0x1dc>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001148:	2b05      	cmp	r3, #5
 800114a:	d007      	beq.n	800115c <HAL_ADC_Init+0x1dc>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001150:	2b06      	cmp	r3, #6
 8001152:	d003      	beq.n	800115c <HAL_ADC_Init+0x1dc>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001158:	2b07      	cmp	r3, #7
 800115a:	d112      	bne.n	8001182 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2107      	movs	r1, #7
 8001168:	438a      	bics	r2, r1
 800116a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6959      	ldr	r1, [r3, #20]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001176:	2207      	movs	r2, #7
 8001178:	401a      	ands	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	4a1c      	ldr	r2, [pc, #112]	@ (80011fc <HAL_ADC_Init+0x27c>)
 800118a:	4013      	ands	r3, r2
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	429a      	cmp	r2, r3
 8001190:	d10b      	bne.n	80011aa <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800119c:	2203      	movs	r2, #3
 800119e:	4393      	bics	r3, r2
 80011a0:	2201      	movs	r2, #1
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80011a8:	e01c      	b.n	80011e4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011ae:	2212      	movs	r2, #18
 80011b0:	4393      	bics	r3, r2
 80011b2:	2210      	movs	r2, #16
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011be:	2201      	movs	r2, #1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2201      	movs	r2, #1
 80011cc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80011ce:	e009      	b.n	80011e4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80011d4:	2210      	movs	r2, #16
 80011d6:	431a      	orrs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80011dc:	230f      	movs	r3, #15
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011e4:	230f      	movs	r3, #15
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	781b      	ldrb	r3, [r3, #0]
}
 80011ea:	0018      	movs	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b004      	add	sp, #16
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	fffffefd 	.word	0xfffffefd
 80011f8:	fffe0219 	.word	0xfffe0219
 80011fc:	833fffe7 	.word	0x833fffe7

08001200 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2204      	movs	r2, #4
 8001218:	4013      	ands	r3, r2
 800121a:	d156      	bne.n	80012ca <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2234      	movs	r2, #52	@ 0x34
 8001220:	5c9b      	ldrb	r3, [r3, r2]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d101      	bne.n	800122a <HAL_ADC_Start_IT+0x2a>
 8001226:	2302      	movs	r3, #2
 8001228:	e056      	b.n	80012d8 <HAL_ADC_Start_IT+0xd8>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2234      	movs	r2, #52	@ 0x34
 800122e:	2101      	movs	r1, #1
 8001230:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7e5b      	ldrb	r3, [r3, #25]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d007      	beq.n	800124a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800123a:	230f      	movs	r3, #15
 800123c:	18fc      	adds	r4, r7, r3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	0018      	movs	r0, r3
 8001242:	f000 f9ef 	bl	8001624 <ADC_Enable>
 8001246:	0003      	movs	r3, r0
 8001248:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800124a:	230f      	movs	r3, #15
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d13e      	bne.n	80012d2 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001258:	4a21      	ldr	r2, [pc, #132]	@ (80012e0 <HAL_ADC_Start_IT+0xe0>)
 800125a:	4013      	ands	r3, r2
 800125c:	2280      	movs	r2, #128	@ 0x80
 800125e:	0052      	lsls	r2, r2, #1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2200      	movs	r2, #0
 800126a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2234      	movs	r2, #52	@ 0x34
 8001270:	2100      	movs	r1, #0
 8001272:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	221c      	movs	r2, #28
 800127a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	2b08      	cmp	r3, #8
 8001282:	d110      	bne.n	80012a6 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2104      	movs	r1, #4
 8001290:	438a      	bics	r2, r1
 8001292:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2118      	movs	r1, #24
 80012a0:	430a      	orrs	r2, r1
 80012a2:	605a      	str	r2, [r3, #4]
          break;
 80012a4:	e008      	b.n	80012b8 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	211c      	movs	r1, #28
 80012b2:	430a      	orrs	r2, r1
 80012b4:	605a      	str	r2, [r3, #4]
          break;
 80012b6:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689a      	ldr	r2, [r3, #8]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2104      	movs	r1, #4
 80012c4:	430a      	orrs	r2, r1
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	e003      	b.n	80012d2 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012ca:	230f      	movs	r3, #15
 80012cc:	18fb      	adds	r3, r7, r3
 80012ce:	2202      	movs	r2, #2
 80012d0:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80012d2:	230f      	movs	r3, #15
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b005      	add	sp, #20
 80012de:	bd90      	pop	{r4, r7, pc}
 80012e0:	fffff0fe 	.word	0xfffff0fe

080012e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f0:	2317      	movs	r3, #23
 80012f2:	18fb      	adds	r3, r7, r3
 80012f4:	2200      	movs	r2, #0
 80012f6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2204      	movs	r2, #4
 8001300:	4013      	ands	r3, r2
 8001302:	d15e      	bne.n	80013c2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2234      	movs	r2, #52	@ 0x34
 8001308:	5c9b      	ldrb	r3, [r3, r2]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d101      	bne.n	8001312 <HAL_ADC_Start_DMA+0x2e>
 800130e:	2302      	movs	r3, #2
 8001310:	e05e      	b.n	80013d0 <HAL_ADC_Start_DMA+0xec>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2234      	movs	r2, #52	@ 0x34
 8001316:	2101      	movs	r1, #1
 8001318:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	7e5b      	ldrb	r3, [r3, #25]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d007      	beq.n	8001332 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001322:	2317      	movs	r3, #23
 8001324:	18fc      	adds	r4, r7, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	0018      	movs	r0, r3
 800132a:	f000 f97b 	bl	8001624 <ADC_Enable>
 800132e:	0003      	movs	r3, r0
 8001330:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001332:	2317      	movs	r3, #23
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d146      	bne.n	80013ca <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001340:	4a25      	ldr	r2, [pc, #148]	@ (80013d8 <HAL_ADC_Start_DMA+0xf4>)
 8001342:	4013      	ands	r3, r2
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	0052      	lsls	r2, r2, #1
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2234      	movs	r2, #52	@ 0x34
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001360:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <HAL_ADC_Start_DMA+0xf8>)
 8001362:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	4a1d      	ldr	r2, [pc, #116]	@ (80013e0 <HAL_ADC_Start_DMA+0xfc>)
 800136a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001370:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <HAL_ADC_Start_DMA+0x100>)
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	221c      	movs	r2, #28
 800137a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685a      	ldr	r2, [r3, #4]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2110      	movs	r1, #16
 8001388:	430a      	orrs	r2, r1
 800138a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	2101      	movs	r1, #1
 8001398:	430a      	orrs	r2, r1
 800139a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3340      	adds	r3, #64	@ 0x40
 80013a6:	0019      	movs	r1, r3
 80013a8:	68ba      	ldr	r2, [r7, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f000 ffa6 	bl	80022fc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2104      	movs	r1, #4
 80013bc:	430a      	orrs	r2, r1
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	e003      	b.n	80013ca <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013c2:	2317      	movs	r3, #23
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	2202      	movs	r2, #2
 80013c8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80013ca:	2317      	movs	r3, #23
 80013cc:	18fb      	adds	r3, r7, r3
 80013ce:	781b      	ldrb	r3, [r3, #0]
}
 80013d0:	0018      	movs	r0, r3
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b007      	add	sp, #28
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	fffff0fe 	.word	0xfffff0fe
 80013dc:	0800172d 	.word	0x0800172d
 80013e0:	080017e1 	.word	0x080017e1
 80013e4:	080017ff 	.word	0x080017ff

080013e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80013f0:	46c0      	nop			@ (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b002      	add	sp, #8
 80013f6:	bd80      	pop	{r7, pc}

080013f8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001400:	46c0      	nop			@ (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001412:	230f      	movs	r3, #15
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001422:	2380      	movs	r3, #128	@ 0x80
 8001424:	055b      	lsls	r3, r3, #21
 8001426:	429a      	cmp	r2, r3
 8001428:	d011      	beq.n	800144e <HAL_ADC_ConfigChannel+0x46>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142e:	2b01      	cmp	r3, #1
 8001430:	d00d      	beq.n	800144e <HAL_ADC_ConfigChannel+0x46>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001436:	2b02      	cmp	r3, #2
 8001438:	d009      	beq.n	800144e <HAL_ADC_ConfigChannel+0x46>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800143e:	2b03      	cmp	r3, #3
 8001440:	d005      	beq.n	800144e <HAL_ADC_ConfigChannel+0x46>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001446:	2b04      	cmp	r3, #4
 8001448:	d001      	beq.n	800144e <HAL_ADC_ConfigChannel+0x46>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2234      	movs	r2, #52	@ 0x34
 8001452:	5c9b      	ldrb	r3, [r3, r2]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_ADC_ConfigChannel+0x54>
 8001458:	2302      	movs	r3, #2
 800145a:	e0d0      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1f6>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2234      	movs	r2, #52	@ 0x34
 8001460:	2101      	movs	r1, #1
 8001462:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2204      	movs	r2, #4
 800146c:	4013      	ands	r3, r2
 800146e:	d000      	beq.n	8001472 <HAL_ADC_ConfigChannel+0x6a>
 8001470:	e0b4      	b.n	80015dc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	4a64      	ldr	r2, [pc, #400]	@ (8001608 <HAL_ADC_ConfigChannel+0x200>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d100      	bne.n	800147e <HAL_ADC_ConfigChannel+0x76>
 800147c:	e082      	b.n	8001584 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2201      	movs	r2, #1
 800148a:	409a      	lsls	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	055b      	lsls	r3, r3, #21
 800149c:	429a      	cmp	r2, r3
 800149e:	d037      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d033      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d02f      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d02b      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	2b04      	cmp	r3, #4
 80014be:	d027      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014c4:	2b05      	cmp	r3, #5
 80014c6:	d023      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014cc:	2b06      	cmp	r3, #6
 80014ce:	d01f      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d4:	2b07      	cmp	r3, #7
 80014d6:	d01b      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2107      	movs	r1, #7
 80014e4:	400b      	ands	r3, r1
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d012      	beq.n	8001510 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2107      	movs	r1, #7
 80014f6:	438a      	bics	r2, r1
 80014f8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6959      	ldr	r1, [r3, #20]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2207      	movs	r2, #7
 8001506:	401a      	ands	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b10      	cmp	r3, #16
 8001516:	d007      	beq.n	8001528 <HAL_ADC_ConfigChannel+0x120>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b11      	cmp	r3, #17
 800151e:	d003      	beq.n	8001528 <HAL_ADC_ConfigChannel+0x120>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d163      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001528:	4b38      	ldr	r3, [pc, #224]	@ (800160c <HAL_ADC_ConfigChannel+0x204>)
 800152a:	6819      	ldr	r1, [r3, #0]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b10      	cmp	r3, #16
 8001532:	d009      	beq.n	8001548 <HAL_ADC_ConfigChannel+0x140>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b11      	cmp	r3, #17
 800153a:	d102      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x13a>
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	03db      	lsls	r3, r3, #15
 8001540:	e004      	b.n	800154c <HAL_ADC_ConfigChannel+0x144>
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	045b      	lsls	r3, r3, #17
 8001546:	e001      	b.n	800154c <HAL_ADC_ConfigChannel+0x144>
 8001548:	2380      	movs	r3, #128	@ 0x80
 800154a:	041b      	lsls	r3, r3, #16
 800154c:	4a2f      	ldr	r2, [pc, #188]	@ (800160c <HAL_ADC_ConfigChannel+0x204>)
 800154e:	430b      	orrs	r3, r1
 8001550:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b10      	cmp	r3, #16
 8001558:	d14a      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800155a:	4b2d      	ldr	r3, [pc, #180]	@ (8001610 <HAL_ADC_ConfigChannel+0x208>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	492d      	ldr	r1, [pc, #180]	@ (8001614 <HAL_ADC_ConfigChannel+0x20c>)
 8001560:	0018      	movs	r0, r3
 8001562:	f7fe fdd1 	bl	8000108 <__udivsi3>
 8001566:	0003      	movs	r3, r0
 8001568:	001a      	movs	r2, r3
 800156a:	0013      	movs	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	189b      	adds	r3, r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001574:	e002      	b.n	800157c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	3b01      	subs	r3, #1
 800157a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f9      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x16e>
 8001582:	e035      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2101      	movs	r1, #1
 8001590:	4099      	lsls	r1, r3
 8001592:	000b      	movs	r3, r1
 8001594:	43d9      	mvns	r1, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	400a      	ands	r2, r1
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d007      	beq.n	80015b6 <HAL_ADC_ConfigChannel+0x1ae>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d003      	beq.n	80015b6 <HAL_ADC_ConfigChannel+0x1ae>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b12      	cmp	r3, #18
 80015b4:	d11c      	bne.n	80015f0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_ADC_ConfigChannel+0x204>)
 80015b8:	6819      	ldr	r1, [r3, #0]
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b10      	cmp	r3, #16
 80015c0:	d007      	beq.n	80015d2 <HAL_ADC_ConfigChannel+0x1ca>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b11      	cmp	r3, #17
 80015c8:	d101      	bne.n	80015ce <HAL_ADC_ConfigChannel+0x1c6>
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <HAL_ADC_ConfigChannel+0x210>)
 80015cc:	e002      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1cc>
 80015ce:	4b13      	ldr	r3, [pc, #76]	@ (800161c <HAL_ADC_ConfigChannel+0x214>)
 80015d0:	e000      	b.n	80015d4 <HAL_ADC_ConfigChannel+0x1cc>
 80015d2:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <HAL_ADC_ConfigChannel+0x218>)
 80015d4:	4a0d      	ldr	r2, [pc, #52]	@ (800160c <HAL_ADC_ConfigChannel+0x204>)
 80015d6:	400b      	ands	r3, r1
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e009      	b.n	80015f0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015e0:	2220      	movs	r2, #32
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80015e8:	230f      	movs	r3, #15
 80015ea:	18fb      	adds	r3, r7, r3
 80015ec:	2201      	movs	r2, #1
 80015ee:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2234      	movs	r2, #52	@ 0x34
 80015f4:	2100      	movs	r1, #0
 80015f6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80015f8:	230f      	movs	r3, #15
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	781b      	ldrb	r3, [r3, #0]
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}
 8001606:	46c0      	nop			@ (mov r8, r8)
 8001608:	00001001 	.word	0x00001001
 800160c:	40012708 	.word	0x40012708
 8001610:	20000000 	.word	0x20000000
 8001614:	000f4240 	.word	0x000f4240
 8001618:	ffbfffff 	.word	0xffbfffff
 800161c:	feffffff 	.word	0xfeffffff
 8001620:	ff7fffff 	.word	0xff7fffff

08001624 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	2203      	movs	r2, #3
 800163c:	4013      	ands	r3, r2
 800163e:	2b01      	cmp	r3, #1
 8001640:	d112      	bne.n	8001668 <ADC_Enable+0x44>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	4013      	ands	r3, r2
 800164c:	2b01      	cmp	r3, #1
 800164e:	d009      	beq.n	8001664 <ADC_Enable+0x40>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	401a      	ands	r2, r3
 800165c:	2380      	movs	r3, #128	@ 0x80
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	429a      	cmp	r2, r3
 8001662:	d101      	bne.n	8001668 <ADC_Enable+0x44>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <ADC_Enable+0x46>
 8001668:	2300      	movs	r3, #0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d152      	bne.n	8001714 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	4a2a      	ldr	r2, [pc, #168]	@ (8001720 <ADC_Enable+0xfc>)
 8001676:	4013      	ands	r3, r2
 8001678:	d00d      	beq.n	8001696 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800167e:	2210      	movs	r2, #16
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800168a:	2201      	movs	r2, #1
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e03f      	b.n	8001716 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <ADC_Enable+0x100>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	491f      	ldr	r1, [pc, #124]	@ (8001728 <ADC_Enable+0x104>)
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7fe fd2b 	bl	8000108 <__udivsi3>
 80016b2:	0003      	movs	r3, r0
 80016b4:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016b6:	e002      	b.n	80016be <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f9      	bne.n	80016b8 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80016c4:	f7ff fc52 	bl	8000f6c <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016cc:	e01b      	b.n	8001706 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016ce:	f7ff fc4d 	bl	8000f6c <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d914      	bls.n	8001706 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2201      	movs	r2, #1
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d00d      	beq.n	8001706 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ee:	2210      	movs	r2, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e007      	b.n	8001716 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2201      	movs	r2, #1
 800170e:	4013      	ands	r3, r2
 8001710:	2b01      	cmp	r3, #1
 8001712:	d1dc      	bne.n	80016ce <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b004      	add	sp, #16
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			@ (mov r8, r8)
 8001720:	80000017 	.word	0x80000017
 8001724:	20000000 	.word	0x20000000
 8001728:	000f4240 	.word	0x000f4240

0800172c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001738:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800173e:	2250      	movs	r2, #80	@ 0x50
 8001740:	4013      	ands	r3, r2
 8001742:	d140      	bne.n	80017c6 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001748:	2280      	movs	r2, #128	@ 0x80
 800174a:	0092      	lsls	r2, r2, #2
 800174c:	431a      	orrs	r2, r3
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	23c0      	movs	r3, #192	@ 0xc0
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d12d      	bne.n	80017bc <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001764:	2b00      	cmp	r3, #0
 8001766:	d129      	bne.n	80017bc <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2208      	movs	r2, #8
 8001770:	4013      	ands	r3, r2
 8001772:	2b08      	cmp	r3, #8
 8001774:	d122      	bne.n	80017bc <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2204      	movs	r2, #4
 800177e:	4013      	ands	r3, r2
 8001780:	d110      	bne.n	80017a4 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	210c      	movs	r1, #12
 800178e:	438a      	bics	r2, r1
 8001790:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001796:	4a11      	ldr	r2, [pc, #68]	@ (80017dc <ADC_DMAConvCplt+0xb0>)
 8001798:	4013      	ands	r3, r2
 800179a:	2201      	movs	r2, #1
 800179c:	431a      	orrs	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80017a2:	e00b      	b.n	80017bc <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a8:	2220      	movs	r2, #32
 80017aa:	431a      	orrs	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017b4:	2201      	movs	r2, #1
 80017b6:	431a      	orrs	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	0018      	movs	r0, r3
 80017c0:	f7ff f90a 	bl	80009d8 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 80017c4:	e005      	b.n	80017d2 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	0010      	movs	r0, r2
 80017d0:	4798      	blx	r3
}
 80017d2:	46c0      	nop			@ (mov r8, r8)
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b004      	add	sp, #16
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	46c0      	nop			@ (mov r8, r8)
 80017dc:	fffffefe 	.word	0xfffffefe

080017e0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff fdf9 	bl	80013e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bd80      	pop	{r7, pc}

080017fe <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001810:	2240      	movs	r2, #64	@ 0x40
 8001812:	431a      	orrs	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800181c:	2204      	movs	r2, #4
 800181e:	431a      	orrs	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	0018      	movs	r0, r3
 8001828:	f7ff fde6 	bl	80013f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800182c:	46c0      	nop			@ (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0f0      	b.n	8001a28 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2220      	movs	r2, #32
 800184a:	5c9b      	ldrb	r3, [r3, r2]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d103      	bne.n	800185a <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff f9b3 	bl	8000bc0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	430a      	orrs	r2, r1
 8001868:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800186a:	f7ff fb7f 	bl	8000f6c <HAL_GetTick>
 800186e:	0003      	movs	r3, r0
 8001870:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001872:	e013      	b.n	800189c <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001874:	f7ff fb7a 	bl	8000f6c <HAL_GetTick>
 8001878:	0002      	movs	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b0a      	cmp	r3, #10
 8001880:	d90c      	bls.n	800189c <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001886:	2280      	movs	r2, #128	@ 0x80
 8001888:	0292      	lsls	r2, r2, #10
 800188a:	431a      	orrs	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	2105      	movs	r1, #5
 8001896:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0c5      	b.n	8001a28 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	4013      	ands	r3, r2
 80018a6:	d0e5      	beq.n	8001874 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2102      	movs	r1, #2
 80018b4:	438a      	bics	r2, r1
 80018b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018b8:	f7ff fb58 	bl	8000f6c <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018c0:	e013      	b.n	80018ea <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018c2:	f7ff fb53 	bl	8000f6c <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b0a      	cmp	r3, #10
 80018ce:	d90c      	bls.n	80018ea <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	2280      	movs	r2, #128	@ 0x80
 80018d6:	0292      	lsls	r2, r2, #10
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2220      	movs	r2, #32
 80018e2:	2105      	movs	r1, #5
 80018e4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e09e      	b.n	8001a28 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	2202      	movs	r2, #2
 80018f2:	4013      	ands	r3, r2
 80018f4:	d1e5      	bne.n	80018c2 <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	7e1b      	ldrb	r3, [r3, #24]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d108      	bne.n	8001910 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2180      	movs	r1, #128	@ 0x80
 800190a:	430a      	orrs	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	e007      	b.n	8001920 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2180      	movs	r1, #128	@ 0x80
 800191c:	438a      	bics	r2, r1
 800191e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7e5b      	ldrb	r3, [r3, #25]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d108      	bne.n	800193a <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2140      	movs	r1, #64	@ 0x40
 8001934:	430a      	orrs	r2, r1
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e007      	b.n	800194a <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2140      	movs	r1, #64	@ 0x40
 8001946:	438a      	bics	r2, r1
 8001948:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7e9b      	ldrb	r3, [r3, #26]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d108      	bne.n	8001964 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2120      	movs	r1, #32
 800195e:	430a      	orrs	r2, r1
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	e007      	b.n	8001974 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2120      	movs	r1, #32
 8001970:	438a      	bics	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7edb      	ldrb	r3, [r3, #27]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d108      	bne.n	800198e <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2110      	movs	r1, #16
 8001988:	438a      	bics	r2, r1
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	e007      	b.n	800199e <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2110      	movs	r1, #16
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	7f1b      	ldrb	r3, [r3, #28]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d108      	bne.n	80019b8 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2108      	movs	r1, #8
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e007      	b.n	80019c8 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2108      	movs	r1, #8
 80019c4:	438a      	bics	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7f5b      	ldrb	r3, [r3, #29]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d108      	bne.n	80019e2 <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2104      	movs	r1, #4
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e007      	b.n	80019f2 <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2104      	movs	r1, #4
 80019ee:	438a      	bics	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	0011      	movs	r1, r2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	1e5a      	subs	r2, r3, #1
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	430a      	orrs	r2, r1
 8001a16:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2220      	movs	r2, #32
 8001a22:	2101      	movs	r1, #1
 8001a24:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001a26:	2300      	movs	r3, #0
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b004      	add	sp, #16
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a3e:	2017      	movs	r0, #23
 8001a40:	183b      	adds	r3, r7, r0
 8001a42:	68fa      	ldr	r2, [r7, #12]
 8001a44:	2120      	movs	r1, #32
 8001a46:	5c52      	ldrb	r2, [r2, r1]
 8001a48:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	18bb      	adds	r3, r7, r2
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d004      	beq.n	8001a5e <HAL_CAN_GetRxMessage+0x2e>
 8001a54:	18bb      	adds	r3, r7, r2
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d000      	beq.n	8001a5e <HAL_CAN_GetRxMessage+0x2e>
 8001a5c:	e107      	b.n	8001c6e <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10e      	bne.n	8001a82 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d117      	bne.n	8001aa0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a74:	2280      	movs	r2, #128	@ 0x80
 8001a76:	0392      	lsls	r2, r2, #14
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0fd      	b.n	8001c7e <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d108      	bne.n	8001aa0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	0392      	lsls	r2, r2, #14
 8001a96:	431a      	orrs	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e0ee      	b.n	8001c7e <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	321b      	adds	r2, #27
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	58d3      	ldr	r3, [r2, r3]
 8001aac:	2204      	movs	r2, #4
 8001aae:	401a      	ands	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10b      	bne.n	8001ad4 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68ba      	ldr	r2, [r7, #8]
 8001ac2:	321b      	adds	r2, #27
 8001ac4:	0112      	lsls	r2, r2, #4
 8001ac6:	58d3      	ldr	r3, [r2, r3]
 8001ac8:	0d5b      	lsrs	r3, r3, #21
 8001aca:	055b      	lsls	r3, r3, #21
 8001acc:	0d5a      	lsrs	r2, r3, #21
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e00a      	b.n	8001aea <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	321b      	adds	r2, #27
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	58d3      	ldr	r3, [r2, r3]
 8001ae0:	08db      	lsrs	r3, r3, #3
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	321b      	adds	r2, #27
 8001af2:	0112      	lsls	r2, r2, #4
 8001af4:	58d3      	ldr	r3, [r2, r3]
 8001af6:	2202      	movs	r2, #2
 8001af8:	401a      	ands	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	331b      	adds	r3, #27
 8001b06:	011b      	lsls	r3, r3, #4
 8001b08:	18d3      	adds	r3, r2, r3
 8001b0a:	3304      	adds	r3, #4
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2208      	movs	r2, #8
 8001b10:	4013      	ands	r3, r2
 8001b12:	d003      	beq.n	8001b1c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2208      	movs	r2, #8
 8001b18:	611a      	str	r2, [r3, #16]
 8001b1a:	e00b      	b.n	8001b34 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	331b      	adds	r3, #27
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	18d3      	adds	r3, r2, r3
 8001b28:	3304      	adds	r3, #4
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	220f      	movs	r2, #15
 8001b2e:	401a      	ands	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	331b      	adds	r3, #27
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	18d3      	adds	r3, r2, r3
 8001b40:	3304      	adds	r3, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0a1b      	lsrs	r3, r3, #8
 8001b46:	22ff      	movs	r2, #255	@ 0xff
 8001b48:	401a      	ands	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	331b      	adds	r3, #27
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	18d3      	adds	r3, r2, r3
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	0c1b      	lsrs	r3, r3, #16
 8001b60:	041b      	lsls	r3, r3, #16
 8001b62:	0c1a      	lsrs	r2, r3, #16
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	23dc      	movs	r3, #220	@ 0xdc
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	188a      	adds	r2, r1, r2
 8001b76:	18d3      	adds	r3, r2, r3
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	23dc      	movs	r3, #220	@ 0xdc
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	188a      	adds	r2, r1, r2
 8001b8e:	18d3      	adds	r3, r2, r3
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	0a1a      	lsrs	r2, r3, #8
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	b2d2      	uxtb	r2, r2
 8001b9a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6819      	ldr	r1, [r3, #0]
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	23dc      	movs	r3, #220	@ 0xdc
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	188a      	adds	r2, r1, r2
 8001baa:	18d3      	adds	r3, r2, r3
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	0c1a      	lsrs	r2, r3, #16
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	3302      	adds	r3, #2
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	23dc      	movs	r3, #220	@ 0xdc
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	0112      	lsls	r2, r2, #4
 8001bc4:	188a      	adds	r2, r1, r2
 8001bc6:	18d3      	adds	r3, r2, r3
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0e1a      	lsrs	r2, r3, #24
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	3303      	adds	r3, #3
 8001bd0:	b2d2      	uxtb	r2, r2
 8001bd2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6819      	ldr	r1, [r3, #0]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	23de      	movs	r3, #222	@ 0xde
 8001bdc:	005b      	lsls	r3, r3, #1
 8001bde:	0112      	lsls	r2, r2, #4
 8001be0:	188a      	adds	r2, r1, r2
 8001be2:	18d3      	adds	r3, r2, r3
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	3304      	adds	r3, #4
 8001bea:	b2d2      	uxtb	r2, r2
 8001bec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	23de      	movs	r3, #222	@ 0xde
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	0112      	lsls	r2, r2, #4
 8001bfa:	188a      	adds	r2, r1, r2
 8001bfc:	18d3      	adds	r3, r2, r3
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	0a1a      	lsrs	r2, r3, #8
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	3305      	adds	r3, #5
 8001c06:	b2d2      	uxtb	r2, r2
 8001c08:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	23de      	movs	r3, #222	@ 0xde
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	0112      	lsls	r2, r2, #4
 8001c16:	188a      	adds	r2, r1, r2
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0c1a      	lsrs	r2, r3, #16
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3306      	adds	r3, #6
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	23de      	movs	r3, #222	@ 0xde
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	0112      	lsls	r2, r2, #4
 8001c32:	188a      	adds	r2, r1, r2
 8001c34:	18d3      	adds	r3, r2, r3
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0e1a      	lsrs	r2, r3, #24
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	3307      	adds	r3, #7
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d108      	bne.n	8001c5a <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2120      	movs	r1, #32
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]
 8001c58:	e007      	b.n	8001c6a <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	691a      	ldr	r2, [r3, #16]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2120      	movs	r1, #32
 8001c66:	430a      	orrs	r2, r1
 8001c68:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e007      	b.n	8001c7e <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	2280      	movs	r2, #128	@ 0x80
 8001c74:	02d2      	lsls	r2, r2, #11
 8001c76:	431a      	orrs	r2, r3
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
  }
}
 8001c7e:	0018      	movs	r0, r3
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b006      	add	sp, #24
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b08a      	sub	sp, #40	@ 0x28
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d100      	bne.n	8001ccc <HAL_CAN_IRQHandler+0x46>
 8001cca:	e084      	b.n	8001dd6 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d024      	beq.n	8001d1e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d004      	beq.n	8001cee <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	f000 f981 	bl	8001fee <HAL_CAN_TxMailbox0CompleteCallback>
 8001cec:	e017      	b.n	8001d1e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2204      	movs	r2, #4
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d005      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	2280      	movs	r2, #128	@ 0x80
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d00:	e00d      	b.n	8001d1e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2208      	movs	r2, #8
 8001d06:	4013      	ands	r3, r2
 8001d08:	d005      	beq.n	8001d16 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0c:	2280      	movs	r2, #128	@ 0x80
 8001d0e:	0152      	lsls	r2, r2, #5
 8001d10:	4313      	orrs	r3, r2
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d14:	e003      	b.n	8001d1e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f980 	bl	800201e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	2380      	movs	r3, #128	@ 0x80
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4013      	ands	r3, r2
 8001d26:	d028      	beq.n	8001d7a <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2280      	movs	r2, #128	@ 0x80
 8001d2e:	0052      	lsls	r2, r2, #1
 8001d30:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d004      	beq.n	8001d46 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f000 f95d 	bl	8001ffe <HAL_CAN_TxMailbox1CompleteCallback>
 8001d44:	e019      	b.n	8001d7a <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d005      	beq.n	8001d5c <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d52:	2280      	movs	r2, #128	@ 0x80
 8001d54:	0192      	lsls	r2, r2, #6
 8001d56:	4313      	orrs	r3, r2
 8001d58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d5a:	e00e      	b.n	8001d7a <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	4013      	ands	r3, r2
 8001d64:	d005      	beq.n	8001d72 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d68:	2280      	movs	r2, #128	@ 0x80
 8001d6a:	01d2      	lsls	r2, r2, #7
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d70:	e003      	b.n	8001d7a <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f000 f95a 	bl	800202e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	025b      	lsls	r3, r3, #9
 8001d80:	4013      	ands	r3, r2
 8001d82:	d028      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2280      	movs	r2, #128	@ 0x80
 8001d8a:	0252      	lsls	r2, r2, #9
 8001d8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	2380      	movs	r3, #128	@ 0x80
 8001d92:	029b      	lsls	r3, r3, #10
 8001d94:	4013      	ands	r3, r2
 8001d96:	d004      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 f937 	bl	800200e <HAL_CAN_TxMailbox2CompleteCallback>
 8001da0:	e019      	b.n	8001dd6 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	02db      	lsls	r3, r3, #11
 8001da8:	4013      	ands	r3, r2
 8001daa:	d005      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	2280      	movs	r2, #128	@ 0x80
 8001db0:	0212      	lsls	r2, r2, #8
 8001db2:	4313      	orrs	r3, r2
 8001db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001db6:	e00e      	b.n	8001dd6 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	031b      	lsls	r3, r3, #12
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d005      	beq.n	8001dce <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	2280      	movs	r2, #128	@ 0x80
 8001dc6:	0252      	lsls	r2, r2, #9
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001dcc:	e003      	b.n	8001dd6 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f934 	bl	800203e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	2208      	movs	r2, #8
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d00c      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2210      	movs	r2, #16
 8001de2:	4013      	ands	r3, r2
 8001de4:	d008      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	2280      	movs	r2, #128	@ 0x80
 8001dea:	0092      	lsls	r2, r2, #2
 8001dec:	4313      	orrs	r3, r2
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2210      	movs	r2, #16
 8001df6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d00b      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2208      	movs	r2, #8
 8001e04:	4013      	ands	r3, r2
 8001e06:	d007      	beq.n	8001e18 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	0018      	movs	r0, r3
 8001e14:	f000 f91b 	bl	800204e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	2203      	movs	r2, #3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d003      	beq.n	8001e34 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	0018      	movs	r0, r3
 8001e30:	f7fe f9f6 	bl	8000220 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e34:	6a3b      	ldr	r3, [r7, #32]
 8001e36:	2240      	movs	r2, #64	@ 0x40
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d00c      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2210      	movs	r2, #16
 8001e40:	4013      	ands	r3, r2
 8001e42:	d008      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	2280      	movs	r2, #128	@ 0x80
 8001e48:	00d2      	lsls	r2, r2, #3
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2210      	movs	r2, #16
 8001e54:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001e56:	6a3b      	ldr	r3, [r7, #32]
 8001e58:	2220      	movs	r2, #32
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d00b      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2208      	movs	r2, #8
 8001e62:	4013      	ands	r3, r2
 8001e64:	d007      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	0018      	movs	r0, r3
 8001e72:	f000 f8fc 	bl	800206e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	2203      	movs	r2, #3
 8001e86:	4013      	ands	r3, r2
 8001e88:	d003      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f000 f8e6 	bl	800205e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e92:	6a3a      	ldr	r2, [r7, #32]
 8001e94:	2380      	movs	r3, #128	@ 0x80
 8001e96:	029b      	lsls	r3, r3, #10
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d00b      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2210      	movs	r2, #16
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d007      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	0018      	movs	r0, r3
 8001eb0:	f000 f8e5 	bl	800207e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001eb4:	6a3a      	ldr	r2, [r7, #32]
 8001eb6:	2380      	movs	r3, #128	@ 0x80
 8001eb8:	025b      	lsls	r3, r3, #9
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f000 f8dc 	bl	800208e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001ed6:	6a3a      	ldr	r2, [r7, #32]
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	4013      	ands	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <HAL_CAN_IRQHandler+0x25c>
 8001ee0:	e074      	b.n	8001fcc <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d100      	bne.n	8001eec <HAL_CAN_IRQHandler+0x266>
 8001eea:	e06b      	b.n	8001fc4 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001eec:	6a3a      	ldr	r2, [r7, #32]
 8001eee:	2380      	movs	r3, #128	@ 0x80
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d007      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001efc:	d003      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	2201      	movs	r2, #1
 8001f02:	4313      	orrs	r3, r2
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f06:	6a3a      	ldr	r2, [r7, #32]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2202      	movs	r2, #2
 8001f14:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4013      	ands	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2204      	movs	r2, #4
 8001f2e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f30:	d003      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	2204      	movs	r2, #4
 8001f36:	4313      	orrs	r3, r2
 8001f38:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f3a:	6a3a      	ldr	r2, [r7, #32]
 8001f3c:	2380      	movs	r3, #128	@ 0x80
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	4013      	ands	r3, r2
 8001f42:	d03f      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2270      	movs	r2, #112	@ 0x70
 8001f48:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f4a:	d03b      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2270      	movs	r2, #112	@ 0x70
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b60      	cmp	r3, #96	@ 0x60
 8001f54:	d027      	beq.n	8001fa6 <HAL_CAN_IRQHandler+0x320>
 8001f56:	d82c      	bhi.n	8001fb2 <HAL_CAN_IRQHandler+0x32c>
 8001f58:	2b50      	cmp	r3, #80	@ 0x50
 8001f5a:	d01f      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x316>
 8001f5c:	d829      	bhi.n	8001fb2 <HAL_CAN_IRQHandler+0x32c>
 8001f5e:	2b40      	cmp	r3, #64	@ 0x40
 8001f60:	d017      	beq.n	8001f92 <HAL_CAN_IRQHandler+0x30c>
 8001f62:	d826      	bhi.n	8001fb2 <HAL_CAN_IRQHandler+0x32c>
 8001f64:	2b30      	cmp	r3, #48	@ 0x30
 8001f66:	d00f      	beq.n	8001f88 <HAL_CAN_IRQHandler+0x302>
 8001f68:	d823      	bhi.n	8001fb2 <HAL_CAN_IRQHandler+0x32c>
 8001f6a:	2b10      	cmp	r3, #16
 8001f6c:	d002      	beq.n	8001f74 <HAL_CAN_IRQHandler+0x2ee>
 8001f6e:	2b20      	cmp	r3, #32
 8001f70:	d005      	beq.n	8001f7e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001f72:	e01e      	b.n	8001fb2 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f76:	2208      	movs	r2, #8
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f7c:	e01a      	b.n	8001fb4 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	2210      	movs	r2, #16
 8001f82:	4313      	orrs	r3, r2
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f86:	e015      	b.n	8001fb4 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f90:	e010      	b.n	8001fb4 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f94:	2240      	movs	r2, #64	@ 0x40
 8001f96:	4313      	orrs	r3, r2
 8001f98:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f9a:	e00b      	b.n	8001fb4 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fa4:	e006      	b.n	8001fb4 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	2280      	movs	r2, #128	@ 0x80
 8001faa:	0052      	lsls	r2, r2, #1
 8001fac:	4313      	orrs	r3, r2
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001fb0:	e000      	b.n	8001fb4 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001fb2:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2170      	movs	r1, #112	@ 0x70
 8001fc0:	438a      	bics	r2, r1
 8001fc2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d009      	beq.n	8001fe6 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 f85c 	bl	800209e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b00a      	add	sp, #40	@ 0x28
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ff6:	46c0      	nop			@ (mov r8, r8)
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	b002      	add	sp, #8
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002016:	46c0      	nop			@ (mov r8, r8)
 8002018:	46bd      	mov	sp, r7
 800201a:	b002      	add	sp, #8
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002026:	46c0      	nop			@ (mov r8, r8)
 8002028:	46bd      	mov	sp, r7
 800202a:	b002      	add	sp, #8
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002036:	46c0      	nop			@ (mov r8, r8)
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	46bd      	mov	sp, r7
 800204a:	b002      	add	sp, #8
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002066:	46c0      	nop			@ (mov r8, r8)
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b002      	add	sp, #8
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b002      	add	sp, #8
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	0002      	movs	r2, r0
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80020c2:	d809      	bhi.n	80020d8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	231f      	movs	r3, #31
 80020cc:	401a      	ands	r2, r3
 80020ce:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_EnableIRQ+0x30>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	4091      	lsls	r1, r2
 80020d4:	000a      	movs	r2, r1
 80020d6:	601a      	str	r2, [r3, #0]
  }
}
 80020d8:	46c0      	nop			@ (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	b002      	add	sp, #8
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b590      	push	{r4, r7, lr}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	0002      	movs	r2, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	1dfb      	adds	r3, r7, #7
 80020f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020f2:	1dfb      	adds	r3, r7, #7
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80020f8:	d828      	bhi.n	800214c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020fa:	4a2f      	ldr	r2, [pc, #188]	@ (80021b8 <__NVIC_SetPriority+0xd4>)
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	b25b      	sxtb	r3, r3
 8002102:	089b      	lsrs	r3, r3, #2
 8002104:	33c0      	adds	r3, #192	@ 0xc0
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	589b      	ldr	r3, [r3, r2]
 800210a:	1dfa      	adds	r2, r7, #7
 800210c:	7812      	ldrb	r2, [r2, #0]
 800210e:	0011      	movs	r1, r2
 8002110:	2203      	movs	r2, #3
 8002112:	400a      	ands	r2, r1
 8002114:	00d2      	lsls	r2, r2, #3
 8002116:	21ff      	movs	r1, #255	@ 0xff
 8002118:	4091      	lsls	r1, r2
 800211a:	000a      	movs	r2, r1
 800211c:	43d2      	mvns	r2, r2
 800211e:	401a      	ands	r2, r3
 8002120:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	019b      	lsls	r3, r3, #6
 8002126:	22ff      	movs	r2, #255	@ 0xff
 8002128:	401a      	ands	r2, r3
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	0018      	movs	r0, r3
 8002130:	2303      	movs	r3, #3
 8002132:	4003      	ands	r3, r0
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002138:	481f      	ldr	r0, [pc, #124]	@ (80021b8 <__NVIC_SetPriority+0xd4>)
 800213a:	1dfb      	adds	r3, r7, #7
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b25b      	sxtb	r3, r3
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	430a      	orrs	r2, r1
 8002144:	33c0      	adds	r3, #192	@ 0xc0
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800214a:	e031      	b.n	80021b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800214c:	4a1b      	ldr	r2, [pc, #108]	@ (80021bc <__NVIC_SetPriority+0xd8>)
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	0019      	movs	r1, r3
 8002154:	230f      	movs	r3, #15
 8002156:	400b      	ands	r3, r1
 8002158:	3b08      	subs	r3, #8
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3306      	adds	r3, #6
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1dfa      	adds	r2, r7, #7
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	0011      	movs	r1, r2
 800216c:	2203      	movs	r2, #3
 800216e:	400a      	ands	r2, r1
 8002170:	00d2      	lsls	r2, r2, #3
 8002172:	21ff      	movs	r1, #255	@ 0xff
 8002174:	4091      	lsls	r1, r2
 8002176:	000a      	movs	r2, r1
 8002178:	43d2      	mvns	r2, r2
 800217a:	401a      	ands	r2, r3
 800217c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	22ff      	movs	r2, #255	@ 0xff
 8002184:	401a      	ands	r2, r3
 8002186:	1dfb      	adds	r3, r7, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	0018      	movs	r0, r3
 800218c:	2303      	movs	r3, #3
 800218e:	4003      	ands	r3, r0
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002194:	4809      	ldr	r0, [pc, #36]	@ (80021bc <__NVIC_SetPriority+0xd8>)
 8002196:	1dfb      	adds	r3, r7, #7
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	001c      	movs	r4, r3
 800219c:	230f      	movs	r3, #15
 800219e:	4023      	ands	r3, r4
 80021a0:	3b08      	subs	r3, #8
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	430a      	orrs	r2, r1
 80021a6:	3306      	adds	r3, #6
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	18c3      	adds	r3, r0, r3
 80021ac:	3304      	adds	r3, #4
 80021ae:	601a      	str	r2, [r3, #0]
}
 80021b0:	46c0      	nop			@ (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b003      	add	sp, #12
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	e000e100 	.word	0xe000e100
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	1e5a      	subs	r2, r3, #1
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	045b      	lsls	r3, r3, #17
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d301      	bcc.n	80021d8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021d4:	2301      	movs	r3, #1
 80021d6:	e010      	b.n	80021fa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <SysTick_Config+0x44>)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	3a01      	subs	r2, #1
 80021de:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e0:	2301      	movs	r3, #1
 80021e2:	425b      	negs	r3, r3
 80021e4:	2103      	movs	r1, #3
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7ff ff7c 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <SysTick_Config+0x44>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f2:	4b04      	ldr	r3, [pc, #16]	@ (8002204 <SysTick_Config+0x44>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	0018      	movs	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			@ (mov r8, r8)
 8002204:	e000e010 	.word	0xe000e010

08002208 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60b9      	str	r1, [r7, #8]
 8002210:	607a      	str	r2, [r7, #4]
 8002212:	210f      	movs	r1, #15
 8002214:	187b      	adds	r3, r7, r1
 8002216:	1c02      	adds	r2, r0, #0
 8002218:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	187b      	adds	r3, r7, r1
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b25b      	sxtb	r3, r3
 8002222:	0011      	movs	r1, r2
 8002224:	0018      	movs	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800222a:	46c0      	nop			@ (mov r8, r8)
 800222c:	46bd      	mov	sp, r7
 800222e:	b004      	add	sp, #16
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	0002      	movs	r2, r0
 800223a:	1dfb      	adds	r3, r7, #7
 800223c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223e:	1dfb      	adds	r3, r7, #7
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	0018      	movs	r0, r3
 8002246:	f7ff ff33 	bl	80020b0 <__NVIC_EnableIRQ>
}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	b002      	add	sp, #8
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b082      	sub	sp, #8
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	0018      	movs	r0, r3
 800225e:	f7ff ffaf 	bl	80021c0 <SysTick_Config>
 8002262:	0003      	movs	r3, r0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e036      	b.n	80022f0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2221      	movs	r2, #33	@ 0x21
 8002286:	2102      	movs	r1, #2
 8002288:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4a18      	ldr	r2, [pc, #96]	@ (80022f8 <HAL_DMA_Init+0x8c>)
 8002296:	4013      	ands	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f946 	bl	8002564 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2221      	movs	r2, #33	@ 0x21
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2220      	movs	r2, #32
 80022ea:	2100      	movs	r1, #0
 80022ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	0018      	movs	r0, r3
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b004      	add	sp, #16
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	ffffc00f 	.word	0xffffc00f

080022fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
 8002308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800230a:	2317      	movs	r3, #23
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2220      	movs	r2, #32
 8002316:	5c9b      	ldrb	r3, [r3, r2]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_DMA_Start_IT+0x24>
 800231c:	2302      	movs	r3, #2
 800231e:	e04f      	b.n	80023c0 <HAL_DMA_Start_IT+0xc4>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2220      	movs	r2, #32
 8002324:	2101      	movs	r1, #1
 8002326:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2221      	movs	r2, #33	@ 0x21
 800232c:	5c9b      	ldrb	r3, [r3, r2]
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b01      	cmp	r3, #1
 8002332:	d13a      	bne.n	80023aa <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2221      	movs	r2, #33	@ 0x21
 8002338:	2102      	movs	r1, #2
 800233a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2101      	movs	r1, #1
 800234e:	438a      	bics	r2, r1
 8002350:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f8d7 	bl	800250c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002362:	2b00      	cmp	r3, #0
 8002364:	d008      	beq.n	8002378 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	210e      	movs	r1, #14
 8002372:	430a      	orrs	r2, r1
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	e00f      	b.n	8002398 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	210a      	movs	r1, #10
 8002384:	430a      	orrs	r2, r1
 8002386:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2104      	movs	r1, #4
 8002394:	438a      	bics	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2101      	movs	r1, #1
 80023a4:	430a      	orrs	r2, r1
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e007      	b.n	80023ba <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2220      	movs	r2, #32
 80023ae:	2100      	movs	r1, #0
 80023b0:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023b2:	2317      	movs	r3, #23
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	2202      	movs	r2, #2
 80023b8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80023ba:	2317      	movs	r3, #23
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	781b      	ldrb	r3, [r3, #0]
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b006      	add	sp, #24
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	2204      	movs	r2, #4
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4013      	ands	r3, r2
 80023ee:	d024      	beq.n	800243a <HAL_DMA_IRQHandler+0x72>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2204      	movs	r2, #4
 80023f4:	4013      	ands	r3, r2
 80023f6:	d020      	beq.n	800243a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2220      	movs	r2, #32
 8002400:	4013      	ands	r3, r2
 8002402:	d107      	bne.n	8002414 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2104      	movs	r1, #4
 8002410:	438a      	bics	r2, r1
 8002412:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241c:	2104      	movs	r1, #4
 800241e:	4091      	lsls	r1, r2
 8002420:	000a      	movs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	2b00      	cmp	r3, #0
 800242a:	d100      	bne.n	800242e <HAL_DMA_IRQHandler+0x66>
 800242c:	e06a      	b.n	8002504 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	0010      	movs	r0, r2
 8002436:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002438:	e064      	b.n	8002504 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	2202      	movs	r2, #2
 8002440:	409a      	lsls	r2, r3
 8002442:	0013      	movs	r3, r2
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4013      	ands	r3, r2
 8002448:	d02b      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xda>
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2202      	movs	r2, #2
 800244e:	4013      	ands	r3, r2
 8002450:	d027      	beq.n	80024a2 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2220      	movs	r2, #32
 800245a:	4013      	ands	r3, r2
 800245c:	d10b      	bne.n	8002476 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	210a      	movs	r1, #10
 800246a:	438a      	bics	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2221      	movs	r2, #33	@ 0x21
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800247e:	2102      	movs	r1, #2
 8002480:	4091      	lsls	r1, r2
 8002482:	000a      	movs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2220      	movs	r2, #32
 800248a:	2100      	movs	r1, #0
 800248c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002492:	2b00      	cmp	r3, #0
 8002494:	d036      	beq.n	8002504 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	0010      	movs	r0, r2
 800249e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80024a0:	e030      	b.n	8002504 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	2208      	movs	r2, #8
 80024a8:	409a      	lsls	r2, r3
 80024aa:	0013      	movs	r3, r2
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4013      	ands	r3, r2
 80024b0:	d028      	beq.n	8002504 <HAL_DMA_IRQHandler+0x13c>
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	2208      	movs	r2, #8
 80024b6:	4013      	ands	r3, r2
 80024b8:	d024      	beq.n	8002504 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	210e      	movs	r1, #14
 80024c6:	438a      	bics	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d2:	2101      	movs	r1, #1
 80024d4:	4091      	lsls	r1, r2
 80024d6:	000a      	movs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2221      	movs	r2, #33	@ 0x21
 80024e4:	2101      	movs	r1, #1
 80024e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	0010      	movs	r0, r2
 8002500:	4798      	blx	r3
    }
  }
}
 8002502:	e7ff      	b.n	8002504 <HAL_DMA_IRQHandler+0x13c>
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b004      	add	sp, #16
 800250a:	bd80      	pop	{r7, pc}

0800250c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002522:	2101      	movs	r1, #1
 8002524:	4091      	lsls	r1, r2
 8002526:	000a      	movs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b10      	cmp	r3, #16
 8002538:	d108      	bne.n	800254c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800254a:	e007      	b.n	800255c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	60da      	str	r2, [r3, #12]
}
 800255c:	46c0      	nop			@ (mov r8, r8)
 800255e:	46bd      	mov	sp, r7
 8002560:	b004      	add	sp, #16
 8002562:	bd80      	pop	{r7, pc}

08002564 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a08      	ldr	r2, [pc, #32]	@ (8002594 <DMA_CalcBaseAndBitshift+0x30>)
 8002572:	4694      	mov	ip, r2
 8002574:	4463      	add	r3, ip
 8002576:	2114      	movs	r1, #20
 8002578:	0018      	movs	r0, r3
 800257a:	f7fd fdc5 	bl	8000108 <__udivsi3>
 800257e:	0003      	movs	r3, r0
 8002580:	009a      	lsls	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a03      	ldr	r2, [pc, #12]	@ (8002598 <DMA_CalcBaseAndBitshift+0x34>)
 800258a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}
 8002594:	bffdfff8 	.word	0xbffdfff8
 8002598:	40020000 	.word	0x40020000

0800259c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	e149      	b.n	8002840 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2101      	movs	r1, #1
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	4091      	lsls	r1, r2
 80025b6:	000a      	movs	r2, r1
 80025b8:	4013      	ands	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d100      	bne.n	80025c4 <HAL_GPIO_Init+0x28>
 80025c2:	e13a      	b.n	800283a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2203      	movs	r2, #3
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d005      	beq.n	80025dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2203      	movs	r2, #3
 80025d6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d130      	bne.n	800263e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	409a      	lsls	r2, r3
 80025ea:	0013      	movs	r3, r2
 80025ec:	43da      	mvns	r2, r3
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	4013      	ands	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	409a      	lsls	r2, r3
 80025fe:	0013      	movs	r3, r2
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002612:	2201      	movs	r2, #1
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	409a      	lsls	r2, r3
 8002618:	0013      	movs	r3, r2
 800261a:	43da      	mvns	r2, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	091b      	lsrs	r3, r3, #4
 8002628:	2201      	movs	r2, #1
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
 8002630:	0013      	movs	r3, r2
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2203      	movs	r2, #3
 8002644:	4013      	ands	r3, r2
 8002646:	2b03      	cmp	r3, #3
 8002648:	d017      	beq.n	800267a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	2203      	movs	r2, #3
 8002656:	409a      	lsls	r2, r3
 8002658:	0013      	movs	r3, r2
 800265a:	43da      	mvns	r2, r3
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4013      	ands	r3, r2
 8002660:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4313      	orrs	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	2203      	movs	r2, #3
 8002680:	4013      	ands	r3, r2
 8002682:	2b02      	cmp	r3, #2
 8002684:	d123      	bne.n	80026ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	08da      	lsrs	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3208      	adds	r2, #8
 800268e:	0092      	lsls	r2, r2, #2
 8002690:	58d3      	ldr	r3, [r2, r3]
 8002692:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2207      	movs	r2, #7
 8002698:	4013      	ands	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	220f      	movs	r2, #15
 800269e:	409a      	lsls	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	43da      	mvns	r2, r3
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4013      	ands	r3, r2
 80026a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	2107      	movs	r1, #7
 80026b2:	400b      	ands	r3, r1
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	409a      	lsls	r2, r3
 80026b8:	0013      	movs	r3, r2
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	08da      	lsrs	r2, r3, #3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3208      	adds	r2, #8
 80026c8:	0092      	lsls	r2, r2, #2
 80026ca:	6939      	ldr	r1, [r7, #16]
 80026cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	409a      	lsls	r2, r3
 80026dc:	0013      	movs	r3, r2
 80026de:	43da      	mvns	r2, r3
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4013      	ands	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2203      	movs	r2, #3
 80026ec:	401a      	ands	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	409a      	lsls	r2, r3
 80026f4:	0013      	movs	r3, r2
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	23c0      	movs	r3, #192	@ 0xc0
 8002708:	029b      	lsls	r3, r3, #10
 800270a:	4013      	ands	r3, r2
 800270c:	d100      	bne.n	8002710 <HAL_GPIO_Init+0x174>
 800270e:	e094      	b.n	800283a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002710:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_GPIO_Init+0x2bc>)
 8002712:	699a      	ldr	r2, [r3, #24]
 8002714:	4b50      	ldr	r3, [pc, #320]	@ (8002858 <HAL_GPIO_Init+0x2bc>)
 8002716:	2101      	movs	r1, #1
 8002718:	430a      	orrs	r2, r1
 800271a:	619a      	str	r2, [r3, #24]
 800271c:	4b4e      	ldr	r3, [pc, #312]	@ (8002858 <HAL_GPIO_Init+0x2bc>)
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002728:	4a4c      	ldr	r2, [pc, #304]	@ (800285c <HAL_GPIO_Init+0x2c0>)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	3302      	adds	r3, #2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	589b      	ldr	r3, [r3, r2]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2203      	movs	r2, #3
 800273a:	4013      	ands	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	220f      	movs	r2, #15
 8002740:	409a      	lsls	r2, r3
 8002742:	0013      	movs	r3, r2
 8002744:	43da      	mvns	r2, r3
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	2390      	movs	r3, #144	@ 0x90
 8002750:	05db      	lsls	r3, r3, #23
 8002752:	429a      	cmp	r2, r3
 8002754:	d00d      	beq.n	8002772 <HAL_GPIO_Init+0x1d6>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a41      	ldr	r2, [pc, #260]	@ (8002860 <HAL_GPIO_Init+0x2c4>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <HAL_GPIO_Init+0x1d2>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a40      	ldr	r2, [pc, #256]	@ (8002864 <HAL_GPIO_Init+0x2c8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d101      	bne.n	800276a <HAL_GPIO_Init+0x1ce>
 8002766:	2302      	movs	r3, #2
 8002768:	e004      	b.n	8002774 <HAL_GPIO_Init+0x1d8>
 800276a:	2305      	movs	r3, #5
 800276c:	e002      	b.n	8002774 <HAL_GPIO_Init+0x1d8>
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_GPIO_Init+0x1d8>
 8002772:	2300      	movs	r3, #0
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	2103      	movs	r1, #3
 8002778:	400a      	ands	r2, r1
 800277a:	0092      	lsls	r2, r2, #2
 800277c:	4093      	lsls	r3, r2
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002784:	4935      	ldr	r1, [pc, #212]	@ (800285c <HAL_GPIO_Init+0x2c0>)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	089b      	lsrs	r3, r3, #2
 800278a:	3302      	adds	r3, #2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002792:	4b35      	ldr	r3, [pc, #212]	@ (8002868 <HAL_GPIO_Init+0x2cc>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	43da      	mvns	r2, r3
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	035b      	lsls	r3, r3, #13
 80027aa:	4013      	ands	r3, r2
 80027ac:	d003      	beq.n	80027b6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80027b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002868 <HAL_GPIO_Init+0x2cc>)
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80027bc:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_GPIO_Init+0x2cc>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	43da      	mvns	r2, r3
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4013      	ands	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	2380      	movs	r3, #128	@ 0x80
 80027d2:	039b      	lsls	r3, r3, #14
 80027d4:	4013      	ands	r3, r2
 80027d6:	d003      	beq.n	80027e0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	4313      	orrs	r3, r2
 80027de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80027e0:	4b21      	ldr	r3, [pc, #132]	@ (8002868 <HAL_GPIO_Init+0x2cc>)
 80027e2:	693a      	ldr	r2, [r7, #16]
 80027e4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_GPIO_Init+0x2cc>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	43da      	mvns	r2, r3
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	4013      	ands	r3, r2
 80027f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	029b      	lsls	r3, r3, #10
 80027fe:	4013      	ands	r3, r2
 8002800:	d003      	beq.n	800280a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4313      	orrs	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800280a:	4b17      	ldr	r3, [pc, #92]	@ (8002868 <HAL_GPIO_Init+0x2cc>)
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002810:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <HAL_GPIO_Init+0x2cc>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	43da      	mvns	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	4013      	ands	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	025b      	lsls	r3, r3, #9
 8002828:	4013      	ands	r3, r2
 800282a:	d003      	beq.n	8002834 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002834:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <HAL_GPIO_Init+0x2cc>)
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	40da      	lsrs	r2, r3
 8002848:	1e13      	subs	r3, r2, #0
 800284a:	d000      	beq.n	800284e <HAL_GPIO_Init+0x2b2>
 800284c:	e6ae      	b.n	80025ac <HAL_GPIO_Init+0x10>
  } 
}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	46c0      	nop			@ (mov r8, r8)
 8002852:	46bd      	mov	sp, r7
 8002854:	b006      	add	sp, #24
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	40010000 	.word	0x40010000
 8002860:	48000400 	.word	0x48000400
 8002864:	48000800 	.word	0x48000800
 8002868:	40010400 	.word	0x40010400

0800286c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	0008      	movs	r0, r1
 8002876:	0011      	movs	r1, r2
 8002878:	1cbb      	adds	r3, r7, #2
 800287a:	1c02      	adds	r2, r0, #0
 800287c:	801a      	strh	r2, [r3, #0]
 800287e:	1c7b      	adds	r3, r7, #1
 8002880:	1c0a      	adds	r2, r1, #0
 8002882:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002884:	1c7b      	adds	r3, r7, #1
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d004      	beq.n	8002896 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800288c:	1cbb      	adds	r3, r7, #2
 800288e:	881a      	ldrh	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002894:	e003      	b.n	800289e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002896:	1cbb      	adds	r3, r7, #2
 8002898:	881a      	ldrh	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b002      	add	sp, #8
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f000 fb76 	bl	8002fa8 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2201      	movs	r2, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	d100      	bne.n	80028c8 <HAL_RCC_OscConfig+0x20>
 80028c6:	e08e      	b.n	80029e6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80028c8:	4bc5      	ldr	r3, [pc, #788]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	220c      	movs	r2, #12
 80028ce:	4013      	ands	r3, r2
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d00e      	beq.n	80028f2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d4:	4bc2      	ldr	r3, [pc, #776]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	220c      	movs	r2, #12
 80028da:	4013      	ands	r3, r2
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d117      	bne.n	8002910 <HAL_RCC_OscConfig+0x68>
 80028e0:	4bbf      	ldr	r3, [pc, #764]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	23c0      	movs	r3, #192	@ 0xc0
 80028e6:	025b      	lsls	r3, r3, #9
 80028e8:	401a      	ands	r2, r3
 80028ea:	2380      	movs	r3, #128	@ 0x80
 80028ec:	025b      	lsls	r3, r3, #9
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d10e      	bne.n	8002910 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f2:	4bbb      	ldr	r3, [pc, #748]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	029b      	lsls	r3, r3, #10
 80028fa:	4013      	ands	r3, r2
 80028fc:	d100      	bne.n	8002900 <HAL_RCC_OscConfig+0x58>
 80028fe:	e071      	b.n	80029e4 <HAL_RCC_OscConfig+0x13c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d000      	beq.n	800290a <HAL_RCC_OscConfig+0x62>
 8002908:	e06c      	b.n	80029e4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	f000 fb4c 	bl	8002fa8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d107      	bne.n	8002928 <HAL_RCC_OscConfig+0x80>
 8002918:	4bb1      	ldr	r3, [pc, #708]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4bb0      	ldr	r3, [pc, #704]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 800291e:	2180      	movs	r1, #128	@ 0x80
 8002920:	0249      	lsls	r1, r1, #9
 8002922:	430a      	orrs	r2, r1
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	e02f      	b.n	8002988 <HAL_RCC_OscConfig+0xe0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10c      	bne.n	800294a <HAL_RCC_OscConfig+0xa2>
 8002930:	4bab      	ldr	r3, [pc, #684]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	4baa      	ldr	r3, [pc, #680]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002936:	49ab      	ldr	r1, [pc, #684]	@ (8002be4 <HAL_RCC_OscConfig+0x33c>)
 8002938:	400a      	ands	r2, r1
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	4ba8      	ldr	r3, [pc, #672]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4ba7      	ldr	r3, [pc, #668]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002942:	49a9      	ldr	r1, [pc, #676]	@ (8002be8 <HAL_RCC_OscConfig+0x340>)
 8002944:	400a      	ands	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e01e      	b.n	8002988 <HAL_RCC_OscConfig+0xe0>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b05      	cmp	r3, #5
 8002950:	d10e      	bne.n	8002970 <HAL_RCC_OscConfig+0xc8>
 8002952:	4ba3      	ldr	r3, [pc, #652]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	4ba2      	ldr	r3, [pc, #648]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002958:	2180      	movs	r1, #128	@ 0x80
 800295a:	02c9      	lsls	r1, r1, #11
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	4b9f      	ldr	r3, [pc, #636]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b9e      	ldr	r3, [pc, #632]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002966:	2180      	movs	r1, #128	@ 0x80
 8002968:	0249      	lsls	r1, r1, #9
 800296a:	430a      	orrs	r2, r1
 800296c:	601a      	str	r2, [r3, #0]
 800296e:	e00b      	b.n	8002988 <HAL_RCC_OscConfig+0xe0>
 8002970:	4b9b      	ldr	r3, [pc, #620]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b9a      	ldr	r3, [pc, #616]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002976:	499b      	ldr	r1, [pc, #620]	@ (8002be4 <HAL_RCC_OscConfig+0x33c>)
 8002978:	400a      	ands	r2, r1
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	4b98      	ldr	r3, [pc, #608]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b97      	ldr	r3, [pc, #604]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002982:	4999      	ldr	r1, [pc, #612]	@ (8002be8 <HAL_RCC_OscConfig+0x340>)
 8002984:	400a      	ands	r2, r1
 8002986:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d014      	beq.n	80029ba <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe faec 	bl	8000f6c <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800299a:	f7fe fae7 	bl	8000f6c <HAL_GetTick>
 800299e:	0002      	movs	r2, r0
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b64      	cmp	r3, #100	@ 0x64
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e2fd      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ac:	4b8c      	ldr	r3, [pc, #560]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	2380      	movs	r3, #128	@ 0x80
 80029b2:	029b      	lsls	r3, r3, #10
 80029b4:	4013      	ands	r3, r2
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0xf2>
 80029b8:	e015      	b.n	80029e6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7fe fad7 	bl	8000f6c <HAL_GetTick>
 80029be:	0003      	movs	r3, r0
 80029c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c4:	f7fe fad2 	bl	8000f6c <HAL_GetTick>
 80029c8:	0002      	movs	r2, r0
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	@ 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e2e8      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029d6:	4b82      	ldr	r3, [pc, #520]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	2380      	movs	r3, #128	@ 0x80
 80029dc:	029b      	lsls	r3, r3, #10
 80029de:	4013      	ands	r3, r2
 80029e0:	d1f0      	bne.n	80029c4 <HAL_RCC_OscConfig+0x11c>
 80029e2:	e000      	b.n	80029e6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	d100      	bne.n	80029f2 <HAL_RCC_OscConfig+0x14a>
 80029f0:	e06c      	b.n	8002acc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80029f2:	4b7b      	ldr	r3, [pc, #492]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	220c      	movs	r2, #12
 80029f8:	4013      	ands	r3, r2
 80029fa:	d00e      	beq.n	8002a1a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80029fc:	4b78      	ldr	r3, [pc, #480]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	220c      	movs	r2, #12
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d11f      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1a0>
 8002a08:	4b75      	ldr	r3, [pc, #468]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	23c0      	movs	r3, #192	@ 0xc0
 8002a0e:	025b      	lsls	r3, r3, #9
 8002a10:	401a      	ands	r2, r3
 8002a12:	2380      	movs	r3, #128	@ 0x80
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b71      	ldr	r3, [pc, #452]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_OscConfig+0x188>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e2bb      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b6b      	ldr	r3, [pc, #428]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	22f8      	movs	r2, #248	@ 0xf8
 8002a36:	4393      	bics	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00da      	lsls	r2, r3, #3
 8002a40:	4b67      	ldr	r3, [pc, #412]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e041      	b.n	8002acc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d024      	beq.n	8002a9a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b63      	ldr	r3, [pc, #396]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b62      	ldr	r3, [pc, #392]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fa86 	bl	8000f6c <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe fa81 	bl	8000f6c <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e297      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a78:	4b59      	ldr	r3, [pc, #356]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d0f1      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a82:	4b57      	ldr	r3, [pc, #348]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	22f8      	movs	r2, #248	@ 0xf8
 8002a88:	4393      	bics	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	00da      	lsls	r2, r3, #3
 8002a92:	4b53      	ldr	r3, [pc, #332]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a94:	430a      	orrs	r2, r1
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	e018      	b.n	8002acc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b51      	ldr	r3, [pc, #324]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b50      	ldr	r3, [pc, #320]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	438a      	bics	r2, r1
 8002aa4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fa61 	bl	8000f6c <HAL_GetTick>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ab0:	f7fe fa5c 	bl	8000f6c <HAL_GetTick>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e272      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	4b47      	ldr	r3, [pc, #284]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d1f1      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2208      	movs	r2, #8
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d036      	beq.n	8002b44 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ade:	4b40      	ldr	r3, [pc, #256]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7fe fa3f 	bl	8000f6c <HAL_GetTick>
 8002aee:	0003      	movs	r3, r0
 8002af0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af4:	f7fe fa3a 	bl	8000f6c <HAL_GetTick>
 8002af8:	0002      	movs	r2, r0
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e250      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b06:	4b36      	ldr	r3, [pc, #216]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d0f1      	beq.n	8002af4 <HAL_RCC_OscConfig+0x24c>
 8002b10:	e018      	b.n	8002b44 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b12:	4b33      	ldr	r3, [pc, #204]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b16:	4b32      	ldr	r3, [pc, #200]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b18:	2101      	movs	r1, #1
 8002b1a:	438a      	bics	r2, r1
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fa25 	bl	8000f6c <HAL_GetTick>
 8002b22:	0003      	movs	r3, r0
 8002b24:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b26:	e008      	b.n	8002b3a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b28:	f7fe fa20 	bl	8000f6c <HAL_GetTick>
 8002b2c:	0002      	movs	r2, r0
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e236      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b3a:	4b29      	ldr	r3, [pc, #164]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	2202      	movs	r2, #2
 8002b40:	4013      	ands	r3, r2
 8002b42:	d1f1      	bne.n	8002b28 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d100      	bne.n	8002b50 <HAL_RCC_OscConfig+0x2a8>
 8002b4e:	e0b5      	b.n	8002cbc <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b50:	201f      	movs	r0, #31
 8002b52:	183b      	adds	r3, r7, r0
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b58:	4b21      	ldr	r3, [pc, #132]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	2380      	movs	r3, #128	@ 0x80
 8002b5e:	055b      	lsls	r3, r3, #21
 8002b60:	4013      	ands	r3, r2
 8002b62:	d110      	bne.n	8002b86 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b64:	4b1e      	ldr	r3, [pc, #120]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b66:	69da      	ldr	r2, [r3, #28]
 8002b68:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b6a:	2180      	movs	r1, #128	@ 0x80
 8002b6c:	0549      	lsls	r1, r1, #21
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	61da      	str	r2, [r3, #28]
 8002b72:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002b74:	69da      	ldr	r2, [r3, #28]
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	055b      	lsls	r3, r3, #21
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b80:	183b      	adds	r3, r7, r0
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b86:	4b19      	ldr	r3, [pc, #100]	@ (8002bec <HAL_RCC_OscConfig+0x344>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d11a      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b92:	4b16      	ldr	r3, [pc, #88]	@ (8002bec <HAL_RCC_OscConfig+0x344>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_RCC_OscConfig+0x344>)
 8002b98:	2180      	movs	r1, #128	@ 0x80
 8002b9a:	0049      	lsls	r1, r1, #1
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba0:	f7fe f9e4 	bl	8000f6c <HAL_GetTick>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	e008      	b.n	8002bbc <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002baa:	f7fe f9df 	bl	8000f6c <HAL_GetTick>
 8002bae:	0002      	movs	r2, r0
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	2b64      	cmp	r3, #100	@ 0x64
 8002bb6:	d901      	bls.n	8002bbc <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e1f5      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_RCC_OscConfig+0x344>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d0f0      	beq.n	8002baa <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10f      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x348>
 8002bd0:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002bd2:	6a1a      	ldr	r2, [r3, #32]
 8002bd4:	4b02      	ldr	r3, [pc, #8]	@ (8002be0 <HAL_RCC_OscConfig+0x338>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	621a      	str	r2, [r3, #32]
 8002bdc:	e036      	b.n	8002c4c <HAL_RCC_OscConfig+0x3a4>
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	40021000 	.word	0x40021000
 8002be4:	fffeffff 	.word	0xfffeffff
 8002be8:	fffbffff 	.word	0xfffbffff
 8002bec:	40007000 	.word	0x40007000
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RCC_OscConfig+0x36a>
 8002bf8:	4bca      	ldr	r3, [pc, #808]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002bfa:	6a1a      	ldr	r2, [r3, #32]
 8002bfc:	4bc9      	ldr	r3, [pc, #804]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002bfe:	2101      	movs	r1, #1
 8002c00:	438a      	bics	r2, r1
 8002c02:	621a      	str	r2, [r3, #32]
 8002c04:	4bc7      	ldr	r3, [pc, #796]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c06:	6a1a      	ldr	r2, [r3, #32]
 8002c08:	4bc6      	ldr	r3, [pc, #792]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	438a      	bics	r2, r1
 8002c0e:	621a      	str	r2, [r3, #32]
 8002c10:	e01c      	b.n	8002c4c <HAL_RCC_OscConfig+0x3a4>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	2b05      	cmp	r3, #5
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCC_OscConfig+0x38c>
 8002c1a:	4bc2      	ldr	r3, [pc, #776]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c1c:	6a1a      	ldr	r2, [r3, #32]
 8002c1e:	4bc1      	ldr	r3, [pc, #772]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c20:	2104      	movs	r1, #4
 8002c22:	430a      	orrs	r2, r1
 8002c24:	621a      	str	r2, [r3, #32]
 8002c26:	4bbf      	ldr	r3, [pc, #764]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c28:	6a1a      	ldr	r2, [r3, #32]
 8002c2a:	4bbe      	ldr	r3, [pc, #760]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	621a      	str	r2, [r3, #32]
 8002c32:	e00b      	b.n	8002c4c <HAL_RCC_OscConfig+0x3a4>
 8002c34:	4bbb      	ldr	r3, [pc, #748]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c36:	6a1a      	ldr	r2, [r3, #32]
 8002c38:	4bba      	ldr	r3, [pc, #744]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	438a      	bics	r2, r1
 8002c3e:	621a      	str	r2, [r3, #32]
 8002c40:	4bb8      	ldr	r3, [pc, #736]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c42:	6a1a      	ldr	r2, [r3, #32]
 8002c44:	4bb7      	ldr	r3, [pc, #732]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c46:	2104      	movs	r1, #4
 8002c48:	438a      	bics	r2, r1
 8002c4a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d014      	beq.n	8002c7e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c54:	f7fe f98a 	bl	8000f6c <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	e009      	b.n	8002c72 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fe f985 	bl	8000f6c <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	4aaf      	ldr	r2, [pc, #700]	@ (8002f28 <HAL_RCC_OscConfig+0x680>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e19a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c72:	4bac      	ldr	r3, [pc, #688]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c74:	6a1b      	ldr	r3, [r3, #32]
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x3b6>
 8002c7c:	e013      	b.n	8002ca6 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f975 	bl	8000f6c <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c86:	e009      	b.n	8002c9c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c88:	f7fe f970 	bl	8000f6c <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	4aa5      	ldr	r2, [pc, #660]	@ (8002f28 <HAL_RCC_OscConfig+0x680>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e185      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d1f0      	bne.n	8002c88 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ca6:	231f      	movs	r3, #31
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d105      	bne.n	8002cbc <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb0:	4b9c      	ldr	r3, [pc, #624]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cb2:	69da      	ldr	r2, [r3, #28]
 8002cb4:	4b9b      	ldr	r3, [pc, #620]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cb6:	499d      	ldr	r1, [pc, #628]	@ (8002f2c <HAL_RCC_OscConfig+0x684>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d063      	beq.n	8002d8e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d12a      	bne.n	8002d24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cce:	4b95      	ldr	r3, [pc, #596]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd2:	4b94      	ldr	r3, [pc, #592]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cd4:	2104      	movs	r1, #4
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002cda:	4b92      	ldr	r3, [pc, #584]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002cdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cde:	4b91      	ldr	r3, [pc, #580]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe f941 	bl	8000f6c <HAL_GetTick>
 8002cea:	0003      	movs	r3, r0
 8002cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cf0:	f7fe f93c 	bl	8000f6c <HAL_GetTick>
 8002cf4:	0002      	movs	r2, r0
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e152      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002d02:	4b88      	ldr	r3, [pc, #544]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d06:	2202      	movs	r2, #2
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d0f1      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d0c:	4b85      	ldr	r3, [pc, #532]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d10:	22f8      	movs	r2, #248	@ 0xf8
 8002d12:	4393      	bics	r3, r2
 8002d14:	0019      	movs	r1, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	00da      	lsls	r2, r3, #3
 8002d1c:	4b81      	ldr	r3, [pc, #516]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d22:	e034      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	3305      	adds	r3, #5
 8002d2a:	d111      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002d2c:	4b7d      	ldr	r3, [pc, #500]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d30:	4b7c      	ldr	r3, [pc, #496]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d32:	2104      	movs	r1, #4
 8002d34:	438a      	bics	r2, r1
 8002d36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002d38:	4b7a      	ldr	r3, [pc, #488]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d3c:	22f8      	movs	r2, #248	@ 0xf8
 8002d3e:	4393      	bics	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	00da      	lsls	r2, r3, #3
 8002d48:	4b76      	ldr	r3, [pc, #472]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d4e:	e01e      	b.n	8002d8e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002d50:	4b74      	ldr	r3, [pc, #464]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d54:	4b73      	ldr	r3, [pc, #460]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d56:	2104      	movs	r1, #4
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002d5c:	4b71      	ldr	r3, [pc, #452]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d60:	4b70      	ldr	r3, [pc, #448]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d62:	2101      	movs	r1, #1
 8002d64:	438a      	bics	r2, r1
 8002d66:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d68:	f7fe f900 	bl	8000f6c <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002d72:	f7fe f8fb 	bl	8000f6c <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e111      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002d84:	4b67      	ldr	r3, [pc, #412]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d88:	2202      	movs	r2, #2
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	d1f1      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2220      	movs	r2, #32
 8002d94:	4013      	ands	r3, r2
 8002d96:	d05c      	beq.n	8002e52 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d98:	4b62      	ldr	r3, [pc, #392]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	220c      	movs	r2, #12
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b0c      	cmp	r3, #12
 8002da2:	d00e      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002da4:	4b5f      	ldr	r3, [pc, #380]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	220c      	movs	r2, #12
 8002daa:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002dac:	2b08      	cmp	r3, #8
 8002dae:	d114      	bne.n	8002dda <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	23c0      	movs	r3, #192	@ 0xc0
 8002db6:	025b      	lsls	r3, r3, #9
 8002db8:	401a      	ands	r2, r3
 8002dba:	23c0      	movs	r3, #192	@ 0xc0
 8002dbc:	025b      	lsls	r3, r3, #9
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10b      	bne.n	8002dda <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002dc2:	4b58      	ldr	r3, [pc, #352]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dc6:	2380      	movs	r3, #128	@ 0x80
 8002dc8:	029b      	lsls	r3, r3, #10
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d040      	beq.n	8002e50 <HAL_RCC_OscConfig+0x5a8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d03c      	beq.n	8002e50 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0e6      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d01b      	beq.n	8002e1a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002de2:	4b50      	ldr	r3, [pc, #320]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002de6:	4b4f      	ldr	r3, [pc, #316]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002de8:	2180      	movs	r1, #128	@ 0x80
 8002dea:	0249      	lsls	r1, r1, #9
 8002dec:	430a      	orrs	r2, r1
 8002dee:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe f8bc 	bl	8000f6c <HAL_GetTick>
 8002df4:	0003      	movs	r3, r0
 8002df6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002dfa:	f7fe f8b7 	bl	8000f6c <HAL_GetTick>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0cd      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002e0c:	4b45      	ldr	r3, [pc, #276]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	029b      	lsls	r3, r3, #10
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x552>
 8002e18:	e01b      	b.n	8002e52 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002e1a:	4b42      	ldr	r3, [pc, #264]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e1e:	4b41      	ldr	r3, [pc, #260]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e20:	4943      	ldr	r1, [pc, #268]	@ (8002f30 <HAL_RCC_OscConfig+0x688>)
 8002e22:	400a      	ands	r2, r1
 8002e24:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe f8a1 	bl	8000f6c <HAL_GetTick>
 8002e2a:	0003      	movs	r3, r0
 8002e2c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e30:	f7fe f89c 	bl	8000f6c <HAL_GetTick>
 8002e34:	0002      	movs	r2, r0
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e0b2      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002e42:	4b38      	ldr	r3, [pc, #224]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	029b      	lsls	r3, r3, #10
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x588>
 8002e4e:	e000      	b.n	8002e52 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002e50:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d100      	bne.n	8002e5c <HAL_RCC_OscConfig+0x5b4>
 8002e5a:	e0a4      	b.n	8002fa6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e5c:	4b31      	ldr	r3, [pc, #196]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	220c      	movs	r2, #12
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d100      	bne.n	8002e6a <HAL_RCC_OscConfig+0x5c2>
 8002e68:	e078      	b.n	8002f5c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d14c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e72:	4b2c      	ldr	r3, [pc, #176]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b2b      	ldr	r3, [pc, #172]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e78:	492e      	ldr	r1, [pc, #184]	@ (8002f34 <HAL_RCC_OscConfig+0x68c>)
 8002e7a:	400a      	ands	r2, r1
 8002e7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e7e:	f7fe f875 	bl	8000f6c <HAL_GetTick>
 8002e82:	0003      	movs	r3, r0
 8002e84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e88:	f7fe f870 	bl	8000f6c <HAL_GetTick>
 8002e8c:	0002      	movs	r2, r0
 8002e8e:	69bb      	ldr	r3, [r7, #24]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e086      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	2380      	movs	r3, #128	@ 0x80
 8002ea0:	049b      	lsls	r3, r3, #18
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	d1f0      	bne.n	8002e88 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eaa:	220f      	movs	r2, #15
 8002eac:	4393      	bics	r3, r2
 8002eae:	0019      	movs	r1, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002eba:	4b1a      	ldr	r3, [pc, #104]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8002f38 <HAL_RCC_OscConfig+0x690>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	4b15      	ldr	r3, [pc, #84]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ed0:	430a      	orrs	r2, r1
 8002ed2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b12      	ldr	r3, [pc, #72]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002eda:	2180      	movs	r1, #128	@ 0x80
 8002edc:	0449      	lsls	r1, r1, #17
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f843 	bl	8000f6c <HAL_GetTick>
 8002ee6:	0003      	movs	r3, r0
 8002ee8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe f83e 	bl	8000f6c <HAL_GetTick>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e054      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002efe:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	049b      	lsls	r3, r3, #18
 8002f06:	4013      	ands	r3, r2
 8002f08:	d0f0      	beq.n	8002eec <HAL_RCC_OscConfig+0x644>
 8002f0a:	e04c      	b.n	8002fa6 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0c:	4b05      	ldr	r3, [pc, #20]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <HAL_RCC_OscConfig+0x67c>)
 8002f12:	4908      	ldr	r1, [pc, #32]	@ (8002f34 <HAL_RCC_OscConfig+0x68c>)
 8002f14:	400a      	ands	r2, r1
 8002f16:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f18:	f7fe f828 	bl	8000f6c <HAL_GetTick>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x6a6>
 8002f22:	46c0      	nop			@ (mov r8, r8)
 8002f24:	40021000 	.word	0x40021000
 8002f28:	00001388 	.word	0x00001388
 8002f2c:	efffffff 	.word	0xefffffff
 8002f30:	fffeffff 	.word	0xfffeffff
 8002f34:	feffffff 	.word	0xfeffffff
 8002f38:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f3c:	f7fe f816 	bl	8000f6c <HAL_GetTick>
 8002f40:	0002      	movs	r2, r0
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e02c      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f4e:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <HAL_RCC_OscConfig+0x708>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	@ 0x80
 8002f54:	049b      	lsls	r3, r3, #18
 8002f56:	4013      	ands	r3, r2
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x694>
 8002f5a:	e024      	b.n	8002fa6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e01f      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002f68:	4b11      	ldr	r3, [pc, #68]	@ (8002fb0 <HAL_RCC_OscConfig+0x708>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	@ (8002fb0 <HAL_RCC_OscConfig+0x708>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	23c0      	movs	r3, #192	@ 0xc0
 8002f78:	025b      	lsls	r3, r3, #9
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d10e      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	220f      	movs	r2, #15
 8002f88:	401a      	ands	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	23f0      	movs	r3, #240	@ 0xf0
 8002f96:	039b      	lsls	r3, r3, #14
 8002f98:	401a      	ands	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d001      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	0018      	movs	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b008      	add	sp, #32
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000

08002fb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e0bf      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fc8:	4b61      	ldr	r3, [pc, #388]	@ (8003150 <HAL_RCC_ClockConfig+0x19c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	4013      	ands	r3, r2
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d911      	bls.n	8002ffa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8003150 <HAL_RCC_ClockConfig+0x19c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4393      	bics	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8003150 <HAL_RCC_ClockConfig+0x19c>)
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe8:	4b59      	ldr	r3, [pc, #356]	@ (8003150 <HAL_RCC_ClockConfig+0x19c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2201      	movs	r2, #1
 8002fee:	4013      	ands	r3, r2
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d001      	beq.n	8002ffa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e0a6      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d015      	beq.n	8003030 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2204      	movs	r2, #4
 800300a:	4013      	ands	r3, r2
 800300c:	d006      	beq.n	800301c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800300e:	4b51      	ldr	r3, [pc, #324]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4b50      	ldr	r3, [pc, #320]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003014:	21e0      	movs	r1, #224	@ 0xe0
 8003016:	00c9      	lsls	r1, r1, #3
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800301c:	4b4d      	ldr	r3, [pc, #308]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	22f0      	movs	r2, #240	@ 0xf0
 8003022:	4393      	bics	r3, r2
 8003024:	0019      	movs	r1, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	4b4a      	ldr	r3, [pc, #296]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2201      	movs	r2, #1
 8003036:	4013      	ands	r3, r2
 8003038:	d04c      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	4b44      	ldr	r3, [pc, #272]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	2380      	movs	r3, #128	@ 0x80
 8003048:	029b      	lsls	r3, r3, #10
 800304a:	4013      	ands	r3, r2
 800304c:	d120      	bne.n	8003090 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e07a      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b02      	cmp	r3, #2
 8003058:	d107      	bne.n	800306a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305a:	4b3e      	ldr	r3, [pc, #248]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	2380      	movs	r3, #128	@ 0x80
 8003060:	049b      	lsls	r3, r3, #18
 8003062:	4013      	ands	r3, r2
 8003064:	d114      	bne.n	8003090 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e06e      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b03      	cmp	r3, #3
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003072:	4b38      	ldr	r3, [pc, #224]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003074:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003076:	2380      	movs	r3, #128	@ 0x80
 8003078:	029b      	lsls	r3, r3, #10
 800307a:	4013      	ands	r3, r2
 800307c:	d108      	bne.n	8003090 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e062      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003082:	4b34      	ldr	r3, [pc, #208]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2202      	movs	r2, #2
 8003088:	4013      	ands	r3, r2
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e05b      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003090:	4b30      	ldr	r3, [pc, #192]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2203      	movs	r2, #3
 8003096:	4393      	bics	r3, r2
 8003098:	0019      	movs	r1, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	4b2d      	ldr	r3, [pc, #180]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 80030a0:	430a      	orrs	r2, r1
 80030a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030a4:	f7fd ff62 	bl	8000f6c <HAL_GetTick>
 80030a8:	0003      	movs	r3, r0
 80030aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ac:	e009      	b.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030ae:	f7fd ff5d 	bl	8000f6c <HAL_GetTick>
 80030b2:	0002      	movs	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	4a27      	ldr	r2, [pc, #156]	@ (8003158 <HAL_RCC_ClockConfig+0x1a4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e042      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c2:	4b24      	ldr	r3, [pc, #144]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	220c      	movs	r2, #12
 80030c8:	401a      	ands	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d1ec      	bne.n	80030ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003150 <HAL_RCC_ClockConfig+0x19c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2201      	movs	r2, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d211      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <HAL_RCC_ClockConfig+0x19c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2201      	movs	r2, #1
 80030e8:	4393      	bics	r3, r2
 80030ea:	0019      	movs	r1, r3
 80030ec:	4b18      	ldr	r3, [pc, #96]	@ (8003150 <HAL_RCC_ClockConfig+0x19c>)
 80030ee:	683a      	ldr	r2, [r7, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f4:	4b16      	ldr	r3, [pc, #88]	@ (8003150 <HAL_RCC_ClockConfig+0x19c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2201      	movs	r2, #1
 80030fa:	4013      	ands	r3, r2
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e020      	b.n	8003148 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2204      	movs	r2, #4
 800310c:	4013      	ands	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003110:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	4a11      	ldr	r2, [pc, #68]	@ (800315c <HAL_RCC_ClockConfig+0x1a8>)
 8003116:	4013      	ands	r3, r2
 8003118:	0019      	movs	r1, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003124:	f000 f820 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003128:	0001      	movs	r1, r0
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_RCC_ClockConfig+0x1a0>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	091b      	lsrs	r3, r3, #4
 8003130:	220f      	movs	r2, #15
 8003132:	4013      	ands	r3, r2
 8003134:	4a0a      	ldr	r2, [pc, #40]	@ (8003160 <HAL_RCC_ClockConfig+0x1ac>)
 8003136:	5cd3      	ldrb	r3, [r2, r3]
 8003138:	000a      	movs	r2, r1
 800313a:	40da      	lsrs	r2, r3
 800313c:	4b09      	ldr	r3, [pc, #36]	@ (8003164 <HAL_RCC_ClockConfig+0x1b0>)
 800313e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003140:	2003      	movs	r0, #3
 8003142:	f7fd fecd 	bl	8000ee0 <HAL_InitTick>
  
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	b004      	add	sp, #16
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40022000 	.word	0x40022000
 8003154:	40021000 	.word	0x40021000
 8003158:	00001388 	.word	0x00001388
 800315c:	fffff8ff 	.word	0xfffff8ff
 8003160:	08003bd4 	.word	0x08003bd4
 8003164:	20000000 	.word	0x20000000

08003168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003182:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	220c      	movs	r2, #12
 800318c:	4013      	ands	r3, r2
 800318e:	2b0c      	cmp	r3, #12
 8003190:	d046      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0xb8>
 8003192:	d848      	bhi.n	8003226 <HAL_RCC_GetSysClockFreq+0xbe>
 8003194:	2b04      	cmp	r3, #4
 8003196:	d002      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x36>
 8003198:	2b08      	cmp	r3, #8
 800319a:	d003      	beq.n	80031a4 <HAL_RCC_GetSysClockFreq+0x3c>
 800319c:	e043      	b.n	8003226 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800319e:	4b27      	ldr	r3, [pc, #156]	@ (800323c <HAL_RCC_GetSysClockFreq+0xd4>)
 80031a0:	613b      	str	r3, [r7, #16]
      break;
 80031a2:	e043      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	0c9b      	lsrs	r3, r3, #18
 80031a8:	220f      	movs	r2, #15
 80031aa:	4013      	ands	r3, r2
 80031ac:	4a24      	ldr	r2, [pc, #144]	@ (8003240 <HAL_RCC_GetSysClockFreq+0xd8>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80031b2:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <HAL_RCC_GetSysClockFreq+0xd0>)
 80031b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b6:	220f      	movs	r2, #15
 80031b8:	4013      	ands	r3, r2
 80031ba:	4a22      	ldr	r2, [pc, #136]	@ (8003244 <HAL_RCC_GetSysClockFreq+0xdc>)
 80031bc:	5cd3      	ldrb	r3, [r2, r3]
 80031be:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	23c0      	movs	r3, #192	@ 0xc0
 80031c4:	025b      	lsls	r3, r3, #9
 80031c6:	401a      	ands	r2, r3
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	025b      	lsls	r3, r3, #9
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d109      	bne.n	80031e4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031d0:	68b9      	ldr	r1, [r7, #8]
 80031d2:	481a      	ldr	r0, [pc, #104]	@ (800323c <HAL_RCC_GetSysClockFreq+0xd4>)
 80031d4:	f7fc ff98 	bl	8000108 <__udivsi3>
 80031d8:	0003      	movs	r3, r0
 80031da:	001a      	movs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4353      	muls	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e01a      	b.n	800321a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	23c0      	movs	r3, #192	@ 0xc0
 80031e8:	025b      	lsls	r3, r3, #9
 80031ea:	401a      	ands	r2, r3
 80031ec:	23c0      	movs	r3, #192	@ 0xc0
 80031ee:	025b      	lsls	r3, r3, #9
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d109      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	4814      	ldr	r0, [pc, #80]	@ (8003248 <HAL_RCC_GetSysClockFreq+0xe0>)
 80031f8:	f7fc ff86 	bl	8000108 <__udivsi3>
 80031fc:	0003      	movs	r3, r0
 80031fe:	001a      	movs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4353      	muls	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	e008      	b.n	800321a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	4810      	ldr	r0, [pc, #64]	@ (800324c <HAL_RCC_GetSysClockFreq+0xe4>)
 800320c:	f7fc ff7c 	bl	8000108 <__udivsi3>
 8003210:	0003      	movs	r3, r0
 8003212:	001a      	movs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4353      	muls	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	613b      	str	r3, [r7, #16]
      break;
 800321e:	e005      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003220:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003222:	613b      	str	r3, [r7, #16]
      break;
 8003224:	e002      	b.n	800322c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003226:	4b09      	ldr	r3, [pc, #36]	@ (800324c <HAL_RCC_GetSysClockFreq+0xe4>)
 8003228:	613b      	str	r3, [r7, #16]
      break;
 800322a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800322c:	693b      	ldr	r3, [r7, #16]
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b006      	add	sp, #24
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	40021000 	.word	0x40021000
 800323c:	016e3600 	.word	0x016e3600
 8003240:	08003be4 	.word	0x08003be4
 8003244:	08003bf4 	.word	0x08003bf4
 8003248:	02dc6c00 	.word	0x02dc6c00
 800324c:	007a1200 	.word	0x007a1200

08003250 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e0a8      	b.n	80033b4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003266:	2b00      	cmp	r3, #0
 8003268:	d109      	bne.n	800327e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	2382      	movs	r3, #130	@ 0x82
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	429a      	cmp	r2, r3
 8003274:	d009      	beq.n	800328a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	61da      	str	r2, [r3, #28]
 800327c:	e005      	b.n	800328a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	225d      	movs	r2, #93	@ 0x5d
 8003294:	5c9b      	ldrb	r3, [r3, r2]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	225c      	movs	r2, #92	@ 0x5c
 80032a0:	2100      	movs	r1, #0
 80032a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7fd fce0 	bl	8000c6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	225d      	movs	r2, #93	@ 0x5d
 80032b0:	2102      	movs	r1, #2
 80032b2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2140      	movs	r1, #64	@ 0x40
 80032c0:	438a      	bics	r2, r1
 80032c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	23e0      	movs	r3, #224	@ 0xe0
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d902      	bls.n	80032d6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e002      	b.n	80032dc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032d6:	2380      	movs	r3, #128	@ 0x80
 80032d8:	015b      	lsls	r3, r3, #5
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	23f0      	movs	r3, #240	@ 0xf0
 80032e2:	011b      	lsls	r3, r3, #4
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d008      	beq.n	80032fa <HAL_SPI_Init+0xaa>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	23e0      	movs	r3, #224	@ 0xe0
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d002      	beq.n	80032fa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	2382      	movs	r3, #130	@ 0x82
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	401a      	ands	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6899      	ldr	r1, [r3, #8]
 8003308:	2384      	movs	r3, #132	@ 0x84
 800330a:	021b      	lsls	r3, r3, #8
 800330c:	400b      	ands	r3, r1
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2102      	movs	r1, #2
 8003316:	400b      	ands	r3, r1
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2101      	movs	r1, #1
 8003320:	400b      	ands	r3, r1
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6999      	ldr	r1, [r3, #24]
 8003328:	2380      	movs	r3, #128	@ 0x80
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	400b      	ands	r3, r1
 800332e:	431a      	orrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2138      	movs	r1, #56	@ 0x38
 8003336:	400b      	ands	r3, r1
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	2180      	movs	r1, #128	@ 0x80
 8003340:	400b      	ands	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	0011      	movs	r1, r2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	401a      	ands	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	0c1b      	lsrs	r3, r3, #16
 800335e:	2204      	movs	r2, #4
 8003360:	401a      	ands	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	2110      	movs	r1, #16
 8003368:	400b      	ands	r3, r1
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003370:	2108      	movs	r1, #8
 8003372:	400b      	ands	r3, r1
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68d9      	ldr	r1, [r3, #12]
 800337a:	23f0      	movs	r3, #240	@ 0xf0
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	400b      	ands	r3, r1
 8003380:	431a      	orrs	r2, r3
 8003382:	0011      	movs	r1, r2
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	2380      	movs	r3, #128	@ 0x80
 8003388:	015b      	lsls	r3, r3, #5
 800338a:	401a      	ands	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69da      	ldr	r2, [r3, #28]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4907      	ldr	r1, [pc, #28]	@ (80033bc <HAL_SPI_Init+0x16c>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	225d      	movs	r2, #93	@ 0x5d
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	0018      	movs	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b004      	add	sp, #16
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	fffff7ff 	.word	0xfffff7ff

080033c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e042      	b.n	8003458 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223d      	movs	r2, #61	@ 0x3d
 80033d6:	5c9b      	ldrb	r3, [r3, r2]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	223c      	movs	r2, #60	@ 0x3c
 80033e2:	2100      	movs	r1, #0
 80033e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7fd fc8d 	bl	8000d08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	223d      	movs	r2, #61	@ 0x3d
 80033f2:	2102      	movs	r1, #2
 80033f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	3304      	adds	r3, #4
 80033fe:	0019      	movs	r1, r3
 8003400:	0010      	movs	r0, r2
 8003402:	f000 f8f3 	bl	80035ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2246      	movs	r2, #70	@ 0x46
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	223e      	movs	r2, #62	@ 0x3e
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223f      	movs	r2, #63	@ 0x3f
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2240      	movs	r2, #64	@ 0x40
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2241      	movs	r2, #65	@ 0x41
 800342a:	2101      	movs	r1, #1
 800342c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2242      	movs	r2, #66	@ 0x42
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2243      	movs	r2, #67	@ 0x43
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2244      	movs	r2, #68	@ 0x44
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2245      	movs	r2, #69	@ 0x45
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	223d      	movs	r2, #61	@ 0x3d
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	0018      	movs	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	b002      	add	sp, #8
 800345e:	bd80      	pop	{r7, pc}

08003460 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800346c:	2317      	movs	r3, #23
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	223c      	movs	r2, #60	@ 0x3c
 8003478:	5c9b      	ldrb	r3, [r3, r2]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_TIM_PWM_ConfigChannel+0x22>
 800347e:	2302      	movs	r3, #2
 8003480:	e0ad      	b.n	80035de <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	223c      	movs	r2, #60	@ 0x3c
 8003486:	2101      	movs	r1, #1
 8003488:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b0c      	cmp	r3, #12
 800348e:	d100      	bne.n	8003492 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003490:	e076      	b.n	8003580 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b0c      	cmp	r3, #12
 8003496:	d900      	bls.n	800349a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003498:	e095      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d04e      	beq.n	800353e <HAL_TIM_PWM_ConfigChannel+0xde>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d900      	bls.n	80034a8 <HAL_TIM_PWM_ConfigChannel+0x48>
 80034a6:	e08e      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x166>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_TIM_PWM_ConfigChannel+0x56>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d021      	beq.n	80034f8 <HAL_TIM_PWM_ConfigChannel+0x98>
 80034b4:	e087      	b.n	80035c6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	0011      	movs	r1, r2
 80034be:	0018      	movs	r0, r3
 80034c0:	f000 f918 	bl	80036f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699a      	ldr	r2, [r3, #24]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2108      	movs	r1, #8
 80034d0:	430a      	orrs	r2, r1
 80034d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699a      	ldr	r2, [r3, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2104      	movs	r1, #4
 80034e0:	438a      	bics	r2, r1
 80034e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6999      	ldr	r1, [r3, #24]
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	619a      	str	r2, [r3, #24]
      break;
 80034f6:	e06b      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f000 f975 	bl	80037f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	0109      	lsls	r1, r1, #4
 8003514:	430a      	orrs	r2, r1
 8003516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4931      	ldr	r1, [pc, #196]	@ (80035e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003524:	400a      	ands	r2, r1
 8003526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6999      	ldr	r1, [r3, #24]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	021a      	lsls	r2, r3, #8
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	619a      	str	r2, [r3, #24]
      break;
 800353c:	e048      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	0011      	movs	r1, r2
 8003546:	0018      	movs	r0, r3
 8003548:	f000 f9d0 	bl	80038ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2108      	movs	r1, #8
 8003558:	430a      	orrs	r2, r1
 800355a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2104      	movs	r1, #4
 8003568:	438a      	bics	r2, r1
 800356a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69d9      	ldr	r1, [r3, #28]
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	61da      	str	r2, [r3, #28]
      break;
 800357e:	e027      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68ba      	ldr	r2, [r7, #8]
 8003586:	0011      	movs	r1, r2
 8003588:	0018      	movs	r0, r3
 800358a:	f000 fa2f 	bl	80039ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2180      	movs	r1, #128	@ 0x80
 800359a:	0109      	lsls	r1, r1, #4
 800359c:	430a      	orrs	r2, r1
 800359e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	490f      	ldr	r1, [pc, #60]	@ (80035e8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69d9      	ldr	r1, [r3, #28]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	61da      	str	r2, [r3, #28]
      break;
 80035c4:	e004      	b.n	80035d0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80035c6:	2317      	movs	r3, #23
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
      break;
 80035ce:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	223c      	movs	r2, #60	@ 0x3c
 80035d4:	2100      	movs	r1, #0
 80035d6:	5499      	strb	r1, [r3, r2]

  return status;
 80035d8:	2317      	movs	r3, #23
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
}
 80035de:	0018      	movs	r0, r3
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b006      	add	sp, #24
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	fffffbff 	.word	0xfffffbff

080035ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a37      	ldr	r2, [pc, #220]	@ (80036dc <TIM_Base_SetConfig+0xf0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d008      	beq.n	8003616 <TIM_Base_SetConfig+0x2a>
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	2380      	movs	r3, #128	@ 0x80
 8003608:	05db      	lsls	r3, r3, #23
 800360a:	429a      	cmp	r2, r3
 800360c:	d003      	beq.n	8003616 <TIM_Base_SetConfig+0x2a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a33      	ldr	r2, [pc, #204]	@ (80036e0 <TIM_Base_SetConfig+0xf4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d108      	bne.n	8003628 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2270      	movs	r2, #112	@ 0x70
 800361a:	4393      	bics	r3, r2
 800361c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	4313      	orrs	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a2c      	ldr	r2, [pc, #176]	@ (80036dc <TIM_Base_SetConfig+0xf0>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d014      	beq.n	800365a <TIM_Base_SetConfig+0x6e>
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	2380      	movs	r3, #128	@ 0x80
 8003634:	05db      	lsls	r3, r3, #23
 8003636:	429a      	cmp	r2, r3
 8003638:	d00f      	beq.n	800365a <TIM_Base_SetConfig+0x6e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a28      	ldr	r2, [pc, #160]	@ (80036e0 <TIM_Base_SetConfig+0xf4>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x6e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a27      	ldr	r2, [pc, #156]	@ (80036e4 <TIM_Base_SetConfig+0xf8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x6e>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a26      	ldr	r2, [pc, #152]	@ (80036e8 <TIM_Base_SetConfig+0xfc>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x6e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a25      	ldr	r2, [pc, #148]	@ (80036ec <TIM_Base_SetConfig+0x100>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4a24      	ldr	r2, [pc, #144]	@ (80036f0 <TIM_Base_SetConfig+0x104>)
 800365e:	4013      	ands	r3, r2
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2280      	movs	r2, #128	@ 0x80
 8003670:	4393      	bics	r3, r2
 8003672:	001a      	movs	r2, r3
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a11      	ldr	r2, [pc, #68]	@ (80036dc <TIM_Base_SetConfig+0xf0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <TIM_Base_SetConfig+0xbe>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a12      	ldr	r2, [pc, #72]	@ (80036e8 <TIM_Base_SetConfig+0xfc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <TIM_Base_SetConfig+0xbe>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a11      	ldr	r2, [pc, #68]	@ (80036ec <TIM_Base_SetConfig+0x100>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d103      	bne.n	80036b2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d106      	bne.n	80036d2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2201      	movs	r2, #1
 80036ca:	4393      	bics	r3, r2
 80036cc:	001a      	movs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	611a      	str	r2, [r3, #16]
  }
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40002000 	.word	0x40002000
 80036e8:	40014400 	.word	0x40014400
 80036ec:	40014800 	.word	0x40014800
 80036f0:	fffffcff 	.word	0xfffffcff

080036f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	2201      	movs	r2, #1
 800370a:	4393      	bics	r3, r2
 800370c:	001a      	movs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2270      	movs	r2, #112	@ 0x70
 8003722:	4393      	bics	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2203      	movs	r2, #3
 800372a:	4393      	bics	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	2202      	movs	r2, #2
 800373c:	4393      	bics	r3, r2
 800373e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a23      	ldr	r2, [pc, #140]	@ (80037dc <TIM_OC1_SetConfig+0xe8>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <TIM_OC1_SetConfig+0x6e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a22      	ldr	r2, [pc, #136]	@ (80037e0 <TIM_OC1_SetConfig+0xec>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <TIM_OC1_SetConfig+0x6e>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a21      	ldr	r2, [pc, #132]	@ (80037e4 <TIM_OC1_SetConfig+0xf0>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d10c      	bne.n	800377c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2208      	movs	r2, #8
 8003766:	4393      	bics	r3, r2
 8003768:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2204      	movs	r2, #4
 8003778:	4393      	bics	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a17      	ldr	r2, [pc, #92]	@ (80037dc <TIM_OC1_SetConfig+0xe8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d007      	beq.n	8003794 <TIM_OC1_SetConfig+0xa0>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a16      	ldr	r2, [pc, #88]	@ (80037e0 <TIM_OC1_SetConfig+0xec>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d003      	beq.n	8003794 <TIM_OC1_SetConfig+0xa0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a15      	ldr	r2, [pc, #84]	@ (80037e4 <TIM_OC1_SetConfig+0xf0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d111      	bne.n	80037b8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4a14      	ldr	r2, [pc, #80]	@ (80037e8 <TIM_OC1_SetConfig+0xf4>)
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	4a13      	ldr	r2, [pc, #76]	@ (80037ec <TIM_OC1_SetConfig+0xf8>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b006      	add	sp, #24
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			@ (mov r8, r8)
 80037dc:	40012c00 	.word	0x40012c00
 80037e0:	40014400 	.word	0x40014400
 80037e4:	40014800 	.word	0x40014800
 80037e8:	fffffeff 	.word	0xfffffeff
 80037ec:	fffffdff 	.word	0xfffffdff

080037f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	2210      	movs	r2, #16
 8003806:	4393      	bics	r3, r2
 8003808:	001a      	movs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4a2c      	ldr	r2, [pc, #176]	@ (80038d0 <TIM_OC2_SetConfig+0xe0>)
 800381e:	4013      	ands	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a2b      	ldr	r2, [pc, #172]	@ (80038d4 <TIM_OC2_SetConfig+0xe4>)
 8003826:	4013      	ands	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4313      	orrs	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2220      	movs	r2, #32
 800383a:	4393      	bics	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	4313      	orrs	r3, r2
 8003848:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a22      	ldr	r2, [pc, #136]	@ (80038d8 <TIM_OC2_SetConfig+0xe8>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d10d      	bne.n	800386e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2280      	movs	r2, #128	@ 0x80
 8003856:	4393      	bics	r3, r2
 8003858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2240      	movs	r2, #64	@ 0x40
 800386a:	4393      	bics	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a19      	ldr	r2, [pc, #100]	@ (80038d8 <TIM_OC2_SetConfig+0xe8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <TIM_OC2_SetConfig+0x96>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a18      	ldr	r2, [pc, #96]	@ (80038dc <TIM_OC2_SetConfig+0xec>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d003      	beq.n	8003886 <TIM_OC2_SetConfig+0x96>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a17      	ldr	r2, [pc, #92]	@ (80038e0 <TIM_OC2_SetConfig+0xf0>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d113      	bne.n	80038ae <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	4a16      	ldr	r2, [pc, #88]	@ (80038e4 <TIM_OC2_SetConfig+0xf4>)
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	4a15      	ldr	r2, [pc, #84]	@ (80038e8 <TIM_OC2_SetConfig+0xf8>)
 8003892:	4013      	ands	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	685a      	ldr	r2, [r3, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	621a      	str	r2, [r3, #32]
}
 80038c8:	46c0      	nop			@ (mov r8, r8)
 80038ca:	46bd      	mov	sp, r7
 80038cc:	b006      	add	sp, #24
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	ffff8fff 	.word	0xffff8fff
 80038d4:	fffffcff 	.word	0xfffffcff
 80038d8:	40012c00 	.word	0x40012c00
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800
 80038e4:	fffffbff 	.word	0xfffffbff
 80038e8:	fffff7ff 	.word	0xfffff7ff

080038ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	4a31      	ldr	r2, [pc, #196]	@ (80039c8 <TIM_OC3_SetConfig+0xdc>)
 8003902:	401a      	ands	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2270      	movs	r2, #112	@ 0x70
 8003918:	4393      	bics	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2203      	movs	r2, #3
 8003920:	4393      	bics	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	4a26      	ldr	r2, [pc, #152]	@ (80039cc <TIM_OC3_SetConfig+0xe0>)
 8003932:	4013      	ands	r3, r2
 8003934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	021b      	lsls	r3, r3, #8
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a22      	ldr	r2, [pc, #136]	@ (80039d0 <TIM_OC3_SetConfig+0xe4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d10d      	bne.n	8003966 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	4a21      	ldr	r2, [pc, #132]	@ (80039d4 <TIM_OC3_SetConfig+0xe8>)
 800394e:	4013      	ands	r3, r2
 8003950:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	4a1d      	ldr	r2, [pc, #116]	@ (80039d8 <TIM_OC3_SetConfig+0xec>)
 8003962:	4013      	ands	r3, r2
 8003964:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a19      	ldr	r2, [pc, #100]	@ (80039d0 <TIM_OC3_SetConfig+0xe4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d007      	beq.n	800397e <TIM_OC3_SetConfig+0x92>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a1a      	ldr	r2, [pc, #104]	@ (80039dc <TIM_OC3_SetConfig+0xf0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d003      	beq.n	800397e <TIM_OC3_SetConfig+0x92>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a19      	ldr	r2, [pc, #100]	@ (80039e0 <TIM_OC3_SetConfig+0xf4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d113      	bne.n	80039a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4a18      	ldr	r2, [pc, #96]	@ (80039e4 <TIM_OC3_SetConfig+0xf8>)
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <TIM_OC3_SetConfig+0xfc>)
 800398a:	4013      	ands	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	621a      	str	r2, [r3, #32]
}
 80039c0:	46c0      	nop			@ (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b006      	add	sp, #24
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	fffffeff 	.word	0xfffffeff
 80039cc:	fffffdff 	.word	0xfffffdff
 80039d0:	40012c00 	.word	0x40012c00
 80039d4:	fffff7ff 	.word	0xfffff7ff
 80039d8:	fffffbff 	.word	0xfffffbff
 80039dc:	40014400 	.word	0x40014400
 80039e0:	40014800 	.word	0x40014800
 80039e4:	ffffefff 	.word	0xffffefff
 80039e8:	ffffdfff 	.word	0xffffdfff

080039ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a1b      	ldr	r3, [r3, #32]
 8003a00:	4a24      	ldr	r2, [pc, #144]	@ (8003a94 <TIM_OC4_SetConfig+0xa8>)
 8003a02:	401a      	ands	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	69db      	ldr	r3, [r3, #28]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	4a20      	ldr	r2, [pc, #128]	@ (8003a98 <TIM_OC4_SetConfig+0xac>)
 8003a18:	4013      	ands	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a9c <TIM_OC4_SetConfig+0xb0>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	4a1b      	ldr	r2, [pc, #108]	@ (8003aa0 <TIM_OC4_SetConfig+0xb4>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	031b      	lsls	r3, r3, #12
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <TIM_OC4_SetConfig+0xb8>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d007      	beq.n	8003a5c <TIM_OC4_SetConfig+0x70>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <TIM_OC4_SetConfig+0xbc>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d003      	beq.n	8003a5c <TIM_OC4_SetConfig+0x70>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a15      	ldr	r2, [pc, #84]	@ (8003aac <TIM_OC4_SetConfig+0xc0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d109      	bne.n	8003a70 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4a14      	ldr	r2, [pc, #80]	@ (8003ab0 <TIM_OC4_SetConfig+0xc4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	621a      	str	r2, [r3, #32]
}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b006      	add	sp, #24
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	ffffefff 	.word	0xffffefff
 8003a98:	ffff8fff 	.word	0xffff8fff
 8003a9c:	fffffcff 	.word	0xfffffcff
 8003aa0:	ffffdfff 	.word	0xffffdfff
 8003aa4:	40012c00 	.word	0x40012c00
 8003aa8:	40014400 	.word	0x40014400
 8003aac:	40014800 	.word	0x40014800
 8003ab0:	ffffbfff 	.word	0xffffbfff

08003ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	223c      	movs	r2, #60	@ 0x3c
 8003ac2:	5c9b      	ldrb	r3, [r3, r2]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d101      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e042      	b.n	8003b52 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	223c      	movs	r2, #60	@ 0x3c
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	223d      	movs	r2, #61	@ 0x3d
 8003ad8:	2102      	movs	r1, #2
 8003ada:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2270      	movs	r2, #112	@ 0x70
 8003af0:	4393      	bics	r3, r2
 8003af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00a      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	05db      	lsls	r3, r3, #23
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d004      	beq.n	8003b26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a0f      	ldr	r2, [pc, #60]	@ (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d10c      	bne.n	8003b40 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2280      	movs	r2, #128	@ 0x80
 8003b2a:	4393      	bics	r3, r2
 8003b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	223d      	movs	r2, #61	@ 0x3d
 8003b44:	2101      	movs	r1, #1
 8003b46:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	223c      	movs	r2, #60	@ 0x3c
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	46c0      	nop			@ (mov r8, r8)
 8003b5c:	40012c00 	.word	0x40012c00
 8003b60:	40000400 	.word	0x40000400

08003b64 <memset>:
 8003b64:	0003      	movs	r3, r0
 8003b66:	1882      	adds	r2, r0, r2
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d100      	bne.n	8003b6e <memset+0xa>
 8003b6c:	4770      	bx	lr
 8003b6e:	7019      	strb	r1, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	e7f9      	b.n	8003b68 <memset+0x4>

08003b74 <__libc_init_array>:
 8003b74:	b570      	push	{r4, r5, r6, lr}
 8003b76:	2600      	movs	r6, #0
 8003b78:	4c0c      	ldr	r4, [pc, #48]	@ (8003bac <__libc_init_array+0x38>)
 8003b7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003bb0 <__libc_init_array+0x3c>)
 8003b7c:	1b64      	subs	r4, r4, r5
 8003b7e:	10a4      	asrs	r4, r4, #2
 8003b80:	42a6      	cmp	r6, r4
 8003b82:	d109      	bne.n	8003b98 <__libc_init_array+0x24>
 8003b84:	2600      	movs	r6, #0
 8003b86:	f000 f819 	bl	8003bbc <_init>
 8003b8a:	4c0a      	ldr	r4, [pc, #40]	@ (8003bb4 <__libc_init_array+0x40>)
 8003b8c:	4d0a      	ldr	r5, [pc, #40]	@ (8003bb8 <__libc_init_array+0x44>)
 8003b8e:	1b64      	subs	r4, r4, r5
 8003b90:	10a4      	asrs	r4, r4, #2
 8003b92:	42a6      	cmp	r6, r4
 8003b94:	d105      	bne.n	8003ba2 <__libc_init_array+0x2e>
 8003b96:	bd70      	pop	{r4, r5, r6, pc}
 8003b98:	00b3      	lsls	r3, r6, #2
 8003b9a:	58eb      	ldr	r3, [r5, r3]
 8003b9c:	4798      	blx	r3
 8003b9e:	3601      	adds	r6, #1
 8003ba0:	e7ee      	b.n	8003b80 <__libc_init_array+0xc>
 8003ba2:	00b3      	lsls	r3, r6, #2
 8003ba4:	58eb      	ldr	r3, [r5, r3]
 8003ba6:	4798      	blx	r3
 8003ba8:	3601      	adds	r6, #1
 8003baa:	e7f2      	b.n	8003b92 <__libc_init_array+0x1e>
 8003bac:	08003c04 	.word	0x08003c04
 8003bb0:	08003c04 	.word	0x08003c04
 8003bb4:	08003c08 	.word	0x08003c08
 8003bb8:	08003c04 	.word	0x08003c04

08003bbc <_init>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr

08003bc8 <_fini>:
 8003bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bce:	bc08      	pop	{r3}
 8003bd0:	469e      	mov	lr, r3
 8003bd2:	4770      	bx	lr
