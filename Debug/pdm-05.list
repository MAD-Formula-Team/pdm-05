
pdm-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006388  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006448  08006448  00007448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006478  08006478  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08006478  08006478  0000805c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08006478  08006478  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006478  08006478  00007478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800647c  0800647c  0000747c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006480  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  2000005c  080064dc  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  080064dc  00008640  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daf8  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002072  00000000  00000000  00015b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00017bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b53  00000000  00000000  00018a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bd0  00000000  00000000  000195bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010266  00000000  00000000  0003218b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009196b  00000000  00000000  000423f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3d5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b0  00000000  00000000  000d3da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d7250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006430 	.word	0x08006430

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006430 	.word	0x08006430

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <translateDuty>:
#define CS_HIGH() HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
#define V12NpOff() HAL_GPIO_WritePin(V12_NP_Signal_GPIO_Port, V12_NP_Signal_Pin, RESET);
#define V12NpOn() HAL_GPIO_WritePin(V12_NP_Signal_GPIO_Port, V12_NP_Signal_Pin, SET);


void translateDuty(uint16_t *buffer, uint8_t bufferSize){
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000a      	movs	r2, r1
 800022a:	1cfb      	adds	r3, r7, #3
 800022c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < bufferSize; i++) {
 800022e:	230f      	movs	r3, #15
 8000230:	18fb      	adds	r3, r7, r3
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e01d      	b.n	8000274 <translateDuty+0x54>
	        buffer[i] = 50 + ((buffer[i] / 10) * 5);
 8000238:	240f      	movs	r4, #15
 800023a:	193b      	adds	r3, r7, r4
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	18d3      	adds	r3, r2, r3
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	210a      	movs	r1, #10
 8000248:	0018      	movs	r0, r3
 800024a:	f7ff ff5d 	bl	8000108 <__udivsi3>
 800024e:	0003      	movs	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	1c1a      	adds	r2, r3, #0
 8000254:	0092      	lsls	r2, r2, #2
 8000256:	18d3      	adds	r3, r2, r3
 8000258:	b29a      	uxth	r2, r3
 800025a:	193b      	adds	r3, r7, r4
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	18cb      	adds	r3, r1, r3
 8000264:	3232      	adds	r2, #50	@ 0x32
 8000266:	b292      	uxth	r2, r2
 8000268:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < bufferSize; i++) {
 800026a:	193b      	adds	r3, r7, r4
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	193b      	adds	r3, r7, r4
 8000270:	3201      	adds	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
 8000274:	230f      	movs	r3, #15
 8000276:	18fa      	adds	r2, r7, r3
 8000278:	1cfb      	adds	r3, r7, #3
 800027a:	7812      	ldrb	r2, [r2, #0]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	429a      	cmp	r2, r3
 8000280:	d3da      	bcc.n	8000238 <translateDuty+0x18>
	    }
}
 8000282:	46c0      	nop			@ (mov r8, r8)
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b005      	add	sp, #20
 800028a:	bd90      	pop	{r4, r7, pc}

0800028c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000294:	4b5c      	ldr	r3, [pc, #368]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000296:	4a5d      	ldr	r2, [pc, #372]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	2100      	movs	r1, #0
 800029c:	f003 f8f0 	bl	8003480 <HAL_CAN_GetRxMessage>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d001      	beq.n	80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>

		Error_Handler();
 80002a4:	f001 fccc 	bl	8001c40 <Error_Handler>
	}

	if (RxHeader.StdId == 0x3A1) {
 80002a8:	4b58      	ldr	r3, [pc, #352]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a58      	ldr	r2, [pc, #352]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d13c      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			tempDataFlag = 1;
 80002b2:	4b58      	ldr	r3, [pc, #352]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
			ect = (RxData[3] << 8) | RxData[2];
 80002b8:	4b53      	ldr	r3, [pc, #332]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	b21b      	sxth	r3, r3
 80002be:	021b      	lsls	r3, r3, #8
 80002c0:	b21a      	sxth	r2, r3
 80002c2:	4b51      	ldr	r3, [pc, #324]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	b21b      	sxth	r3, r3
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b21a      	sxth	r2, r3
 80002cc:	4b52      	ldr	r3, [pc, #328]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002ce:	801a      	strh	r2, [r3, #0]
			ect = ect - 50;
 80002d0:	4b51      	ldr	r3, [pc, #324]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	5e9b      	ldrsh	r3, [r3, r2]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	3b32      	subs	r3, #50	@ 0x32
 80002da:	b29b      	uxth	r3, r3
 80002dc:	b21a      	sxth	r2, r3
 80002de:	4b4e      	ldr	r3, [pc, #312]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002e0:	801a      	strh	r2, [r3, #0]
			if(ect < 0){
 80002e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	5e9b      	ldrsh	r3, [r3, r2]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	da02      	bge.n	80002f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
				ect = 0;
 80002ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	801a      	strh	r2, [r3, #0]
			}
			oilTemp = (RxData[5] << 8) | RxData[4];
 80002f2:	4b45      	ldr	r3, [pc, #276]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002f4:	795b      	ldrb	r3, [r3, #5]
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	021b      	lsls	r3, r3, #8
 80002fa:	b21a      	sxth	r2, r3
 80002fc:	4b42      	ldr	r3, [pc, #264]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	b21b      	sxth	r3, r3
 8000302:	4313      	orrs	r3, r2
 8000304:	b21a      	sxth	r2, r3
 8000306:	4b45      	ldr	r3, [pc, #276]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000308:	801a      	strh	r2, [r3, #0]
			oilTemp = oilTemp - 50;
 800030a:	4b44      	ldr	r3, [pc, #272]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800030c:	2200      	movs	r2, #0
 800030e:	5e9b      	ldrsh	r3, [r3, r2]
 8000310:	b29b      	uxth	r3, r3
 8000312:	3b32      	subs	r3, #50	@ 0x32
 8000314:	b29b      	uxth	r3, r3
 8000316:	b21a      	sxth	r2, r3
 8000318:	4b40      	ldr	r3, [pc, #256]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800031a:	801a      	strh	r2, [r3, #0]
			if(oilTemp < 0){
 800031c:	4b3f      	ldr	r3, [pc, #252]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800031e:	2200      	movs	r2, #0
 8000320:	5e9b      	ldrsh	r3, [r3, r2]
 8000322:	2b00      	cmp	r3, #0
 8000324:	da02      	bge.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
				oilTemp = 0;
 8000326:	4b3d      	ldr	r3, [pc, #244]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000328:	2200      	movs	r2, #0
 800032a:	801a      	strh	r2, [r3, #0]
			}
	}
	if (RxHeader.StdId == 0x3A2){
 800032c:	4b37      	ldr	r3, [pc, #220]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a3b      	ldr	r2, [pc, #236]	@ (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d11a      	bne.n	800036c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
			pressDataFlag = 1;
 8000336:	4b3b      	ldr	r3, [pc, #236]	@ (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
			fuelPress = (RxData[1] << 8) | RxData[0];
 800033c:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	b21b      	sxth	r3, r3
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	b21a      	sxth	r2, r3
 8000346:	4b30      	ldr	r3, [pc, #192]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	b21b      	sxth	r3, r3
 800034c:	4313      	orrs	r3, r2
 800034e:	b21a      	sxth	r2, r3
 8000350:	4b35      	ldr	r3, [pc, #212]	@ (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000352:	801a      	strh	r2, [r3, #0]
			oilPress = (RxData[3] << 8) | RxData[2];
 8000354:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000356:	78db      	ldrb	r3, [r3, #3]
 8000358:	b21b      	sxth	r3, r3
 800035a:	021b      	lsls	r3, r3, #8
 800035c:	b21a      	sxth	r2, r3
 800035e:	4b2a      	ldr	r3, [pc, #168]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000360:	789b      	ldrb	r3, [r3, #2]
 8000362:	b21b      	sxth	r3, r3
 8000364:	4313      	orrs	r3, r2
 8000366:	b21a      	sxth	r2, r3
 8000368:	4b30      	ldr	r3, [pc, #192]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800036a:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x3A3){
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a2f      	ldr	r2, [pc, #188]	@ (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d10f      	bne.n	8000396 <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
			fuelDataFlag = 1;
 8000376:	4b2f      	ldr	r3, [pc, #188]	@ (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000378:	2201      	movs	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]
			instFuelConsumption = (RxData[3] << 8) | RxData[2];
 800037c:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800037e:	78db      	ldrb	r3, [r3, #3]
 8000380:	b21b      	sxth	r3, r3
 8000382:	021b      	lsls	r3, r3, #8
 8000384:	b21a      	sxth	r2, r3
 8000386:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000388:	789b      	ldrb	r3, [r3, #2]
 800038a:	b21b      	sxth	r3, r3
 800038c:	4313      	orrs	r3, r2
 800038e:	b21b      	sxth	r3, r3
 8000390:	b29a      	uxth	r2, r3
 8000392:	4b29      	ldr	r3, [pc, #164]	@ (8000438 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000394:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A4){
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	23e9      	movs	r3, #233	@ 0xe9
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	429a      	cmp	r2, r3
 80003a0:	d10e      	bne.n	80003c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
			rpmDataFlag = 1;
 80003a2:	4b26      	ldr	r3, [pc, #152]	@ (800043c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
			rpm = (RxData[6] << 8) | RxData[5];
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003aa:	799b      	ldrb	r3, [r3, #6]
 80003ac:	b21b      	sxth	r3, r3
 80003ae:	021b      	lsls	r3, r3, #8
 80003b0:	b21a      	sxth	r2, r3
 80003b2:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003b4:	795b      	ldrb	r3, [r3, #5]
 80003b6:	b21b      	sxth	r3, r3
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b21a      	sxth	r2, r3
 80003bc:	4b20      	ldr	r3, [pc, #128]	@ (8000440 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80003be:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A5){
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d10e      	bne.n	80003e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>
			battDataFlag = 1;
 80003ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
			battVolt = (RxData[1] << 8) | RxData[0];
 80003d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003d2:	785b      	ldrb	r3, [r3, #1]
 80003d4:	b21b      	sxth	r3, r3
 80003d6:	021b      	lsls	r3, r3, #8
 80003d8:	b21a      	sxth	r2, r3
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b21a      	sxth	r2, r3
 80003e4:	4b19      	ldr	r3, [pc, #100]	@ (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 80003e6:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x092){
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b92      	cmp	r3, #146	@ 0x92
 80003ee:	d106      	bne.n	80003fe <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
		if (RxData[0] == 0x02)	{
 80003f0:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d102      	bne.n	80003fe <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
			canResetEcuFlag = 1;
 80003f8:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b002      	add	sp, #8
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	20000420 	.word	0x20000420
 800040c:	20000338 	.word	0x20000338
 8000410:	000003a1 	.word	0x000003a1
 8000414:	20000482 	.word	0x20000482
 8000418:	2000048a 	.word	0x2000048a
 800041c:	2000048c 	.word	0x2000048c
 8000420:	000003a2 	.word	0x000003a2
 8000424:	20000483 	.word	0x20000483
 8000428:	20000490 	.word	0x20000490
 800042c:	2000048e 	.word	0x2000048e
 8000430:	000003a3 	.word	0x000003a3
 8000434:	20000484 	.word	0x20000484
 8000438:	20000630 	.word	0x20000630
 800043c:	20000485 	.word	0x20000485
 8000440:	20000494 	.word	0x20000494
 8000444:	000003a5 	.word	0x000003a5
 8000448:	20000486 	.word	0x20000486
 800044c:	20000492 	.word	0x20000492
 8000450:	20000634 	.word	0x20000634

08000454 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	value_adc[0] = (uint16_t) adc_buff[0];	//Los valores pasan de 32 a 16 bits
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	b29a      	uxth	r2, r3
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000464:	801a      	strh	r2, [r3, #0]
	value_adc[1] = (uint16_t) adc_buff[1];
 8000466:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	b29a      	uxth	r2, r3
 800046c:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 800046e:	805a      	strh	r2, [r3, #2]
	value_adc[2] = (uint16_t) adc_buff[2];
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	b29a      	uxth	r2, r3
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000478:	809a      	strh	r2, [r3, #4]
	value_adc[3] = (uint16_t) adc_buff[3];
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	b29a      	uxth	r2, r3
 8000480:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000482:	80da      	strh	r2, [r3, #6]
	value_adc[4] = (uint16_t) adc_buff[4];
 8000484:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	b29a      	uxth	r2, r3
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 800048c:	811a      	strh	r2, [r3, #8]
	value_adc[5] = (uint16_t) adc_buff[5];
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000496:	815a      	strh	r2, [r3, #10]
	value_adc[6] = (uint16_t) adc_buff[6];
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	b29a      	uxth	r2, r3
 800049e:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 80004a0:	819a      	strh	r2, [r3, #12]
	value_adc[7] = (uint16_t) adc_buff[7];
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 80004aa:	81da      	strh	r2, [r3, #14]
	value_adc[8] = (uint16_t) adc_buff[8];
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	4b04      	ldr	r3, [pc, #16]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 80004b4:	821a      	strh	r2, [r3, #16]
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	20000428 	.word	0x20000428
 80004c4:	2000044c 	.word	0x2000044c

080004c8 <tempActions>:
void tempActions(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	tempDataFlag = 0;
 80004cc:	4b68      	ldr	r3, [pc, #416]	@ (8000670 <tempActions+0x1a8>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
	if((ect > ectTh[0])&&(escReadyFlag)){
 80004d2:	4b68      	ldr	r3, [pc, #416]	@ (8000674 <tempActions+0x1ac>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	5e9b      	ldrsh	r3, [r3, r2]
 80004d8:	001a      	movs	r2, r3
 80004da:	4b67      	ldr	r3, [pc, #412]	@ (8000678 <tempActions+0x1b0>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	dd58      	ble.n	8000594 <tempActions+0xcc>
 80004e2:	4b66      	ldr	r3, [pc, #408]	@ (800067c <tempActions+0x1b4>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d054      	beq.n	8000594 <tempActions+0xcc>
		//TIM2->CCR3 = dutyFanEctTh[0];// estos dos están apagados para que solo la bomba se encienda en el primer EctTh
		//TIM2->CCR4 = dutyFanEctTh[0];
		TIM16->CCR1 = dutyPumpEctTh[0];
 80004ea:	4b65      	ldr	r3, [pc, #404]	@ (8000680 <tempActions+0x1b8>)
 80004ec:	881a      	ldrh	r2, [r3, #0]
 80004ee:	4b65      	ldr	r3, [pc, #404]	@ (8000684 <tempActions+0x1bc>)
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34

		if(ect >= ectTh[1]){
 80004f2:	4b60      	ldr	r3, [pc, #384]	@ (8000674 <tempActions+0x1ac>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	5e9b      	ldrsh	r3, [r3, r2]
 80004f8:	001a      	movs	r2, r3
 80004fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000678 <tempActions+0x1b0>)
 80004fc:	885b      	ldrh	r3, [r3, #2]
 80004fe:	429a      	cmp	r2, r3
 8000500:	db3d      	blt.n	800057e <tempActions+0xb6>
			TIM2->CCR3 = dutyFanEctTh[0];
 8000502:	4b61      	ldr	r3, [pc, #388]	@ (8000688 <tempActions+0x1c0>)
 8000504:	881a      	ldrh	r2, [r3, #0]
 8000506:	2380      	movs	r3, #128	@ 0x80
 8000508:	05db      	lsls	r3, r3, #23
 800050a:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = dutyFanEctTh[0];
 800050c:	4b5e      	ldr	r3, [pc, #376]	@ (8000688 <tempActions+0x1c0>)
 800050e:	881a      	ldrh	r2, [r3, #0]
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM16->CCR1 = dutyPumpEctTh[1];
 8000516:	4b5a      	ldr	r3, [pc, #360]	@ (8000680 <tempActions+0x1b8>)
 8000518:	885a      	ldrh	r2, [r3, #2]
 800051a:	4b5a      	ldr	r3, [pc, #360]	@ (8000684 <tempActions+0x1bc>)
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34

			if(ect > ectTh[2]){
 800051e:	4b55      	ldr	r3, [pc, #340]	@ (8000674 <tempActions+0x1ac>)
 8000520:	2200      	movs	r2, #0
 8000522:	5e9b      	ldrsh	r3, [r3, r2]
 8000524:	001a      	movs	r2, r3
 8000526:	4b54      	ldr	r3, [pc, #336]	@ (8000678 <tempActions+0x1b0>)
 8000528:	889b      	ldrh	r3, [r3, #4]
 800052a:	429a      	cmp	r2, r3
 800052c:	dd41      	ble.n	80005b2 <tempActions+0xea>
				TIM2->CCR3 = dutyFanEctTh[1];
 800052e:	4b56      	ldr	r3, [pc, #344]	@ (8000688 <tempActions+0x1c0>)
 8000530:	885a      	ldrh	r2, [r3, #2]
 8000532:	2380      	movs	r3, #128	@ 0x80
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM2->CCR4 = dutyFanEctTh[1];
 8000538:	4b53      	ldr	r3, [pc, #332]	@ (8000688 <tempActions+0x1c0>)
 800053a:	885a      	ldrh	r2, [r3, #2]
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	641a      	str	r2, [r3, #64]	@ 0x40
				TIM16->CCR1 = dutyPumpEctTh[1];
 8000542:	4b4f      	ldr	r3, [pc, #316]	@ (8000680 <tempActions+0x1b8>)
 8000544:	885a      	ldrh	r2, [r3, #2]
 8000546:	4b4f      	ldr	r3, [pc, #316]	@ (8000684 <tempActions+0x1bc>)
 8000548:	635a      	str	r2, [r3, #52]	@ 0x34

				if(ect > ectTh[3]){
 800054a:	4b4a      	ldr	r3, [pc, #296]	@ (8000674 <tempActions+0x1ac>)
 800054c:	2200      	movs	r2, #0
 800054e:	5e9b      	ldrsh	r3, [r3, r2]
 8000550:	001a      	movs	r2, r3
 8000552:	4b49      	ldr	r3, [pc, #292]	@ (8000678 <tempActions+0x1b0>)
 8000554:	88db      	ldrh	r3, [r3, #6]
 8000556:	429a      	cmp	r2, r3
 8000558:	dd2b      	ble.n	80005b2 <tempActions+0xea>
					ectEmergencyFlag = 1;
 800055a:	4b4c      	ldr	r3, [pc, #304]	@ (800068c <tempActions+0x1c4>)
 800055c:	2201      	movs	r2, #1
 800055e:	701a      	strb	r2, [r3, #0]
					TIM2->CCR3 = dutyFanEctTh[2];
 8000560:	4b49      	ldr	r3, [pc, #292]	@ (8000688 <tempActions+0x1c0>)
 8000562:	889a      	ldrh	r2, [r3, #4]
 8000564:	2380      	movs	r3, #128	@ 0x80
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	63da      	str	r2, [r3, #60]	@ 0x3c
					TIM2->CCR4 = dutyFanEctTh[2];
 800056a:	4b47      	ldr	r3, [pc, #284]	@ (8000688 <tempActions+0x1c0>)
 800056c:	889a      	ldrh	r2, [r3, #4]
 800056e:	2380      	movs	r3, #128	@ 0x80
 8000570:	05db      	lsls	r3, r3, #23
 8000572:	641a      	str	r2, [r3, #64]	@ 0x40
					TIM16->CCR1 = dutyPumpEctTh[2];
 8000574:	4b42      	ldr	r3, [pc, #264]	@ (8000680 <tempActions+0x1b8>)
 8000576:	889a      	ldrh	r2, [r3, #4]
 8000578:	4b42      	ldr	r3, [pc, #264]	@ (8000684 <tempActions+0x1bc>)
 800057a:	635a      	str	r2, [r3, #52]	@ 0x34
		if(ect >= ectTh[1]){
 800057c:	e019      	b.n	80005b2 <tempActions+0xea>
				}
			}
		}else{
			TIM2->CCR3 = dutyFanNill;//para que se apaguen a 90
 800057e:	4b44      	ldr	r3, [pc, #272]	@ (8000690 <tempActions+0x1c8>)
 8000580:	881a      	ldrh	r2, [r3, #0]
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	05db      	lsls	r3, r3, #23
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = dutyFanNill;
 8000588:	4b41      	ldr	r3, [pc, #260]	@ (8000690 <tempActions+0x1c8>)
 800058a:	881a      	ldrh	r2, [r3, #0]
 800058c:	2380      	movs	r3, #128	@ 0x80
 800058e:	05db      	lsls	r3, r3, #23
 8000590:	641a      	str	r2, [r3, #64]	@ 0x40
		if(ect >= ectTh[1]){
 8000592:	e00e      	b.n	80005b2 <tempActions+0xea>
		}
	}else{
		TIM2->CCR3 = dutyFanNill;//Si no entra a esta condición que mande pwms de apagado
 8000594:	4b3e      	ldr	r3, [pc, #248]	@ (8000690 <tempActions+0x1c8>)
 8000596:	881a      	ldrh	r2, [r3, #0]
 8000598:	2380      	movs	r3, #128	@ 0x80
 800059a:	05db      	lsls	r3, r3, #23
 800059c:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = dutyFanNill;
 800059e:	4b3c      	ldr	r3, [pc, #240]	@ (8000690 <tempActions+0x1c8>)
 80005a0:	881a      	ldrh	r2, [r3, #0]
 80005a2:	2380      	movs	r3, #128	@ 0x80
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM16->CCR1 = dutyPumpNill;
 80005a8:	4b3a      	ldr	r3, [pc, #232]	@ (8000694 <tempActions+0x1cc>)
 80005aa:	881a      	ldrh	r2, [r3, #0]
 80005ac:	4b35      	ldr	r3, [pc, #212]	@ (8000684 <tempActions+0x1bc>)
 80005ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80005b0:	e000      	b.n	80005b4 <tempActions+0xec>
		if(ect >= ectTh[1]){
 80005b2:	46c0      	nop			@ (mov r8, r8)
	}
	if((oilTemp > oilTh[0])&&(escReadyFlag)){
 80005b4:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <tempActions+0x1d0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	5e9b      	ldrsh	r3, [r3, r2]
 80005ba:	001a      	movs	r2, r3
 80005bc:	4b37      	ldr	r3, [pc, #220]	@ (800069c <tempActions+0x1d4>)
 80005be:	881b      	ldrh	r3, [r3, #0]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	dd43      	ble.n	800064c <tempActions+0x184>
 80005c4:	4b2d      	ldr	r3, [pc, #180]	@ (800067c <tempActions+0x1b4>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d03f      	beq.n	800064c <tempActions+0x184>
//		HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, SET);
//		HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, SET);
//		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, SET);
		TIM3->CCR1 = dutyFanEctTh[0];
 80005cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000688 <tempActions+0x1c0>)
 80005ce:	881a      	ldrh	r2, [r3, #0]
 80005d0:	4b33      	ldr	r3, [pc, #204]	@ (80006a0 <tempActions+0x1d8>)
 80005d2:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = dutyFanEctTh[0];
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <tempActions+0x1c0>)
 80005d6:	881a      	ldrh	r2, [r3, #0]
 80005d8:	4b31      	ldr	r3, [pc, #196]	@ (80006a0 <tempActions+0x1d8>)
 80005da:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM17->CCR1 = dutyPumpOilTh[0];
 80005dc:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <tempActions+0x1dc>)
 80005de:	881a      	ldrh	r2, [r3, #0]
 80005e0:	4b31      	ldr	r3, [pc, #196]	@ (80006a8 <tempActions+0x1e0>)
 80005e2:	635a      	str	r2, [r3, #52]	@ 0x34

		if(oilTemp > oilTh[1]){
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <tempActions+0x1d0>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	5e9b      	ldrsh	r3, [r3, r2]
 80005ea:	001a      	movs	r2, r3
 80005ec:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <tempActions+0x1d4>)
 80005ee:	885b      	ldrh	r3, [r3, #2]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dd38      	ble.n	8000666 <tempActions+0x19e>
			TIM3->CCR1 = dutyFanEctTh[1];
 80005f4:	4b24      	ldr	r3, [pc, #144]	@ (8000688 <tempActions+0x1c0>)
 80005f6:	885a      	ldrh	r2, [r3, #2]
 80005f8:	4b29      	ldr	r3, [pc, #164]	@ (80006a0 <tempActions+0x1d8>)
 80005fa:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM3->CCR2 = dutyFanEctTh[1];
 80005fc:	4b22      	ldr	r3, [pc, #136]	@ (8000688 <tempActions+0x1c0>)
 80005fe:	885a      	ldrh	r2, [r3, #2]
 8000600:	4b27      	ldr	r3, [pc, #156]	@ (80006a0 <tempActions+0x1d8>)
 8000602:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM17->CCR1 = dutyPumpOilTh[1];
 8000604:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <tempActions+0x1dc>)
 8000606:	885a      	ldrh	r2, [r3, #2]
 8000608:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <tempActions+0x1e0>)
 800060a:	635a      	str	r2, [r3, #52]	@ 0x34

			if(oilTemp > oilTh[2]){
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <tempActions+0x1d0>)
 800060e:	2200      	movs	r2, #0
 8000610:	5e9b      	ldrsh	r3, [r3, r2]
 8000612:	001a      	movs	r2, r3
 8000614:	4b21      	ldr	r3, [pc, #132]	@ (800069c <tempActions+0x1d4>)
 8000616:	889b      	ldrh	r3, [r3, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dd24      	ble.n	8000666 <tempActions+0x19e>
				TIM3->CCR1 = dutyFanEctTh[2];
 800061c:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <tempActions+0x1c0>)
 800061e:	889a      	ldrh	r2, [r3, #4]
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <tempActions+0x1d8>)
 8000622:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM3->CCR2 = dutyFanEctTh[2];
 8000624:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <tempActions+0x1c0>)
 8000626:	889a      	ldrh	r2, [r3, #4]
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <tempActions+0x1d8>)
 800062a:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM17->CCR1 = dutyPumpOilTh[2];
 800062c:	4b1d      	ldr	r3, [pc, #116]	@ (80006a4 <tempActions+0x1dc>)
 800062e:	889a      	ldrh	r2, [r3, #4]
 8000630:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <tempActions+0x1e0>)
 8000632:	635a      	str	r2, [r3, #52]	@ 0x34

				if(oilTemp > oilTh[3]){
 8000634:	4b18      	ldr	r3, [pc, #96]	@ (8000698 <tempActions+0x1d0>)
 8000636:	2200      	movs	r2, #0
 8000638:	5e9b      	ldrsh	r3, [r3, r2]
 800063a:	001a      	movs	r2, r3
 800063c:	4b17      	ldr	r3, [pc, #92]	@ (800069c <tempActions+0x1d4>)
 800063e:	88db      	ldrh	r3, [r3, #6]
 8000640:	429a      	cmp	r2, r3
 8000642:	dd10      	ble.n	8000666 <tempActions+0x19e>
					oilEmergencyFlag = 1;
 8000644:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <tempActions+0x1e4>)
 8000646:	2201      	movs	r2, #1
 8000648:	701a      	strb	r2, [r3, #0]
		if(oilTemp > oilTh[1]){
 800064a:	e00c      	b.n	8000666 <tempActions+0x19e>
		}
	}else{
//		HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, RESET);
//		HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, RESET);
//		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, RESET);
		TIM3->CCR1 = dutyFanNill;
 800064c:	4b10      	ldr	r3, [pc, #64]	@ (8000690 <tempActions+0x1c8>)
 800064e:	881a      	ldrh	r2, [r3, #0]
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <tempActions+0x1d8>)
 8000652:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = dutyFanNill;
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <tempActions+0x1c8>)
 8000656:	881a      	ldrh	r2, [r3, #0]
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <tempActions+0x1d8>)
 800065a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM17->CCR1 = dutyPumpNill;
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <tempActions+0x1cc>)
 800065e:	881a      	ldrh	r2, [r3, #0]
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <tempActions+0x1e0>)
 8000662:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8000664:	e000      	b.n	8000668 <tempActions+0x1a0>
		if(oilTemp > oilTh[1]){
 8000666:	46c0      	nop			@ (mov r8, r8)
}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000482 	.word	0x20000482
 8000674:	2000048a 	.word	0x2000048a
 8000678:	20000000 	.word	0x20000000
 800067c:	20000488 	.word	0x20000488
 8000680:	20000024 	.word	0x20000024
 8000684:	40014400 	.word	0x40014400
 8000688:	2000001c 	.word	0x2000001c
 800068c:	20000636 	.word	0x20000636
 8000690:	20000016 	.word	0x20000016
 8000694:	20000018 	.word	0x20000018
 8000698:	2000048c 	.word	0x2000048c
 800069c:	20000008 	.word	0x20000008
 80006a0:	40000400 	.word	0x40000400
 80006a4:	20000034 	.word	0x20000034
 80006a8:	40014800 	.word	0x40014800
 80006ac:	20000637 	.word	0x20000637

080006b0 <sendCan>:
void sendCan(){
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	send = 0;
 80006b4:	4b4c      	ldr	r3, [pc, #304]	@ (80007e8 <sendCan+0x138>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]

	TxData_adc[0] = (adc8 >> 8) & 0xFF;
 80006ba:	4b4c      	ldr	r3, [pc, #304]	@ (80007ec <sendCan+0x13c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	0a1b      	lsrs	r3, r3, #8
 80006c0:	b29b      	uxth	r3, r3
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b4a      	ldr	r3, [pc, #296]	@ (80007f0 <sendCan+0x140>)
 80006c6:	701a      	strb	r2, [r3, #0]
	TxData_adc[1] = adc8 & 0xFF;
 80006c8:	4b48      	ldr	r3, [pc, #288]	@ (80007ec <sendCan+0x13c>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b48      	ldr	r3, [pc, #288]	@ (80007f0 <sendCan+0x140>)
 80006d0:	705a      	strb	r2, [r3, #1]
	TxData_adc[2] = (adc2 >> 8) & 0xFF;
 80006d2:	4b48      	ldr	r3, [pc, #288]	@ (80007f4 <sendCan+0x144>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b29b      	uxth	r3, r3
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	4b44      	ldr	r3, [pc, #272]	@ (80007f0 <sendCan+0x140>)
 80006de:	709a      	strb	r2, [r3, #2]
	TxData_adc[3] = adc2 & 0xFF;
 80006e0:	4b44      	ldr	r3, [pc, #272]	@ (80007f4 <sendCan+0x144>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b42      	ldr	r3, [pc, #264]	@ (80007f0 <sendCan+0x140>)
 80006e8:	70da      	strb	r2, [r3, #3]
	TxData_adc[4] = (adc3 >> 8) & 0xFF;
 80006ea:	4b43      	ldr	r3, [pc, #268]	@ (80007f8 <sendCan+0x148>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	0a1b      	lsrs	r3, r3, #8
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	4b3e      	ldr	r3, [pc, #248]	@ (80007f0 <sendCan+0x140>)
 80006f6:	711a      	strb	r2, [r3, #4]
	TxData_adc[5] = adc3 & 0xFF;
 80006f8:	4b3f      	ldr	r3, [pc, #252]	@ (80007f8 <sendCan+0x148>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b3c      	ldr	r3, [pc, #240]	@ (80007f0 <sendCan+0x140>)
 8000700:	715a      	strb	r2, [r3, #5]
	TxData_adc[6] = (adc4 >> 8) & 0xFF;
 8000702:	4b3e      	ldr	r3, [pc, #248]	@ (80007fc <sendCan+0x14c>)
 8000704:	881b      	ldrh	r3, [r3, #0]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	b29b      	uxth	r3, r3
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b38      	ldr	r3, [pc, #224]	@ (80007f0 <sendCan+0x140>)
 800070e:	719a      	strb	r2, [r3, #6]
	TxData_adc[7] = adc4 & 0xFF;
 8000710:	4b3a      	ldr	r3, [pc, #232]	@ (80007fc <sendCan+0x14c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	b2da      	uxtb	r2, r3
 8000716:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <sendCan+0x140>)
 8000718:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc, TxData_adc, &TxMailBox);
 800071a:	4b39      	ldr	r3, [pc, #228]	@ (8000800 <sendCan+0x150>)
 800071c:	4a34      	ldr	r2, [pc, #208]	@ (80007f0 <sendCan+0x140>)
 800071e:	4939      	ldr	r1, [pc, #228]	@ (8000804 <sendCan+0x154>)
 8000720:	4839      	ldr	r0, [pc, #228]	@ (8000808 <sendCan+0x158>)
 8000722:	f002 fddb 	bl	80032dc <HAL_CAN_AddTxMessage>

	TxData_adc1[0] = (adc5 >> 8) & 0xFF;
 8000726:	4b39      	ldr	r3, [pc, #228]	@ (800080c <sendCan+0x15c>)
 8000728:	881b      	ldrh	r3, [r3, #0]
 800072a:	0a1b      	lsrs	r3, r3, #8
 800072c:	b29b      	uxth	r3, r3
 800072e:	b2da      	uxtb	r2, r3
 8000730:	4b37      	ldr	r3, [pc, #220]	@ (8000810 <sendCan+0x160>)
 8000732:	701a      	strb	r2, [r3, #0]
	TxData_adc1[1] = adc5 & 0xFF;
 8000734:	4b35      	ldr	r3, [pc, #212]	@ (800080c <sendCan+0x15c>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b35      	ldr	r3, [pc, #212]	@ (8000810 <sendCan+0x160>)
 800073c:	705a      	strb	r2, [r3, #1]
	TxData_adc1[2] = (adc1 >> 8) & 0xFF;
 800073e:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <sendCan+0x164>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	0a1b      	lsrs	r3, r3, #8
 8000744:	b29b      	uxth	r3, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	4b31      	ldr	r3, [pc, #196]	@ (8000810 <sendCan+0x160>)
 800074a:	709a      	strb	r2, [r3, #2]
	TxData_adc1[3] = adc1 & 0xFF;
 800074c:	4b31      	ldr	r3, [pc, #196]	@ (8000814 <sendCan+0x164>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	b2da      	uxtb	r2, r3
 8000752:	4b2f      	ldr	r3, [pc, #188]	@ (8000810 <sendCan+0x160>)
 8000754:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc1, TxData_adc1, &TxMailBox);
 8000756:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <sendCan+0x150>)
 8000758:	4a2d      	ldr	r2, [pc, #180]	@ (8000810 <sendCan+0x160>)
 800075a:	492f      	ldr	r1, [pc, #188]	@ (8000818 <sendCan+0x168>)
 800075c:	482a      	ldr	r0, [pc, #168]	@ (8000808 <sendCan+0x158>)
 800075e:	f002 fdbd 	bl	80032dc <HAL_CAN_AddTxMessage>

	TxData_adc2[0] = (adc6 >> 8) & 0xFF;
 8000762:	4b2e      	ldr	r3, [pc, #184]	@ (800081c <sendCan+0x16c>)
 8000764:	881b      	ldrh	r3, [r3, #0]
 8000766:	0a1b      	lsrs	r3, r3, #8
 8000768:	b29b      	uxth	r3, r3
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <sendCan+0x170>)
 800076e:	701a      	strb	r2, [r3, #0]
	TxData_adc2[1] = adc6 & 0xFF;
 8000770:	4b2a      	ldr	r3, [pc, #168]	@ (800081c <sendCan+0x16c>)
 8000772:	881b      	ldrh	r3, [r3, #0]
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b2a      	ldr	r3, [pc, #168]	@ (8000820 <sendCan+0x170>)
 8000778:	705a      	strb	r2, [r3, #1]
	TxData_adc2[2] = (adc9 >> 8) & 0xFF;
 800077a:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <sendCan+0x174>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	0a1b      	lsrs	r3, r3, #8
 8000780:	b29b      	uxth	r3, r3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <sendCan+0x170>)
 8000786:	709a      	strb	r2, [r3, #2]
	TxData_adc2[3] = adc9 & 0xFF;
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <sendCan+0x174>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b24      	ldr	r3, [pc, #144]	@ (8000820 <sendCan+0x170>)
 8000790:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc2, TxData_adc2, &TxMailBox);
 8000792:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <sendCan+0x150>)
 8000794:	4a22      	ldr	r2, [pc, #136]	@ (8000820 <sendCan+0x170>)
 8000796:	4924      	ldr	r1, [pc, #144]	@ (8000828 <sendCan+0x178>)
 8000798:	481b      	ldr	r0, [pc, #108]	@ (8000808 <sendCan+0x158>)
 800079a:	f002 fd9f 	bl	80032dc <HAL_CAN_AddTxMessage>

	if(fuelPumpEmergencyFlag){
 800079e:	4b23      	ldr	r3, [pc, #140]	@ (800082c <sendCan+0x17c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <sendCan+0xfc>
		TxData_emergency[0] = 1;
 80007a6:	4b22      	ldr	r3, [pc, #136]	@ (8000830 <sendCan+0x180>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
	}
	if(ectEmergencyFlag){
 80007ac:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <sendCan+0x184>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d002      	beq.n	80007ba <sendCan+0x10a>
		TxData_emergency[1] = 1;
 80007b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000830 <sendCan+0x180>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	705a      	strb	r2, [r3, #1]
	}
	if(oilEmergencyFlag){
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <sendCan+0x188>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <sendCan+0x118>
		TxData_emergency[2] = 1;
 80007c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000830 <sendCan+0x180>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	709a      	strb	r2, [r3, #2]
	}
	if(battVoltEmergencyFlag){
 80007c8:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <sendCan+0x18c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d002      	beq.n	80007d6 <sendCan+0x126>
		TxData_emergency[3] = 1;
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <sendCan+0x180>)
 80007d2:	2201      	movs	r2, #1
 80007d4:	70da      	strb	r2, [r3, #3]
	}
	HAL_CAN_AddTxMessage(&hcan, &TxHeader_emergency, TxData_emergency, &TxMailBox);
 80007d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <sendCan+0x150>)
 80007d8:	4a15      	ldr	r2, [pc, #84]	@ (8000830 <sendCan+0x180>)
 80007da:	4919      	ldr	r1, [pc, #100]	@ (8000840 <sendCan+0x190>)
 80007dc:	480a      	ldr	r0, [pc, #40]	@ (8000808 <sendCan+0x158>)
 80007de:	f002 fd7d 	bl	80032dc <HAL_CAN_AddTxMessage>

}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000063a 	.word	0x2000063a
 80007ec:	20000478 	.word	0x20000478
 80007f0:	20000400 	.word	0x20000400
 80007f4:	2000046c 	.word	0x2000046c
 80007f8:	2000046e 	.word	0x2000046e
 80007fc:	20000470 	.word	0x20000470
 8000800:	200003fc 	.word	0x200003fc
 8000804:	20000354 	.word	0x20000354
 8000808:	200000fc 	.word	0x200000fc
 800080c:	20000472 	.word	0x20000472
 8000810:	20000408 	.word	0x20000408
 8000814:	2000046a 	.word	0x2000046a
 8000818:	2000036c 	.word	0x2000036c
 800081c:	20000474 	.word	0x20000474
 8000820:	2000040c 	.word	0x2000040c
 8000824:	2000047a 	.word	0x2000047a
 8000828:	20000384 	.word	0x20000384
 800082c:	20000638 	.word	0x20000638
 8000830:	20000418 	.word	0x20000418
 8000834:	20000636 	.word	0x20000636
 8000838:	20000637 	.word	0x20000637
 800083c:	20000639 	.word	0x20000639
 8000840:	200003e4 	.word	0x200003e4

08000844 <heartbeat>:
void heartbeat(){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	TxData_heartbeat[0] = 4;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <heartbeat+0x24>)
 800084a:	2204      	movs	r2, #4
 800084c:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader_heartbeat, TxData_heartbeat,&TxMailBox);
 800084e:	4b07      	ldr	r3, [pc, #28]	@ (800086c <heartbeat+0x28>)
 8000850:	4a05      	ldr	r2, [pc, #20]	@ (8000868 <heartbeat+0x24>)
 8000852:	4907      	ldr	r1, [pc, #28]	@ (8000870 <heartbeat+0x2c>)
 8000854:	4807      	ldr	r0, [pc, #28]	@ (8000874 <heartbeat+0x30>)
 8000856:	f002 fd41 	bl	80032dc <HAL_CAN_AddTxMessage>
	heartbeatFlag = 0;
 800085a:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <heartbeat+0x34>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]

}
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	20000410 	.word	0x20000410
 800086c:	200003fc 	.word	0x200003fc
 8000870:	200003cc 	.word	0x200003cc
 8000874:	200000fc 	.word	0x200000fc
 8000878:	2000063b 	.word	0x2000063b

0800087c <mapeoADC>:
void mapeoADC(){
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	adc1 = ((value_adc[0] * (3300 / 4095)) - 330) * (1 /132)*1000; // ALTERNATOR la trasnformacion ya en mv y de momento, resultado en A
 8000880:	4b13      	ldr	r3, [pc, #76]	@ (80008d0 <mapeoADC+0x54>)
 8000882:	2200      	movs	r2, #0
 8000884:	801a      	strh	r2, [r3, #0]
	adc2 = ((value_adc[1] * (3300 / 4095)) - 330) * (1 /264)*1000;; // WPL
 8000886:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <mapeoADC+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	801a      	strh	r2, [r3, #0]
	adc3 = ((value_adc[2] * (3300 / 4095)) - 330) * (1 / 264)*1000;; // WPR
 800088c:	4b12      	ldr	r3, [pc, #72]	@ (80008d8 <mapeoADC+0x5c>)
 800088e:	2200      	movs	r2, #0
 8000890:	801a      	strh	r2, [r3, #0]
	adc4 = ((value_adc[3] * (3300 / 4095)) - 330) * (1 / 264)*1000;; // F1R
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <mapeoADC+0x60>)
 8000894:	2200      	movs	r2, #0
 8000896:	801a      	strh	r2, [r3, #0]
	adc5 = ((value_adc[4] * (3300 / 4095)) - 330) * (1 / 264)*1000;; // F2R
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <mapeoADC+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	801a      	strh	r2, [r3, #0]
	adc6 = ((value_adc[5] * (3300 / 4095)) - 260) * (1 / 264)*1000;; // F1L
 800089e:	4b11      	ldr	r3, [pc, #68]	@ (80008e4 <mapeoADC+0x68>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	801a      	strh	r2, [r3, #0]
	adc7 = ((value_adc[6] * (3300 / 4095)) - 260) * (1 / 264)*1000;; // F2L
 80008a4:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <mapeoADC+0x6c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	801a      	strh	r2, [r3, #0]
	adc8 = ((value_adc[7] * (3300 / 4095)) - 260) * (10 / 88)*1000;; // 12VNP
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <mapeoADC+0x70>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	801a      	strh	r2, [r3, #0]
	adc9 = ((value_adc[8] * (3300 / 4095) - 500) * (1 / 10))*1000;; // calibración del sensor 0.01V/ºC
 80008b0:	4b0f      	ldr	r3, [pc, #60]	@ (80008f0 <mapeoADC+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	801a      	strh	r2, [r3, #0]
	adc10 = ((adcSpiBuffer[0] * (3303 / 4095)) - 260) * (1 / 264); //Injection
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <mapeoADC+0x78>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	801a      	strh	r2, [r3, #0]
	adc11 = ((adcSpiBuffer[1] * (3300 / 4095)) - 260) * (1 /264)*1000;; // Fuel Pump
 80008bc:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <mapeoADC+0x7c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	801a      	strh	r2, [r3, #0]
	adc12 = ((adcSpiBuffer[2] * (3300 / 4095)) - 270) * (1 / 264)*1000;; // Ignition
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <mapeoADC+0x80>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	801a      	strh	r2, [r3, #0]
}
 80008c8:	46c0      	nop			@ (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	2000046a 	.word	0x2000046a
 80008d4:	2000046c 	.word	0x2000046c
 80008d8:	2000046e 	.word	0x2000046e
 80008dc:	20000470 	.word	0x20000470
 80008e0:	20000472 	.word	0x20000472
 80008e4:	20000474 	.word	0x20000474
 80008e8:	20000476 	.word	0x20000476
 80008ec:	20000478 	.word	0x20000478
 80008f0:	2000047a 	.word	0x2000047a
 80008f4:	2000047c 	.word	0x2000047c
 80008f8:	2000047e 	.word	0x2000047e
 80008fc:	20000480 	.word	0x20000480

08000900 <battControl>:
void battControl(){
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	battDataFlag = 0;
 8000906:	4b5b      	ldr	r3, [pc, #364]	@ (8000a74 <battControl+0x174>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
	uint8_t arrayLength = (sizeof(dutyFanEctTh)/sizeof(dutyFanEctTh[0]));
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2203      	movs	r2, #3
 8000910:	701a      	strb	r2, [r3, #0]
	if((battVoltAverage < battTh[2])&&(battVoltFlagDone[0] == 0)){
 8000912:	4b59      	ldr	r3, [pc, #356]	@ (8000a78 <battControl+0x178>)
 8000914:	889a      	ldrh	r2, [r3, #4]
 8000916:	4b59      	ldr	r3, [pc, #356]	@ (8000a7c <battControl+0x17c>)
 8000918:	881b      	ldrh	r3, [r3, #0]
 800091a:	429a      	cmp	r2, r3
 800091c:	d92d      	bls.n	800097a <battControl+0x7a>
 800091e:	4b58      	ldr	r3, [pc, #352]	@ (8000a80 <battControl+0x180>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d129      	bne.n	800097a <battControl+0x7a>
		battVoltFlagDone[0] = 1;
 8000926:	4b56      	ldr	r3, [pc, #344]	@ (8000a80 <battControl+0x180>)
 8000928:	2201      	movs	r2, #1
 800092a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; (i<arrayLength); i++){
 800092c:	1dfb      	adds	r3, r7, #7
 800092e:	2200      	movs	r2, #0
 8000930:	701a      	strb	r2, [r3, #0]
 8000932:	e01c      	b.n	800096e <battControl+0x6e>
			dutyFanEctTh[i] = dutyFanEctTh[i]-5;
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	781a      	ldrb	r2, [r3, #0]
 8000938:	4b52      	ldr	r3, [pc, #328]	@ (8000a84 <battControl+0x184>)
 800093a:	0052      	lsls	r2, r2, #1
 800093c:	5ad3      	ldrh	r3, [r2, r3]
 800093e:	1dfa      	adds	r2, r7, #7
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	3b05      	subs	r3, #5
 8000944:	b299      	uxth	r1, r3
 8000946:	4b4f      	ldr	r3, [pc, #316]	@ (8000a84 <battControl+0x184>)
 8000948:	0052      	lsls	r2, r2, #1
 800094a:	52d1      	strh	r1, [r2, r3]
			dutyFanOilTh[i] = dutyFanOilTh[i]-5;
 800094c:	1dfb      	adds	r3, r7, #7
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	4b4d      	ldr	r3, [pc, #308]	@ (8000a88 <battControl+0x188>)
 8000952:	0052      	lsls	r2, r2, #1
 8000954:	5ad3      	ldrh	r3, [r2, r3]
 8000956:	1dfa      	adds	r2, r7, #7
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	3b05      	subs	r3, #5
 800095c:	b299      	uxth	r1, r3
 800095e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a88 <battControl+0x188>)
 8000960:	0052      	lsls	r2, r2, #1
 8000962:	52d1      	strh	r1, [r2, r3]
		for(uint8_t i=0; (i<arrayLength); i++){
 8000964:	1dfb      	adds	r3, r7, #7
 8000966:	781a      	ldrb	r2, [r3, #0]
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	3201      	adds	r2, #1
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	1dfa      	adds	r2, r7, #7
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	429a      	cmp	r2, r3
 8000978:	d3dc      	bcc.n	8000934 <battControl+0x34>
		}
	}
	if((battVoltAverage < battTh[1])&&(battVoltFlagDone[1] == 0)){
 800097a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a78 <battControl+0x178>)
 800097c:	885a      	ldrh	r2, [r3, #2]
 800097e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a7c <battControl+0x17c>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	429a      	cmp	r2, r3
 8000984:	d92d      	bls.n	80009e2 <battControl+0xe2>
 8000986:	4b3e      	ldr	r3, [pc, #248]	@ (8000a80 <battControl+0x180>)
 8000988:	785b      	ldrb	r3, [r3, #1]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d129      	bne.n	80009e2 <battControl+0xe2>
		battVoltFlagDone[1] = 1;
 800098e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a80 <battControl+0x180>)
 8000990:	2201      	movs	r2, #1
 8000992:	705a      	strb	r2, [r3, #1]
		for(uint8_t i=0; (i<arrayLength); i++){
 8000994:	1dbb      	adds	r3, r7, #6
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
 800099a:	e01c      	b.n	80009d6 <battControl+0xd6>
			dutyFanEctTh[i] = dutyFanEctTh[i]-7;
 800099c:	1dbb      	adds	r3, r7, #6
 800099e:	781a      	ldrb	r2, [r3, #0]
 80009a0:	4b38      	ldr	r3, [pc, #224]	@ (8000a84 <battControl+0x184>)
 80009a2:	0052      	lsls	r2, r2, #1
 80009a4:	5ad3      	ldrh	r3, [r2, r3]
 80009a6:	1dba      	adds	r2, r7, #6
 80009a8:	7812      	ldrb	r2, [r2, #0]
 80009aa:	3b07      	subs	r3, #7
 80009ac:	b299      	uxth	r1, r3
 80009ae:	4b35      	ldr	r3, [pc, #212]	@ (8000a84 <battControl+0x184>)
 80009b0:	0052      	lsls	r2, r2, #1
 80009b2:	52d1      	strh	r1, [r2, r3]
			dutyFanOilTh[i] = dutyFanOilTh[i]-7;
 80009b4:	1dbb      	adds	r3, r7, #6
 80009b6:	781a      	ldrb	r2, [r3, #0]
 80009b8:	4b33      	ldr	r3, [pc, #204]	@ (8000a88 <battControl+0x188>)
 80009ba:	0052      	lsls	r2, r2, #1
 80009bc:	5ad3      	ldrh	r3, [r2, r3]
 80009be:	1dba      	adds	r2, r7, #6
 80009c0:	7812      	ldrb	r2, [r2, #0]
 80009c2:	3b07      	subs	r3, #7
 80009c4:	b299      	uxth	r1, r3
 80009c6:	4b30      	ldr	r3, [pc, #192]	@ (8000a88 <battControl+0x188>)
 80009c8:	0052      	lsls	r2, r2, #1
 80009ca:	52d1      	strh	r1, [r2, r3]
		for(uint8_t i=0; (i<arrayLength); i++){
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	1dbb      	adds	r3, r7, #6
 80009d2:	3201      	adds	r2, #1
 80009d4:	701a      	strb	r2, [r3, #0]
 80009d6:	1dba      	adds	r2, r7, #6
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	7812      	ldrb	r2, [r2, #0]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	429a      	cmp	r2, r3
 80009e0:	d3dc      	bcc.n	800099c <battControl+0x9c>

		}
	}
	if(battVoltAverage < battTh[0]){
 80009e2:	4b25      	ldr	r3, [pc, #148]	@ (8000a78 <battControl+0x178>)
 80009e4:	881a      	ldrh	r2, [r3, #0]
 80009e6:	4b25      	ldr	r3, [pc, #148]	@ (8000a7c <battControl+0x17c>)
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d937      	bls.n	8000a5e <battControl+0x15e>
		V12NpOff();
 80009ee:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <battControl+0x18c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	2104      	movs	r1, #4
 80009f4:	0018      	movs	r0, r3
 80009f6:	f003 fc8b 	bl	8004310 <HAL_GPIO_WritePin>
		if(battVoltFlagDone[2] == 0){
 80009fa:	4b21      	ldr	r3, [pc, #132]	@ (8000a80 <battControl+0x180>)
 80009fc:	789b      	ldrb	r3, [r3, #2]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d133      	bne.n	8000a6a <battControl+0x16a>
			battVoltFlagDone[2] = 1;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <battControl+0x180>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	709a      	strb	r2, [r3, #2]
			battVoltEmergencyFlag = 1;
 8000a08:	4b21      	ldr	r3, [pc, #132]	@ (8000a90 <battControl+0x190>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; (i<arrayLength); i++){
 8000a0e:	1d7b      	adds	r3, r7, #5
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
 8000a14:	e01c      	b.n	8000a50 <battControl+0x150>
				dutyFanEctTh[i] = dutyFanEctTh[i]-10;
 8000a16:	1d7b      	adds	r3, r7, #5
 8000a18:	781a      	ldrb	r2, [r3, #0]
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a84 <battControl+0x184>)
 8000a1c:	0052      	lsls	r2, r2, #1
 8000a1e:	5ad3      	ldrh	r3, [r2, r3]
 8000a20:	1d7a      	adds	r2, r7, #5
 8000a22:	7812      	ldrb	r2, [r2, #0]
 8000a24:	3b0a      	subs	r3, #10
 8000a26:	b299      	uxth	r1, r3
 8000a28:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <battControl+0x184>)
 8000a2a:	0052      	lsls	r2, r2, #1
 8000a2c:	52d1      	strh	r1, [r2, r3]
				dutyFanOilTh[i] = dutyFanOilTh[i]-10;
 8000a2e:	1d7b      	adds	r3, r7, #5
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <battControl+0x188>)
 8000a34:	0052      	lsls	r2, r2, #1
 8000a36:	5ad3      	ldrh	r3, [r2, r3]
 8000a38:	1d7a      	adds	r2, r7, #5
 8000a3a:	7812      	ldrb	r2, [r2, #0]
 8000a3c:	3b0a      	subs	r3, #10
 8000a3e:	b299      	uxth	r1, r3
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <battControl+0x188>)
 8000a42:	0052      	lsls	r2, r2, #1
 8000a44:	52d1      	strh	r1, [r2, r3]
			for(uint8_t i=0; (i<arrayLength); i++){
 8000a46:	1d7b      	adds	r3, r7, #5
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	1d7b      	adds	r3, r7, #5
 8000a4c:	3201      	adds	r2, #1
 8000a4e:	701a      	strb	r2, [r3, #0]
 8000a50:	1d7a      	adds	r2, r7, #5
 8000a52:	1d3b      	adds	r3, r7, #4
 8000a54:	7812      	ldrb	r2, [r2, #0]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d3dc      	bcc.n	8000a16 <battControl+0x116>
			}
		}
	}else{
		V12NpOn();
	}
}
 8000a5c:	e005      	b.n	8000a6a <battControl+0x16a>
		V12NpOn();
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <battControl+0x18c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	2104      	movs	r1, #4
 8000a64:	0018      	movs	r0, r3
 8000a66:	f003 fc53 	bl	8004310 <HAL_GPIO_WritePin>
}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	20000486 	.word	0x20000486
 8000a78:	20000010 	.word	0x20000010
 8000a7c:	2000062c 	.word	0x2000062c
 8000a80:	20000498 	.word	0x20000498
 8000a84:	2000001c 	.word	0x2000001c
 8000a88:	2000002c 	.word	0x2000002c
 8000a8c:	48000400 	.word	0x48000400
 8000a90:	20000639 	.word	0x20000639

08000a94 <canResetEcu>:
void canResetEcu(){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, RESET);
 8000a98:	2380      	movs	r3, #128	@ 0x80
 8000a9a:	019b      	lsls	r3, r3, #6
 8000a9c:	480c      	ldr	r0, [pc, #48]	@ (8000ad0 <canResetEcu+0x3c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	0019      	movs	r1, r3
 8000aa2:	f003 fc35 	bl	8004310 <HAL_GPIO_WritePin>
	if(resetCounter >= 2){
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <canResetEcu+0x40>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d90c      	bls.n	8000ac8 <canResetEcu+0x34>
		canResetEcuFlag = 0;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <canResetEcu+0x44>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
		resetCounter = 0;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	@ (8000ad4 <canResetEcu+0x40>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 8000aba:	2380      	movs	r3, #128	@ 0x80
 8000abc:	019b      	lsls	r3, r3, #6
 8000abe:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <canResetEcu+0x3c>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	f003 fc24 	bl	8004310 <HAL_GPIO_WritePin>
	}

}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	48000800 	.word	0x48000800
 8000ad4:	20000635 	.word	0x20000635
 8000ad8:	20000634 	.word	0x20000634

08000adc <Read_All_ADC_Channels>:
void Read_All_ADC_Channels() {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af02      	add	r7, sp, #8
    uint8_t numChannels = 3;
 8000ae2:	1d7b      	adds	r3, r7, #5
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	701a      	strb	r2, [r3, #0]
    uint16_t dummyRead;  // Variable para la primera lectura incorrecta

    // 1ª vuelta: se configuran los canales pero los datos leídos no son válidos aún
    for (uint8_t i = 0; i < numChannels; i++) {
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	2200      	movs	r2, #0
 8000aec:	701a      	strb	r2, [r3, #0]
 8000aee:	e026      	b.n	8000b3e <Read_All_ADC_Channels+0x62>
        txSpiData = (i & 0x07) << 12;  // Configurar el canal en el mensaje de SPI
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	031b      	lsls	r3, r3, #12
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	23e0      	movs	r3, #224	@ 0xe0
 8000afc:	01db      	lsls	r3, r3, #7
 8000afe:	4013      	ands	r3, r2
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	4b35      	ldr	r3, [pc, #212]	@ (8000bd8 <Read_All_ADC_Channels+0xfc>)
 8000b04:	801a      	strh	r2, [r3, #0]
        CS_LOW();
 8000b06:	2380      	movs	r3, #128	@ 0x80
 8000b08:	015b      	lsls	r3, r3, #5
 8000b0a:	4834      	ldr	r0, [pc, #208]	@ (8000bdc <Read_All_ADC_Channels+0x100>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	0019      	movs	r1, r3
 8000b10:	f003 fbfe 	bl	8004310 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&txSpiData, (uint8_t*)&dummyRead, 1, HAL_MAX_DELAY);
 8000b14:	1cba      	adds	r2, r7, #2
 8000b16:	4930      	ldr	r1, [pc, #192]	@ (8000bd8 <Read_All_ADC_Channels+0xfc>)
 8000b18:	4831      	ldr	r0, [pc, #196]	@ (8000be0 <Read_All_ADC_Channels+0x104>)
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	425b      	negs	r3, r3
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2301      	movs	r3, #1
 8000b22:	f004 f99f 	bl	8004e64 <HAL_SPI_TransmitReceive>
        CS_HIGH();
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	015b      	lsls	r3, r3, #5
 8000b2a:	482c      	ldr	r0, [pc, #176]	@ (8000bdc <Read_All_ADC_Channels+0x100>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	0019      	movs	r1, r3
 8000b30:	f003 fbee 	bl	8004310 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < numChannels; i++) {
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781a      	ldrb	r2, [r3, #0]
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	3201      	adds	r2, #1
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	1dfa      	adds	r2, r7, #7
 8000b40:	1d7b      	adds	r3, r7, #5
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d3d2      	bcc.n	8000af0 <Read_All_ADC_Channels+0x14>
    }

    HAL_Delay(1);  // Breve pausa para asegurar estabilidad
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f001 fc66 	bl	800241c <HAL_Delay>

    // 2ª vuelta: ahora sí obtenemos los datos correctos
    for (uint8_t i = 0; i < numChannels; i++) {
 8000b50:	1dbb      	adds	r3, r7, #6
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e033      	b.n	8000bc0 <Read_All_ADC_Channels+0xe4>
        txSpiData = (i & 0x07) << 12;  // Configurar el canal en el mensaje de SPI
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	031b      	lsls	r3, r3, #12
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	23e0      	movs	r3, #224	@ 0xe0
 8000b64:	01db      	lsls	r3, r3, #7
 8000b66:	4013      	ands	r3, r2
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <Read_All_ADC_Channels+0xfc>)
 8000b6c:	801a      	strh	r2, [r3, #0]
        rxSpiData = 0;
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <Read_All_ADC_Channels+0x108>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	801a      	strh	r2, [r3, #0]

        CS_LOW();
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	015b      	lsls	r3, r3, #5
 8000b78:	4818      	ldr	r0, [pc, #96]	@ (8000bdc <Read_All_ADC_Channels+0x100>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	0019      	movs	r1, r3
 8000b7e:	f003 fbc7 	bl	8004310 <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&txSpiData, (uint8_t*)&rxSpiData, 1, HAL_MAX_DELAY);
 8000b82:	4a18      	ldr	r2, [pc, #96]	@ (8000be4 <Read_All_ADC_Channels+0x108>)
 8000b84:	4914      	ldr	r1, [pc, #80]	@ (8000bd8 <Read_All_ADC_Channels+0xfc>)
 8000b86:	4816      	ldr	r0, [pc, #88]	@ (8000be0 <Read_All_ADC_Channels+0x104>)
 8000b88:	2301      	movs	r3, #1
 8000b8a:	425b      	negs	r3, r3
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f004 f968 	bl	8004e64 <HAL_SPI_TransmitReceive>
        CS_HIGH();
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	015b      	lsls	r3, r3, #5
 8000b98:	4810      	ldr	r0, [pc, #64]	@ (8000bdc <Read_All_ADC_Channels+0x100>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	f003 fbb7 	bl	8004310 <HAL_GPIO_WritePin>

        adcSpiBuffer[i] = rxSpiData & 0x0FFF;  // Extraer solo los 12 bits de datos del ADC
 8000ba2:	4b10      	ldr	r3, [pc, #64]	@ (8000be4 <Read_All_ADC_Channels+0x108>)
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	1dba      	adds	r2, r7, #6
 8000ba8:	7812      	ldrb	r2, [r2, #0]
 8000baa:	051b      	lsls	r3, r3, #20
 8000bac:	0d1b      	lsrs	r3, r3, #20
 8000bae:	b299      	uxth	r1, r3
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000be8 <Read_All_ADC_Channels+0x10c>)
 8000bb2:	0052      	lsls	r2, r2, #1
 8000bb4:	52d1      	strh	r1, [r2, r3]
    for (uint8_t i = 0; i < numChannels; i++) {
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	1dbb      	adds	r3, r7, #6
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	1dba      	adds	r2, r7, #6
 8000bc2:	1d7b      	adds	r3, r7, #5
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d3c5      	bcc.n	8000b58 <Read_All_ADC_Channels+0x7c>
    }
}
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46c0      	nop			@ (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	b002      	add	sp, #8
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	20000466 	.word	0x20000466
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	20000124 	.word	0x20000124
 8000be4:	20000468 	.word	0x20000468
 8000be8:	20000460 	.word	0x20000460

08000bec <getBufferAverage>:
void currentChecking(){

}
uint16_t getBufferAverage(uint16_t *buffer, uint8_t bufferSize) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	000a      	movs	r2, r1
 8000bf6:	1cfb      	adds	r3, r7, #3
 8000bf8:	701a      	strb	r2, [r3, #0]
    uint32_t sum = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]

    for (uint8_t i = 0; i < bufferSize; i++) {
 8000bfe:	230b      	movs	r3, #11
 8000c00:	18fb      	adds	r3, r7, r3
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e00f      	b.n	8000c28 <getBufferAverage+0x3c>
        sum += buffer[i];
 8000c08:	210b      	movs	r1, #11
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	18d3      	adds	r3, r2, r3
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	001a      	movs	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	189b      	adds	r3, r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < bufferSize; i++) {
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	781a      	ldrb	r2, [r3, #0]
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	3201      	adds	r2, #1
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	230b      	movs	r3, #11
 8000c2a:	18fa      	adds	r2, r7, r3
 8000c2c:	1cfb      	adds	r3, r7, #3
 8000c2e:	7812      	ldrb	r2, [r2, #0]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3e8      	bcc.n	8000c08 <getBufferAverage+0x1c>
    }

    return (sum + (bufferSize / 2)) / bufferSize;  // Redondeo clásico
 8000c36:	1cfb      	adds	r3, r7, #3
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	085b      	lsrs	r3, r3, #1
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	001a      	movs	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	18d2      	adds	r2, r2, r3
 8000c44:	1cfb      	adds	r3, r7, #3
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	0019      	movs	r1, r3
 8000c4a:	0010      	movs	r0, r2
 8000c4c:	f7ff fa5c 	bl	8000108 <__udivsi3>
 8000c50:	0003      	movs	r3, r0
 8000c52:	b29b      	uxth	r3, r3
}
 8000c54:	0018      	movs	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b004      	add	sp, #16
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <fillBuffer>:
void fillBuffer(uint16_t *buffer, uint16_t bufferSize, uint16_t newValue) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	0008      	movs	r0, r1
 8000c66:	0011      	movs	r1, r2
 8000c68:	1cbb      	adds	r3, r7, #2
 8000c6a:	1c02      	adds	r2, r0, #0
 8000c6c:	801a      	strh	r2, [r3, #0]
 8000c6e:	003b      	movs	r3, r7
 8000c70:	1c0a      	adds	r2, r1, #0
 8000c72:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < bufferSize - 1; i++) {
 8000c74:	230f      	movs	r3, #15
 8000c76:	18fb      	adds	r3, r7, r3
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e012      	b.n	8000ca4 <fillBuffer+0x48>
        buffer[i] = buffer[i + 1];  // Mueve los valores a la izquierda
 8000c7e:	200f      	movs	r0, #15
 8000c80:	183b      	adds	r3, r7, r0
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	3301      	adds	r3, #1
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	18d2      	adds	r2, r2, r3
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	18cb      	adds	r3, r1, r3
 8000c96:	8812      	ldrh	r2, [r2, #0]
 8000c98:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < bufferSize - 1; i++) {
 8000c9a:	183b      	adds	r3, r7, r0
 8000c9c:	781a      	ldrb	r2, [r3, #0]
 8000c9e:	183b      	adds	r3, r7, r0
 8000ca0:	3201      	adds	r2, #1
 8000ca2:	701a      	strb	r2, [r3, #0]
 8000ca4:	230f      	movs	r3, #15
 8000ca6:	18fb      	adds	r3, r7, r3
 8000ca8:	781a      	ldrb	r2, [r3, #0]
 8000caa:	1cbb      	adds	r3, r7, #2
 8000cac:	881b      	ldrh	r3, [r3, #0]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbe4      	blt.n	8000c7e <fillBuffer+0x22>
    }
    buffer[bufferSize - 1] = newValue;  // Inserta el nuevo valor al final
 8000cb4:	1cbb      	adds	r3, r7, #2
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4a06      	ldr	r2, [pc, #24]	@ (8000cd4 <fillBuffer+0x78>)
 8000cba:	4694      	mov	ip, r2
 8000cbc:	4463      	add	r3, ip
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	003a      	movs	r2, r7
 8000cc6:	8812      	ldrh	r2, [r2, #0]
 8000cc8:	801a      	strh	r2, [r3, #0]
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b004      	add	sp, #16
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	7fffffff 	.word	0x7fffffff

08000cd8 <fuelPumpProtection>:
void fuelPumpProtection(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	fillBuffer(fuelPumpCurrentBuffer, 100, adc11);
 8000cdc:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <fuelPumpProtection+0x8c>)
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	4b21      	ldr	r3, [pc, #132]	@ (8000d68 <fuelPumpProtection+0x90>)
 8000ce2:	2164      	movs	r1, #100	@ 0x64
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ffb9 	bl	8000c5c <fillBuffer>
	fuelPumpCurrentAverage = getBufferAverage(fuelPumpCurrentBuffer, 100);
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <fuelPumpProtection+0x90>)
 8000cec:	2164      	movs	r1, #100	@ 0x64
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff ff7c 	bl	8000bec <getBufferAverage>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <fuelPumpProtection+0x94>)
 8000cfa:	801a      	strh	r2, [r3, #0]
	fillBuffer(fuelPressBuffer, 100, fuelPress);
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <fuelPumpProtection+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	5e9b      	ldrsh	r3, [r3, r2]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <fuelPumpProtection+0x9c>)
 8000d06:	2164      	movs	r1, #100	@ 0x64
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ffa7 	bl	8000c5c <fillBuffer>
	fuelPressAverage = getBufferAverage(fuelPressBuffer, 100);
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <fuelPumpProtection+0x9c>)
 8000d10:	2164      	movs	r1, #100	@ 0x64
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff ff6a 	bl	8000bec <getBufferAverage>
 8000d18:	0003      	movs	r3, r0
 8000d1a:	001a      	movs	r2, r3
 8000d1c:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <fuelPumpProtection+0xa0>)
 8000d1e:	801a      	strh	r2, [r3, #0]
	if((fuelPumpCurrentAverage > 65000)&&(fuelPumpEmergencyFlag == 0)){
 8000d20:	4b12      	ldr	r3, [pc, #72]	@ (8000d6c <fuelPumpProtection+0x94>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	4a15      	ldr	r2, [pc, #84]	@ (8000d7c <fuelPumpProtection+0xa4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d906      	bls.n	8000d38 <fuelPumpProtection+0x60>
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <fuelPumpProtection+0xa8>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <fuelPumpProtection+0x60>
		fuelPumpEmergencyFlag = 1;
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <fuelPumpProtection+0xa8>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	701a      	strb	r2, [r3, #0]
	}
	if((fuelPressAverage < 200)&&(rpm > 1000)&&(fuelPumpEmergencyFlag == 0)){
 8000d38:	4b0f      	ldr	r3, [pc, #60]	@ (8000d78 <fuelPumpProtection+0xa0>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d3e:	d80d      	bhi.n	8000d5c <fuelPumpProtection+0x84>
 8000d40:	4b10      	ldr	r3, [pc, #64]	@ (8000d84 <fuelPumpProtection+0xac>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	5e9a      	ldrsh	r2, [r3, r2]
 8000d46:	23fa      	movs	r3, #250	@ 0xfa
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	dd06      	ble.n	8000d5c <fuelPumpProtection+0x84>
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <fuelPumpProtection+0xa8>)
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <fuelPumpProtection+0x84>
		fuelPumpEmergencyFlag = 1;
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <fuelPumpProtection+0xa8>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	701a      	strb	r2, [r3, #0]
	}
}
 8000d5c:	46c0      	nop			@ (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	2000047e 	.word	0x2000047e
 8000d68:	2000049c 	.word	0x2000049c
 8000d6c:	2000062e 	.word	0x2000062e
 8000d70:	20000490 	.word	0x20000490
 8000d74:	20000564 	.word	0x20000564
 8000d78:	20000632 	.word	0x20000632
 8000d7c:	0000fde8 	.word	0x0000fde8
 8000d80:	20000638 	.word	0x20000638
 8000d84:	20000494 	.word	0x20000494

08000d88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d8c:	f001 fae2 	bl	8002354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d90:	f000 f9d8 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d94:	f000 fe7a 	bl	8001a8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d98:	f000 fe5a 	bl	8001a50 <MX_DMA_Init>
  MX_ADC_Init();
 8000d9c:	f000 fa20 	bl	80011e0 <MX_ADC_Init>
  MX_CAN_Init();
 8000da0:	f000 faee 	bl	8001380 <MX_CAN_Init>
  MX_SPI2_Init();
 8000da4:	f000 fb50 	bl	8001448 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000da8:	f000 fc8c 	bl	80016c4 <MX_TIM3_Init>
  MX_TIM17_Init();
 8000dac:	f000 fdca 	bl	8001944 <MX_TIM17_Init>
  MX_TIM16_Init();
 8000db0:	f000 fd42 	bl	8001838 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000db4:	f000 fc1a 	bl	80015ec <MX_TIM2_Init>
  MX_TIM1_Init();
 8000db8:	f000 fb84 	bl	80014c4 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000dbc:	f000 fcee 	bl	800179c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adc_buff, 9); //Inicia el DMA se le pasa el ADC, la variable donde guardar los datos y el numero de canales
 8000dc0:	49b9      	ldr	r1, [pc, #740]	@ (80010a8 <main+0x320>)
 8000dc2:	4bba      	ldr	r3, [pc, #744]	@ (80010ac <main+0x324>)
 8000dc4:	2209      	movs	r2, #9
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f001 fcfe 	bl	80027c8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc); //Se inicia la interrupcion de fin de conversion del ADC en el "Set-up"
 8000dcc:	4bb7      	ldr	r3, [pc, #732]	@ (80010ac <main+0x324>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f001 fc88 	bl	80026e4 <HAL_ADC_Start_IT>
  HAL_CAN_Start(&hcan);
 8000dd4:	4bb6      	ldr	r3, [pc, #728]	@ (80010b0 <main+0x328>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f002 fa3a 	bl	8003250 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000ddc:	4bb4      	ldr	r3, [pc, #720]	@ (80010b0 <main+0x328>)
 8000dde:	2102      	movs	r1, #2
 8000de0:	0018      	movs	r0, r3
 8000de2:	f002 fc78 	bl	80036d6 <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim1);
 8000de6:	4bb3      	ldr	r3, [pc, #716]	@ (80010b4 <main+0x32c>)
 8000de8:	0018      	movs	r0, r3
 8000dea:	f004 fbe3 	bl	80055b4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000dee:	4bb2      	ldr	r3, [pc, #712]	@ (80010b8 <main+0x330>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f004 fbdf 	bl	80055b4 <HAL_TIM_Base_Start_IT>
  TIM2->CCR3 = dutyFanNill;
 8000df6:	4bb1      	ldr	r3, [pc, #708]	@ (80010bc <main+0x334>)
 8000df8:	881a      	ldrh	r2, [r3, #0]
 8000dfa:	2380      	movs	r3, #128	@ 0x80
 8000dfc:	05db      	lsls	r3, r3, #23
 8000dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = dutyFanNill;
 8000e00:	4bae      	ldr	r3, [pc, #696]	@ (80010bc <main+0x334>)
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	2380      	movs	r3, #128	@ 0x80
 8000e06:	05db      	lsls	r3, r3, #23
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = dutyFanNill;
 8000e0a:	4bac      	ldr	r3, [pc, #688]	@ (80010bc <main+0x334>)
 8000e0c:	881a      	ldrh	r2, [r3, #0]
 8000e0e:	4bac      	ldr	r3, [pc, #688]	@ (80010c0 <main+0x338>)
 8000e10:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = dutyFanNill;
 8000e12:	4baa      	ldr	r3, [pc, #680]	@ (80010bc <main+0x334>)
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	4baa      	ldr	r3, [pc, #680]	@ (80010c0 <main+0x338>)
 8000e18:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM16->CCR1 = dutyPumpNill;
 8000e1a:	4baa      	ldr	r3, [pc, #680]	@ (80010c4 <main+0x33c>)
 8000e1c:	881a      	ldrh	r2, [r3, #0]
 8000e1e:	4baa      	ldr	r3, [pc, #680]	@ (80010c8 <main+0x340>)
 8000e20:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->CCR1 = dutyPumpNill;
 8000e22:	4ba8      	ldr	r3, [pc, #672]	@ (80010c4 <main+0x33c>)
 8000e24:	881a      	ldrh	r2, [r3, #0]
 8000e26:	4ba9      	ldr	r3, [pc, #676]	@ (80010cc <main+0x344>)
 8000e28:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e2a:	4ba9      	ldr	r3, [pc, #676]	@ (80010d0 <main+0x348>)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f004 fcac 	bl	800578c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e34:	4ba6      	ldr	r3, [pc, #664]	@ (80010d0 <main+0x348>)
 8000e36:	2104      	movs	r1, #4
 8000e38:	0018      	movs	r0, r3
 8000e3a:	f004 fca7 	bl	800578c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e3e:	4ba5      	ldr	r3, [pc, #660]	@ (80010d4 <main+0x34c>)
 8000e40:	2108      	movs	r1, #8
 8000e42:	0018      	movs	r0, r3
 8000e44:	f004 fca2 	bl	800578c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e48:	4ba2      	ldr	r3, [pc, #648]	@ (80010d4 <main+0x34c>)
 8000e4a:	210c      	movs	r1, #12
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f004 fc9d 	bl	800578c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000e52:	4ba1      	ldr	r3, [pc, #644]	@ (80010d8 <main+0x350>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f004 fc98 	bl	800578c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000e5c:	4b9f      	ldr	r3, [pc, #636]	@ (80010dc <main+0x354>)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	0018      	movs	r0, r3
 8000e62:	f004 fc93 	bl	800578c <HAL_TIM_PWM_Start>


	TxHeader_adc.DLC = 8;
 8000e66:	4b9e      	ldr	r3, [pc, #632]	@ (80010e0 <main+0x358>)
 8000e68:	2208      	movs	r2, #8
 8000e6a:	611a      	str	r2, [r3, #16]
	TxHeader_adc.ExtId = 0;
 8000e6c:	4b9c      	ldr	r3, [pc, #624]	@ (80010e0 <main+0x358>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
	TxHeader_adc.IDE = CAN_ID_STD;
 8000e72:	4b9b      	ldr	r3, [pc, #620]	@ (80010e0 <main+0x358>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
	TxHeader_adc.RTR = CAN_RTR_DATA;
 8000e78:	4b99      	ldr	r3, [pc, #612]	@ (80010e0 <main+0x358>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
	TxHeader_adc.StdId = ADC_ID;
 8000e7e:	4b98      	ldr	r3, [pc, #608]	@ (80010e0 <main+0x358>)
 8000e80:	4a98      	ldr	r2, [pc, #608]	@ (80010e4 <main+0x35c>)
 8000e82:	601a      	str	r2, [r3, #0]
	TxHeader_adc.TransmitGlobalTime = DISABLE;
 8000e84:	4b96      	ldr	r3, [pc, #600]	@ (80010e0 <main+0x358>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	751a      	strb	r2, [r3, #20]

	TxHeader_adc1.DLC = 4;
 8000e8a:	4b97      	ldr	r3, [pc, #604]	@ (80010e8 <main+0x360>)
 8000e8c:	2204      	movs	r2, #4
 8000e8e:	611a      	str	r2, [r3, #16]
	TxHeader_adc1.ExtId = 0;
 8000e90:	4b95      	ldr	r3, [pc, #596]	@ (80010e8 <main+0x360>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
	TxHeader_adc1.IDE = CAN_ID_STD;
 8000e96:	4b94      	ldr	r3, [pc, #592]	@ (80010e8 <main+0x360>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
	TxHeader_adc1.RTR = CAN_RTR_DATA;
 8000e9c:	4b92      	ldr	r3, [pc, #584]	@ (80010e8 <main+0x360>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
	TxHeader_adc1.StdId = ADC_ID1;
 8000ea2:	4b91      	ldr	r3, [pc, #580]	@ (80010e8 <main+0x360>)
 8000ea4:	4a91      	ldr	r2, [pc, #580]	@ (80010ec <main+0x364>)
 8000ea6:	601a      	str	r2, [r3, #0]
	TxHeader_adc1.TransmitGlobalTime = DISABLE;
 8000ea8:	4b8f      	ldr	r3, [pc, #572]	@ (80010e8 <main+0x360>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	751a      	strb	r2, [r3, #20]

	TxHeader_adc2.DLC = 4;
 8000eae:	4b90      	ldr	r3, [pc, #576]	@ (80010f0 <main+0x368>)
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	611a      	str	r2, [r3, #16]
	TxHeader_adc2.ExtId = 0;
 8000eb4:	4b8e      	ldr	r3, [pc, #568]	@ (80010f0 <main+0x368>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
	TxHeader_adc2.IDE = CAN_ID_STD;
 8000eba:	4b8d      	ldr	r3, [pc, #564]	@ (80010f0 <main+0x368>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
	TxHeader_adc2.RTR = CAN_RTR_DATA;
 8000ec0:	4b8b      	ldr	r3, [pc, #556]	@ (80010f0 <main+0x368>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
	TxHeader_adc2.StdId = ADC_ID2;
 8000ec6:	4b8a      	ldr	r3, [pc, #552]	@ (80010f0 <main+0x368>)
 8000ec8:	4a8a      	ldr	r2, [pc, #552]	@ (80010f4 <main+0x36c>)
 8000eca:	601a      	str	r2, [r3, #0]
	TxHeader_adc2.TransmitGlobalTime = DISABLE;
 8000ecc:	4b88      	ldr	r3, [pc, #544]	@ (80010f0 <main+0x368>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	751a      	strb	r2, [r3, #20]

	TxHeader_adc3.DLC = 2; //AQUI ESTABA EL ERROR; ESO ESTABA COMO TxHeader_adc2
 8000ed2:	4b89      	ldr	r3, [pc, #548]	@ (80010f8 <main+0x370>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	611a      	str	r2, [r3, #16]
	TxHeader_adc3.ExtId = 0;
 8000ed8:	4b87      	ldr	r3, [pc, #540]	@ (80010f8 <main+0x370>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	605a      	str	r2, [r3, #4]
	TxHeader_adc3.IDE = CAN_ID_STD;
 8000ede:	4b86      	ldr	r3, [pc, #536]	@ (80010f8 <main+0x370>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
	TxHeader_adc3.RTR = CAN_RTR_DATA;
 8000ee4:	4b84      	ldr	r3, [pc, #528]	@ (80010f8 <main+0x370>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
	TxHeader_adc3.StdId = ADC_ID3;
 8000eea:	4b83      	ldr	r3, [pc, #524]	@ (80010f8 <main+0x370>)
 8000eec:	22ed      	movs	r2, #237	@ 0xed
 8000eee:	0092      	lsls	r2, r2, #2
 8000ef0:	601a      	str	r2, [r3, #0]
	TxHeader_adc3.TransmitGlobalTime = DISABLE;
 8000ef2:	4b81      	ldr	r3, [pc, #516]	@ (80010f8 <main+0x370>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	751a      	strb	r2, [r3, #20]

	TxHeader_anw.DLC = 2;
 8000ef8:	4b80      	ldr	r3, [pc, #512]	@ (80010fc <main+0x374>)
 8000efa:	2202      	movs	r2, #2
 8000efc:	611a      	str	r2, [r3, #16]
	TxHeader_anw.ExtId = 0;
 8000efe:	4b7f      	ldr	r3, [pc, #508]	@ (80010fc <main+0x374>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
	TxHeader_anw.IDE = CAN_ID_STD;
 8000f04:	4b7d      	ldr	r3, [pc, #500]	@ (80010fc <main+0x374>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
	TxHeader_anw.RTR = CAN_RTR_DATA;
 8000f0a:	4b7c      	ldr	r3, [pc, #496]	@ (80010fc <main+0x374>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
	TxHeader_anw.StdId = ANW_ID;
 8000f10:	4b7a      	ldr	r3, [pc, #488]	@ (80010fc <main+0x374>)
 8000f12:	4a7b      	ldr	r2, [pc, #492]	@ (8001100 <main+0x378>)
 8000f14:	601a      	str	r2, [r3, #0]
	TxHeader_anw.TransmitGlobalTime = DISABLE;
 8000f16:	4b79      	ldr	r3, [pc, #484]	@ (80010fc <main+0x374>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	751a      	strb	r2, [r3, #20]

	TxHeader_heartbeat.DLC = 1;
 8000f1c:	4b79      	ldr	r3, [pc, #484]	@ (8001104 <main+0x37c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	611a      	str	r2, [r3, #16]
	TxHeader_heartbeat.ExtId = 0;
 8000f22:	4b78      	ldr	r3, [pc, #480]	@ (8001104 <main+0x37c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
	TxHeader_heartbeat.IDE = CAN_ID_STD;
 8000f28:	4b76      	ldr	r3, [pc, #472]	@ (8001104 <main+0x37c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
	TxHeader_heartbeat.RTR = CAN_RTR_DATA;
 8000f2e:	4b75      	ldr	r3, [pc, #468]	@ (8001104 <main+0x37c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
	TxHeader_heartbeat.StdId = HEARTBEAT_ID;
 8000f34:	4b73      	ldr	r3, [pc, #460]	@ (8001104 <main+0x37c>)
 8000f36:	22ec      	movs	r2, #236	@ 0xec
 8000f38:	0092      	lsls	r2, r2, #2
 8000f3a:	601a      	str	r2, [r3, #0]
	TxHeader_heartbeat.TransmitGlobalTime = DISABLE;
 8000f3c:	4b71      	ldr	r3, [pc, #452]	@ (8001104 <main+0x37c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	751a      	strb	r2, [r3, #20]

	TxHeader_emergency.DLC = 8;
 8000f42:	4b71      	ldr	r3, [pc, #452]	@ (8001108 <main+0x380>)
 8000f44:	2208      	movs	r2, #8
 8000f46:	611a      	str	r2, [r3, #16]
	TxHeader_emergency.ExtId = 0;
 8000f48:	4b6f      	ldr	r3, [pc, #444]	@ (8001108 <main+0x380>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	605a      	str	r2, [r3, #4]
	TxHeader_emergency.IDE = CAN_ID_STD;
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	@ (8001108 <main+0x380>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
	TxHeader_emergency.RTR = CAN_RTR_DATA;
 8000f54:	4b6c      	ldr	r3, [pc, #432]	@ (8001108 <main+0x380>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	60da      	str	r2, [r3, #12]
	TxHeader_emergency.StdId = EMERGENCY_ID;
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	@ (8001108 <main+0x380>)
 8000f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800110c <main+0x384>)
 8000f5e:	601a      	str	r2, [r3, #0]
	TxHeader_emergency.TransmitGlobalTime = DISABLE;
 8000f60:	4b69      	ldr	r3, [pc, #420]	@ (8001108 <main+0x380>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000f66:	4b52      	ldr	r3, [pc, #328]	@ (80010b0 <main+0x328>)
 8000f68:	2102      	movs	r1, #2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f002 fbb3 	bl	80036d6 <HAL_CAN_ActivateNotification>
 8000f70:	1e03      	subs	r3, r0, #0
 8000f72:	d001      	beq.n	8000f78 <main+0x1f0>
			!= HAL_OK) {
		Error_Handler();
 8000f74:	f000 fe64 	bl	8001c40 <Error_Handler>

	}


	translateDuty(dutyFanEctTh, 3);
 8000f78:	4b65      	ldr	r3, [pc, #404]	@ (8001110 <main+0x388>)
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff f94f 	bl	8000220 <translateDuty>
	translateDuty(dutyFanOilTh, 3);
 8000f82:	4b64      	ldr	r3, [pc, #400]	@ (8001114 <main+0x38c>)
 8000f84:	2103      	movs	r1, #3
 8000f86:	0018      	movs	r0, r3
 8000f88:	f7ff f94a 	bl	8000220 <translateDuty>
	V12NpOn();
 8000f8c:	4b62      	ldr	r3, [pc, #392]	@ (8001118 <main+0x390>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2104      	movs	r1, #4
 8000f92:	0018      	movs	r0, r3
 8000f94:	f003 f9bc 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, SET);
 8000f98:	2380      	movs	r3, #128	@ 0x80
 8000f9a:	0099      	lsls	r1, r3, #2
 8000f9c:	2390      	movs	r3, #144	@ 0x90
 8000f9e:	05db      	lsls	r3, r3, #23
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f003 f9b4 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F1L_Signal_GPIO_Port, F1L_Signal_Pin, SET);
 8000fa8:	4b5b      	ldr	r3, [pc, #364]	@ (8001118 <main+0x390>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f003 f9ae 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2L_Signal_GPIO_Port, F2L_Signal_Pin, SET);
 8000fb4:	4b58      	ldr	r3, [pc, #352]	@ (8001118 <main+0x390>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2140      	movs	r1, #64	@ 0x40
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f003 f9a8 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, SET);
 8000fc0:	2380      	movs	r3, #128	@ 0x80
 8000fc2:	0059      	lsls	r1, r3, #1
 8000fc4:	2390      	movs	r3, #144	@ 0x90
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	2201      	movs	r2, #1
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f003 f9a0 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, SET);
 8000fd0:	4b51      	ldr	r3, [pc, #324]	@ (8001118 <main+0x390>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	2108      	movs	r1, #8
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f003 f99a 	bl	8004310 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, SET);
 8000fdc:	2380      	movs	r3, #128	@ 0x80
 8000fde:	0219      	lsls	r1, r3, #8
 8000fe0:	2390      	movs	r3, #144	@ 0x90
 8000fe2:	05db      	lsls	r3, r3, #23
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f003 f992 	bl	8004310 <HAL_GPIO_WritePin>
	TIM2->CCR3 = dutyFanNill;
 8000fec:	4b33      	ldr	r3, [pc, #204]	@ (80010bc <main+0x334>)
 8000fee:	881a      	ldrh	r2, [r3, #0]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	05db      	lsls	r3, r3, #23
 8000ff4:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = dutyFanNill;
 8000ff6:	4b31      	ldr	r3, [pc, #196]	@ (80010bc <main+0x334>)
 8000ff8:	881a      	ldrh	r2, [r3, #0]
 8000ffa:	2380      	movs	r3, #128	@ 0x80
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM16->CCR1 = dutyPumpNill;
 8001000:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <main+0x33c>)
 8001002:	881a      	ldrh	r2, [r3, #0]
 8001004:	4b30      	ldr	r3, [pc, #192]	@ (80010c8 <main+0x340>)
 8001006:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR1 = dutyFanNill;
 8001008:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <main+0x334>)
 800100a:	881a      	ldrh	r2, [r3, #0]
 800100c:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <main+0x338>)
 800100e:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = dutyFanNill;
 8001010:	4b2a      	ldr	r3, [pc, #168]	@ (80010bc <main+0x334>)
 8001012:	881a      	ldrh	r2, [r3, #0]
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <main+0x338>)
 8001016:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM17->CCR1 = dutyPumpNill;
 8001018:	4b2a      	ldr	r3, [pc, #168]	@ (80010c4 <main+0x33c>)
 800101a:	881a      	ldrh	r2, [r3, #0]
 800101c:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <main+0x344>)
 800101e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  mapeoADC();
 8001020:	f7ff fc2c 	bl	800087c <mapeoADC>
	  if(tempDataFlag){
 8001024:	4b3d      	ldr	r3, [pc, #244]	@ (800111c <main+0x394>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <main+0x2a8>
		  tempActions();
 800102c:	f7ff fa4c 	bl	80004c8 <tempActions>
	  }
	  if(send){
 8001030:	4b3b      	ldr	r3, [pc, #236]	@ (8001120 <main+0x398>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <main+0x2b8>
		  sendCan();
 8001038:	f7ff fb3a 	bl	80006b0 <sendCan>
		  Read_All_ADC_Channels();
 800103c:	f7ff fd4e 	bl	8000adc <Read_All_ADC_Channels>
	  }
	  if(heartbeatFlag > 5 ){
 8001040:	4b38      	ldr	r3, [pc, #224]	@ (8001124 <main+0x39c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b05      	cmp	r3, #5
 8001046:	d901      	bls.n	800104c <main+0x2c4>
		  heartbeat();
 8001048:	f7ff fbfc 	bl	8000844 <heartbeat>
	  }
	  if(battDataFlag){
 800104c:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <main+0x3a0>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d013      	beq.n	800107c <main+0x2f4>
		  fillBuffer(battVoltBuffer, 10, battVolt);
 8001054:	4b35      	ldr	r3, [pc, #212]	@ (800112c <main+0x3a4>)
 8001056:	2200      	movs	r2, #0
 8001058:	5e9b      	ldrsh	r3, [r3, r2]
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b34      	ldr	r3, [pc, #208]	@ (8001130 <main+0x3a8>)
 800105e:	210a      	movs	r1, #10
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff fdfb 	bl	8000c5c <fillBuffer>
		  battVoltAverage= getBufferAverage(battVoltBuffer, 10);
 8001066:	4b32      	ldr	r3, [pc, #200]	@ (8001130 <main+0x3a8>)
 8001068:	210a      	movs	r1, #10
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff fdbe 	bl	8000bec <getBufferAverage>
 8001070:	0003      	movs	r3, r0
 8001072:	001a      	movs	r2, r3
 8001074:	4b2f      	ldr	r3, [pc, #188]	@ (8001134 <main+0x3ac>)
 8001076:	801a      	strh	r2, [r3, #0]
		  battControl();
 8001078:	f7ff fc42 	bl	8000900 <battControl>
	  }
	  if(canResetEcuFlag){
 800107c:	4b2e      	ldr	r3, [pc, #184]	@ (8001138 <main+0x3b0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d002      	beq.n	800108a <main+0x302>
		  canResetEcu();
 8001084:	f7ff fd06 	bl	8000a94 <canResetEcu>
 8001088:	e006      	b.n	8001098 <main+0x310>
	  }else{
		  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 800108a:	2380      	movs	r3, #128	@ 0x80
 800108c:	019b      	lsls	r3, r3, #6
 800108e:	482b      	ldr	r0, [pc, #172]	@ (800113c <main+0x3b4>)
 8001090:	2201      	movs	r2, #1
 8001092:	0019      	movs	r1, r3
 8001094:	f003 f93c 	bl	8004310 <HAL_GPIO_WritePin>
	  }
	  if(pressDataFlag){
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <main+0x3b8>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0bf      	beq.n	8001020 <main+0x298>
		  fuelPumpProtection();
 80010a0:	f7ff fe1a 	bl	8000cd8 <fuelPumpProtection>
	  mapeoADC();
 80010a4:	e7bc      	b.n	8001020 <main+0x298>
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	20000428 	.word	0x20000428
 80010ac:	20000078 	.word	0x20000078
 80010b0:	200000fc 	.word	0x200000fc
 80010b4:	20000188 	.word	0x20000188
 80010b8:	20000260 	.word	0x20000260
 80010bc:	20000016 	.word	0x20000016
 80010c0:	40000400 	.word	0x40000400
 80010c4:	20000018 	.word	0x20000018
 80010c8:	40014400 	.word	0x40014400
 80010cc:	40014800 	.word	0x40014800
 80010d0:	20000218 	.word	0x20000218
 80010d4:	200001d0 	.word	0x200001d0
 80010d8:	200002a8 	.word	0x200002a8
 80010dc:	200002f0 	.word	0x200002f0
 80010e0:	20000354 	.word	0x20000354
 80010e4:	000003b1 	.word	0x000003b1
 80010e8:	2000036c 	.word	0x2000036c
 80010ec:	000003b2 	.word	0x000003b2
 80010f0:	20000384 	.word	0x20000384
 80010f4:	000003b3 	.word	0x000003b3
 80010f8:	2000039c 	.word	0x2000039c
 80010fc:	200003b4 	.word	0x200003b4
 8001100:	000002b1 	.word	0x000002b1
 8001104:	200003cc 	.word	0x200003cc
 8001108:	200003e4 	.word	0x200003e4
 800110c:	000003b5 	.word	0x000003b5
 8001110:	2000001c 	.word	0x2000001c
 8001114:	2000002c 	.word	0x2000002c
 8001118:	48000400 	.word	0x48000400
 800111c:	20000482 	.word	0x20000482
 8001120:	2000063a 	.word	0x2000063a
 8001124:	2000063b 	.word	0x2000063b
 8001128:	20000486 	.word	0x20000486
 800112c:	20000492 	.word	0x20000492
 8001130:	2000003c 	.word	0x2000003c
 8001134:	2000062c 	.word	0x2000062c
 8001138:	20000634 	.word	0x20000634
 800113c:	48000800 	.word	0x48000800
 8001140:	20000483 	.word	0x20000483

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b093      	sub	sp, #76	@ 0x4c
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	2414      	movs	r4, #20
 800114c:	193b      	adds	r3, r7, r4
 800114e:	0018      	movs	r0, r3
 8001150:	2334      	movs	r3, #52	@ 0x34
 8001152:	001a      	movs	r2, r3
 8001154:	2100      	movs	r1, #0
 8001156:	f005 f93f 	bl	80063d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	0018      	movs	r0, r3
 800115e:	2310      	movs	r3, #16
 8001160:	001a      	movs	r2, r3
 8001162:	2100      	movs	r1, #0
 8001164:	f005 f938 	bl	80063d8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001168:	0021      	movs	r1, r4
 800116a:	187b      	adds	r3, r7, r1
 800116c:	2211      	movs	r2, #17
 800116e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	187b      	adds	r3, r7, r1
 8001172:	2201      	movs	r2, #1
 8001174:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001176:	187b      	adds	r3, r7, r1
 8001178:	2201      	movs	r2, #1
 800117a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800117c:	187b      	adds	r3, r7, r1
 800117e:	2210      	movs	r2, #16
 8001180:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2202      	movs	r2, #2
 8001186:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001188:	187b      	adds	r3, r7, r1
 800118a:	2280      	movs	r2, #128	@ 0x80
 800118c:	0252      	lsls	r2, r2, #9
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8001190:	187b      	adds	r3, r7, r1
 8001192:	2200      	movs	r2, #0
 8001194:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2200      	movs	r2, #0
 800119a:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119c:	187b      	adds	r3, r7, r1
 800119e:	0018      	movs	r0, r3
 80011a0:	f003 f8d4 	bl	800434c <HAL_RCC_OscConfig>
 80011a4:	1e03      	subs	r3, r0, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0x68>
  {
    Error_Handler();
 80011a8:	f000 fd4a 	bl	8001c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2207      	movs	r2, #7
 80011b0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	2202      	movs	r2, #2
 80011b6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2101      	movs	r1, #1
 80011c8:	0018      	movs	r0, r3
 80011ca:	f003 fc45 	bl	8004a58 <HAL_RCC_ClockConfig>
 80011ce:	1e03      	subs	r3, r0, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011d2:	f000 fd35 	bl	8001c40 <Error_Handler>
  }
}
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b013      	add	sp, #76	@ 0x4c
 80011dc:	bd90      	pop	{r4, r7, pc}
	...

080011e0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	0018      	movs	r0, r3
 80011ea:	230c      	movs	r3, #12
 80011ec:	001a      	movs	r2, r3
 80011ee:	2100      	movs	r1, #0
 80011f0:	f005 f8f2 	bl	80063d8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80011f4:	4b60      	ldr	r3, [pc, #384]	@ (8001378 <MX_ADC_Init+0x198>)
 80011f6:	4a61      	ldr	r2, [pc, #388]	@ (800137c <MX_ADC_Init+0x19c>)
 80011f8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001378 <MX_ADC_Init+0x198>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001200:	4b5d      	ldr	r3, [pc, #372]	@ (8001378 <MX_ADC_Init+0x198>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001206:	4b5c      	ldr	r3, [pc, #368]	@ (8001378 <MX_ADC_Init+0x198>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800120c:	4b5a      	ldr	r3, [pc, #360]	@ (8001378 <MX_ADC_Init+0x198>)
 800120e:	2201      	movs	r2, #1
 8001210:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001212:	4b59      	ldr	r3, [pc, #356]	@ (8001378 <MX_ADC_Init+0x198>)
 8001214:	2204      	movs	r2, #4
 8001216:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001218:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <MX_ADC_Init+0x198>)
 800121a:	2200      	movs	r2, #0
 800121c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800121e:	4b56      	ldr	r3, [pc, #344]	@ (8001378 <MX_ADC_Init+0x198>)
 8001220:	2200      	movs	r2, #0
 8001222:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001224:	4b54      	ldr	r3, [pc, #336]	@ (8001378 <MX_ADC_Init+0x198>)
 8001226:	2201      	movs	r2, #1
 8001228:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800122a:	4b53      	ldr	r3, [pc, #332]	@ (8001378 <MX_ADC_Init+0x198>)
 800122c:	2200      	movs	r2, #0
 800122e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001230:	4b51      	ldr	r3, [pc, #324]	@ (8001378 <MX_ADC_Init+0x198>)
 8001232:	22c2      	movs	r2, #194	@ 0xc2
 8001234:	32ff      	adds	r2, #255	@ 0xff
 8001236:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001238:	4b4f      	ldr	r3, [pc, #316]	@ (8001378 <MX_ADC_Init+0x198>)
 800123a:	2200      	movs	r2, #0
 800123c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800123e:	4b4e      	ldr	r3, [pc, #312]	@ (8001378 <MX_ADC_Init+0x198>)
 8001240:	2224      	movs	r2, #36	@ 0x24
 8001242:	2101      	movs	r1, #1
 8001244:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001246:	4b4c      	ldr	r3, [pc, #304]	@ (8001378 <MX_ADC_Init+0x198>)
 8001248:	2201      	movs	r2, #1
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800124c:	4b4a      	ldr	r3, [pc, #296]	@ (8001378 <MX_ADC_Init+0x198>)
 800124e:	0018      	movs	r0, r3
 8001250:	f001 f908 	bl	8002464 <HAL_ADC_Init>
 8001254:	1e03      	subs	r3, r0, #0
 8001256:	d001      	beq.n	800125c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001258:	f000 fcf2 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2280      	movs	r2, #128	@ 0x80
 8001266:	0152      	lsls	r2, r2, #5
 8001268:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2207      	movs	r2, #7
 800126e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001270:	1d3a      	adds	r2, r7, #4
 8001272:	4b41      	ldr	r3, [pc, #260]	@ (8001378 <MX_ADC_Init+0x198>)
 8001274:	0011      	movs	r1, r2
 8001276:	0018      	movs	r0, r3
 8001278:	f001 fbe4 	bl	8002a44 <HAL_ADC_ConfigChannel>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d001      	beq.n	8001284 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8001280:	f000 fcde 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2201      	movs	r2, #1
 8001288:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800128a:	1d3a      	adds	r2, r7, #4
 800128c:	4b3a      	ldr	r3, [pc, #232]	@ (8001378 <MX_ADC_Init+0x198>)
 800128e:	0011      	movs	r1, r2
 8001290:	0018      	movs	r0, r3
 8001292:	f001 fbd7 	bl	8002a44 <HAL_ADC_ConfigChannel>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d001      	beq.n	800129e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800129a:	f000 fcd1 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2202      	movs	r2, #2
 80012a2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012a4:	1d3a      	adds	r2, r7, #4
 80012a6:	4b34      	ldr	r3, [pc, #208]	@ (8001378 <MX_ADC_Init+0x198>)
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f001 fbca 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d001      	beq.n	80012b8 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80012b4:	f000 fcc4 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2203      	movs	r2, #3
 80012bc:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012be:	1d3a      	adds	r2, r7, #4
 80012c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001378 <MX_ADC_Init+0x198>)
 80012c2:	0011      	movs	r1, r2
 80012c4:	0018      	movs	r0, r3
 80012c6:	f001 fbbd 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80012ce:	f000 fcb7 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2204      	movs	r2, #4
 80012d6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012d8:	1d3a      	adds	r2, r7, #4
 80012da:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <MX_ADC_Init+0x198>)
 80012dc:	0011      	movs	r1, r2
 80012de:	0018      	movs	r0, r3
 80012e0:	f001 fbb0 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 80012e8:	f000 fcaa 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2205      	movs	r2, #5
 80012f0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012f2:	1d3a      	adds	r2, r7, #4
 80012f4:	4b20      	ldr	r3, [pc, #128]	@ (8001378 <MX_ADC_Init+0x198>)
 80012f6:	0011      	movs	r1, r2
 80012f8:	0018      	movs	r0, r3
 80012fa:	f001 fba3 	bl	8002a44 <HAL_ADC_ConfigChannel>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d001      	beq.n	8001306 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8001302:	f000 fc9d 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2206      	movs	r2, #6
 800130a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800130c:	1d3a      	adds	r2, r7, #4
 800130e:	4b1a      	ldr	r3, [pc, #104]	@ (8001378 <MX_ADC_Init+0x198>)
 8001310:	0011      	movs	r1, r2
 8001312:	0018      	movs	r0, r3
 8001314:	f001 fb96 	bl	8002a44 <HAL_ADC_ConfigChannel>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 800131c:	f000 fc90 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	2207      	movs	r2, #7
 8001324:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001326:	1d3a      	adds	r2, r7, #4
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <MX_ADC_Init+0x198>)
 800132a:	0011      	movs	r1, r2
 800132c:	0018      	movs	r0, r3
 800132e:	f001 fb89 	bl	8002a44 <HAL_ADC_ConfigChannel>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8001336:	f000 fc83 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	2208      	movs	r2, #8
 800133e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001340:	1d3a      	adds	r2, r7, #4
 8001342:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <MX_ADC_Init+0x198>)
 8001344:	0011      	movs	r1, r2
 8001346:	0018      	movs	r0, r3
 8001348:	f001 fb7c 	bl	8002a44 <HAL_ADC_ConfigChannel>
 800134c:	1e03      	subs	r3, r0, #0
 800134e:	d001      	beq.n	8001354 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 8001350:	f000 fc76 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	2209      	movs	r2, #9
 8001358:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800135a:	1d3a      	adds	r2, r7, #4
 800135c:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <MX_ADC_Init+0x198>)
 800135e:	0011      	movs	r1, r2
 8001360:	0018      	movs	r0, r3
 8001362:	f001 fb6f 	bl	8002a44 <HAL_ADC_ConfigChannel>
 8001366:	1e03      	subs	r3, r0, #0
 8001368:	d001      	beq.n	800136e <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 800136a:	f000 fc69 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800136e:	46c0      	nop			@ (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bd80      	pop	{r7, pc}
 8001376:	46c0      	nop			@ (mov r8, r8)
 8001378:	20000078 	.word	0x20000078
 800137c:	40012400 	.word	0x40012400

08001380 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	@ 0x28
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <MX_CAN_Init+0xc0>)
 8001388:	4a2e      	ldr	r2, [pc, #184]	@ (8001444 <MX_CAN_Init+0xc4>)
 800138a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 800138c:	4b2c      	ldr	r3, [pc, #176]	@ (8001440 <MX_CAN_Init+0xc0>)
 800138e:	2203      	movs	r2, #3
 8001390:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001392:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <MX_CAN_Init+0xc0>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001398:	4b29      	ldr	r3, [pc, #164]	@ (8001440 <MX_CAN_Init+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800139e:	4b28      	ldr	r3, [pc, #160]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013a0:	22c0      	movs	r2, #192	@ 0xc0
 80013a2:	0312      	lsls	r2, r2, #12
 80013a4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013a6:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013a8:	2280      	movs	r2, #128	@ 0x80
 80013aa:	0352      	lsls	r2, r2, #13
 80013ac:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013ae:	4b24      	ldr	r3, [pc, #144]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013b4:	4b22      	ldr	r3, [pc, #136]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013ba:	4b21      	ldr	r3, [pc, #132]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80013c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013c6:	4b1e      	ldr	r3, [pc, #120]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MX_CAN_Init+0xc0>)
 80013d4:	0018      	movs	r0, r3
 80013d6:	f001 fd4b 	bl	8002e70 <HAL_CAN_Init>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d001      	beq.n	80013e2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80013de:	f000 fc2f 	bl	8001c40 <Error_Handler>
//	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
//	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
//	canfilterconfig.FilterIdHigh = 0x1B1 << 5;
//	canfilterconfig.FilterIdLow = 0x3A1 << 5;
//	canfilterconfig.SlaveStartFilterBank = 0;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80013e2:	003b      	movs	r3, r7
 80013e4:	2201      	movs	r2, #1
 80013e6:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 10;
 80013e8:	003b      	movs	r3, r7
 80013ea:	220a      	movs	r2, #10
 80013ec:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013ee:	003b      	movs	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Modo enmascarado
 80013f4:	003b      	movs	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT; // Filtro de 32 bits
 80013fa:	003b      	movs	r3, r7
 80013fc:	2201      	movs	r2, #1
 80013fe:	61da      	str	r2, [r3, #28]

	// Aceptar todos los IDs: ID = 0x00000000, Máscara = 0x00000000
	canfilterconfig.FilterIdHigh = 0x0000;
 8001400:	003b      	movs	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8001406:	003b      	movs	r3, r7
 8001408:	2200      	movs	r2, #0
 800140a:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 800140c:	003b      	movs	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001412:	003b      	movs	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	60da      	str	r2, [r3, #12]

	canfilterconfig.SlaveStartFilterBank = 0;
 8001418:	003b      	movs	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800141e:	003a      	movs	r2, r7
 8001420:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <MX_CAN_Init+0xc0>)
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f001 fe21 	bl	800306c <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800142a:	003a      	movs	r2, r7
 800142c:	4b04      	ldr	r3, [pc, #16]	@ (8001440 <MX_CAN_Init+0xc0>)
 800142e:	0011      	movs	r1, r2
 8001430:	0018      	movs	r0, r3
 8001432:	f001 fe1b 	bl	800306c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b00a      	add	sp, #40	@ 0x28
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			@ (mov r8, r8)
 8001440:	200000fc 	.word	0x200000fc
 8001444:	40006400 	.word	0x40006400

08001448 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_SPI2_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	@ (80014c0 <MX_SPI2_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_SPI2_Init+0x74>)
 8001454:	2282      	movs	r2, #130	@ 0x82
 8001456:	0052      	lsls	r2, r2, #1
 8001458:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_SPI2_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_SPI2_Init+0x74>)
 8001462:	22f0      	movs	r2, #240	@ 0xf0
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001468:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <MX_SPI2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146e:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <MX_SPI2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001474:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_SPI2_Init+0x74>)
 8001476:	2280      	movs	r2, #128	@ 0x80
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_SPI2_Init+0x74>)
 800147e:	2220      	movs	r2, #32
 8001480:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_SPI2_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_SPI2_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <MX_SPI2_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001494:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_SPI2_Init+0x74>)
 8001496:	2207      	movs	r2, #7
 8001498:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <MX_SPI2_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_SPI2_Init+0x74>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <MX_SPI2_Init+0x74>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f003 fc23 	bl	8004cf4 <HAL_SPI_Init>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 fbc5 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000124 	.word	0x20000124
 80014c0:	40003800 	.word	0x40003800

080014c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b092      	sub	sp, #72	@ 0x48
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ca:	2340      	movs	r3, #64	@ 0x40
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	0018      	movs	r0, r3
 80014d0:	2308      	movs	r3, #8
 80014d2:	001a      	movs	r2, r3
 80014d4:	2100      	movs	r1, #0
 80014d6:	f004 ff7f 	bl	80063d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	2324      	movs	r3, #36	@ 0x24
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	0018      	movs	r0, r3
 80014e0:	231c      	movs	r3, #28
 80014e2:	001a      	movs	r2, r3
 80014e4:	2100      	movs	r1, #0
 80014e6:	f004 ff77 	bl	80063d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	0018      	movs	r0, r3
 80014ee:	2320      	movs	r3, #32
 80014f0:	001a      	movs	r2, r3
 80014f2:	2100      	movs	r1, #0
 80014f4:	f004 ff70 	bl	80063d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014f8:	4b38      	ldr	r3, [pc, #224]	@ (80015dc <MX_TIM1_Init+0x118>)
 80014fa:	4a39      	ldr	r2, [pc, #228]	@ (80015e0 <MX_TIM1_Init+0x11c>)
 80014fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 80014fe:	4b37      	ldr	r3, [pc, #220]	@ (80015dc <MX_TIM1_Init+0x118>)
 8001500:	4a38      	ldr	r2, [pc, #224]	@ (80015e4 <MX_TIM1_Init+0x120>)
 8001502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <MX_TIM1_Init+0x118>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000;
 800150a:	4b34      	ldr	r3, [pc, #208]	@ (80015dc <MX_TIM1_Init+0x118>)
 800150c:	4a36      	ldr	r2, [pc, #216]	@ (80015e8 <MX_TIM1_Init+0x124>)
 800150e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <MX_TIM1_Init+0x118>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001516:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <MX_TIM1_Init+0x118>)
 8001518:	2200      	movs	r2, #0
 800151a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151c:	4b2f      	ldr	r3, [pc, #188]	@ (80015dc <MX_TIM1_Init+0x118>)
 800151e:	2200      	movs	r2, #0
 8001520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001522:	4b2e      	ldr	r3, [pc, #184]	@ (80015dc <MX_TIM1_Init+0x118>)
 8001524:	0018      	movs	r0, r3
 8001526:	f004 f891 	bl	800564c <HAL_TIM_OC_Init>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800152e:	f000 fb87 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2140      	movs	r1, #64	@ 0x40
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2200      	movs	r2, #0
 800153e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001540:	187a      	adds	r2, r7, r1
 8001542:	4b26      	ldr	r3, [pc, #152]	@ (80015dc <MX_TIM1_Init+0x118>)
 8001544:	0011      	movs	r1, r2
 8001546:	0018      	movs	r0, r3
 8001548:	f004 fe80 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	1e03      	subs	r3, r0, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001550:	f000 fb76 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001554:	2124      	movs	r1, #36	@ 0x24
 8001556:	187b      	adds	r3, r7, r1
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800155c:	187b      	adds	r3, r7, r1
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001562:	187b      	adds	r3, r7, r1
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001568:	187b      	adds	r3, r7, r1
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156e:	187b      	adds	r3, r7, r1
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001574:	187b      	adds	r3, r7, r1
 8001576:	2200      	movs	r2, #0
 8001578:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800157a:	187b      	adds	r3, r7, r1
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001580:	1879      	adds	r1, r7, r1
 8001582:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <MX_TIM1_Init+0x118>)
 8001584:	2200      	movs	r2, #0
 8001586:	0018      	movs	r0, r3
 8001588:	f004 fa9a 	bl	8005ac0 <HAL_TIM_OC_ConfigChannel>
 800158c:	1e03      	subs	r3, r0, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8001590:	f000 fb56 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2280      	movs	r2, #128	@ 0x80
 80015b6:	0192      	lsls	r2, r2, #6
 80015b8:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2200      	movs	r2, #0
 80015be:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015c0:	1d3a      	adds	r2, r7, #4
 80015c2:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_TIM1_Init+0x118>)
 80015c4:	0011      	movs	r1, r2
 80015c6:	0018      	movs	r0, r3
 80015c8:	f004 fe98 	bl	80062fc <HAL_TIMEx_ConfigBreakDeadTime>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015d0:	f000 fb36 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015d4:	46c0      	nop			@ (mov r8, r8)
 80015d6:	46bd      	mov	sp, r7
 80015d8:	b012      	add	sp, #72	@ 0x48
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000188 	.word	0x20000188
 80015e0:	40012c00 	.word	0x40012c00
 80015e4:	000003e7 	.word	0x000003e7
 80015e8:	0000bb80 	.word	0x0000bb80

080015ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b08a      	sub	sp, #40	@ 0x28
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f2:	2320      	movs	r3, #32
 80015f4:	18fb      	adds	r3, r7, r3
 80015f6:	0018      	movs	r0, r3
 80015f8:	2308      	movs	r3, #8
 80015fa:	001a      	movs	r2, r3
 80015fc:	2100      	movs	r1, #0
 80015fe:	f004 feeb 	bl	80063d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	0018      	movs	r0, r3
 8001606:	231c      	movs	r3, #28
 8001608:	001a      	movs	r2, r3
 800160a:	2100      	movs	r1, #0
 800160c:	f004 fee4 	bl	80063d8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001610:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <MX_TIM2_Init+0xd0>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	05d2      	lsls	r2, r2, #23
 8001616:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 959;
 8001618:	4b28      	ldr	r3, [pc, #160]	@ (80016bc <MX_TIM2_Init+0xd0>)
 800161a:	4a29      	ldr	r2, [pc, #164]	@ (80016c0 <MX_TIM2_Init+0xd4>)
 800161c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b27      	ldr	r3, [pc, #156]	@ (80016bc <MX_TIM2_Init+0xd0>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001624:	4b25      	ldr	r3, [pc, #148]	@ (80016bc <MX_TIM2_Init+0xd0>)
 8001626:	22fa      	movs	r2, #250	@ 0xfa
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b23      	ldr	r3, [pc, #140]	@ (80016bc <MX_TIM2_Init+0xd0>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b22      	ldr	r3, [pc, #136]	@ (80016bc <MX_TIM2_Init+0xd0>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001638:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <MX_TIM2_Init+0xd0>)
 800163a:	0018      	movs	r0, r3
 800163c:	f004 f856 	bl	80056ec <HAL_TIM_PWM_Init>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001644:	f000 fafc 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2120      	movs	r1, #32
 800164a:	187b      	adds	r3, r7, r1
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	187b      	adds	r3, r7, r1
 8001652:	2200      	movs	r2, #0
 8001654:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001656:	187a      	adds	r2, r7, r1
 8001658:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <MX_TIM2_Init+0xd0>)
 800165a:	0011      	movs	r1, r2
 800165c:	0018      	movs	r0, r3
 800165e:	f004 fdf5 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d001      	beq.n	800166a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001666:	f000 faeb 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2260      	movs	r2, #96	@ 0x60
 800166e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2200      	movs	r2, #0
 8001674:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167c:	1d3b      	adds	r3, r7, #4
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001682:	1d39      	adds	r1, r7, #4
 8001684:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <MX_TIM2_Init+0xd0>)
 8001686:	2208      	movs	r2, #8
 8001688:	0018      	movs	r0, r3
 800168a:	f004 fa71 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001692:	f000 fad5 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001696:	1d39      	adds	r1, r7, #4
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <MX_TIM2_Init+0xd0>)
 800169a:	220c      	movs	r2, #12
 800169c:	0018      	movs	r0, r3
 800169e:	f004 fa67 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 80016a2:	1e03      	subs	r3, r0, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80016a6:	f000 facb 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016aa:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <MX_TIM2_Init+0xd0>)
 80016ac:	0018      	movs	r0, r3
 80016ae:	f000 fce1 	bl	8002074 <HAL_TIM_MspPostInit>

}
 80016b2:	46c0      	nop			@ (mov r8, r8)
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b00a      	add	sp, #40	@ 0x28
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	200001d0 	.word	0x200001d0
 80016c0:	000003bf 	.word	0x000003bf

080016c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08a      	sub	sp, #40	@ 0x28
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ca:	2320      	movs	r3, #32
 80016cc:	18fb      	adds	r3, r7, r3
 80016ce:	0018      	movs	r0, r3
 80016d0:	2308      	movs	r3, #8
 80016d2:	001a      	movs	r2, r3
 80016d4:	2100      	movs	r1, #0
 80016d6:	f004 fe7f 	bl	80063d8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	0018      	movs	r0, r3
 80016de:	231c      	movs	r3, #28
 80016e0:	001a      	movs	r2, r3
 80016e2:	2100      	movs	r1, #0
 80016e4:	f004 fe78 	bl	80063d8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016e8:	4b29      	ldr	r3, [pc, #164]	@ (8001790 <MX_TIM3_Init+0xcc>)
 80016ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001794 <MX_TIM3_Init+0xd0>)
 80016ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 959;
 80016ee:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <MX_TIM3_Init+0xcc>)
 80016f0:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <MX_TIM3_Init+0xd4>)
 80016f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f4:	4b26      	ldr	r3, [pc, #152]	@ (8001790 <MX_TIM3_Init+0xcc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80016fa:	4b25      	ldr	r3, [pc, #148]	@ (8001790 <MX_TIM3_Init+0xcc>)
 80016fc:	22fa      	movs	r2, #250	@ 0xfa
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001702:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <MX_TIM3_Init+0xcc>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <MX_TIM3_Init+0xcc>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800170e:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <MX_TIM3_Init+0xcc>)
 8001710:	0018      	movs	r0, r3
 8001712:	f003 ffeb 	bl	80056ec <HAL_TIM_PWM_Init>
 8001716:	1e03      	subs	r3, r0, #0
 8001718:	d001      	beq.n	800171e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800171a:	f000 fa91 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2120      	movs	r1, #32
 8001720:	187b      	adds	r3, r7, r1
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001726:	187b      	adds	r3, r7, r1
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800172c:	187a      	adds	r2, r7, r1
 800172e:	4b18      	ldr	r3, [pc, #96]	@ (8001790 <MX_TIM3_Init+0xcc>)
 8001730:	0011      	movs	r1, r2
 8001732:	0018      	movs	r0, r3
 8001734:	f004 fd8a 	bl	800624c <HAL_TIMEx_MasterConfigSynchronization>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800173c:	f000 fa80 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2260      	movs	r2, #96	@ 0x60
 8001744:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001758:	1d39      	adds	r1, r7, #4
 800175a:	4b0d      	ldr	r3, [pc, #52]	@ (8001790 <MX_TIM3_Init+0xcc>)
 800175c:	2200      	movs	r2, #0
 800175e:	0018      	movs	r0, r3
 8001760:	f004 fa06 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001768:	f000 fa6a 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800176c:	1d39      	adds	r1, r7, #4
 800176e:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <MX_TIM3_Init+0xcc>)
 8001770:	2204      	movs	r2, #4
 8001772:	0018      	movs	r0, r3
 8001774:	f004 f9fc 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 800177c:	f000 fa60 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <MX_TIM3_Init+0xcc>)
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fc76 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001788:	46c0      	nop			@ (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b00a      	add	sp, #40	@ 0x28
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20000218 	.word	0x20000218
 8001794:	40000400 	.word	0x40000400
 8001798:	000003bf 	.word	0x000003bf

0800179c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	0018      	movs	r0, r3
 80017a6:	231c      	movs	r3, #28
 80017a8:	001a      	movs	r2, r3
 80017aa:	2100      	movs	r1, #0
 80017ac:	f004 fe14 	bl	80063d8 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <MX_TIM14_Init+0x90>)
 80017b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001830 <MX_TIM14_Init+0x94>)
 80017b4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4000;
 80017b6:	4b1d      	ldr	r3, [pc, #116]	@ (800182c <MX_TIM14_Init+0x90>)
 80017b8:	22fa      	movs	r2, #250	@ 0xfa
 80017ba:	0112      	lsls	r2, r2, #4
 80017bc:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <MX_TIM14_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 48000;
 80017c4:	4b19      	ldr	r3, [pc, #100]	@ (800182c <MX_TIM14_Init+0x90>)
 80017c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <MX_TIM14_Init+0x98>)
 80017c8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <MX_TIM14_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <MX_TIM14_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <MX_TIM14_Init+0x90>)
 80017d8:	0018      	movs	r0, r3
 80017da:	f003 fe9b 	bl	8005514 <HAL_TIM_Base_Init>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 80017e2:	f000 fa2d 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 80017e6:	4b11      	ldr	r3, [pc, #68]	@ (800182c <MX_TIM14_Init+0x90>)
 80017e8:	0018      	movs	r0, r3
 80017ea:	f003 ff2f 	bl	800564c <HAL_TIM_OC_Init>
 80017ee:	1e03      	subs	r3, r0, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 80017f2:	f000 fa25 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80017f6:	1d3b      	adds	r3, r7, #4
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2200      	movs	r2, #0
 8001800:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	1d3b      	adds	r3, r7, #4
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800180e:	1d39      	adds	r1, r7, #4
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <MX_TIM14_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	0018      	movs	r0, r3
 8001816:	f004 f953 	bl	8005ac0 <HAL_TIM_OC_ConfigChannel>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800181e:	f000 fa0f 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001822:	46c0      	nop			@ (mov r8, r8)
 8001824:	46bd      	mov	sp, r7
 8001826:	b008      	add	sp, #32
 8001828:	bd80      	pop	{r7, pc}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	20000260 	.word	0x20000260
 8001830:	40002000 	.word	0x40002000
 8001834:	0000bb80 	.word	0x0000bb80

08001838 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b090      	sub	sp, #64	@ 0x40
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800183e:	2324      	movs	r3, #36	@ 0x24
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	0018      	movs	r0, r3
 8001844:	231c      	movs	r3, #28
 8001846:	001a      	movs	r2, r3
 8001848:	2100      	movs	r1, #0
 800184a:	f004 fdc5 	bl	80063d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800184e:	1d3b      	adds	r3, r7, #4
 8001850:	0018      	movs	r0, r3
 8001852:	2320      	movs	r3, #32
 8001854:	001a      	movs	r2, r3
 8001856:	2100      	movs	r1, #0
 8001858:	f004 fdbe 	bl	80063d8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800185c:	4b36      	ldr	r3, [pc, #216]	@ (8001938 <MX_TIM16_Init+0x100>)
 800185e:	4a37      	ldr	r2, [pc, #220]	@ (800193c <MX_TIM16_Init+0x104>)
 8001860:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3170;
 8001862:	4b35      	ldr	r3, [pc, #212]	@ (8001938 <MX_TIM16_Init+0x100>)
 8001864:	4a36      	ldr	r2, [pc, #216]	@ (8001940 <MX_TIM16_Init+0x108>)
 8001866:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b33      	ldr	r3, [pc, #204]	@ (8001938 <MX_TIM16_Init+0x100>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800186e:	4b32      	ldr	r3, [pc, #200]	@ (8001938 <MX_TIM16_Init+0x100>)
 8001870:	2264      	movs	r2, #100	@ 0x64
 8001872:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b30      	ldr	r3, [pc, #192]	@ (8001938 <MX_TIM16_Init+0x100>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800187a:	4b2f      	ldr	r3, [pc, #188]	@ (8001938 <MX_TIM16_Init+0x100>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b2d      	ldr	r3, [pc, #180]	@ (8001938 <MX_TIM16_Init+0x100>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001886:	4b2c      	ldr	r3, [pc, #176]	@ (8001938 <MX_TIM16_Init+0x100>)
 8001888:	0018      	movs	r0, r3
 800188a:	f003 fe43 	bl	8005514 <HAL_TIM_Base_Init>
 800188e:	1e03      	subs	r3, r0, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001892:	f000 f9d5 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001896:	4b28      	ldr	r3, [pc, #160]	@ (8001938 <MX_TIM16_Init+0x100>)
 8001898:	0018      	movs	r0, r3
 800189a:	f003 ff27 	bl	80056ec <HAL_TIM_PWM_Init>
 800189e:	1e03      	subs	r3, r0, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 f9cd 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2124      	movs	r1, #36	@ 0x24
 80018a8:	187b      	adds	r3, r7, r1
 80018aa:	2260      	movs	r2, #96	@ 0x60
 80018ac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80018ae:	187b      	adds	r3, r7, r1
 80018b0:	2200      	movs	r2, #0
 80018b2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b4:	187b      	adds	r3, r7, r1
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ba:	187b      	adds	r3, r7, r1
 80018bc:	2200      	movs	r2, #0
 80018be:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c0:	187b      	adds	r3, r7, r1
 80018c2:	2200      	movs	r2, #0
 80018c4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018c6:	187b      	adds	r3, r7, r1
 80018c8:	2200      	movs	r2, #0
 80018ca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	2200      	movs	r2, #0
 80018d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d2:	1879      	adds	r1, r7, r1
 80018d4:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_TIM16_Init+0x100>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	0018      	movs	r0, r3
 80018da:	f004 f949 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 80018de:	1e03      	subs	r3, r0, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80018e2:	f000 f9ad 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018e6:	1d3b      	adds	r3, r7, #4
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018ec:	1d3b      	adds	r3, r7, #4
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001904:	1d3b      	adds	r3, r7, #4
 8001906:	2280      	movs	r2, #128	@ 0x80
 8001908:	0192      	lsls	r2, r2, #6
 800190a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001912:	1d3a      	adds	r2, r7, #4
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <MX_TIM16_Init+0x100>)
 8001916:	0011      	movs	r1, r2
 8001918:	0018      	movs	r0, r3
 800191a:	f004 fcef 	bl	80062fc <HAL_TIMEx_ConfigBreakDeadTime>
 800191e:	1e03      	subs	r3, r0, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8001922:	f000 f98d 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001926:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <MX_TIM16_Init+0x100>)
 8001928:	0018      	movs	r0, r3
 800192a:	f000 fba3 	bl	8002074 <HAL_TIM_MspPostInit>

}
 800192e:	46c0      	nop			@ (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b010      	add	sp, #64	@ 0x40
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			@ (mov r8, r8)
 8001938:	200002a8 	.word	0x200002a8
 800193c:	40014400 	.word	0x40014400
 8001940:	00000c62 	.word	0x00000c62

08001944 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b090      	sub	sp, #64	@ 0x40
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800194a:	2324      	movs	r3, #36	@ 0x24
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	0018      	movs	r0, r3
 8001950:	231c      	movs	r3, #28
 8001952:	001a      	movs	r2, r3
 8001954:	2100      	movs	r1, #0
 8001956:	f004 fd3f 	bl	80063d8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	0018      	movs	r0, r3
 800195e:	2320      	movs	r3, #32
 8001960:	001a      	movs	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	f004 fd38 	bl	80063d8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001968:	4b36      	ldr	r3, [pc, #216]	@ (8001a44 <MX_TIM17_Init+0x100>)
 800196a:	4a37      	ldr	r2, [pc, #220]	@ (8001a48 <MX_TIM17_Init+0x104>)
 800196c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3170;
 800196e:	4b35      	ldr	r3, [pc, #212]	@ (8001a44 <MX_TIM17_Init+0x100>)
 8001970:	4a36      	ldr	r2, [pc, #216]	@ (8001a4c <MX_TIM17_Init+0x108>)
 8001972:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b33      	ldr	r3, [pc, #204]	@ (8001a44 <MX_TIM17_Init+0x100>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 800197a:	4b32      	ldr	r3, [pc, #200]	@ (8001a44 <MX_TIM17_Init+0x100>)
 800197c:	2264      	movs	r2, #100	@ 0x64
 800197e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <MX_TIM17_Init+0x100>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001986:	4b2f      	ldr	r3, [pc, #188]	@ (8001a44 <MX_TIM17_Init+0x100>)
 8001988:	2200      	movs	r2, #0
 800198a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a44 <MX_TIM17_Init+0x100>)
 800198e:	2200      	movs	r2, #0
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001992:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <MX_TIM17_Init+0x100>)
 8001994:	0018      	movs	r0, r3
 8001996:	f003 fdbd 	bl	8005514 <HAL_TIM_Base_Init>
 800199a:	1e03      	subs	r3, r0, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800199e:	f000 f94f 	bl	8001c40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <MX_TIM17_Init+0x100>)
 80019a4:	0018      	movs	r0, r3
 80019a6:	f003 fea1 	bl	80056ec <HAL_TIM_PWM_Init>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d001      	beq.n	80019b2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80019ae:	f000 f947 	bl	8001c40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b2:	2124      	movs	r1, #36	@ 0x24
 80019b4:	187b      	adds	r3, r7, r1
 80019b6:	2260      	movs	r2, #96	@ 0x60
 80019b8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80019ba:	187b      	adds	r3, r7, r1
 80019bc:	2200      	movs	r2, #0
 80019be:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c0:	187b      	adds	r3, r7, r1
 80019c2:	2200      	movs	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019c6:	187b      	adds	r3, r7, r1
 80019c8:	2200      	movs	r2, #0
 80019ca:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019de:	1879      	adds	r1, r7, r1
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <MX_TIM17_Init+0x100>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	0018      	movs	r0, r3
 80019e6:	f004 f8c3 	bl	8005b70 <HAL_TIM_PWM_ConfigChannel>
 80019ea:	1e03      	subs	r3, r0, #0
 80019ec:	d001      	beq.n	80019f2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80019ee:	f000 f927 	bl	8001c40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019f2:	1d3b      	adds	r3, r7, #4
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019f8:	1d3b      	adds	r3, r7, #4
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a04:	1d3b      	adds	r3, r7, #4
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	2280      	movs	r2, #128	@ 0x80
 8001a14:	0192      	lsls	r2, r2, #6
 8001a16:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001a1e:	1d3a      	adds	r2, r7, #4
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <MX_TIM17_Init+0x100>)
 8001a22:	0011      	movs	r1, r2
 8001a24:	0018      	movs	r0, r3
 8001a26:	f004 fc69 	bl	80062fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8001a2e:	f000 f907 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001a32:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <MX_TIM17_Init+0x100>)
 8001a34:	0018      	movs	r0, r3
 8001a36:	f000 fb1d 	bl	8002074 <HAL_TIM_MspPostInit>

}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b010      	add	sp, #64	@ 0x40
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	200002f0 	.word	0x200002f0
 8001a48:	40014800 	.word	0x40014800
 8001a4c:	00000c62 	.word	0x00000c62

08001a50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a56:	4b0c      	ldr	r3, [pc, #48]	@ (8001a88 <MX_DMA_Init+0x38>)
 8001a58:	695a      	ldr	r2, [r3, #20]
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <MX_DMA_Init+0x38>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	615a      	str	r2, [r3, #20]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <MX_DMA_Init+0x38>)
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2201      	movs	r2, #1
 8001a68:	4013      	ands	r3, r2
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2100      	movs	r1, #0
 8001a72:	2009      	movs	r0, #9
 8001a74:	f002 f91a 	bl	8003cac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a78:	2009      	movs	r0, #9
 8001a7a:	f002 f92c 	bl	8003cd6 <HAL_NVIC_EnableIRQ>

}
 8001a7e:	46c0      	nop			@ (mov r8, r8)
 8001a80:	46bd      	mov	sp, r7
 8001a82:	b002      	add	sp, #8
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	40021000 	.word	0x40021000

08001a8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b08b      	sub	sp, #44	@ 0x2c
 8001a90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a92:	2414      	movs	r4, #20
 8001a94:	193b      	adds	r3, r7, r4
 8001a96:	0018      	movs	r0, r3
 8001a98:	2314      	movs	r3, #20
 8001a9a:	001a      	movs	r2, r3
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f004 fc9b 	bl	80063d8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	4b45      	ldr	r3, [pc, #276]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	4b44      	ldr	r3, [pc, #272]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001aa8:	2180      	movs	r1, #128	@ 0x80
 8001aaa:	0309      	lsls	r1, r1, #12
 8001aac:	430a      	orrs	r2, r1
 8001aae:	615a      	str	r2, [r3, #20]
 8001ab0:	4b41      	ldr	r3, [pc, #260]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001ab2:	695a      	ldr	r2, [r3, #20]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	031b      	lsls	r3, r3, #12
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001abe:	4b3e      	ldr	r3, [pc, #248]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001ac4:	2180      	movs	r1, #128	@ 0x80
 8001ac6:	03c9      	lsls	r1, r1, #15
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	03db      	lsls	r3, r3, #15
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b37      	ldr	r3, [pc, #220]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	4b36      	ldr	r3, [pc, #216]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	0289      	lsls	r1, r1, #10
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	615a      	str	r2, [r3, #20]
 8001ae8:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	029b      	lsls	r3, r3, #10
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b30      	ldr	r3, [pc, #192]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	02c9      	lsls	r1, r1, #11
 8001b00:	430a      	orrs	r2, r1
 8001b02:	615a      	str	r2, [r3, #20]
 8001b04:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb8 <MX_GPIO_Init+0x12c>)
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	02db      	lsls	r3, r3, #11
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, GPIO_PIN_RESET);
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	019b      	lsls	r3, r3, #6
 8001b16:	4829      	ldr	r0, [pc, #164]	@ (8001bbc <MX_GPIO_Init+0x130>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	0019      	movs	r1, r3
 8001b1c:	f002 fbf8 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V12_NP_Signal_Pin|CS_PIN_Pin|F1R_Signal_Pin|F2L_Signal_Pin
 8001b20:	4927      	ldr	r1, [pc, #156]	@ (8001bc0 <MX_GPIO_Init+0x134>)
 8001b22:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <MX_GPIO_Init+0x138>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	0018      	movs	r0, r3
 8001b28:	f002 fbf2 	bl	8004310 <HAL_GPIO_WritePin>
                          |F1L_Signal_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin, GPIO_PIN_RESET);
 8001b2c:	2387      	movs	r3, #135	@ 0x87
 8001b2e:	0219      	lsls	r1, r3, #8
 8001b30:	2390      	movs	r3, #144	@ 0x90
 8001b32:	05db      	lsls	r3, r3, #23
 8001b34:	2200      	movs	r2, #0
 8001b36:	0018      	movs	r0, r3
 8001b38:	f002 fbea 	bl	8004310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ecu_Signal_Pin */
  GPIO_InitStruct.Pin = Ecu_Signal_Pin;
 8001b3c:	193b      	adds	r3, r7, r4
 8001b3e:	2280      	movs	r2, #128	@ 0x80
 8001b40:	0192      	lsls	r2, r2, #6
 8001b42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	193b      	adds	r3, r7, r4
 8001b46:	2201      	movs	r2, #1
 8001b48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ecu_Signal_GPIO_Port, &GPIO_InitStruct);
 8001b56:	193b      	adds	r3, r7, r4
 8001b58:	4a18      	ldr	r2, [pc, #96]	@ (8001bbc <MX_GPIO_Init+0x130>)
 8001b5a:	0019      	movs	r1, r3
 8001b5c:	0010      	movs	r0, r2
 8001b5e:	f002 fa6f 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : V12_NP_Signal_Pin CS_PIN_Pin F1R_Signal_Pin F2L_Signal_Pin
                           F1L_Signal_Pin */
  GPIO_InitStruct.Pin = V12_NP_Signal_Pin|CS_PIN_Pin|F1R_Signal_Pin|F2L_Signal_Pin
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	4a16      	ldr	r2, [pc, #88]	@ (8001bc0 <MX_GPIO_Init+0x134>)
 8001b66:	601a      	str	r2, [r3, #0]
                          |F1L_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	193b      	adds	r3, r7, r4
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	193b      	adds	r3, r7, r4
 8001b7c:	4a11      	ldr	r2, [pc, #68]	@ (8001bc4 <MX_GPIO_Init+0x138>)
 8001b7e:	0019      	movs	r1, r3
 8001b80:	0010      	movs	r0, r2
 8001b82:	f002 fa5d 	bl	8004040 <HAL_GPIO_Init>

  /*Configure GPIO pins : WPR_Signal_Pin WPL_Signal_Pin Reset_Pin F2R_Signal_Pin */
  GPIO_InitStruct.Pin = WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin;
 8001b86:	0021      	movs	r1, r4
 8001b88:	187b      	adds	r3, r7, r1
 8001b8a:	2287      	movs	r2, #135	@ 0x87
 8001b8c:	0212      	lsls	r2, r2, #8
 8001b8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	187b      	adds	r3, r7, r1
 8001b92:	2201      	movs	r2, #1
 8001b94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	187b      	adds	r3, r7, r1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	187b      	adds	r3, r7, r1
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba2:	187a      	adds	r2, r7, r1
 8001ba4:	2390      	movs	r3, #144	@ 0x90
 8001ba6:	05db      	lsls	r3, r3, #23
 8001ba8:	0011      	movs	r1, r2
 8001baa:	0018      	movs	r0, r3
 8001bac:	f002 fa48 	bl	8004040 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bb0:	46c0      	nop			@ (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	b00b      	add	sp, #44	@ 0x2c
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	48000800 	.word	0x48000800
 8001bc0:	000010cc 	.word	0x000010cc
 8001bc4:	48000400 	.word	0x48000400

08001bc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a12      	ldr	r2, [pc, #72]	@ (8001c20 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d112      	bne.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0x38>
		send = 1;
 8001bda:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
		heartbeatFlag = heartbeatFlag+1;
 8001be0:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001bea:	701a      	strb	r2, [r3, #0]
		if(canResetEcuFlag == 1){
 8001bec:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d105      	bne.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0x38>
			resetCounter = resetCounter+1;
 8001bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001bfe:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Instance == TIM14) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0b      	ldr	r2, [pc, #44]	@ (8001c34 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d105      	bne.n	8001c16 <HAL_TIM_PeriodElapsedCallback+0x4e>
			pwmStartFlag = 1;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c38 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
			escReadyFlag = 1;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
		}
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			@ (mov r8, r8)
 8001c20:	40012c00 	.word	0x40012c00
 8001c24:	2000063a 	.word	0x2000063a
 8001c28:	2000063b 	.word	0x2000063b
 8001c2c:	20000634 	.word	0x20000634
 8001c30:	20000635 	.word	0x20000635
 8001c34:	40002000 	.word	0x40002000
 8001c38:	20000487 	.word	0x20000487
 8001c3c:	20000488 	.word	0x20000488

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c48:	46c0      	nop			@ (mov r8, r8)
 8001c4a:	e7fd      	b.n	8001c48 <Error_Handler+0x8>

08001c4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c54:	699a      	ldr	r2, [r3, #24]
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c58:	2101      	movs	r1, #1
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	619a      	str	r2, [r3, #24]
 8001c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4013      	ands	r3, r2
 8001c66:	607b      	str	r3, [r7, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c6c:	69da      	ldr	r2, [r3, #28]
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c70:	2180      	movs	r1, #128	@ 0x80
 8001c72:	0549      	lsls	r1, r1, #21
 8001c74:	430a      	orrs	r2, r1
 8001c76:	61da      	str	r2, [r3, #28]
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_MspInit+0x44>)
 8001c7a:	69da      	ldr	r2, [r3, #28]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	055b      	lsls	r3, r3, #21
 8001c80:	4013      	ands	r3, r2
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	46c0      	nop			@ (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	46c0      	nop			@ (mov r8, r8)
 8001c90:	40021000 	.word	0x40021000

08001c94 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b08b      	sub	sp, #44	@ 0x2c
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	2414      	movs	r4, #20
 8001c9e:	193b      	adds	r3, r7, r4
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	2314      	movs	r3, #20
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	f004 fb96 	bl	80063d8 <memset>
  if(hadc->Instance==ADC1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a3f      	ldr	r2, [pc, #252]	@ (8001db0 <HAL_ADC_MspInit+0x11c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d178      	bne.n	8001da8 <HAL_ADC_MspInit+0x114>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001cb8:	699a      	ldr	r2, [r3, #24]
 8001cba:	4b3e      	ldr	r3, [pc, #248]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0089      	lsls	r1, r1, #2
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	619a      	str	r2, [r3, #24]
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001cc6:	699a      	ldr	r2, [r3, #24]
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b38      	ldr	r3, [pc, #224]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	4b37      	ldr	r3, [pc, #220]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001cd8:	2180      	movs	r1, #128	@ 0x80
 8001cda:	0289      	lsls	r1, r1, #10
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	615a      	str	r2, [r3, #20]
 8001ce0:	4b34      	ldr	r3, [pc, #208]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	2380      	movs	r3, #128	@ 0x80
 8001ce6:	029b      	lsls	r3, r3, #10
 8001ce8:	4013      	ands	r3, r2
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b31      	ldr	r3, [pc, #196]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	4b30      	ldr	r3, [pc, #192]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001cf4:	2180      	movs	r1, #128	@ 0x80
 8001cf6:	02c9      	lsls	r1, r1, #11
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	615a      	str	r2, [r3, #20]
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001db4 <HAL_ADC_MspInit+0x120>)
 8001cfe:	695a      	ldr	r2, [r3, #20]
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	02db      	lsls	r3, r3, #11
 8001d04:	4013      	ands	r3, r2
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Altrnator_Sens_Pin|WPL_Sens_Pin|WPR_Sens_Pin|F1R_Sens_Pin
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	22ff      	movs	r2, #255	@ 0xff
 8001d0e:	601a      	str	r2, [r3, #0]
                          |F2R_Sens_Pin|F1L_Sens_Pin|F2L_Sens_Pin|V12_NP_Sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d10:	193b      	adds	r3, r7, r4
 8001d12:	2203      	movs	r2, #3
 8001d14:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	193b      	adds	r3, r7, r4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	193a      	adds	r2, r7, r4
 8001d1e:	2390      	movs	r3, #144	@ 0x90
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	0011      	movs	r1, r2
 8001d24:	0018      	movs	r0, r3
 8001d26:	f002 f98b 	bl	8004040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V12_P_Sens_Pin|Temp_Sens_Pin;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	2203      	movs	r2, #3
 8001d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	2203      	movs	r2, #3
 8001d34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001db8 <HAL_ADC_MspInit+0x124>)
 8001d40:	0019      	movs	r1, r3
 8001d42:	0010      	movs	r0, r2
 8001d44:	f002 f97c 	bl	8004040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_ADC_MspInit+0x12c>)
 8001d4c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001d5a:	4b18      	ldr	r3, [pc, #96]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d5c:	2280      	movs	r2, #128	@ 0x80
 8001d5e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d60:	4b16      	ldr	r3, [pc, #88]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d62:	2280      	movs	r2, #128	@ 0x80
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d6a:	2280      	movs	r2, #128	@ 0x80
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d72:	2220      	movs	r2, #32
 8001d74:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b11      	ldr	r3, [pc, #68]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f001 ffc6 	bl	8003d10 <HAL_DMA_Init>
 8001d84:	1e03      	subs	r3, r0, #0
 8001d86:	d001      	beq.n	8001d8c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001d88:	f7ff ff5a 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a0b      	ldr	r2, [pc, #44]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d90:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_ADC_MspInit+0x128>)
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	625a      	str	r2, [r3, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	200c      	movs	r0, #12
 8001d9e:	f001 ff85 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001da2:	200c      	movs	r0, #12
 8001da4:	f001 ff97 	bl	8003cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001da8:	46c0      	nop			@ (mov r8, r8)
 8001daa:	46bd      	mov	sp, r7
 8001dac:	b00b      	add	sp, #44	@ 0x2c
 8001dae:	bd90      	pop	{r4, r7, pc}
 8001db0:	40012400 	.word	0x40012400
 8001db4:	40021000 	.word	0x40021000
 8001db8:	48000400 	.word	0x48000400
 8001dbc:	200000b8 	.word	0x200000b8
 8001dc0:	40020008 	.word	0x40020008

08001dc4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b08b      	sub	sp, #44	@ 0x2c
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	2414      	movs	r4, #20
 8001dce:	193b      	adds	r3, r7, r4
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	2314      	movs	r3, #20
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	f004 fafe 	bl	80063d8 <memset>
  if(hcan->Instance==CAN)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a21      	ldr	r2, [pc, #132]	@ (8001e68 <HAL_CAN_MspInit+0xa4>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d13b      	bne.n	8001e5e <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001de6:	4b21      	ldr	r3, [pc, #132]	@ (8001e6c <HAL_CAN_MspInit+0xa8>)
 8001de8:	69da      	ldr	r2, [r3, #28]
 8001dea:	4b20      	ldr	r3, [pc, #128]	@ (8001e6c <HAL_CAN_MspInit+0xa8>)
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0489      	lsls	r1, r1, #18
 8001df0:	430a      	orrs	r2, r1
 8001df2:	61da      	str	r2, [r3, #28]
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <HAL_CAN_MspInit+0xa8>)
 8001df6:	69da      	ldr	r2, [r3, #28]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	049b      	lsls	r3, r3, #18
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
 8001e00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b1a      	ldr	r3, [pc, #104]	@ (8001e6c <HAL_CAN_MspInit+0xa8>)
 8001e04:	695a      	ldr	r2, [r3, #20]
 8001e06:	4b19      	ldr	r3, [pc, #100]	@ (8001e6c <HAL_CAN_MspInit+0xa8>)
 8001e08:	2180      	movs	r1, #128	@ 0x80
 8001e0a:	0289      	lsls	r1, r1, #10
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	615a      	str	r2, [r3, #20]
 8001e10:	4b16      	ldr	r3, [pc, #88]	@ (8001e6c <HAL_CAN_MspInit+0xa8>)
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	2380      	movs	r3, #128	@ 0x80
 8001e16:	029b      	lsls	r3, r3, #10
 8001e18:	4013      	ands	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e1e:	193b      	adds	r3, r7, r4
 8001e20:	22c0      	movs	r2, #192	@ 0xc0
 8001e22:	0152      	lsls	r2, r2, #5
 8001e24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	0021      	movs	r1, r4
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	187b      	adds	r3, r7, r1
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	2203      	movs	r2, #3
 8001e38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	187a      	adds	r2, r7, r1
 8001e42:	2390      	movs	r3, #144	@ 0x90
 8001e44:	05db      	lsls	r3, r3, #23
 8001e46:	0011      	movs	r1, r2
 8001e48:	0018      	movs	r0, r3
 8001e4a:	f002 f8f9 	bl	8004040 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	201e      	movs	r0, #30
 8001e54:	f001 ff2a 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001e58:	201e      	movs	r0, #30
 8001e5a:	f001 ff3c 	bl	8003cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001e5e:	46c0      	nop			@ (mov r8, r8)
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b00b      	add	sp, #44	@ 0x2c
 8001e64:	bd90      	pop	{r4, r7, pc}
 8001e66:	46c0      	nop			@ (mov r8, r8)
 8001e68:	40006400 	.word	0x40006400
 8001e6c:	40021000 	.word	0x40021000

08001e70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b08b      	sub	sp, #44	@ 0x2c
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e78:	2414      	movs	r4, #20
 8001e7a:	193b      	adds	r3, r7, r4
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	2314      	movs	r3, #20
 8001e80:	001a      	movs	r2, r3
 8001e82:	2100      	movs	r1, #0
 8001e84:	f004 faa8 	bl	80063d8 <memset>
  if(hspi->Instance==SPI2)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f00 <HAL_SPI_MspInit+0x90>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d132      	bne.n	8001ef8 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e92:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <HAL_SPI_MspInit+0x94>)
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	4b1b      	ldr	r3, [pc, #108]	@ (8001f04 <HAL_SPI_MspInit+0x94>)
 8001e98:	2180      	movs	r1, #128	@ 0x80
 8001e9a:	01c9      	lsls	r1, r1, #7
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	61da      	str	r2, [r3, #28]
 8001ea0:	4b18      	ldr	r3, [pc, #96]	@ (8001f04 <HAL_SPI_MspInit+0x94>)
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	2380      	movs	r3, #128	@ 0x80
 8001ea6:	01db      	lsls	r3, r3, #7
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <HAL_SPI_MspInit+0x94>)
 8001eb0:	695a      	ldr	r2, [r3, #20]
 8001eb2:	4b14      	ldr	r3, [pc, #80]	@ (8001f04 <HAL_SPI_MspInit+0x94>)
 8001eb4:	2180      	movs	r1, #128	@ 0x80
 8001eb6:	02c9      	lsls	r1, r1, #11
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	615a      	str	r2, [r3, #20]
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <HAL_SPI_MspInit+0x94>)
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	02db      	lsls	r3, r3, #11
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001eca:	193b      	adds	r3, r7, r4
 8001ecc:	22e0      	movs	r2, #224	@ 0xe0
 8001ece:	0212      	lsls	r2, r2, #8
 8001ed0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	0021      	movs	r1, r4
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	4a06      	ldr	r2, [pc, #24]	@ (8001f08 <HAL_SPI_MspInit+0x98>)
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	0010      	movs	r0, r2
 8001ef4:	f002 f8a4 	bl	8004040 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001ef8:	46c0      	nop			@ (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b00b      	add	sp, #44	@ 0x2c
 8001efe:	bd90      	pop	{r4, r7, pc}
 8001f00:	40003800 	.word	0x40003800
 8001f04:	40021000 	.word	0x40021000
 8001f08:	48000400 	.word	0x48000400

08001f0c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a12      	ldr	r2, [pc, #72]	@ (8001f64 <HAL_TIM_OC_MspInit+0x58>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d11d      	bne.n	8001f5a <HAL_TIM_OC_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f1e:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_TIM_OC_MspInit+0x5c>)
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_TIM_OC_MspInit+0x5c>)
 8001f24:	2180      	movs	r1, #128	@ 0x80
 8001f26:	0109      	lsls	r1, r1, #4
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	619a      	str	r2, [r3, #24]
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <HAL_TIM_OC_MspInit+0x5c>)
 8001f2e:	699a      	ldr	r2, [r3, #24]
 8001f30:	2380      	movs	r3, #128	@ 0x80
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	200d      	movs	r0, #13
 8001f40:	f001 feb4 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001f44:	200d      	movs	r0, #13
 8001f46:	f001 fec6 	bl	8003cd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	200e      	movs	r0, #14
 8001f50:	f001 feac 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f54:	200e      	movs	r0, #14
 8001f56:	f001 febe 	bl	8003cd6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b004      	add	sp, #16
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	46c0      	nop			@ (mov r8, r8)
 8001f64:	40012c00 	.word	0x40012c00
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	05db      	lsls	r3, r3, #23
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d10c      	bne.n	8001f9a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f80:	4b10      	ldr	r3, [pc, #64]	@ (8001fc4 <HAL_TIM_PWM_MspInit+0x58>)
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <HAL_TIM_PWM_MspInit+0x58>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	61da      	str	r2, [r3, #28]
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_TIM_PWM_MspInit+0x58>)
 8001f8e:	69db      	ldr	r3, [r3, #28]
 8001f90:	2201      	movs	r2, #1
 8001f92:	4013      	ands	r3, r2
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f98:	e010      	b.n	8001fbc <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <HAL_TIM_PWM_MspInit+0x5c>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d10b      	bne.n	8001fbc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <HAL_TIM_PWM_MspInit+0x58>)
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_TIM_PWM_MspInit+0x58>)
 8001faa:	2102      	movs	r1, #2
 8001fac:	430a      	orrs	r2, r1
 8001fae:	61da      	str	r2, [r3, #28]
 8001fb0:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <HAL_TIM_PWM_MspInit+0x58>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]
}
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b004      	add	sp, #16
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	40000400 	.word	0x40000400

08001fcc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a22      	ldr	r2, [pc, #136]	@ (8002064 <HAL_TIM_Base_MspInit+0x98>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d116      	bne.n	800200c <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001fde:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	4b21      	ldr	r3, [pc, #132]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 8001fe4:	2180      	movs	r1, #128	@ 0x80
 8001fe6:	0049      	lsls	r1, r1, #1
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	61da      	str	r2, [r3, #28]
 8001fec:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 8001fee:	69da      	ldr	r2, [r3, #28]
 8001ff0:	2380      	movs	r3, #128	@ 0x80
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	2013      	movs	r0, #19
 8002000:	f001 fe54 	bl	8003cac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002004:	2013      	movs	r0, #19
 8002006:	f001 fe66 	bl	8003cd6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 800200a:	e026      	b.n	800205a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM16)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a16      	ldr	r2, [pc, #88]	@ (800206c <HAL_TIM_Base_MspInit+0xa0>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10e      	bne.n	8002034 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002016:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 8002018:	699a      	ldr	r2, [r3, #24]
 800201a:	4b13      	ldr	r3, [pc, #76]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	0289      	lsls	r1, r1, #10
 8002020:	430a      	orrs	r2, r1
 8002022:	619a      	str	r2, [r3, #24]
 8002024:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 8002026:	699a      	ldr	r2, [r3, #24]
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	029b      	lsls	r3, r3, #10
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
}
 8002032:	e012      	b.n	800205a <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM17)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a0d      	ldr	r2, [pc, #52]	@ (8002070 <HAL_TIM_Base_MspInit+0xa4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10d      	bne.n	800205a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800203e:	4b0a      	ldr	r3, [pc, #40]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 8002044:	2180      	movs	r1, #128	@ 0x80
 8002046:	02c9      	lsls	r1, r1, #11
 8002048:	430a      	orrs	r2, r1
 800204a:	619a      	str	r2, [r3, #24]
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_TIM_Base_MspInit+0x9c>)
 800204e:	699a      	ldr	r2, [r3, #24]
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	02db      	lsls	r3, r3, #11
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
}
 800205a:	46c0      	nop			@ (mov r8, r8)
 800205c:	46bd      	mov	sp, r7
 800205e:	b006      	add	sp, #24
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	40002000 	.word	0x40002000
 8002068:	40021000 	.word	0x40021000
 800206c:	40014400 	.word	0x40014400
 8002070:	40014800 	.word	0x40014800

08002074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b08d      	sub	sp, #52	@ 0x34
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	241c      	movs	r4, #28
 800207e:	193b      	adds	r3, r7, r4
 8002080:	0018      	movs	r0, r3
 8002082:	2314      	movs	r3, #20
 8002084:	001a      	movs	r2, r3
 8002086:	2100      	movs	r1, #0
 8002088:	f004 f9a6 	bl	80063d8 <memset>
  if(htim->Instance==TIM2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	2380      	movs	r3, #128	@ 0x80
 8002092:	05db      	lsls	r3, r3, #23
 8002094:	429a      	cmp	r2, r3
 8002096:	d125      	bne.n	80020e4 <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002098:	4b54      	ldr	r3, [pc, #336]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	4b53      	ldr	r3, [pc, #332]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 800209e:	2180      	movs	r1, #128	@ 0x80
 80020a0:	02c9      	lsls	r1, r1, #11
 80020a2:	430a      	orrs	r2, r1
 80020a4:	615a      	str	r2, [r3, #20]
 80020a6:	4b51      	ldr	r3, [pc, #324]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	2380      	movs	r3, #128	@ 0x80
 80020ac:	02db      	lsls	r3, r3, #11
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = F1L_pwm_Pin|F2L_pwm_Pin;
 80020b4:	193b      	adds	r3, r7, r4
 80020b6:	22c0      	movs	r2, #192	@ 0xc0
 80020b8:	0112      	lsls	r2, r2, #4
 80020ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	0021      	movs	r1, r4
 80020be:	187b      	adds	r3, r7, r1
 80020c0:	2202      	movs	r2, #2
 80020c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	187b      	adds	r3, r7, r1
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ca:	187b      	adds	r3, r7, r1
 80020cc:	2200      	movs	r2, #0
 80020ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80020d0:	187b      	adds	r3, r7, r1
 80020d2:	2202      	movs	r2, #2
 80020d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d6:	187b      	adds	r3, r7, r1
 80020d8:	4a45      	ldr	r2, [pc, #276]	@ (80021f0 <HAL_TIM_MspPostInit+0x17c>)
 80020da:	0019      	movs	r1, r3
 80020dc:	0010      	movs	r0, r2
 80020de:	f001 ffaf 	bl	8004040 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80020e2:	e07e      	b.n	80021e2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a42      	ldr	r2, [pc, #264]	@ (80021f4 <HAL_TIM_MspPostInit+0x180>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d124      	bne.n	8002138 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	4b3f      	ldr	r3, [pc, #252]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	4b3e      	ldr	r3, [pc, #248]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 80020f4:	2180      	movs	r1, #128	@ 0x80
 80020f6:	02c9      	lsls	r1, r1, #11
 80020f8:	430a      	orrs	r2, r1
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	4b3b      	ldr	r3, [pc, #236]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 80020fe:	695a      	ldr	r2, [r3, #20]
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	02db      	lsls	r3, r3, #11
 8002104:	4013      	ands	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = F1R_pwm_Pin|F2R_pwm_Pin;
 800210a:	211c      	movs	r1, #28
 800210c:	187b      	adds	r3, r7, r1
 800210e:	2230      	movs	r2, #48	@ 0x30
 8002110:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	187b      	adds	r3, r7, r1
 8002114:	2202      	movs	r2, #2
 8002116:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	187b      	adds	r3, r7, r1
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	187b      	adds	r3, r7, r1
 8002120:	2200      	movs	r2, #0
 8002122:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2201      	movs	r2, #1
 8002128:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	187b      	adds	r3, r7, r1
 800212c:	4a30      	ldr	r2, [pc, #192]	@ (80021f0 <HAL_TIM_MspPostInit+0x17c>)
 800212e:	0019      	movs	r1, r3
 8002130:	0010      	movs	r0, r2
 8002132:	f001 ff85 	bl	8004040 <HAL_GPIO_Init>
}
 8002136:	e054      	b.n	80021e2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM16)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2e      	ldr	r2, [pc, #184]	@ (80021f8 <HAL_TIM_MspPostInit+0x184>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d125      	bne.n	800218e <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002142:	4b2a      	ldr	r3, [pc, #168]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	4b29      	ldr	r3, [pc, #164]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 8002148:	2180      	movs	r1, #128	@ 0x80
 800214a:	02c9      	lsls	r1, r1, #11
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]
 8002150:	4b26      	ldr	r3, [pc, #152]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 8002152:	695a      	ldr	r2, [r3, #20]
 8002154:	2380      	movs	r3, #128	@ 0x80
 8002156:	02db      	lsls	r3, r3, #11
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = WPL_pwm_Pin;
 800215e:	211c      	movs	r1, #28
 8002160:	187b      	adds	r3, r7, r1
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	0052      	lsls	r2, r2, #1
 8002166:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	187b      	adds	r3, r7, r1
 800216a:	2202      	movs	r2, #2
 800216c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	187b      	adds	r3, r7, r1
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002174:	187b      	adds	r3, r7, r1
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800217a:	187b      	adds	r3, r7, r1
 800217c:	2202      	movs	r2, #2
 800217e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPL_pwm_GPIO_Port, &GPIO_InitStruct);
 8002180:	187b      	adds	r3, r7, r1
 8002182:	4a1b      	ldr	r2, [pc, #108]	@ (80021f0 <HAL_TIM_MspPostInit+0x17c>)
 8002184:	0019      	movs	r1, r3
 8002186:	0010      	movs	r0, r2
 8002188:	f001 ff5a 	bl	8004040 <HAL_GPIO_Init>
}
 800218c:	e029      	b.n	80021e2 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM17)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1a      	ldr	r2, [pc, #104]	@ (80021fc <HAL_TIM_MspPostInit+0x188>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d124      	bne.n	80021e2 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002198:	4b14      	ldr	r3, [pc, #80]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 800219a:	695a      	ldr	r2, [r3, #20]
 800219c:	4b13      	ldr	r3, [pc, #76]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 800219e:	2180      	movs	r1, #128	@ 0x80
 80021a0:	02c9      	lsls	r1, r1, #11
 80021a2:	430a      	orrs	r2, r1
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	4b11      	ldr	r3, [pc, #68]	@ (80021ec <HAL_TIM_MspPostInit+0x178>)
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	02db      	lsls	r3, r3, #11
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPR_pwm_Pin;
 80021b4:	211c      	movs	r1, #28
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2280      	movs	r2, #128	@ 0x80
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2202      	movs	r2, #2
 80021c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2202      	movs	r2, #2
 80021d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPR_pwm_GPIO_Port, &GPIO_InitStruct);
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <HAL_TIM_MspPostInit+0x17c>)
 80021da:	0019      	movs	r1, r3
 80021dc:	0010      	movs	r0, r2
 80021de:	f001 ff2f 	bl	8004040 <HAL_GPIO_Init>
}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b00d      	add	sp, #52	@ 0x34
 80021e8:	bd90      	pop	{r4, r7, pc}
 80021ea:	46c0      	nop			@ (mov r8, r8)
 80021ec:	40021000 	.word	0x40021000
 80021f0:	48000400 	.word	0x48000400
 80021f4:	40000400 	.word	0x40000400
 80021f8:	40014400 	.word	0x40014400
 80021fc:	40014800 	.word	0x40014800

08002200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002204:	46c0      	nop			@ (mov r8, r8)
 8002206:	e7fd      	b.n	8002204 <NMI_Handler+0x4>

08002208 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800220c:	46c0      	nop			@ (mov r8, r8)
 800220e:	e7fd      	b.n	800220c <HardFault_Handler+0x4>

08002210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002214:	46c0      	nop			@ (mov r8, r8)
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002228:	f000 f8dc 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800222c:	46c0      	nop			@ (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <DMA1_Channel1_IRQHandler+0x14>)
 800223a:	0018      	movs	r0, r3
 800223c:	f001 fe16 	bl	8003e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	200000b8 	.word	0x200000b8

0800224c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <ADC1_IRQHandler+0x14>)
 8002252:	0018      	movs	r0, r3
 8002254:	f000 fb3a 	bl	80028cc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	46c0      	nop			@ (mov r8, r8)
 8002260:	20000078 	.word	0x20000078

08002264 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002268:	4b03      	ldr	r3, [pc, #12]	@ (8002278 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800226a:	0018      	movs	r0, r3
 800226c:	f003 fb3a 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002270:	46c0      	nop			@ (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	46c0      	nop			@ (mov r8, r8)
 8002278:	20000188 	.word	0x20000188

0800227c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <TIM1_CC_IRQHandler+0x14>)
 8002282:	0018      	movs	r0, r3
 8002284:	f003 fb2e 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			@ (mov r8, r8)
 8002290:	20000188 	.word	0x20000188

08002294 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002298:	4b03      	ldr	r3, [pc, #12]	@ (80022a8 <TIM14_IRQHandler+0x14>)
 800229a:	0018      	movs	r0, r3
 800229c:	f003 fb22 	bl	80058e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80022a0:	46c0      	nop			@ (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	20000260 	.word	0x20000260

080022ac <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022b0:	4b03      	ldr	r3, [pc, #12]	@ (80022c0 <CEC_CAN_IRQHandler+0x14>)
 80022b2:	0018      	movs	r0, r3
 80022b4:	f001 fa39 	bl	800372a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80022b8:	46c0      	nop			@ (mov r8, r8)
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			@ (mov r8, r8)
 80022c0:	200000fc 	.word	0x200000fc

080022c4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80022c8:	46c0      	nop			@ (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022d0:	4813      	ldr	r0, [pc, #76]	@ (8002320 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80022d4:	f7ff fff6 	bl	80022c4 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 80022d8:	4812      	ldr	r0, [pc, #72]	@ (8002324 <LoopForever+0x6>)
    LDR R1, [R0]
 80022da:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80022dc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80022de:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <LoopForever+0xa>)
    CMP R1, R2
 80022e0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80022e2:	d105      	bne.n	80022f0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 80022e4:	4811      	ldr	r0, [pc, #68]	@ (800232c <LoopForever+0xe>)
    LDR R1,=0x00000001
 80022e6:	4912      	ldr	r1, [pc, #72]	@ (8002330 <LoopForever+0x12>)
    STR R1, [R0]
 80022e8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 80022ea:	4812      	ldr	r0, [pc, #72]	@ (8002334 <LoopForever+0x16>)
    LDR R1,=0x00000000
 80022ec:	4912      	ldr	r1, [pc, #72]	@ (8002338 <LoopForever+0x1a>)
    STR R1, [R0]
 80022ee:	6001      	str	r1, [r0, #0]

080022f0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022f0:	4812      	ldr	r0, [pc, #72]	@ (800233c <LoopForever+0x1e>)
  ldr r1, =_edata
 80022f2:	4913      	ldr	r1, [pc, #76]	@ (8002340 <LoopForever+0x22>)
  ldr r2, =_sidata
 80022f4:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <LoopForever+0x26>)
  movs r3, #0
 80022f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f8:	e002      	b.n	8002300 <LoopCopyDataInit>

080022fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fe:	3304      	adds	r3, #4

08002300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002304:	d3f9      	bcc.n	80022fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002306:	4a10      	ldr	r2, [pc, #64]	@ (8002348 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002308:	4c10      	ldr	r4, [pc, #64]	@ (800234c <LoopForever+0x2e>)
  movs r3, #0
 800230a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800230c:	e001      	b.n	8002312 <LoopFillZerobss>

0800230e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002310:	3204      	adds	r2, #4

08002312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002314:	d3fb      	bcc.n	800230e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002316:	f004 f867 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800231a:	f7fe fd35 	bl	8000d88 <main>

0800231e <LoopForever>:

LoopForever:
    b LoopForever
 800231e:	e7fe      	b.n	800231e <LoopForever>
  ldr   r0, =_estack
 8002320:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002324:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002328:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 800232c:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002330:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002334:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002338:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 800233c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002340:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002344:	08006480 	.word	0x08006480
  ldr r2, =_sbss
 8002348:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800234c:	20000640 	.word	0x20000640

08002350 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <DMA1_Channel2_3_IRQHandler>
	...

08002354 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <HAL_Init+0x24>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b06      	ldr	r3, [pc, #24]	@ (8002378 <HAL_Init+0x24>)
 800235e:	2110      	movs	r1, #16
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002364:	2003      	movs	r0, #3
 8002366:	f000 f809 	bl	800237c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800236a:	f7ff fc6f 	bl	8001c4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			@ (mov r8, r8)
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002384:	4b14      	ldr	r3, [pc, #80]	@ (80023d8 <HAL_InitTick+0x5c>)
 8002386:	681c      	ldr	r4, [r3, #0]
 8002388:	4b14      	ldr	r3, [pc, #80]	@ (80023dc <HAL_InitTick+0x60>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	0019      	movs	r1, r3
 800238e:	23fa      	movs	r3, #250	@ 0xfa
 8002390:	0098      	lsls	r0, r3, #2
 8002392:	f7fd feb9 	bl	8000108 <__udivsi3>
 8002396:	0003      	movs	r3, r0
 8002398:	0019      	movs	r1, r3
 800239a:	0020      	movs	r0, r4
 800239c:	f7fd feb4 	bl	8000108 <__udivsi3>
 80023a0:	0003      	movs	r3, r0
 80023a2:	0018      	movs	r0, r3
 80023a4:	f001 fca7 	bl	8003cf6 <HAL_SYSTICK_Config>
 80023a8:	1e03      	subs	r3, r0, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e00f      	b.n	80023d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d80b      	bhi.n	80023ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	2301      	movs	r3, #1
 80023ba:	425b      	negs	r3, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	0018      	movs	r0, r3
 80023c0:	f001 fc74 	bl	8003cac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c4:	4b06      	ldr	r3, [pc, #24]	@ (80023e0 <HAL_InitTick+0x64>)
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	0018      	movs	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b003      	add	sp, #12
 80023d6:	bd90      	pop	{r4, r7, pc}
 80023d8:	20000050 	.word	0x20000050
 80023dc:	20000058 	.word	0x20000058
 80023e0:	20000054 	.word	0x20000054

080023e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <HAL_IncTick+0x1c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	001a      	movs	r2, r3
 80023ee:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <HAL_IncTick+0x20>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	18d2      	adds	r2, r2, r3
 80023f4:	4b03      	ldr	r3, [pc, #12]	@ (8002404 <HAL_IncTick+0x20>)
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	46c0      	nop			@ (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	20000058 	.word	0x20000058
 8002404:	2000063c 	.word	0x2000063c

08002408 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b02      	ldr	r3, [pc, #8]	@ (8002418 <HAL_GetTick+0x10>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	2000063c 	.word	0x2000063c

0800241c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff fff0 	bl	8002408 <HAL_GetTick>
 8002428:	0003      	movs	r3, r0
 800242a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	3301      	adds	r3, #1
 8002434:	d005      	beq.n	8002442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002436:	4b0a      	ldr	r3, [pc, #40]	@ (8002460 <HAL_Delay+0x44>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	001a      	movs	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	189b      	adds	r3, r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	f7ff ffe0 	bl	8002408 <HAL_GetTick>
 8002448:	0002      	movs	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	429a      	cmp	r2, r3
 8002452:	d8f7      	bhi.n	8002444 <HAL_Delay+0x28>
  {
  }
}
 8002454:	46c0      	nop			@ (mov r8, r8)
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	46bd      	mov	sp, r7
 800245a:	b004      	add	sp, #16
 800245c:	bd80      	pop	{r7, pc}
 800245e:	46c0      	nop			@ (mov r8, r8)
 8002460:	20000058 	.word	0x20000058

08002464 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246c:	230f      	movs	r3, #15
 800246e:	18fb      	adds	r3, r7, r3
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e125      	b.n	80026ce <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10a      	bne.n	80024a0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2234      	movs	r2, #52	@ 0x34
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	0018      	movs	r0, r3
 800249c:	f7ff fbfa 	bl	8001c94 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024a4:	2210      	movs	r2, #16
 80024a6:	4013      	ands	r3, r2
 80024a8:	d000      	beq.n	80024ac <HAL_ADC_Init+0x48>
 80024aa:	e103      	b.n	80026b4 <HAL_ADC_Init+0x250>
 80024ac:	230f      	movs	r3, #15
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d000      	beq.n	80024b8 <HAL_ADC_Init+0x54>
 80024b6:	e0fd      	b.n	80026b4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2204      	movs	r2, #4
 80024c0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80024c2:	d000      	beq.n	80024c6 <HAL_ADC_Init+0x62>
 80024c4:	e0f6      	b.n	80026b4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ca:	4a83      	ldr	r2, [pc, #524]	@ (80026d8 <HAL_ADC_Init+0x274>)
 80024cc:	4013      	ands	r3, r2
 80024ce:	2202      	movs	r2, #2
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2203      	movs	r2, #3
 80024de:	4013      	ands	r3, r2
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d112      	bne.n	800250a <HAL_ADC_Init+0xa6>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d009      	beq.n	8002506 <HAL_ADC_Init+0xa2>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68da      	ldr	r2, [r3, #12]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	401a      	ands	r2, r3
 80024fe:	2380      	movs	r3, #128	@ 0x80
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	429a      	cmp	r2, r3
 8002504:	d101      	bne.n	800250a <HAL_ADC_Init+0xa6>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <HAL_ADC_Init+0xa8>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d116      	bne.n	800253e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2218      	movs	r2, #24
 8002518:	4393      	bics	r3, r2
 800251a:	0019      	movs	r1, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	0899      	lsrs	r1, r3, #2
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4964      	ldr	r1, [pc, #400]	@ (80026dc <HAL_ADC_Init+0x278>)
 800254a:	400a      	ands	r2, r1
 800254c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e1b      	ldrb	r3, [r3, #24]
 8002552:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	7e5b      	ldrb	r3, [r3, #25]
 8002558:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800255a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	7e9b      	ldrb	r3, [r3, #26]
 8002560:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002562:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002568:	2b01      	cmp	r3, #1
 800256a:	d002      	beq.n	8002572 <HAL_ADC_Init+0x10e>
 800256c:	2380      	movs	r3, #128	@ 0x80
 800256e:	015b      	lsls	r3, r3, #5
 8002570:	e000      	b.n	8002574 <HAL_ADC_Init+0x110>
 8002572:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002574:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800257a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d101      	bne.n	8002588 <HAL_ADC_Init+0x124>
 8002584:	2304      	movs	r3, #4
 8002586:	e000      	b.n	800258a <HAL_ADC_Init+0x126>
 8002588:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800258a:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2124      	movs	r1, #36	@ 0x24
 8002590:	5c5b      	ldrb	r3, [r3, r1]
 8002592:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002594:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4313      	orrs	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7edb      	ldrb	r3, [r3, #27]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d115      	bne.n	80025d0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e9b      	ldrb	r3, [r3, #26]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2280      	movs	r2, #128	@ 0x80
 80025b0:	0252      	lsls	r2, r2, #9
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60bb      	str	r3, [r7, #8]
 80025b6:	e00b      	b.n	80025d0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025bc:	2220      	movs	r2, #32
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	2201      	movs	r2, #1
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	23c2      	movs	r3, #194	@ 0xc2
 80025d6:	33ff      	adds	r3, #255	@ 0xff
 80025d8:	429a      	cmp	r2, r3
 80025da:	d007      	beq.n	80025ec <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80025e4:	4313      	orrs	r3, r2
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68d9      	ldr	r1, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002600:	2380      	movs	r3, #128	@ 0x80
 8002602:	055b      	lsls	r3, r3, #21
 8002604:	429a      	cmp	r2, r3
 8002606:	d01b      	beq.n	8002640 <HAL_ADC_Init+0x1dc>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	2b01      	cmp	r3, #1
 800260e:	d017      	beq.n	8002640 <HAL_ADC_Init+0x1dc>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	2b02      	cmp	r3, #2
 8002616:	d013      	beq.n	8002640 <HAL_ADC_Init+0x1dc>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261c:	2b03      	cmp	r3, #3
 800261e:	d00f      	beq.n	8002640 <HAL_ADC_Init+0x1dc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	2b04      	cmp	r3, #4
 8002626:	d00b      	beq.n	8002640 <HAL_ADC_Init+0x1dc>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262c:	2b05      	cmp	r3, #5
 800262e:	d007      	beq.n	8002640 <HAL_ADC_Init+0x1dc>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002634:	2b06      	cmp	r3, #6
 8002636:	d003      	beq.n	8002640 <HAL_ADC_Init+0x1dc>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263c:	2b07      	cmp	r3, #7
 800263e:	d112      	bne.n	8002666 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2107      	movs	r1, #7
 800264c:	438a      	bics	r2, r1
 800264e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6959      	ldr	r1, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	2207      	movs	r2, #7
 800265c:	401a      	ands	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a1c      	ldr	r2, [pc, #112]	@ (80026e0 <HAL_ADC_Init+0x27c>)
 800266e:	4013      	ands	r3, r2
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d10b      	bne.n	800268e <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002680:	2203      	movs	r2, #3
 8002682:	4393      	bics	r3, r2
 8002684:	2201      	movs	r2, #1
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800268c:	e01c      	b.n	80026c8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002692:	2212      	movs	r2, #18
 8002694:	4393      	bics	r3, r2
 8002696:	2210      	movs	r2, #16
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a2:	2201      	movs	r2, #1
 80026a4:	431a      	orrs	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80026aa:	230f      	movs	r3, #15
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	2201      	movs	r2, #1
 80026b0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80026b2:	e009      	b.n	80026c8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b8:	2210      	movs	r2, #16
 80026ba:	431a      	orrs	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80026c0:	230f      	movs	r3, #15
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026c8:	230f      	movs	r3, #15
 80026ca:	18fb      	adds	r3, r7, r3
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	0018      	movs	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	b004      	add	sp, #16
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	46c0      	nop			@ (mov r8, r8)
 80026d8:	fffffefd 	.word	0xfffffefd
 80026dc:	fffe0219 	.word	0xfffe0219
 80026e0:	833fffe7 	.word	0x833fffe7

080026e4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026ec:	230f      	movs	r3, #15
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2204      	movs	r2, #4
 80026fc:	4013      	ands	r3, r2
 80026fe:	d156      	bne.n	80027ae <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2234      	movs	r2, #52	@ 0x34
 8002704:	5c9b      	ldrb	r3, [r3, r2]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_ADC_Start_IT+0x2a>
 800270a:	2302      	movs	r3, #2
 800270c:	e056      	b.n	80027bc <HAL_ADC_Start_IT+0xd8>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2234      	movs	r2, #52	@ 0x34
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	7e5b      	ldrb	r3, [r3, #25]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d007      	beq.n	800272e <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800271e:	230f      	movs	r3, #15
 8002720:	18fc      	adds	r4, r7, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 fa9b 	bl	8002c60 <ADC_Enable>
 800272a:	0003      	movs	r3, r0
 800272c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800272e:	230f      	movs	r3, #15
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d13e      	bne.n	80027b6 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800273c:	4a21      	ldr	r2, [pc, #132]	@ (80027c4 <HAL_ADC_Start_IT+0xe0>)
 800273e:	4013      	ands	r3, r2
 8002740:	2280      	movs	r2, #128	@ 0x80
 8002742:	0052      	lsls	r2, r2, #1
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2234      	movs	r2, #52	@ 0x34
 8002754:	2100      	movs	r1, #0
 8002756:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	221c      	movs	r2, #28
 800275e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2b08      	cmp	r3, #8
 8002766:	d110      	bne.n	800278a <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2104      	movs	r1, #4
 8002774:	438a      	bics	r2, r1
 8002776:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2118      	movs	r1, #24
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]
          break;
 8002788:	e008      	b.n	800279c <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	211c      	movs	r1, #28
 8002796:	430a      	orrs	r2, r1
 8002798:	605a      	str	r2, [r3, #4]
          break;
 800279a:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2104      	movs	r1, #4
 80027a8:	430a      	orrs	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e003      	b.n	80027b6 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027ae:	230f      	movs	r3, #15
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2202      	movs	r2, #2
 80027b4:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80027b6:	230f      	movs	r3, #15
 80027b8:	18fb      	adds	r3, r7, r3
 80027ba:	781b      	ldrb	r3, [r3, #0]
}
 80027bc:	0018      	movs	r0, r3
 80027be:	46bd      	mov	sp, r7
 80027c0:	b005      	add	sp, #20
 80027c2:	bd90      	pop	{r4, r7, pc}
 80027c4:	fffff0fe 	.word	0xfffff0fe

080027c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027d4:	2317      	movs	r3, #23
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2204      	movs	r2, #4
 80027e4:	4013      	ands	r3, r2
 80027e6:	d15e      	bne.n	80028a6 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2234      	movs	r2, #52	@ 0x34
 80027ec:	5c9b      	ldrb	r3, [r3, r2]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_Start_DMA+0x2e>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e05e      	b.n	80028b4 <HAL_ADC_Start_DMA+0xec>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2234      	movs	r2, #52	@ 0x34
 80027fa:	2101      	movs	r1, #1
 80027fc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	7e5b      	ldrb	r3, [r3, #25]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d007      	beq.n	8002816 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002806:	2317      	movs	r3, #23
 8002808:	18fc      	adds	r4, r7, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 fa27 	bl	8002c60 <ADC_Enable>
 8002812:	0003      	movs	r3, r0
 8002814:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002816:	2317      	movs	r3, #23
 8002818:	18fb      	adds	r3, r7, r3
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d146      	bne.n	80028ae <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002824:	4a25      	ldr	r2, [pc, #148]	@ (80028bc <HAL_ADC_Start_DMA+0xf4>)
 8002826:	4013      	ands	r3, r2
 8002828:	2280      	movs	r2, #128	@ 0x80
 800282a:	0052      	lsls	r2, r2, #1
 800282c:	431a      	orrs	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2234      	movs	r2, #52	@ 0x34
 800283c:	2100      	movs	r1, #0
 800283e:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002844:	4a1e      	ldr	r2, [pc, #120]	@ (80028c0 <HAL_ADC_Start_DMA+0xf8>)
 8002846:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	4a1d      	ldr	r2, [pc, #116]	@ (80028c4 <HAL_ADC_Start_DMA+0xfc>)
 800284e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	4a1c      	ldr	r2, [pc, #112]	@ (80028c8 <HAL_ADC_Start_DMA+0x100>)
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	221c      	movs	r2, #28
 800285e:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2110      	movs	r1, #16
 800286c:	430a      	orrs	r2, r1
 800286e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2101      	movs	r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	3340      	adds	r3, #64	@ 0x40
 800288a:	0019      	movs	r1, r3
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f001 fa86 	bl	8003da0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2104      	movs	r1, #4
 80028a0:	430a      	orrs	r2, r1
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	e003      	b.n	80028ae <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028a6:	2317      	movs	r3, #23
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2202      	movs	r2, #2
 80028ac:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80028ae:	2317      	movs	r3, #23
 80028b0:	18fb      	adds	r3, r7, r3
 80028b2:	781b      	ldrb	r3, [r3, #0]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b007      	add	sp, #28
 80028ba:	bd90      	pop	{r4, r7, pc}
 80028bc:	fffff0fe 	.word	0xfffff0fe
 80028c0:	08002d69 	.word	0x08002d69
 80028c4:	08002e1d 	.word	0x08002e1d
 80028c8:	08002e3b 	.word	0x08002e3b

080028cc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2204      	movs	r2, #4
 80028e8:	4013      	ands	r3, r2
 80028ea:	d003      	beq.n	80028f4 <HAL_ADC_IRQHandler+0x28>
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2204      	movs	r2, #4
 80028f0:	4013      	ands	r3, r2
 80028f2:	d107      	bne.n	8002904 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2208      	movs	r2, #8
 80028f8:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80028fa:	d049      	beq.n	8002990 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2208      	movs	r2, #8
 8002900:	4013      	ands	r3, r2
 8002902:	d045      	beq.n	8002990 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002908:	2210      	movs	r2, #16
 800290a:	4013      	ands	r3, r2
 800290c:	d106      	bne.n	800291c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	2280      	movs	r2, #128	@ 0x80
 8002914:	0092      	lsls	r2, r2, #2
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	23c0      	movs	r3, #192	@ 0xc0
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	4013      	ands	r3, r2
 8002928:	d12a      	bne.n	8002980 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800292e:	2b00      	cmp	r3, #0
 8002930:	d126      	bne.n	8002980 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2208      	movs	r2, #8
 8002936:	4013      	ands	r3, r2
 8002938:	d022      	beq.n	8002980 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2204      	movs	r2, #4
 8002942:	4013      	ands	r3, r2
 8002944:	d110      	bne.n	8002968 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	210c      	movs	r1, #12
 8002952:	438a      	bics	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295a:	4a2d      	ldr	r2, [pc, #180]	@ (8002a10 <HAL_ADC_IRQHandler+0x144>)
 800295c:	4013      	ands	r3, r2
 800295e:	2201      	movs	r2, #1
 8002960:	431a      	orrs	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	639a      	str	r2, [r3, #56]	@ 0x38
 8002966:	e00b      	b.n	8002980 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296c:	2220      	movs	r2, #32
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	2201      	movs	r2, #1
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0018      	movs	r0, r3
 8002984:	f7fd fd66 	bl	8000454 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	220c      	movs	r2, #12
 800298e:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2280      	movs	r2, #128	@ 0x80
 8002994:	4013      	ands	r3, r2
 8002996:	d012      	beq.n	80029be <HAL_ADC_IRQHandler+0xf2>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	2280      	movs	r2, #128	@ 0x80
 800299c:	4013      	ands	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a4:	2280      	movs	r2, #128	@ 0x80
 80029a6:	0252      	lsls	r2, r2, #9
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	639a      	str	r2, [r3, #56]	@ 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 f837 	bl	8002a24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2280      	movs	r2, #128	@ 0x80
 80029bc:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2210      	movs	r2, #16
 80029c2:	4013      	ands	r3, r2
 80029c4:	d020      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x13c>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2210      	movs	r2, #16
 80029ca:	4013      	ands	r3, r2
 80029cc:	d01c      	beq.n	8002a08 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d006      	beq.n	80029e4 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d10d      	bne.n	8002a00 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e8:	2202      	movs	r2, #2
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2210      	movs	r2, #16
 80029f6:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f81a 	bl	8002a34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2210      	movs	r2, #16
 8002a06:	601a      	str	r2, [r3, #0]
  }

}
 8002a08:	46c0      	nop			@ (mov r8, r8)
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	b004      	add	sp, #16
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	fffffefe 	.word	0xfffffefe

08002a14 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a1c:	46c0      	nop			@ (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	b002      	add	sp, #8
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a3c:	46c0      	nop			@ (mov r8, r8)
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b002      	add	sp, #8
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4e:	230f      	movs	r3, #15
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2200      	movs	r2, #0
 8002a54:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	055b      	lsls	r3, r3, #21
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d011      	beq.n	8002a8a <HAL_ADC_ConfigChannel+0x46>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d00d      	beq.n	8002a8a <HAL_ADC_ConfigChannel+0x46>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d009      	beq.n	8002a8a <HAL_ADC_ConfigChannel+0x46>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7a:	2b03      	cmp	r3, #3
 8002a7c:	d005      	beq.n	8002a8a <HAL_ADC_ConfigChannel+0x46>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d001      	beq.n	8002a8a <HAL_ADC_ConfigChannel+0x46>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2234      	movs	r2, #52	@ 0x34
 8002a8e:	5c9b      	ldrb	r3, [r3, r2]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x54>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e0d0      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x1f6>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2234      	movs	r2, #52	@ 0x34
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d000      	beq.n	8002aae <HAL_ADC_ConfigChannel+0x6a>
 8002aac:	e0b4      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4a64      	ldr	r2, [pc, #400]	@ (8002c44 <HAL_ADC_ConfigChannel+0x200>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d100      	bne.n	8002aba <HAL_ADC_ConfigChannel+0x76>
 8002ab8:	e082      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad4:	2380      	movs	r3, #128	@ 0x80
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d037      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d033      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d02f      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d02b      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	2b04      	cmp	r3, #4
 8002afa:	d027      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	d023      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d01f      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	2b07      	cmp	r3, #7
 8002b12:	d01b      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2107      	movs	r1, #7
 8002b20:	400b      	ands	r3, r1
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d012      	beq.n	8002b4c <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695a      	ldr	r2, [r3, #20]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2107      	movs	r1, #7
 8002b32:	438a      	bics	r2, r1
 8002b34:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6959      	ldr	r1, [r3, #20]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2207      	movs	r2, #7
 8002b42:	401a      	ands	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2b10      	cmp	r3, #16
 8002b52:	d007      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x120>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b11      	cmp	r3, #17
 8002b5a:	d003      	beq.n	8002b64 <HAL_ADC_ConfigChannel+0x120>
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b12      	cmp	r3, #18
 8002b62:	d163      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002b64:	4b38      	ldr	r3, [pc, #224]	@ (8002c48 <HAL_ADC_ConfigChannel+0x204>)
 8002b66:	6819      	ldr	r1, [r3, #0]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d009      	beq.n	8002b84 <HAL_ADC_ConfigChannel+0x140>
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b11      	cmp	r3, #17
 8002b76:	d102      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x13a>
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	03db      	lsls	r3, r3, #15
 8002b7c:	e004      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x144>
 8002b7e:	2380      	movs	r3, #128	@ 0x80
 8002b80:	045b      	lsls	r3, r3, #17
 8002b82:	e001      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x144>
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	4a2f      	ldr	r2, [pc, #188]	@ (8002c48 <HAL_ADC_ConfigChannel+0x204>)
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d14a      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b96:	4b2d      	ldr	r3, [pc, #180]	@ (8002c4c <HAL_ADC_ConfigChannel+0x208>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	492d      	ldr	r1, [pc, #180]	@ (8002c50 <HAL_ADC_ConfigChannel+0x20c>)
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f7fd fab3 	bl	8000108 <__udivsi3>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	0013      	movs	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	189b      	adds	r3, r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb0:	e002      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d1f9      	bne.n	8002bb2 <HAL_ADC_ConfigChannel+0x16e>
 8002bbe:	e035      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2101      	movs	r1, #1
 8002bcc:	4099      	lsls	r1, r3
 8002bce:	000b      	movs	r3, r1
 8002bd0:	43d9      	mvns	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d007      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x1ae>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b11      	cmp	r3, #17
 8002be8:	d003      	beq.n	8002bf2 <HAL_ADC_ConfigChannel+0x1ae>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d11c      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002bf2:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_ADC_ConfigChannel+0x204>)
 8002bf4:	6819      	ldr	r1, [r3, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b10      	cmp	r3, #16
 8002bfc:	d007      	beq.n	8002c0e <HAL_ADC_ConfigChannel+0x1ca>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b11      	cmp	r3, #17
 8002c04:	d101      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x1c6>
 8002c06:	4b13      	ldr	r3, [pc, #76]	@ (8002c54 <HAL_ADC_ConfigChannel+0x210>)
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1cc>
 8002c0a:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <HAL_ADC_ConfigChannel+0x214>)
 8002c0c:	e000      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x1cc>
 8002c0e:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <HAL_ADC_ConfigChannel+0x218>)
 8002c10:	4a0d      	ldr	r2, [pc, #52]	@ (8002c48 <HAL_ADC_ConfigChannel+0x204>)
 8002c12:	400b      	ands	r3, r1
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e009      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002c24:	230f      	movs	r3, #15
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2234      	movs	r2, #52	@ 0x34
 8002c30:	2100      	movs	r1, #0
 8002c32:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002c34:	230f      	movs	r3, #15
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	781b      	ldrb	r3, [r3, #0]
}
 8002c3a:	0018      	movs	r0, r3
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b004      	add	sp, #16
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	00001001 	.word	0x00001001
 8002c48:	40012708 	.word	0x40012708
 8002c4c:	20000050 	.word	0x20000050
 8002c50:	000f4240 	.word	0x000f4240
 8002c54:	ffbfffff 	.word	0xffbfffff
 8002c58:	feffffff 	.word	0xfeffffff
 8002c5c:	ff7fffff 	.word	0xff7fffff

08002c60 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2203      	movs	r2, #3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d112      	bne.n	8002ca4 <ADC_Enable+0x44>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d009      	beq.n	8002ca0 <ADC_Enable+0x40>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	2380      	movs	r3, #128	@ 0x80
 8002c94:	021b      	lsls	r3, r3, #8
 8002c96:	401a      	ands	r2, r3
 8002c98:	2380      	movs	r3, #128	@ 0x80
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d101      	bne.n	8002ca4 <ADC_Enable+0x44>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <ADC_Enable+0x46>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d152      	bne.n	8002d50 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d5c <ADC_Enable+0xfc>)
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	2210      	movs	r2, #16
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e03f      	b.n	8002d52 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2101      	movs	r1, #1
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d60 <ADC_Enable+0x100>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	491f      	ldr	r1, [pc, #124]	@ (8002d64 <ADC_Enable+0x104>)
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f7fd fa0d 	bl	8000108 <__udivsi3>
 8002cee:	0003      	movs	r3, r0
 8002cf0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cf2:	e002      	b.n	8002cfa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f9      	bne.n	8002cf4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d00:	f7ff fb82 	bl	8002408 <HAL_GetTick>
 8002d04:	0003      	movs	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d08:	e01b      	b.n	8002d42 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d0a:	f7ff fb7d 	bl	8002408 <HAL_GetTick>
 8002d0e:	0002      	movs	r2, r0
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d914      	bls.n	8002d42 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	4013      	ands	r3, r2
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d00d      	beq.n	8002d42 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d36:	2201      	movs	r2, #1
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e007      	b.n	8002d52 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d1dc      	bne.n	8002d0a <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b004      	add	sp, #16
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			@ (mov r8, r8)
 8002d5c:	80000017 	.word	0x80000017
 8002d60:	20000050 	.word	0x20000050
 8002d64:	000f4240 	.word	0x000f4240

08002d68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7a:	2250      	movs	r2, #80	@ 0x50
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d140      	bne.n	8002e02 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	2280      	movs	r2, #128	@ 0x80
 8002d86:	0092      	lsls	r2, r2, #2
 8002d88:	431a      	orrs	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	23c0      	movs	r3, #192	@ 0xc0
 8002d96:	011b      	lsls	r3, r3, #4
 8002d98:	4013      	ands	r3, r2
 8002d9a:	d12d      	bne.n	8002df8 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d129      	bne.n	8002df8 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2208      	movs	r2, #8
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d122      	bne.n	8002df8 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2204      	movs	r2, #4
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d110      	bne.n	8002de0 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	210c      	movs	r1, #12
 8002dca:	438a      	bics	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd2:	4a11      	ldr	r2, [pc, #68]	@ (8002e18 <ADC_DMAConvCplt+0xb0>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dde:	e00b      	b.n	8002df8 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	2220      	movs	r2, #32
 8002de6:	431a      	orrs	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002df0:	2201      	movs	r2, #1
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f7fd fb2a 	bl	8000454 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002e00:	e005      	b.n	8002e0e <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	0010      	movs	r0, r2
 8002e0c:	4798      	blx	r3
}
 8002e0e:	46c0      	nop			@ (mov r8, r8)
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	fffffefe 	.word	0xfffffefe

08002e1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff fdf1 	bl	8002a14 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e32:	46c0      	nop			@ (mov r8, r8)
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b004      	add	sp, #16
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	2240      	movs	r2, #64	@ 0x40
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e58:	2204      	movs	r2, #4
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff fde6 	bl	8002a34 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e68:	46c0      	nop			@ (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0f0      	b.n	8003064 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2220      	movs	r2, #32
 8002e86:	5c9b      	ldrb	r3, [r3, r2]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7fe ff97 	bl	8001dc4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ea6:	f7ff faaf 	bl	8002408 <HAL_GetTick>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eae:	e013      	b.n	8002ed8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb0:	f7ff faaa 	bl	8002408 <HAL_GetTick>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b0a      	cmp	r3, #10
 8002ebc:	d90c      	bls.n	8002ed8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	2280      	movs	r2, #128	@ 0x80
 8002ec4:	0292      	lsls	r2, r2, #10
 8002ec6:	431a      	orrs	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	2105      	movs	r1, #5
 8002ed2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0c5      	b.n	8003064 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d0e5      	beq.n	8002eb0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2102      	movs	r1, #2
 8002ef0:	438a      	bics	r2, r1
 8002ef2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef4:	f7ff fa88 	bl	8002408 <HAL_GetTick>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002efc:	e013      	b.n	8002f26 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002efe:	f7ff fa83 	bl	8002408 <HAL_GetTick>
 8002f02:	0002      	movs	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b0a      	cmp	r3, #10
 8002f0a:	d90c      	bls.n	8002f26 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f10:	2280      	movs	r2, #128	@ 0x80
 8002f12:	0292      	lsls	r2, r2, #10
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	2105      	movs	r1, #5
 8002f20:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e09e      	b.n	8003064 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d1e5      	bne.n	8002efe <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	7e1b      	ldrb	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d108      	bne.n	8002f4c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2180      	movs	r1, #128	@ 0x80
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	e007      	b.n	8002f5c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2180      	movs	r1, #128	@ 0x80
 8002f58:	438a      	bics	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	7e5b      	ldrb	r3, [r3, #25]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d108      	bne.n	8002f76 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2140      	movs	r1, #64	@ 0x40
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e007      	b.n	8002f86 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2140      	movs	r1, #64	@ 0x40
 8002f82:	438a      	bics	r2, r1
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	7e9b      	ldrb	r3, [r3, #26]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d108      	bne.n	8002fa0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2120      	movs	r1, #32
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	e007      	b.n	8002fb0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2120      	movs	r1, #32
 8002fac:	438a      	bics	r2, r1
 8002fae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	7edb      	ldrb	r3, [r3, #27]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d108      	bne.n	8002fca <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2110      	movs	r1, #16
 8002fc4:	438a      	bics	r2, r1
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	e007      	b.n	8002fda <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2110      	movs	r1, #16
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7f1b      	ldrb	r3, [r3, #28]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d108      	bne.n	8002ff4 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2108      	movs	r1, #8
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e007      	b.n	8003004 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2108      	movs	r1, #8
 8003000:	438a      	bics	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	7f5b      	ldrb	r3, [r3, #29]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d108      	bne.n	800301e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2104      	movs	r1, #4
 8003018:	430a      	orrs	r2, r1
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e007      	b.n	800302e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2104      	movs	r1, #4
 800302a:	438a      	bics	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	431a      	orrs	r2, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	431a      	orrs	r2, r3
 8003044:	0011      	movs	r1, r2
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	430a      	orrs	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2220      	movs	r2, #32
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b004      	add	sp, #16
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800307c:	2013      	movs	r0, #19
 800307e:	183b      	adds	r3, r7, r0
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	2120      	movs	r1, #32
 8003084:	5c52      	ldrb	r2, [r2, r1]
 8003086:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003088:	0002      	movs	r2, r0
 800308a:	18bb      	adds	r3, r7, r2
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d004      	beq.n	800309c <HAL_CAN_ConfigFilter+0x30>
 8003092:	18bb      	adds	r3, r7, r2
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d000      	beq.n	800309c <HAL_CAN_ConfigFilter+0x30>
 800309a:	e0cd      	b.n	8003238 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	2380      	movs	r3, #128	@ 0x80
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	58d3      	ldr	r3, [r2, r3]
 80030a4:	2201      	movs	r2, #1
 80030a6:	431a      	orrs	r2, r3
 80030a8:	0011      	movs	r1, r2
 80030aa:	697a      	ldr	r2, [r7, #20]
 80030ac:	2380      	movs	r3, #128	@ 0x80
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	221f      	movs	r2, #31
 80030b8:	4013      	ands	r3, r2
 80030ba:	2201      	movs	r2, #1
 80030bc:	409a      	lsls	r2, r3
 80030be:	0013      	movs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	2387      	movs	r3, #135	@ 0x87
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	58d3      	ldr	r3, [r2, r3]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	43d2      	mvns	r2, r2
 80030ce:	401a      	ands	r2, r3
 80030d0:	0011      	movs	r1, r2
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	2387      	movs	r3, #135	@ 0x87
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d129      	bne.n	8003136 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	2383      	movs	r3, #131	@ 0x83
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	58d3      	ldr	r3, [r2, r3]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	43d2      	mvns	r2, r2
 80030ee:	401a      	ands	r2, r3
 80030f0:	0011      	movs	r1, r2
 80030f2:	697a      	ldr	r2, [r7, #20]
 80030f4:	2383      	movs	r3, #131	@ 0x83
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	041b      	lsls	r3, r3, #16
 8003106:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800310c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	3248      	adds	r2, #72	@ 0x48
 8003112:	00d2      	lsls	r2, r2, #3
 8003114:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	041b      	lsls	r3, r3, #16
 8003122:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003128:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800312a:	6979      	ldr	r1, [r7, #20]
 800312c:	3348      	adds	r3, #72	@ 0x48
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	18cb      	adds	r3, r1, r3
 8003132:	3304      	adds	r3, #4
 8003134:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d128      	bne.n	8003190 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	2383      	movs	r3, #131	@ 0x83
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	58d2      	ldr	r2, [r2, r3]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	431a      	orrs	r2, r3
 800314a:	0011      	movs	r1, r2
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	2383      	movs	r3, #131	@ 0x83
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	041b      	lsls	r3, r3, #16
 8003160:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003166:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	3248      	adds	r2, #72	@ 0x48
 800316c:	00d2      	lsls	r2, r2, #3
 800316e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003182:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003184:	6979      	ldr	r1, [r7, #20]
 8003186:	3348      	adds	r3, #72	@ 0x48
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	18cb      	adds	r3, r1, r3
 800318c:	3304      	adds	r3, #4
 800318e:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10c      	bne.n	80031b2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003198:	697a      	ldr	r2, [r7, #20]
 800319a:	2381      	movs	r3, #129	@ 0x81
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	58d3      	ldr	r3, [r2, r3]
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	43d2      	mvns	r2, r2
 80031a4:	401a      	ands	r2, r3
 80031a6:	0011      	movs	r1, r2
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	2381      	movs	r3, #129	@ 0x81
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	50d1      	str	r1, [r2, r3]
 80031b0:	e00a      	b.n	80031c8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	2381      	movs	r3, #129	@ 0x81
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	58d2      	ldr	r2, [r2, r3]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	431a      	orrs	r2, r3
 80031be:	0011      	movs	r1, r2
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	2381      	movs	r3, #129	@ 0x81
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10c      	bne.n	80031ea <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	2385      	movs	r3, #133	@ 0x85
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	58d3      	ldr	r3, [r2, r3]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	43d2      	mvns	r2, r2
 80031dc:	401a      	ands	r2, r3
 80031de:	0011      	movs	r1, r2
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	2385      	movs	r3, #133	@ 0x85
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	50d1      	str	r1, [r2, r3]
 80031e8:	e00a      	b.n	8003200 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	2385      	movs	r3, #133	@ 0x85
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	58d2      	ldr	r2, [r2, r3]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	0011      	movs	r1, r2
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	2385      	movs	r3, #133	@ 0x85
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10a      	bne.n	800321e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	2387      	movs	r3, #135	@ 0x87
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	58d2      	ldr	r2, [r2, r3]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	431a      	orrs	r2, r3
 8003214:	0011      	movs	r1, r2
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	2387      	movs	r3, #135	@ 0x87
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	2380      	movs	r3, #128	@ 0x80
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	58d3      	ldr	r3, [r2, r3]
 8003226:	2201      	movs	r2, #1
 8003228:	4393      	bics	r3, r2
 800322a:	0019      	movs	r1, r3
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	2380      	movs	r3, #128	@ 0x80
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8003234:	2300      	movs	r3, #0
 8003236:	e007      	b.n	8003248 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323c:	2280      	movs	r2, #128	@ 0x80
 800323e:	02d2      	lsls	r2, r2, #11
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
  }
}
 8003248:	0018      	movs	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	b006      	add	sp, #24
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	5c9b      	ldrb	r3, [r3, r2]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d12f      	bne.n	80032c4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	2102      	movs	r1, #2
 800326a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2101      	movs	r1, #1
 8003278:	438a      	bics	r2, r1
 800327a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800327c:	f7ff f8c4 	bl	8002408 <HAL_GetTick>
 8003280:	0003      	movs	r3, r0
 8003282:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003284:	e013      	b.n	80032ae <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003286:	f7ff f8bf 	bl	8002408 <HAL_GetTick>
 800328a:	0002      	movs	r2, r0
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b0a      	cmp	r3, #10
 8003292:	d90c      	bls.n	80032ae <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	0292      	lsls	r2, r2, #10
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	2105      	movs	r1, #5
 80032a8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e012      	b.n	80032d4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	4013      	ands	r3, r2
 80032b8:	d1e5      	bne.n	8003286 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80032c0:	2300      	movs	r3, #0
 80032c2:	e007      	b.n	80032d4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	2280      	movs	r2, #128	@ 0x80
 80032ca:	0312      	lsls	r2, r2, #12
 80032cc:	431a      	orrs	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
  }
}
 80032d4:	0018      	movs	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b004      	add	sp, #16
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80032ea:	201f      	movs	r0, #31
 80032ec:	183b      	adds	r3, r7, r0
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	2120      	movs	r1, #32
 80032f2:	5c52      	ldrb	r2, [r2, r1]
 80032f4:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80032fe:	183b      	adds	r3, r7, r0
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d004      	beq.n	8003310 <HAL_CAN_AddTxMessage+0x34>
 8003306:	183b      	adds	r3, r7, r0
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b02      	cmp	r3, #2
 800330c:	d000      	beq.n	8003310 <HAL_CAN_AddTxMessage+0x34>
 800330e:	e0ab      	b.n	8003468 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	04db      	lsls	r3, r3, #19
 8003316:	4013      	ands	r3, r2
 8003318:	d10a      	bne.n	8003330 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	2380      	movs	r3, #128	@ 0x80
 800331e:	051b      	lsls	r3, r3, #20
 8003320:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003322:	d105      	bne.n	8003330 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	2380      	movs	r3, #128	@ 0x80
 8003328:	055b      	lsls	r3, r3, #21
 800332a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800332c:	d100      	bne.n	8003330 <HAL_CAN_AddTxMessage+0x54>
 800332e:	e092      	b.n	8003456 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	0e1b      	lsrs	r3, r3, #24
 8003334:	2203      	movs	r2, #3
 8003336:	4013      	ands	r3, r2
 8003338:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800333a:	2201      	movs	r2, #1
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10c      	bne.n	8003366 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4311      	orrs	r1, r2
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	3218      	adds	r2, #24
 8003360:	0112      	lsls	r2, r2, #4
 8003362:	50d1      	str	r1, [r2, r3]
 8003364:	e00f      	b.n	8003386 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003370:	431a      	orrs	r2, r3
 8003372:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 800337c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	3218      	adds	r2, #24
 8003382:	0112      	lsls	r2, r2, #4
 8003384:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	3318      	adds	r3, #24
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	18cb      	adds	r3, r1, r3
 8003396:	3304      	adds	r3, #4
 8003398:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	7d1b      	ldrb	r3, [r3, #20]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d112      	bne.n	80033c8 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	3318      	adds	r3, #24
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	18d3      	adds	r3, r2, r3
 80033ae:	3304      	adds	r3, #4
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	431a      	orrs	r2, r3
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	3318      	adds	r3, #24
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	18cb      	adds	r3, r1, r3
 80033c4:	3304      	adds	r3, #4
 80033c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3307      	adds	r3, #7
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	061a      	lsls	r2, r3, #24
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3306      	adds	r3, #6
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	041b      	lsls	r3, r3, #16
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3305      	adds	r3, #5
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	021b      	lsls	r3, r3, #8
 80033e2:	431a      	orrs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	3304      	adds	r3, #4
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	0019      	movs	r1, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	6979      	ldr	r1, [r7, #20]
 80033f4:	23c6      	movs	r3, #198	@ 0xc6
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	0109      	lsls	r1, r1, #4
 80033fa:	1841      	adds	r1, r0, r1
 80033fc:	18cb      	adds	r3, r1, r3
 80033fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3303      	adds	r3, #3
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	061a      	lsls	r2, r3, #24
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3302      	adds	r3, #2
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	041b      	lsls	r3, r3, #16
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3301      	adds	r3, #1
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	021b      	lsls	r3, r3, #8
 800341a:	431a      	orrs	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	0019      	movs	r1, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	6979      	ldr	r1, [r7, #20]
 800342a:	23c4      	movs	r3, #196	@ 0xc4
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	0109      	lsls	r1, r1, #4
 8003430:	1841      	adds	r1, r0, r1
 8003432:	18cb      	adds	r3, r1, r3
 8003434:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	3218      	adds	r2, #24
 800343e:	0112      	lsls	r2, r2, #4
 8003440:	58d2      	ldr	r2, [r2, r3]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2101      	movs	r1, #1
 8003448:	4311      	orrs	r1, r2
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	3218      	adds	r2, #24
 800344e:	0112      	lsls	r2, r2, #4
 8003450:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8003452:	2300      	movs	r3, #0
 8003454:	e010      	b.n	8003478 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345a:	2280      	movs	r2, #128	@ 0x80
 800345c:	0392      	lsls	r2, r2, #14
 800345e:	431a      	orrs	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e007      	b.n	8003478 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	2280      	movs	r2, #128	@ 0x80
 800346e:	02d2      	lsls	r2, r2, #11
 8003470:	431a      	orrs	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
  }
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	b008      	add	sp, #32
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800348e:	2017      	movs	r0, #23
 8003490:	183b      	adds	r3, r7, r0
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	2120      	movs	r1, #32
 8003496:	5c52      	ldrb	r2, [r2, r1]
 8003498:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800349a:	0002      	movs	r2, r0
 800349c:	18bb      	adds	r3, r7, r2
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d004      	beq.n	80034ae <HAL_CAN_GetRxMessage+0x2e>
 80034a4:	18bb      	adds	r3, r7, r2
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d000      	beq.n	80034ae <HAL_CAN_GetRxMessage+0x2e>
 80034ac:	e107      	b.n	80036be <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10e      	bne.n	80034d2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2203      	movs	r2, #3
 80034bc:	4013      	ands	r3, r2
 80034be:	d117      	bne.n	80034f0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	2280      	movs	r2, #128	@ 0x80
 80034c6:	0392      	lsls	r2, r2, #14
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e0fd      	b.n	80036ce <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2203      	movs	r2, #3
 80034da:	4013      	ands	r3, r2
 80034dc:	d108      	bne.n	80034f0 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e2:	2280      	movs	r2, #128	@ 0x80
 80034e4:	0392      	lsls	r2, r2, #14
 80034e6:	431a      	orrs	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0ee      	b.n	80036ce <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	321b      	adds	r2, #27
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	58d3      	ldr	r3, [r2, r3]
 80034fc:	2204      	movs	r2, #4
 80034fe:	401a      	ands	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10b      	bne.n	8003524 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	321b      	adds	r2, #27
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	58d3      	ldr	r3, [r2, r3]
 8003518:	0d5b      	lsrs	r3, r3, #21
 800351a:	055b      	lsls	r3, r3, #21
 800351c:	0d5a      	lsrs	r2, r3, #21
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e00a      	b.n	800353a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	321b      	adds	r2, #27
 800352c:	0112      	lsls	r2, r2, #4
 800352e:	58d3      	ldr	r3, [r2, r3]
 8003530:	08db      	lsrs	r3, r3, #3
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	321b      	adds	r2, #27
 8003542:	0112      	lsls	r2, r2, #4
 8003544:	58d3      	ldr	r3, [r2, r3]
 8003546:	2202      	movs	r2, #2
 8003548:	401a      	ands	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	331b      	adds	r3, #27
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	18d3      	adds	r3, r2, r3
 800355a:	3304      	adds	r3, #4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2208      	movs	r2, #8
 8003560:	4013      	ands	r3, r2
 8003562:	d003      	beq.n	800356c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2208      	movs	r2, #8
 8003568:	611a      	str	r2, [r3, #16]
 800356a:	e00b      	b.n	8003584 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	331b      	adds	r3, #27
 8003574:	011b      	lsls	r3, r3, #4
 8003576:	18d3      	adds	r3, r2, r3
 8003578:	3304      	adds	r3, #4
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	220f      	movs	r2, #15
 800357e:	401a      	ands	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	331b      	adds	r3, #27
 800358c:	011b      	lsls	r3, r3, #4
 800358e:	18d3      	adds	r3, r2, r3
 8003590:	3304      	adds	r3, #4
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	0a1b      	lsrs	r3, r3, #8
 8003596:	22ff      	movs	r2, #255	@ 0xff
 8003598:	401a      	ands	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	331b      	adds	r3, #27
 80035a6:	011b      	lsls	r3, r3, #4
 80035a8:	18d3      	adds	r3, r2, r3
 80035aa:	3304      	adds	r3, #4
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	0c1a      	lsrs	r2, r3, #16
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	23dc      	movs	r3, #220	@ 0xdc
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	0112      	lsls	r2, r2, #4
 80035c4:	188a      	adds	r2, r1, r2
 80035c6:	18d3      	adds	r3, r2, r3
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6819      	ldr	r1, [r3, #0]
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	23dc      	movs	r3, #220	@ 0xdc
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	0112      	lsls	r2, r2, #4
 80035dc:	188a      	adds	r2, r1, r2
 80035de:	18d3      	adds	r3, r2, r3
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	0a1a      	lsrs	r2, r3, #8
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	3301      	adds	r3, #1
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	23dc      	movs	r3, #220	@ 0xdc
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	188a      	adds	r2, r1, r2
 80035fa:	18d3      	adds	r3, r2, r3
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0c1a      	lsrs	r2, r3, #16
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	3302      	adds	r3, #2
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6819      	ldr	r1, [r3, #0]
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	23dc      	movs	r3, #220	@ 0xdc
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	0112      	lsls	r2, r2, #4
 8003614:	188a      	adds	r2, r1, r2
 8003616:	18d3      	adds	r3, r2, r3
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	0e1a      	lsrs	r2, r3, #24
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	3303      	adds	r3, #3
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	23de      	movs	r3, #222	@ 0xde
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	0112      	lsls	r2, r2, #4
 8003630:	188a      	adds	r2, r1, r2
 8003632:	18d3      	adds	r3, r2, r3
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	3304      	adds	r3, #4
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6819      	ldr	r1, [r3, #0]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	23de      	movs	r3, #222	@ 0xde
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	0112      	lsls	r2, r2, #4
 800364a:	188a      	adds	r2, r1, r2
 800364c:	18d3      	adds	r3, r2, r3
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	0a1a      	lsrs	r2, r3, #8
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	3305      	adds	r3, #5
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6819      	ldr	r1, [r3, #0]
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	23de      	movs	r3, #222	@ 0xde
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	0112      	lsls	r2, r2, #4
 8003666:	188a      	adds	r2, r1, r2
 8003668:	18d3      	adds	r3, r2, r3
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	0c1a      	lsrs	r2, r3, #16
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	3306      	adds	r3, #6
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	23de      	movs	r3, #222	@ 0xde
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	0112      	lsls	r2, r2, #4
 8003682:	188a      	adds	r2, r1, r2
 8003684:	18d3      	adds	r3, r2, r3
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e1a      	lsrs	r2, r3, #24
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	3307      	adds	r3, #7
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d108      	bne.n	80036aa <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2120      	movs	r1, #32
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]
 80036a8:	e007      	b.n	80036ba <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2120      	movs	r1, #32
 80036b6:	430a      	orrs	r2, r1
 80036b8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e007      	b.n	80036ce <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	2280      	movs	r2, #128	@ 0x80
 80036c4:	02d2      	lsls	r2, r2, #11
 80036c6:	431a      	orrs	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
  }
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b006      	add	sp, #24
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80036e0:	200f      	movs	r0, #15
 80036e2:	183b      	adds	r3, r7, r0
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	2120      	movs	r1, #32
 80036e8:	5c52      	ldrb	r2, [r2, r1]
 80036ea:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80036ec:	0002      	movs	r2, r0
 80036ee:	18bb      	adds	r3, r7, r2
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d003      	beq.n	80036fe <HAL_CAN_ActivateNotification+0x28>
 80036f6:	18bb      	adds	r3, r7, r2
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d109      	bne.n	8003712 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6959      	ldr	r1, [r3, #20]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e007      	b.n	8003722 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	2280      	movs	r2, #128	@ 0x80
 8003718:	02d2      	lsls	r2, r2, #11
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
  }
}
 8003722:	0018      	movs	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b08a      	sub	sp, #40	@ 0x28
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	2201      	movs	r2, #1
 800376a:	4013      	ands	r3, r2
 800376c:	d100      	bne.n	8003770 <HAL_CAN_IRQHandler+0x46>
 800376e:	e084      	b.n	800387a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	2201      	movs	r2, #1
 8003774:	4013      	ands	r3, r2
 8003776:	d024      	beq.n	80037c2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2201      	movs	r2, #1
 800377e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2202      	movs	r2, #2
 8003784:	4013      	ands	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0018      	movs	r0, r3
 800378c:	f000 f981 	bl	8003a92 <HAL_CAN_TxMailbox0CompleteCallback>
 8003790:	e017      	b.n	80037c2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003792:	69bb      	ldr	r3, [r7, #24]
 8003794:	2204      	movs	r2, #4
 8003796:	4013      	ands	r3, r2
 8003798:	d005      	beq.n	80037a6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	2280      	movs	r2, #128	@ 0x80
 800379e:	0112      	lsls	r2, r2, #4
 80037a0:	4313      	orrs	r3, r2
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a4:	e00d      	b.n	80037c2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	2208      	movs	r2, #8
 80037aa:	4013      	ands	r3, r2
 80037ac:	d005      	beq.n	80037ba <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b0:	2280      	movs	r2, #128	@ 0x80
 80037b2:	0152      	lsls	r2, r2, #5
 80037b4:	4313      	orrs	r3, r2
 80037b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037b8:	e003      	b.n	80037c2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	0018      	movs	r0, r3
 80037be:	f000 f980 	bl	8003ac2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	2380      	movs	r3, #128	@ 0x80
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	d028      	beq.n	800381e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2280      	movs	r2, #128	@ 0x80
 80037d2:	0052      	lsls	r2, r2, #1
 80037d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	2380      	movs	r3, #128	@ 0x80
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4013      	ands	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	0018      	movs	r0, r3
 80037e4:	f000 f95d 	bl	8003aa2 <HAL_CAN_TxMailbox1CompleteCallback>
 80037e8:	e019      	b.n	800381e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	2380      	movs	r3, #128	@ 0x80
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	d005      	beq.n	8003800 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	2280      	movs	r2, #128	@ 0x80
 80037f8:	0192      	lsls	r2, r2, #6
 80037fa:	4313      	orrs	r3, r2
 80037fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037fe:	e00e      	b.n	800381e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	4013      	ands	r3, r2
 8003808:	d005      	beq.n	8003816 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800380a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	01d2      	lsls	r2, r2, #7
 8003810:	4313      	orrs	r3, r2
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
 8003814:	e003      	b.n	800381e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	0018      	movs	r0, r3
 800381a:	f000 f95a 	bl	8003ad2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	025b      	lsls	r3, r3, #9
 8003824:	4013      	ands	r3, r2
 8003826:	d028      	beq.n	800387a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2280      	movs	r2, #128	@ 0x80
 800382e:	0252      	lsls	r2, r2, #9
 8003830:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003832:	69ba      	ldr	r2, [r7, #24]
 8003834:	2380      	movs	r3, #128	@ 0x80
 8003836:	029b      	lsls	r3, r3, #10
 8003838:	4013      	ands	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0018      	movs	r0, r3
 8003840:	f000 f937 	bl	8003ab2 <HAL_CAN_TxMailbox2CompleteCallback>
 8003844:	e019      	b.n	800387a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	2380      	movs	r3, #128	@ 0x80
 800384a:	02db      	lsls	r3, r3, #11
 800384c:	4013      	ands	r3, r2
 800384e:	d005      	beq.n	800385c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	2280      	movs	r2, #128	@ 0x80
 8003854:	0212      	lsls	r2, r2, #8
 8003856:	4313      	orrs	r3, r2
 8003858:	627b      	str	r3, [r7, #36]	@ 0x24
 800385a:	e00e      	b.n	800387a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	2380      	movs	r3, #128	@ 0x80
 8003860:	031b      	lsls	r3, r3, #12
 8003862:	4013      	ands	r3, r2
 8003864:	d005      	beq.n	8003872 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	2280      	movs	r2, #128	@ 0x80
 800386a:	0252      	lsls	r2, r2, #9
 800386c:	4313      	orrs	r3, r2
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003870:	e003      	b.n	800387a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	0018      	movs	r0, r3
 8003876:	f000 f934 	bl	8003ae2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800387a:	6a3b      	ldr	r3, [r7, #32]
 800387c:	2208      	movs	r2, #8
 800387e:	4013      	ands	r3, r2
 8003880:	d00c      	beq.n	800389c <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	2210      	movs	r2, #16
 8003886:	4013      	ands	r3, r2
 8003888:	d008      	beq.n	800389c <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	2280      	movs	r2, #128	@ 0x80
 800388e:	0092      	lsls	r2, r2, #2
 8003890:	4313      	orrs	r3, r2
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2210      	movs	r2, #16
 800389a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	2204      	movs	r2, #4
 80038a0:	4013      	ands	r3, r2
 80038a2:	d00b      	beq.n	80038bc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2208      	movs	r2, #8
 80038a8:	4013      	ands	r3, r2
 80038aa:	d007      	beq.n	80038bc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2208      	movs	r2, #8
 80038b2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f91b 	bl	8003af2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038bc:	6a3b      	ldr	r3, [r7, #32]
 80038be:	2202      	movs	r2, #2
 80038c0:	4013      	ands	r3, r2
 80038c2:	d009      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	2203      	movs	r2, #3
 80038cc:	4013      	ands	r3, r2
 80038ce:	d003      	beq.n	80038d8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fc fcda 	bl	800028c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	2240      	movs	r2, #64	@ 0x40
 80038dc:	4013      	ands	r3, r2
 80038de:	d00c      	beq.n	80038fa <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	2210      	movs	r2, #16
 80038e4:	4013      	ands	r3, r2
 80038e6:	d008      	beq.n	80038fa <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	2280      	movs	r2, #128	@ 0x80
 80038ec:	00d2      	lsls	r2, r2, #3
 80038ee:	4313      	orrs	r3, r2
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2210      	movs	r2, #16
 80038f8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2220      	movs	r2, #32
 80038fe:	4013      	ands	r3, r2
 8003900:	d00b      	beq.n	800391a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	2208      	movs	r2, #8
 8003906:	4013      	ands	r3, r2
 8003908:	d007      	beq.n	800391a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2208      	movs	r2, #8
 8003910:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	0018      	movs	r0, r3
 8003916:	f000 f8fc 	bl	8003b12 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800391a:	6a3b      	ldr	r3, [r7, #32]
 800391c:	2210      	movs	r2, #16
 800391e:	4013      	ands	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	2203      	movs	r2, #3
 800392a:	4013      	ands	r3, r2
 800392c:	d003      	beq.n	8003936 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	0018      	movs	r0, r3
 8003932:	f000 f8e6 	bl	8003b02 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	2380      	movs	r3, #128	@ 0x80
 800393a:	029b      	lsls	r3, r3, #10
 800393c:	4013      	ands	r3, r2
 800393e:	d00b      	beq.n	8003958 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2210      	movs	r2, #16
 8003944:	4013      	ands	r3, r2
 8003946:	d007      	beq.n	8003958 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2210      	movs	r2, #16
 800394e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	0018      	movs	r0, r3
 8003954:	f000 f8e5 	bl	8003b22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	2380      	movs	r3, #128	@ 0x80
 800395c:	025b      	lsls	r3, r3, #9
 800395e:	4013      	ands	r3, r2
 8003960:	d00b      	beq.n	800397a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	2208      	movs	r2, #8
 8003966:	4013      	ands	r3, r2
 8003968:	d007      	beq.n	800397a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2208      	movs	r2, #8
 8003970:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0018      	movs	r0, r3
 8003976:	f000 f8dc 	bl	8003b32 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	2380      	movs	r3, #128	@ 0x80
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	4013      	ands	r3, r2
 8003982:	d100      	bne.n	8003986 <HAL_CAN_IRQHandler+0x25c>
 8003984:	e074      	b.n	8003a70 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	2204      	movs	r2, #4
 800398a:	4013      	ands	r3, r2
 800398c:	d100      	bne.n	8003990 <HAL_CAN_IRQHandler+0x266>
 800398e:	e06b      	b.n	8003a68 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	2380      	movs	r3, #128	@ 0x80
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4013      	ands	r3, r2
 8003998:	d007      	beq.n	80039aa <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039a0:	d003      	beq.n	80039aa <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	2201      	movs	r2, #1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039aa:	6a3a      	ldr	r2, [r7, #32]
 80039ac:	2380      	movs	r3, #128	@ 0x80
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4013      	ands	r3, r2
 80039b2:	d007      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2202      	movs	r2, #2
 80039b8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039ba:	d003      	beq.n	80039c4 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039be:	2202      	movs	r2, #2
 80039c0:	4313      	orrs	r3, r2
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039c4:	6a3a      	ldr	r2, [r7, #32]
 80039c6:	2380      	movs	r3, #128	@ 0x80
 80039c8:	00db      	lsls	r3, r3, #3
 80039ca:	4013      	ands	r3, r2
 80039cc:	d007      	beq.n	80039de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2204      	movs	r2, #4
 80039d2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039d4:	d003      	beq.n	80039de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	2204      	movs	r2, #4
 80039da:	4313      	orrs	r3, r2
 80039dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039de:	6a3a      	ldr	r2, [r7, #32]
 80039e0:	2380      	movs	r3, #128	@ 0x80
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	4013      	ands	r3, r2
 80039e6:	d03f      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2270      	movs	r2, #112	@ 0x70
 80039ec:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80039ee:	d03b      	beq.n	8003a68 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2270      	movs	r2, #112	@ 0x70
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b60      	cmp	r3, #96	@ 0x60
 80039f8:	d027      	beq.n	8003a4a <HAL_CAN_IRQHandler+0x320>
 80039fa:	d82c      	bhi.n	8003a56 <HAL_CAN_IRQHandler+0x32c>
 80039fc:	2b50      	cmp	r3, #80	@ 0x50
 80039fe:	d01f      	beq.n	8003a40 <HAL_CAN_IRQHandler+0x316>
 8003a00:	d829      	bhi.n	8003a56 <HAL_CAN_IRQHandler+0x32c>
 8003a02:	2b40      	cmp	r3, #64	@ 0x40
 8003a04:	d017      	beq.n	8003a36 <HAL_CAN_IRQHandler+0x30c>
 8003a06:	d826      	bhi.n	8003a56 <HAL_CAN_IRQHandler+0x32c>
 8003a08:	2b30      	cmp	r3, #48	@ 0x30
 8003a0a:	d00f      	beq.n	8003a2c <HAL_CAN_IRQHandler+0x302>
 8003a0c:	d823      	bhi.n	8003a56 <HAL_CAN_IRQHandler+0x32c>
 8003a0e:	2b10      	cmp	r3, #16
 8003a10:	d002      	beq.n	8003a18 <HAL_CAN_IRQHandler+0x2ee>
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d005      	beq.n	8003a22 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a16:	e01e      	b.n	8003a56 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a20:	e01a      	b.n	8003a58 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a24:	2210      	movs	r2, #16
 8003a26:	4313      	orrs	r3, r2
 8003a28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a2a:	e015      	b.n	8003a58 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2e:	2220      	movs	r2, #32
 8003a30:	4313      	orrs	r3, r2
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a34:	e010      	b.n	8003a58 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a38:	2240      	movs	r2, #64	@ 0x40
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a3e:	e00b      	b.n	8003a58 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	2280      	movs	r2, #128	@ 0x80
 8003a44:	4313      	orrs	r3, r2
 8003a46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a48:	e006      	b.n	8003a58 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4c:	2280      	movs	r2, #128	@ 0x80
 8003a4e:	0052      	lsls	r2, r2, #1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a54:	e000      	b.n	8003a58 <HAL_CAN_IRQHandler+0x32e>
            break;
 8003a56:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2170      	movs	r1, #112	@ 0x70
 8003a64:	438a      	bics	r2, r1
 8003a66:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 f85c 	bl	8003b42 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b00a      	add	sp, #40	@ 0x28
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	b002      	add	sp, #8
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003aaa:	46c0      	nop			@ (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003aba:	46c0      	nop			@ (mov r8, r8)
 8003abc:	46bd      	mov	sp, r7
 8003abe:	b002      	add	sp, #8
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b082      	sub	sp, #8
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b002      	add	sp, #8
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	46bd      	mov	sp, r7
 8003aee:	b002      	add	sp, #8
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b082      	sub	sp, #8
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b082      	sub	sp, #8
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	b002      	add	sp, #8
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b082      	sub	sp, #8
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b2a:	46c0      	nop			@ (mov r8, r8)
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b002      	add	sp, #8
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b002      	add	sp, #8
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b002      	add	sp, #8
 8003b50:	bd80      	pop	{r7, pc}
	...

08003b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	0002      	movs	r2, r0
 8003b5c:	1dfb      	adds	r3, r7, #7
 8003b5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b60:	1dfb      	adds	r3, r7, #7
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b66:	d809      	bhi.n	8003b7c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b68:	1dfb      	adds	r3, r7, #7
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	001a      	movs	r2, r3
 8003b6e:	231f      	movs	r3, #31
 8003b70:	401a      	ands	r2, r3
 8003b72:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <__NVIC_EnableIRQ+0x30>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	4091      	lsls	r1, r2
 8003b78:	000a      	movs	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]
  }
}
 8003b7c:	46c0      	nop			@ (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b002      	add	sp, #8
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	e000e100 	.word	0xe000e100

08003b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b88:	b590      	push	{r4, r7, lr}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	0002      	movs	r2, r0
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	1dfb      	adds	r3, r7, #7
 8003b94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b96:	1dfb      	adds	r3, r7, #7
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b9c:	d828      	bhi.n	8003bf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c5c <__NVIC_SetPriority+0xd4>)
 8003ba0:	1dfb      	adds	r3, r7, #7
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	b25b      	sxtb	r3, r3
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	33c0      	adds	r3, #192	@ 0xc0
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	589b      	ldr	r3, [r3, r2]
 8003bae:	1dfa      	adds	r2, r7, #7
 8003bb0:	7812      	ldrb	r2, [r2, #0]
 8003bb2:	0011      	movs	r1, r2
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	00d2      	lsls	r2, r2, #3
 8003bba:	21ff      	movs	r1, #255	@ 0xff
 8003bbc:	4091      	lsls	r1, r2
 8003bbe:	000a      	movs	r2, r1
 8003bc0:	43d2      	mvns	r2, r2
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	019b      	lsls	r3, r3, #6
 8003bca:	22ff      	movs	r2, #255	@ 0xff
 8003bcc:	401a      	ands	r2, r3
 8003bce:	1dfb      	adds	r3, r7, #7
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	0018      	movs	r0, r3
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	4003      	ands	r3, r0
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bdc:	481f      	ldr	r0, [pc, #124]	@ (8003c5c <__NVIC_SetPriority+0xd4>)
 8003bde:	1dfb      	adds	r3, r7, #7
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b25b      	sxtb	r3, r3
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	430a      	orrs	r2, r1
 8003be8:	33c0      	adds	r3, #192	@ 0xc0
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003bee:	e031      	b.n	8003c54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c60 <__NVIC_SetPriority+0xd8>)
 8003bf2:	1dfb      	adds	r3, r7, #7
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	230f      	movs	r3, #15
 8003bfa:	400b      	ands	r3, r1
 8003bfc:	3b08      	subs	r3, #8
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3306      	adds	r3, #6
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	3304      	adds	r3, #4
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1dfa      	adds	r2, r7, #7
 8003c0c:	7812      	ldrb	r2, [r2, #0]
 8003c0e:	0011      	movs	r1, r2
 8003c10:	2203      	movs	r2, #3
 8003c12:	400a      	ands	r2, r1
 8003c14:	00d2      	lsls	r2, r2, #3
 8003c16:	21ff      	movs	r1, #255	@ 0xff
 8003c18:	4091      	lsls	r1, r2
 8003c1a:	000a      	movs	r2, r1
 8003c1c:	43d2      	mvns	r2, r2
 8003c1e:	401a      	ands	r2, r3
 8003c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	019b      	lsls	r3, r3, #6
 8003c26:	22ff      	movs	r2, #255	@ 0xff
 8003c28:	401a      	ands	r2, r3
 8003c2a:	1dfb      	adds	r3, r7, #7
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	0018      	movs	r0, r3
 8003c30:	2303      	movs	r3, #3
 8003c32:	4003      	ands	r3, r0
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c38:	4809      	ldr	r0, [pc, #36]	@ (8003c60 <__NVIC_SetPriority+0xd8>)
 8003c3a:	1dfb      	adds	r3, r7, #7
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	001c      	movs	r4, r3
 8003c40:	230f      	movs	r3, #15
 8003c42:	4023      	ands	r3, r4
 8003c44:	3b08      	subs	r3, #8
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	3306      	adds	r3, #6
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	18c3      	adds	r3, r0, r3
 8003c50:	3304      	adds	r3, #4
 8003c52:	601a      	str	r2, [r3, #0]
}
 8003c54:	46c0      	nop			@ (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b003      	add	sp, #12
 8003c5a:	bd90      	pop	{r4, r7, pc}
 8003c5c:	e000e100 	.word	0xe000e100
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	1e5a      	subs	r2, r3, #1
 8003c70:	2380      	movs	r3, #128	@ 0x80
 8003c72:	045b      	lsls	r3, r3, #17
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d301      	bcc.n	8003c7c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e010      	b.n	8003c9e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca8 <SysTick_Config+0x44>)
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	3a01      	subs	r2, #1
 8003c82:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c84:	2301      	movs	r3, #1
 8003c86:	425b      	negs	r3, r3
 8003c88:	2103      	movs	r1, #3
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f7ff ff7c 	bl	8003b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c90:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <SysTick_Config+0x44>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c96:	4b04      	ldr	r3, [pc, #16]	@ (8003ca8 <SysTick_Config+0x44>)
 8003c98:	2207      	movs	r2, #7
 8003c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	b002      	add	sp, #8
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	46c0      	nop			@ (mov r8, r8)
 8003ca8:	e000e010 	.word	0xe000e010

08003cac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	210f      	movs	r1, #15
 8003cb8:	187b      	adds	r3, r7, r1
 8003cba:	1c02      	adds	r2, r0, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b25b      	sxtb	r3, r3
 8003cc6:	0011      	movs	r1, r2
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7ff ff5d 	bl	8003b88 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b004      	add	sp, #16
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	0002      	movs	r2, r0
 8003cde:	1dfb      	adds	r3, r7, #7
 8003ce0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce2:	1dfb      	adds	r3, r7, #7
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff ff33 	bl	8003b54 <__NVIC_EnableIRQ>
}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b002      	add	sp, #8
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0018      	movs	r0, r3
 8003d02:	f7ff ffaf 	bl	8003c64 <SysTick_Config>
 8003d06:	0003      	movs	r3, r0
}
 8003d08:	0018      	movs	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	b002      	add	sp, #8
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e036      	b.n	8003d94 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2221      	movs	r2, #33	@ 0x21
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a18      	ldr	r2, [pc, #96]	@ (8003d9c <HAL_DMA_Init+0x8c>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	695b      	ldr	r3, [r3, #20]
 8003d58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69db      	ldr	r3, [r3, #28]
 8003d64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 f946 	bl	8004008 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2221      	movs	r2, #33	@ 0x21
 8003d86:	2101      	movs	r1, #1
 8003d88:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	2100      	movs	r1, #0
 8003d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	0018      	movs	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	b004      	add	sp, #16
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	ffffc00f 	.word	0xffffc00f

08003da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dae:	2317      	movs	r3, #23
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	5c9b      	ldrb	r3, [r3, r2]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d101      	bne.n	8003dc4 <HAL_DMA_Start_IT+0x24>
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	e04f      	b.n	8003e64 <HAL_DMA_Start_IT+0xc4>
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	2101      	movs	r1, #1
 8003dca:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2221      	movs	r2, #33	@ 0x21
 8003dd0:	5c9b      	ldrb	r3, [r3, r2]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d13a      	bne.n	8003e4e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2221      	movs	r2, #33	@ 0x21
 8003ddc:	2102      	movs	r1, #2
 8003dde:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2101      	movs	r1, #1
 8003df2:	438a      	bics	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	68b9      	ldr	r1, [r7, #8]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f8d7 	bl	8003fb0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	210e      	movs	r1, #14
 8003e16:	430a      	orrs	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	e00f      	b.n	8003e3c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	210a      	movs	r1, #10
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2104      	movs	r1, #4
 8003e38:	438a      	bics	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	e007      	b.n	8003e5e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	2100      	movs	r1, #0
 8003e54:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e56:	2317      	movs	r3, #23
 8003e58:	18fb      	adds	r3, r7, r3
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003e5e:	2317      	movs	r3, #23
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	781b      	ldrb	r3, [r3, #0]
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b006      	add	sp, #24
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	2204      	movs	r2, #4
 8003e8a:	409a      	lsls	r2, r3
 8003e8c:	0013      	movs	r3, r2
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	4013      	ands	r3, r2
 8003e92:	d024      	beq.n	8003ede <HAL_DMA_IRQHandler+0x72>
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2204      	movs	r2, #4
 8003e98:	4013      	ands	r3, r2
 8003e9a:	d020      	beq.n	8003ede <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d107      	bne.n	8003eb8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2104      	movs	r1, #4
 8003eb4:	438a      	bics	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	2104      	movs	r1, #4
 8003ec2:	4091      	lsls	r1, r2
 8003ec4:	000a      	movs	r2, r1
 8003ec6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d100      	bne.n	8003ed2 <HAL_DMA_IRQHandler+0x66>
 8003ed0:	e06a      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	0010      	movs	r0, r2
 8003eda:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003edc:	e064      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	0013      	movs	r3, r2
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	4013      	ands	r3, r2
 8003eec:	d02b      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xda>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2202      	movs	r2, #2
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d027      	beq.n	8003f46 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2220      	movs	r2, #32
 8003efe:	4013      	ands	r3, r2
 8003f00:	d10b      	bne.n	8003f1a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	210a      	movs	r1, #10
 8003f0e:	438a      	bics	r2, r1
 8003f10:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2221      	movs	r2, #33	@ 0x21
 8003f16:	2101      	movs	r1, #1
 8003f18:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f22:	2102      	movs	r1, #2
 8003f24:	4091      	lsls	r1, r2
 8003f26:	000a      	movs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	2100      	movs	r1, #0
 8003f30:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d036      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	0010      	movs	r0, r2
 8003f42:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f44:	e030      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	409a      	lsls	r2, r3
 8003f4e:	0013      	movs	r3, r2
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4013      	ands	r3, r2
 8003f54:	d028      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x13c>
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2208      	movs	r2, #8
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d024      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	210e      	movs	r1, #14
 8003f6a:	438a      	bics	r2, r1
 8003f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f76:	2101      	movs	r1, #1
 8003f78:	4091      	lsls	r1, r2
 8003f7a:	000a      	movs	r2, r1
 8003f7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2221      	movs	r2, #33	@ 0x21
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	2100      	movs	r1, #0
 8003f92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	0010      	movs	r0, r2
 8003fa4:	4798      	blx	r3
    }
  }
}
 8003fa6:	e7ff      	b.n	8003fa8 <HAL_DMA_IRQHandler+0x13c>
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b004      	add	sp, #16
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4091      	lsls	r1, r2
 8003fca:	000a      	movs	r2, r1
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d108      	bne.n	8003ff0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003fee:	e007      	b.n	8004000 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	60da      	str	r2, [r3, #12]
}
 8004000:	46c0      	nop			@ (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bd80      	pop	{r7, pc}

08004008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a08      	ldr	r2, [pc, #32]	@ (8004038 <DMA_CalcBaseAndBitshift+0x30>)
 8004016:	4694      	mov	ip, r2
 8004018:	4463      	add	r3, ip
 800401a:	2114      	movs	r1, #20
 800401c:	0018      	movs	r0, r3
 800401e:	f7fc f873 	bl	8000108 <__udivsi3>
 8004022:	0003      	movs	r3, r0
 8004024:	009a      	lsls	r2, r3, #2
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a03      	ldr	r2, [pc, #12]	@ (800403c <DMA_CalcBaseAndBitshift+0x34>)
 800402e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004030:	46c0      	nop			@ (mov r8, r8)
 8004032:	46bd      	mov	sp, r7
 8004034:	b002      	add	sp, #8
 8004036:	bd80      	pop	{r7, pc}
 8004038:	bffdfff8 	.word	0xbffdfff8
 800403c:	40020000 	.word	0x40020000

08004040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800404a:	2300      	movs	r3, #0
 800404c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800404e:	e149      	b.n	80042e4 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2101      	movs	r1, #1
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	4091      	lsls	r1, r2
 800405a:	000a      	movs	r2, r1
 800405c:	4013      	ands	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d100      	bne.n	8004068 <HAL_GPIO_Init+0x28>
 8004066:	e13a      	b.n	80042de <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2203      	movs	r2, #3
 800406e:	4013      	ands	r3, r2
 8004070:	2b01      	cmp	r3, #1
 8004072:	d005      	beq.n	8004080 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	2203      	movs	r2, #3
 800407a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800407c:	2b02      	cmp	r3, #2
 800407e:	d130      	bne.n	80040e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	2203      	movs	r2, #3
 800408c:	409a      	lsls	r2, r3
 800408e:	0013      	movs	r3, r2
 8004090:	43da      	mvns	r2, r3
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	409a      	lsls	r2, r3
 80040a2:	0013      	movs	r3, r2
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040b6:	2201      	movs	r2, #1
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	409a      	lsls	r2, r3
 80040bc:	0013      	movs	r3, r2
 80040be:	43da      	mvns	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4013      	ands	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	2201      	movs	r2, #1
 80040ce:	401a      	ands	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	409a      	lsls	r2, r3
 80040d4:	0013      	movs	r3, r2
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	4313      	orrs	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	2203      	movs	r2, #3
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d017      	beq.n	800411e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	2203      	movs	r2, #3
 80040fa:	409a      	lsls	r2, r3
 80040fc:	0013      	movs	r3, r2
 80040fe:	43da      	mvns	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	4013      	ands	r3, r2
 8004104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	409a      	lsls	r2, r3
 8004110:	0013      	movs	r3, r2
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2203      	movs	r2, #3
 8004124:	4013      	ands	r3, r2
 8004126:	2b02      	cmp	r3, #2
 8004128:	d123      	bne.n	8004172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	08da      	lsrs	r2, r3, #3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	3208      	adds	r2, #8
 8004132:	0092      	lsls	r2, r2, #2
 8004134:	58d3      	ldr	r3, [r2, r3]
 8004136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2207      	movs	r2, #7
 800413c:	4013      	ands	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	220f      	movs	r2, #15
 8004142:	409a      	lsls	r2, r3
 8004144:	0013      	movs	r3, r2
 8004146:	43da      	mvns	r2, r3
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	691a      	ldr	r2, [r3, #16]
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2107      	movs	r1, #7
 8004156:	400b      	ands	r3, r1
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	409a      	lsls	r2, r3
 800415c:	0013      	movs	r3, r2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	08da      	lsrs	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	3208      	adds	r2, #8
 800416c:	0092      	lsls	r2, r2, #2
 800416e:	6939      	ldr	r1, [r7, #16]
 8004170:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	2203      	movs	r2, #3
 800417e:	409a      	lsls	r2, r3
 8004180:	0013      	movs	r3, r2
 8004182:	43da      	mvns	r2, r3
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4013      	ands	r3, r2
 8004188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2203      	movs	r2, #3
 8004190:	401a      	ands	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	0013      	movs	r3, r2
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	23c0      	movs	r3, #192	@ 0xc0
 80041ac:	029b      	lsls	r3, r3, #10
 80041ae:	4013      	ands	r3, r2
 80041b0:	d100      	bne.n	80041b4 <HAL_GPIO_Init+0x174>
 80041b2:	e094      	b.n	80042de <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b4:	4b51      	ldr	r3, [pc, #324]	@ (80042fc <HAL_GPIO_Init+0x2bc>)
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	4b50      	ldr	r3, [pc, #320]	@ (80042fc <HAL_GPIO_Init+0x2bc>)
 80041ba:	2101      	movs	r1, #1
 80041bc:	430a      	orrs	r2, r1
 80041be:	619a      	str	r2, [r3, #24]
 80041c0:	4b4e      	ldr	r3, [pc, #312]	@ (80042fc <HAL_GPIO_Init+0x2bc>)
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2201      	movs	r2, #1
 80041c6:	4013      	ands	r3, r2
 80041c8:	60bb      	str	r3, [r7, #8]
 80041ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041cc:	4a4c      	ldr	r2, [pc, #304]	@ (8004300 <HAL_GPIO_Init+0x2c0>)
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	089b      	lsrs	r3, r3, #2
 80041d2:	3302      	adds	r3, #2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	589b      	ldr	r3, [r3, r2]
 80041d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2203      	movs	r2, #3
 80041de:	4013      	ands	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	220f      	movs	r2, #15
 80041e4:	409a      	lsls	r2, r3
 80041e6:	0013      	movs	r3, r2
 80041e8:	43da      	mvns	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	4013      	ands	r3, r2
 80041ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	2390      	movs	r3, #144	@ 0x90
 80041f4:	05db      	lsls	r3, r3, #23
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d00d      	beq.n	8004216 <HAL_GPIO_Init+0x1d6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a41      	ldr	r2, [pc, #260]	@ (8004304 <HAL_GPIO_Init+0x2c4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <HAL_GPIO_Init+0x1d2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a40      	ldr	r2, [pc, #256]	@ (8004308 <HAL_GPIO_Init+0x2c8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_GPIO_Init+0x1ce>
 800420a:	2302      	movs	r3, #2
 800420c:	e004      	b.n	8004218 <HAL_GPIO_Init+0x1d8>
 800420e:	2305      	movs	r3, #5
 8004210:	e002      	b.n	8004218 <HAL_GPIO_Init+0x1d8>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_GPIO_Init+0x1d8>
 8004216:	2300      	movs	r3, #0
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	2103      	movs	r1, #3
 800421c:	400a      	ands	r2, r1
 800421e:	0092      	lsls	r2, r2, #2
 8004220:	4093      	lsls	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004228:	4935      	ldr	r1, [pc, #212]	@ (8004300 <HAL_GPIO_Init+0x2c0>)
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	3302      	adds	r3, #2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004236:	4b35      	ldr	r3, [pc, #212]	@ (800430c <HAL_GPIO_Init+0x2cc>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	43da      	mvns	r2, r3
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	4013      	ands	r3, r2
 8004244:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	2380      	movs	r3, #128	@ 0x80
 800424c:	035b      	lsls	r3, r3, #13
 800424e:	4013      	ands	r3, r2
 8004250:	d003      	beq.n	800425a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4313      	orrs	r3, r2
 8004258:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800425a:	4b2c      	ldr	r3, [pc, #176]	@ (800430c <HAL_GPIO_Init+0x2cc>)
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004260:	4b2a      	ldr	r3, [pc, #168]	@ (800430c <HAL_GPIO_Init+0x2cc>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	43da      	mvns	r2, r3
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685a      	ldr	r2, [r3, #4]
 8004274:	2380      	movs	r3, #128	@ 0x80
 8004276:	039b      	lsls	r3, r3, #14
 8004278:	4013      	ands	r3, r2
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004284:	4b21      	ldr	r3, [pc, #132]	@ (800430c <HAL_GPIO_Init+0x2cc>)
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800428a:	4b20      	ldr	r3, [pc, #128]	@ (800430c <HAL_GPIO_Init+0x2cc>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	43da      	mvns	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4013      	ands	r3, r2
 8004298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	2380      	movs	r3, #128	@ 0x80
 80042a0:	029b      	lsls	r3, r3, #10
 80042a2:	4013      	ands	r3, r2
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042ae:	4b17      	ldr	r3, [pc, #92]	@ (800430c <HAL_GPIO_Init+0x2cc>)
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80042b4:	4b15      	ldr	r3, [pc, #84]	@ (800430c <HAL_GPIO_Init+0x2cc>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	43da      	mvns	r2, r3
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	2380      	movs	r3, #128	@ 0x80
 80042ca:	025b      	lsls	r3, r3, #9
 80042cc:	4013      	ands	r3, r2
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80042d8:	4b0c      	ldr	r3, [pc, #48]	@ (800430c <HAL_GPIO_Init+0x2cc>)
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	3301      	adds	r3, #1
 80042e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	40da      	lsrs	r2, r3
 80042ec:	1e13      	subs	r3, r2, #0
 80042ee:	d000      	beq.n	80042f2 <HAL_GPIO_Init+0x2b2>
 80042f0:	e6ae      	b.n	8004050 <HAL_GPIO_Init+0x10>
  } 
}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	46c0      	nop			@ (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b006      	add	sp, #24
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000
 8004300:	40010000 	.word	0x40010000
 8004304:	48000400 	.word	0x48000400
 8004308:	48000800 	.word	0x48000800
 800430c:	40010400 	.word	0x40010400

08004310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	0008      	movs	r0, r1
 800431a:	0011      	movs	r1, r2
 800431c:	1cbb      	adds	r3, r7, #2
 800431e:	1c02      	adds	r2, r0, #0
 8004320:	801a      	strh	r2, [r3, #0]
 8004322:	1c7b      	adds	r3, r7, #1
 8004324:	1c0a      	adds	r2, r1, #0
 8004326:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004328:	1c7b      	adds	r3, r7, #1
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004330:	1cbb      	adds	r3, r7, #2
 8004332:	881a      	ldrh	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004338:	e003      	b.n	8004342 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800433a:	1cbb      	adds	r3, r7, #2
 800433c:	881a      	ldrh	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	46bd      	mov	sp, r7
 8004346:	b002      	add	sp, #8
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d102      	bne.n	8004360 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f000 fb76 	bl	8004a4c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2201      	movs	r2, #1
 8004366:	4013      	ands	r3, r2
 8004368:	d100      	bne.n	800436c <HAL_RCC_OscConfig+0x20>
 800436a:	e08e      	b.n	800448a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800436c:	4bc5      	ldr	r3, [pc, #788]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	220c      	movs	r2, #12
 8004372:	4013      	ands	r3, r2
 8004374:	2b04      	cmp	r3, #4
 8004376:	d00e      	beq.n	8004396 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004378:	4bc2      	ldr	r3, [pc, #776]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	220c      	movs	r2, #12
 800437e:	4013      	ands	r3, r2
 8004380:	2b08      	cmp	r3, #8
 8004382:	d117      	bne.n	80043b4 <HAL_RCC_OscConfig+0x68>
 8004384:	4bbf      	ldr	r3, [pc, #764]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	23c0      	movs	r3, #192	@ 0xc0
 800438a:	025b      	lsls	r3, r3, #9
 800438c:	401a      	ands	r2, r3
 800438e:	2380      	movs	r3, #128	@ 0x80
 8004390:	025b      	lsls	r3, r3, #9
 8004392:	429a      	cmp	r2, r3
 8004394:	d10e      	bne.n	80043b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004396:	4bbb      	ldr	r3, [pc, #748]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	@ 0x80
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	4013      	ands	r3, r2
 80043a0:	d100      	bne.n	80043a4 <HAL_RCC_OscConfig+0x58>
 80043a2:	e071      	b.n	8004488 <HAL_RCC_OscConfig+0x13c>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d000      	beq.n	80043ae <HAL_RCC_OscConfig+0x62>
 80043ac:	e06c      	b.n	8004488 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f000 fb4c 	bl	8004a4c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d107      	bne.n	80043cc <HAL_RCC_OscConfig+0x80>
 80043bc:	4bb1      	ldr	r3, [pc, #708]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	4bb0      	ldr	r3, [pc, #704]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80043c2:	2180      	movs	r1, #128	@ 0x80
 80043c4:	0249      	lsls	r1, r1, #9
 80043c6:	430a      	orrs	r2, r1
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	e02f      	b.n	800442c <HAL_RCC_OscConfig+0xe0>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10c      	bne.n	80043ee <HAL_RCC_OscConfig+0xa2>
 80043d4:	4bab      	ldr	r3, [pc, #684]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4baa      	ldr	r3, [pc, #680]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80043da:	49ab      	ldr	r1, [pc, #684]	@ (8004688 <HAL_RCC_OscConfig+0x33c>)
 80043dc:	400a      	ands	r2, r1
 80043de:	601a      	str	r2, [r3, #0]
 80043e0:	4ba8      	ldr	r3, [pc, #672]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	4ba7      	ldr	r3, [pc, #668]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80043e6:	49a9      	ldr	r1, [pc, #676]	@ (800468c <HAL_RCC_OscConfig+0x340>)
 80043e8:	400a      	ands	r2, r1
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	e01e      	b.n	800442c <HAL_RCC_OscConfig+0xe0>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b05      	cmp	r3, #5
 80043f4:	d10e      	bne.n	8004414 <HAL_RCC_OscConfig+0xc8>
 80043f6:	4ba3      	ldr	r3, [pc, #652]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4ba2      	ldr	r3, [pc, #648]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80043fc:	2180      	movs	r1, #128	@ 0x80
 80043fe:	02c9      	lsls	r1, r1, #11
 8004400:	430a      	orrs	r2, r1
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	4b9f      	ldr	r3, [pc, #636]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b9e      	ldr	r3, [pc, #632]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800440a:	2180      	movs	r1, #128	@ 0x80
 800440c:	0249      	lsls	r1, r1, #9
 800440e:	430a      	orrs	r2, r1
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	e00b      	b.n	800442c <HAL_RCC_OscConfig+0xe0>
 8004414:	4b9b      	ldr	r3, [pc, #620]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	4b9a      	ldr	r3, [pc, #616]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800441a:	499b      	ldr	r1, [pc, #620]	@ (8004688 <HAL_RCC_OscConfig+0x33c>)
 800441c:	400a      	ands	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	4b98      	ldr	r3, [pc, #608]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	4b97      	ldr	r3, [pc, #604]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004426:	4999      	ldr	r1, [pc, #612]	@ (800468c <HAL_RCC_OscConfig+0x340>)
 8004428:	400a      	ands	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d014      	beq.n	800445e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fd ffe8 	bl	8002408 <HAL_GetTick>
 8004438:	0003      	movs	r3, r0
 800443a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800443c:	e008      	b.n	8004450 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800443e:	f7fd ffe3 	bl	8002408 <HAL_GetTick>
 8004442:	0002      	movs	r2, r0
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b64      	cmp	r3, #100	@ 0x64
 800444a:	d901      	bls.n	8004450 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e2fd      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004450:	4b8c      	ldr	r3, [pc, #560]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	2380      	movs	r3, #128	@ 0x80
 8004456:	029b      	lsls	r3, r3, #10
 8004458:	4013      	ands	r3, r2
 800445a:	d0f0      	beq.n	800443e <HAL_RCC_OscConfig+0xf2>
 800445c:	e015      	b.n	800448a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fd ffd3 	bl	8002408 <HAL_GetTick>
 8004462:	0003      	movs	r3, r0
 8004464:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd ffce 	bl	8002408 <HAL_GetTick>
 800446c:	0002      	movs	r2, r0
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	@ 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e2e8      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447a:	4b82      	ldr	r3, [pc, #520]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	029b      	lsls	r3, r3, #10
 8004482:	4013      	ands	r3, r2
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x11c>
 8004486:	e000      	b.n	800448a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2202      	movs	r2, #2
 8004490:	4013      	ands	r3, r2
 8004492:	d100      	bne.n	8004496 <HAL_RCC_OscConfig+0x14a>
 8004494:	e06c      	b.n	8004570 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004496:	4b7b      	ldr	r3, [pc, #492]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	220c      	movs	r2, #12
 800449c:	4013      	ands	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80044a0:	4b78      	ldr	r3, [pc, #480]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	220c      	movs	r2, #12
 80044a6:	4013      	ands	r3, r2
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d11f      	bne.n	80044ec <HAL_RCC_OscConfig+0x1a0>
 80044ac:	4b75      	ldr	r3, [pc, #468]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	23c0      	movs	r3, #192	@ 0xc0
 80044b2:	025b      	lsls	r3, r3, #9
 80044b4:	401a      	ands	r2, r3
 80044b6:	2380      	movs	r3, #128	@ 0x80
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d116      	bne.n	80044ec <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044be:	4b71      	ldr	r3, [pc, #452]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2202      	movs	r2, #2
 80044c4:	4013      	ands	r3, r2
 80044c6:	d005      	beq.n	80044d4 <HAL_RCC_OscConfig+0x188>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d001      	beq.n	80044d4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e2bb      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	22f8      	movs	r2, #248	@ 0xf8
 80044da:	4393      	bics	r3, r2
 80044dc:	0019      	movs	r1, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	00da      	lsls	r2, r3, #3
 80044e4:	4b67      	ldr	r3, [pc, #412]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	e041      	b.n	8004570 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d024      	beq.n	800453e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044f4:	4b63      	ldr	r3, [pc, #396]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b62      	ldr	r3, [pc, #392]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80044fa:	2101      	movs	r1, #1
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004500:	f7fd ff82 	bl	8002408 <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800450a:	f7fd ff7d 	bl	8002408 <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e297      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451c:	4b59      	ldr	r3, [pc, #356]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2202      	movs	r2, #2
 8004522:	4013      	ands	r3, r2
 8004524:	d0f1      	beq.n	800450a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004526:	4b57      	ldr	r3, [pc, #348]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	22f8      	movs	r2, #248	@ 0xf8
 800452c:	4393      	bics	r3, r2
 800452e:	0019      	movs	r1, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	00da      	lsls	r2, r3, #3
 8004536:	4b53      	ldr	r3, [pc, #332]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004538:	430a      	orrs	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	e018      	b.n	8004570 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800453e:	4b51      	ldr	r3, [pc, #324]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b50      	ldr	r3, [pc, #320]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004544:	2101      	movs	r1, #1
 8004546:	438a      	bics	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454a:	f7fd ff5d 	bl	8002408 <HAL_GetTick>
 800454e:	0003      	movs	r3, r0
 8004550:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004554:	f7fd ff58 	bl	8002408 <HAL_GetTick>
 8004558:	0002      	movs	r2, r0
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e272      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	4b47      	ldr	r3, [pc, #284]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2202      	movs	r2, #2
 800456c:	4013      	ands	r3, r2
 800456e:	d1f1      	bne.n	8004554 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2208      	movs	r2, #8
 8004576:	4013      	ands	r3, r2
 8004578:	d036      	beq.n	80045e8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d019      	beq.n	80045b6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004582:	4b40      	ldr	r3, [pc, #256]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004584:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004586:	4b3f      	ldr	r3, [pc, #252]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004588:	2101      	movs	r1, #1
 800458a:	430a      	orrs	r2, r1
 800458c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fd ff3b 	bl	8002408 <HAL_GetTick>
 8004592:	0003      	movs	r3, r0
 8004594:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fd ff36 	bl	8002408 <HAL_GetTick>
 800459c:	0002      	movs	r2, r0
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e250      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	4b36      	ldr	r3, [pc, #216]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	2202      	movs	r2, #2
 80045b0:	4013      	ands	r3, r2
 80045b2:	d0f1      	beq.n	8004598 <HAL_RCC_OscConfig+0x24c>
 80045b4:	e018      	b.n	80045e8 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b6:	4b33      	ldr	r3, [pc, #204]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80045b8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045ba:	4b32      	ldr	r3, [pc, #200]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80045bc:	2101      	movs	r1, #1
 80045be:	438a      	bics	r2, r1
 80045c0:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fd ff21 	bl	8002408 <HAL_GetTick>
 80045c6:	0003      	movs	r3, r0
 80045c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045ca:	e008      	b.n	80045de <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045cc:	f7fd ff1c 	bl	8002408 <HAL_GetTick>
 80045d0:	0002      	movs	r2, r0
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e236      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045de:	4b29      	ldr	r3, [pc, #164]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80045e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e2:	2202      	movs	r2, #2
 80045e4:	4013      	ands	r3, r2
 80045e6:	d1f1      	bne.n	80045cc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2204      	movs	r2, #4
 80045ee:	4013      	ands	r3, r2
 80045f0:	d100      	bne.n	80045f4 <HAL_RCC_OscConfig+0x2a8>
 80045f2:	e0b5      	b.n	8004760 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f4:	201f      	movs	r0, #31
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fc:	4b21      	ldr	r3, [pc, #132]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 80045fe:	69da      	ldr	r2, [r3, #28]
 8004600:	2380      	movs	r3, #128	@ 0x80
 8004602:	055b      	lsls	r3, r3, #21
 8004604:	4013      	ands	r3, r2
 8004606:	d110      	bne.n	800462a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004608:	4b1e      	ldr	r3, [pc, #120]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800460a:	69da      	ldr	r2, [r3, #28]
 800460c:	4b1d      	ldr	r3, [pc, #116]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800460e:	2180      	movs	r1, #128	@ 0x80
 8004610:	0549      	lsls	r1, r1, #21
 8004612:	430a      	orrs	r2, r1
 8004614:	61da      	str	r2, [r3, #28]
 8004616:	4b1b      	ldr	r3, [pc, #108]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004618:	69da      	ldr	r2, [r3, #28]
 800461a:	2380      	movs	r3, #128	@ 0x80
 800461c:	055b      	lsls	r3, r3, #21
 800461e:	4013      	ands	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
 8004622:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004624:	183b      	adds	r3, r7, r0
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800462a:	4b19      	ldr	r3, [pc, #100]	@ (8004690 <HAL_RCC_OscConfig+0x344>)
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	@ 0x80
 8004630:	005b      	lsls	r3, r3, #1
 8004632:	4013      	ands	r3, r2
 8004634:	d11a      	bne.n	800466c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004636:	4b16      	ldr	r3, [pc, #88]	@ (8004690 <HAL_RCC_OscConfig+0x344>)
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	4b15      	ldr	r3, [pc, #84]	@ (8004690 <HAL_RCC_OscConfig+0x344>)
 800463c:	2180      	movs	r1, #128	@ 0x80
 800463e:	0049      	lsls	r1, r1, #1
 8004640:	430a      	orrs	r2, r1
 8004642:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004644:	f7fd fee0 	bl	8002408 <HAL_GetTick>
 8004648:	0003      	movs	r3, r0
 800464a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800464e:	f7fd fedb 	bl	8002408 <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b64      	cmp	r3, #100	@ 0x64
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e1f5      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004660:	4b0b      	ldr	r3, [pc, #44]	@ (8004690 <HAL_RCC_OscConfig+0x344>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2380      	movs	r3, #128	@ 0x80
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4013      	ands	r3, r2
 800466a:	d0f0      	beq.n	800464e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d10f      	bne.n	8004694 <HAL_RCC_OscConfig+0x348>
 8004674:	4b03      	ldr	r3, [pc, #12]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 8004676:	6a1a      	ldr	r2, [r3, #32]
 8004678:	4b02      	ldr	r3, [pc, #8]	@ (8004684 <HAL_RCC_OscConfig+0x338>)
 800467a:	2101      	movs	r1, #1
 800467c:	430a      	orrs	r2, r1
 800467e:	621a      	str	r2, [r3, #32]
 8004680:	e036      	b.n	80046f0 <HAL_RCC_OscConfig+0x3a4>
 8004682:	46c0      	nop			@ (mov r8, r8)
 8004684:	40021000 	.word	0x40021000
 8004688:	fffeffff 	.word	0xfffeffff
 800468c:	fffbffff 	.word	0xfffbffff
 8004690:	40007000 	.word	0x40007000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10c      	bne.n	80046b6 <HAL_RCC_OscConfig+0x36a>
 800469c:	4bca      	ldr	r3, [pc, #808]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800469e:	6a1a      	ldr	r2, [r3, #32]
 80046a0:	4bc9      	ldr	r3, [pc, #804]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046a2:	2101      	movs	r1, #1
 80046a4:	438a      	bics	r2, r1
 80046a6:	621a      	str	r2, [r3, #32]
 80046a8:	4bc7      	ldr	r3, [pc, #796]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046aa:	6a1a      	ldr	r2, [r3, #32]
 80046ac:	4bc6      	ldr	r3, [pc, #792]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046ae:	2104      	movs	r1, #4
 80046b0:	438a      	bics	r2, r1
 80046b2:	621a      	str	r2, [r3, #32]
 80046b4:	e01c      	b.n	80046f0 <HAL_RCC_OscConfig+0x3a4>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d10c      	bne.n	80046d8 <HAL_RCC_OscConfig+0x38c>
 80046be:	4bc2      	ldr	r3, [pc, #776]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046c0:	6a1a      	ldr	r2, [r3, #32]
 80046c2:	4bc1      	ldr	r3, [pc, #772]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046c4:	2104      	movs	r1, #4
 80046c6:	430a      	orrs	r2, r1
 80046c8:	621a      	str	r2, [r3, #32]
 80046ca:	4bbf      	ldr	r3, [pc, #764]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046cc:	6a1a      	ldr	r2, [r3, #32]
 80046ce:	4bbe      	ldr	r3, [pc, #760]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046d0:	2101      	movs	r1, #1
 80046d2:	430a      	orrs	r2, r1
 80046d4:	621a      	str	r2, [r3, #32]
 80046d6:	e00b      	b.n	80046f0 <HAL_RCC_OscConfig+0x3a4>
 80046d8:	4bbb      	ldr	r3, [pc, #748]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046da:	6a1a      	ldr	r2, [r3, #32]
 80046dc:	4bba      	ldr	r3, [pc, #744]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046de:	2101      	movs	r1, #1
 80046e0:	438a      	bics	r2, r1
 80046e2:	621a      	str	r2, [r3, #32]
 80046e4:	4bb8      	ldr	r3, [pc, #736]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046e6:	6a1a      	ldr	r2, [r3, #32]
 80046e8:	4bb7      	ldr	r3, [pc, #732]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80046ea:	2104      	movs	r1, #4
 80046ec:	438a      	bics	r2, r1
 80046ee:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d014      	beq.n	8004722 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f8:	f7fd fe86 	bl	8002408 <HAL_GetTick>
 80046fc:	0003      	movs	r3, r0
 80046fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	e009      	b.n	8004716 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fd fe81 	bl	8002408 <HAL_GetTick>
 8004706:	0002      	movs	r2, r0
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	4aaf      	ldr	r2, [pc, #700]	@ (80049cc <HAL_RCC_OscConfig+0x680>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e19a      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004716:	4bac      	ldr	r3, [pc, #688]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	2202      	movs	r2, #2
 800471c:	4013      	ands	r3, r2
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x3b6>
 8004720:	e013      	b.n	800474a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004722:	f7fd fe71 	bl	8002408 <HAL_GetTick>
 8004726:	0003      	movs	r3, r0
 8004728:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800472a:	e009      	b.n	8004740 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472c:	f7fd fe6c 	bl	8002408 <HAL_GetTick>
 8004730:	0002      	movs	r2, r0
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	4aa5      	ldr	r2, [pc, #660]	@ (80049cc <HAL_RCC_OscConfig+0x680>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e185      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004740:	4ba1      	ldr	r3, [pc, #644]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	2202      	movs	r2, #2
 8004746:	4013      	ands	r3, r2
 8004748:	d1f0      	bne.n	800472c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800474a:	231f      	movs	r3, #31
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d105      	bne.n	8004760 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b9c      	ldr	r3, [pc, #624]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004756:	69da      	ldr	r2, [r3, #28]
 8004758:	4b9b      	ldr	r3, [pc, #620]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800475a:	499d      	ldr	r1, [pc, #628]	@ (80049d0 <HAL_RCC_OscConfig+0x684>)
 800475c:	400a      	ands	r2, r1
 800475e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2210      	movs	r2, #16
 8004766:	4013      	ands	r3, r2
 8004768:	d063      	beq.n	8004832 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d12a      	bne.n	80047c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004772:	4b95      	ldr	r3, [pc, #596]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004776:	4b94      	ldr	r3, [pc, #592]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004778:	2104      	movs	r1, #4
 800477a:	430a      	orrs	r2, r1
 800477c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800477e:	4b92      	ldr	r3, [pc, #584]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004782:	4b91      	ldr	r3, [pc, #580]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004784:	2101      	movs	r1, #1
 8004786:	430a      	orrs	r2, r1
 8004788:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800478a:	f7fd fe3d 	bl	8002408 <HAL_GetTick>
 800478e:	0003      	movs	r3, r0
 8004790:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004794:	f7fd fe38 	bl	8002408 <HAL_GetTick>
 8004798:	0002      	movs	r2, r0
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e152      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80047a6:	4b88      	ldr	r3, [pc, #544]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047aa:	2202      	movs	r2, #2
 80047ac:	4013      	ands	r3, r2
 80047ae:	d0f1      	beq.n	8004794 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80047b0:	4b85      	ldr	r3, [pc, #532]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047b4:	22f8      	movs	r2, #248	@ 0xf8
 80047b6:	4393      	bics	r3, r2
 80047b8:	0019      	movs	r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	00da      	lsls	r2, r3, #3
 80047c0:	4b81      	ldr	r3, [pc, #516]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047c2:	430a      	orrs	r2, r1
 80047c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80047c6:	e034      	b.n	8004832 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	3305      	adds	r3, #5
 80047ce:	d111      	bne.n	80047f4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80047d0:	4b7d      	ldr	r3, [pc, #500]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047d4:	4b7c      	ldr	r3, [pc, #496]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047d6:	2104      	movs	r1, #4
 80047d8:	438a      	bics	r2, r1
 80047da:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80047dc:	4b7a      	ldr	r3, [pc, #488]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e0:	22f8      	movs	r2, #248	@ 0xf8
 80047e2:	4393      	bics	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	00da      	lsls	r2, r3, #3
 80047ec:	4b76      	ldr	r3, [pc, #472]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047ee:	430a      	orrs	r2, r1
 80047f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80047f2:	e01e      	b.n	8004832 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80047f4:	4b74      	ldr	r3, [pc, #464]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047f8:	4b73      	ldr	r3, [pc, #460]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80047fa:	2104      	movs	r1, #4
 80047fc:	430a      	orrs	r2, r1
 80047fe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004800:	4b71      	ldr	r3, [pc, #452]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004804:	4b70      	ldr	r3, [pc, #448]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004806:	2101      	movs	r1, #1
 8004808:	438a      	bics	r2, r1
 800480a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fd fdfc 	bl	8002408 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004816:	f7fd fdf7 	bl	8002408 <HAL_GetTick>
 800481a:	0002      	movs	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e111      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004828:	4b67      	ldr	r3, [pc, #412]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800482a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482c:	2202      	movs	r2, #2
 800482e:	4013      	ands	r3, r2
 8004830:	d1f1      	bne.n	8004816 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2220      	movs	r2, #32
 8004838:	4013      	ands	r3, r2
 800483a:	d05c      	beq.n	80048f6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800483c:	4b62      	ldr	r3, [pc, #392]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	220c      	movs	r2, #12
 8004842:	4013      	ands	r3, r2
 8004844:	2b0c      	cmp	r3, #12
 8004846:	d00e      	beq.n	8004866 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004848:	4b5f      	ldr	r3, [pc, #380]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	220c      	movs	r2, #12
 800484e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004850:	2b08      	cmp	r3, #8
 8004852:	d114      	bne.n	800487e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004854:	4b5c      	ldr	r3, [pc, #368]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	23c0      	movs	r3, #192	@ 0xc0
 800485a:	025b      	lsls	r3, r3, #9
 800485c:	401a      	ands	r2, r3
 800485e:	23c0      	movs	r3, #192	@ 0xc0
 8004860:	025b      	lsls	r3, r3, #9
 8004862:	429a      	cmp	r2, r3
 8004864:	d10b      	bne.n	800487e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004866:	4b58      	ldr	r3, [pc, #352]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800486a:	2380      	movs	r3, #128	@ 0x80
 800486c:	029b      	lsls	r3, r3, #10
 800486e:	4013      	ands	r3, r2
 8004870:	d040      	beq.n	80048f4 <HAL_RCC_OscConfig+0x5a8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d03c      	beq.n	80048f4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e0e6      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a1b      	ldr	r3, [r3, #32]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01b      	beq.n	80048be <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004886:	4b50      	ldr	r3, [pc, #320]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800488a:	4b4f      	ldr	r3, [pc, #316]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800488c:	2180      	movs	r1, #128	@ 0x80
 800488e:	0249      	lsls	r1, r1, #9
 8004890:	430a      	orrs	r2, r1
 8004892:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fd fdb8 	bl	8002408 <HAL_GetTick>
 8004898:	0003      	movs	r3, r0
 800489a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800489e:	f7fd fdb3 	bl	8002408 <HAL_GetTick>
 80048a2:	0002      	movs	r2, r0
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e0cd      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048b0:	4b45      	ldr	r3, [pc, #276]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80048b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b4:	2380      	movs	r3, #128	@ 0x80
 80048b6:	029b      	lsls	r3, r3, #10
 80048b8:	4013      	ands	r3, r2
 80048ba:	d0f0      	beq.n	800489e <HAL_RCC_OscConfig+0x552>
 80048bc:	e01b      	b.n	80048f6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80048be:	4b42      	ldr	r3, [pc, #264]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80048c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048c2:	4b41      	ldr	r3, [pc, #260]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80048c4:	4943      	ldr	r1, [pc, #268]	@ (80049d4 <HAL_RCC_OscConfig+0x688>)
 80048c6:	400a      	ands	r2, r1
 80048c8:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ca:	f7fd fd9d 	bl	8002408 <HAL_GetTick>
 80048ce:	0003      	movs	r3, r0
 80048d0:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048d4:	f7fd fd98 	bl	8002408 <HAL_GetTick>
 80048d8:	0002      	movs	r2, r0
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0b2      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80048e6:	4b38      	ldr	r3, [pc, #224]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80048e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ea:	2380      	movs	r3, #128	@ 0x80
 80048ec:	029b      	lsls	r3, r3, #10
 80048ee:	4013      	ands	r3, r2
 80048f0:	d1f0      	bne.n	80048d4 <HAL_RCC_OscConfig+0x588>
 80048f2:	e000      	b.n	80048f6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80048f4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d100      	bne.n	8004900 <HAL_RCC_OscConfig+0x5b4>
 80048fe:	e0a4      	b.n	8004a4a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004900:	4b31      	ldr	r3, [pc, #196]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	220c      	movs	r2, #12
 8004906:	4013      	ands	r3, r2
 8004908:	2b08      	cmp	r3, #8
 800490a:	d100      	bne.n	800490e <HAL_RCC_OscConfig+0x5c2>
 800490c:	e078      	b.n	8004a00 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004912:	2b02      	cmp	r3, #2
 8004914:	d14c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004916:	4b2c      	ldr	r3, [pc, #176]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4b2b      	ldr	r3, [pc, #172]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800491c:	492e      	ldr	r1, [pc, #184]	@ (80049d8 <HAL_RCC_OscConfig+0x68c>)
 800491e:	400a      	ands	r2, r1
 8004920:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fd fd71 	bl	8002408 <HAL_GetTick>
 8004926:	0003      	movs	r3, r0
 8004928:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd fd6c 	bl	8002408 <HAL_GetTick>
 8004930:	0002      	movs	r2, r0
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e086      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800493e:	4b22      	ldr	r3, [pc, #136]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	049b      	lsls	r3, r3, #18
 8004946:	4013      	ands	r3, r2
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494a:	4b1f      	ldr	r3, [pc, #124]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	220f      	movs	r2, #15
 8004950:	4393      	bics	r3, r2
 8004952:	0019      	movs	r1, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004958:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800495a:	430a      	orrs	r2, r1
 800495c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800495e:	4b1a      	ldr	r3, [pc, #104]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4a1e      	ldr	r2, [pc, #120]	@ (80049dc <HAL_RCC_OscConfig+0x690>)
 8004964:	4013      	ands	r3, r2
 8004966:	0019      	movs	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	431a      	orrs	r2, r3
 8004972:	4b15      	ldr	r3, [pc, #84]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004978:	4b13      	ldr	r3, [pc, #76]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 800497e:	2180      	movs	r1, #128	@ 0x80
 8004980:	0449      	lsls	r1, r1, #17
 8004982:	430a      	orrs	r2, r1
 8004984:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004986:	f7fd fd3f 	bl	8002408 <HAL_GetTick>
 800498a:	0003      	movs	r3, r0
 800498c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004990:	f7fd fd3a 	bl	8002408 <HAL_GetTick>
 8004994:	0002      	movs	r2, r0
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e054      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049a2:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	2380      	movs	r3, #128	@ 0x80
 80049a8:	049b      	lsls	r3, r3, #18
 80049aa:	4013      	ands	r3, r2
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x644>
 80049ae:	e04c      	b.n	8004a4a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049b0:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <HAL_RCC_OscConfig+0x67c>)
 80049b6:	4908      	ldr	r1, [pc, #32]	@ (80049d8 <HAL_RCC_OscConfig+0x68c>)
 80049b8:	400a      	ands	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fd fd24 	bl	8002408 <HAL_GetTick>
 80049c0:	0003      	movs	r3, r0
 80049c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049c4:	e015      	b.n	80049f2 <HAL_RCC_OscConfig+0x6a6>
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	40021000 	.word	0x40021000
 80049cc:	00001388 	.word	0x00001388
 80049d0:	efffffff 	.word	0xefffffff
 80049d4:	fffeffff 	.word	0xfffeffff
 80049d8:	feffffff 	.word	0xfeffffff
 80049dc:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fd fd12 	bl	8002408 <HAL_GetTick>
 80049e4:	0002      	movs	r2, r0
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e02c      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f2:	4b18      	ldr	r3, [pc, #96]	@ (8004a54 <HAL_RCC_OscConfig+0x708>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	2380      	movs	r3, #128	@ 0x80
 80049f8:	049b      	lsls	r3, r3, #18
 80049fa:	4013      	ands	r3, r2
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x694>
 80049fe:	e024      	b.n	8004a4a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d101      	bne.n	8004a0c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e01f      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a0c:	4b11      	ldr	r3, [pc, #68]	@ (8004a54 <HAL_RCC_OscConfig+0x708>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a12:	4b10      	ldr	r3, [pc, #64]	@ (8004a54 <HAL_RCC_OscConfig+0x708>)
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	23c0      	movs	r3, #192	@ 0xc0
 8004a1c:	025b      	lsls	r3, r3, #9
 8004a1e:	401a      	ands	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d10e      	bne.n	8004a46 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	220f      	movs	r2, #15
 8004a2c:	401a      	ands	r2, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d107      	bne.n	8004a46 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	23f0      	movs	r3, #240	@ 0xf0
 8004a3a:	039b      	lsls	r3, r3, #14
 8004a3c:	401a      	ands	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d001      	beq.n	8004a4a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b008      	add	sp, #32
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	40021000 	.word	0x40021000

08004a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e0bf      	b.n	8004bec <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a6c:	4b61      	ldr	r3, [pc, #388]	@ (8004bf4 <HAL_RCC_ClockConfig+0x19c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	4013      	ands	r3, r2
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d911      	bls.n	8004a9e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a7a:	4b5e      	ldr	r3, [pc, #376]	@ (8004bf4 <HAL_RCC_ClockConfig+0x19c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	4393      	bics	r3, r2
 8004a82:	0019      	movs	r1, r3
 8004a84:	4b5b      	ldr	r3, [pc, #364]	@ (8004bf4 <HAL_RCC_ClockConfig+0x19c>)
 8004a86:	683a      	ldr	r2, [r7, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a8c:	4b59      	ldr	r3, [pc, #356]	@ (8004bf4 <HAL_RCC_ClockConfig+0x19c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2201      	movs	r2, #1
 8004a92:	4013      	ands	r3, r2
 8004a94:	683a      	ldr	r2, [r7, #0]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d001      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e0a6      	b.n	8004bec <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d015      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2204      	movs	r2, #4
 8004aae:	4013      	ands	r3, r2
 8004ab0:	d006      	beq.n	8004ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ab2:	4b51      	ldr	r3, [pc, #324]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	4b50      	ldr	r3, [pc, #320]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004ab8:	21e0      	movs	r1, #224	@ 0xe0
 8004aba:	00c9      	lsls	r1, r1, #3
 8004abc:	430a      	orrs	r2, r1
 8004abe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	22f0      	movs	r2, #240	@ 0xf0
 8004ac6:	4393      	bics	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	4013      	ands	r3, r2
 8004adc:	d04c      	beq.n	8004b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d107      	bne.n	8004af6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b44      	ldr	r3, [pc, #272]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	2380      	movs	r3, #128	@ 0x80
 8004aec:	029b      	lsls	r3, r3, #10
 8004aee:	4013      	ands	r3, r2
 8004af0:	d120      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e07a      	b.n	8004bec <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afe:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	2380      	movs	r3, #128	@ 0x80
 8004b04:	049b      	lsls	r3, r3, #18
 8004b06:	4013      	ands	r3, r2
 8004b08:	d114      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e06e      	b.n	8004bec <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	2b03      	cmp	r3, #3
 8004b14:	d107      	bne.n	8004b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b16:	4b38      	ldr	r3, [pc, #224]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004b18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b1a:	2380      	movs	r3, #128	@ 0x80
 8004b1c:	029b      	lsls	r3, r3, #10
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d108      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e062      	b.n	8004bec <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b26:	4b34      	ldr	r3, [pc, #208]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e05b      	b.n	8004bec <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b34:	4b30      	ldr	r3, [pc, #192]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2203      	movs	r2, #3
 8004b3a:	4393      	bics	r3, r2
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	4b2d      	ldr	r3, [pc, #180]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b48:	f7fd fc5e 	bl	8002408 <HAL_GetTick>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b50:	e009      	b.n	8004b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b52:	f7fd fc59 	bl	8002408 <HAL_GetTick>
 8004b56:	0002      	movs	r2, r0
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	4a27      	ldr	r2, [pc, #156]	@ (8004bfc <HAL_RCC_ClockConfig+0x1a4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e042      	b.n	8004bec <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b66:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	220c      	movs	r2, #12
 8004b6c:	401a      	ands	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d1ec      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b78:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf4 <HAL_RCC_ClockConfig+0x19c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	4013      	ands	r3, r2
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d211      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b86:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf4 <HAL_RCC_ClockConfig+0x19c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	4393      	bics	r3, r2
 8004b8e:	0019      	movs	r1, r3
 8004b90:	4b18      	ldr	r3, [pc, #96]	@ (8004bf4 <HAL_RCC_ClockConfig+0x19c>)
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b98:	4b16      	ldr	r3, [pc, #88]	@ (8004bf4 <HAL_RCC_ClockConfig+0x19c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d001      	beq.n	8004baa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e020      	b.n	8004bec <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2204      	movs	r2, #4
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	d009      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb4:	4b10      	ldr	r3, [pc, #64]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	4a11      	ldr	r2, [pc, #68]	@ (8004c00 <HAL_RCC_ClockConfig+0x1a8>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	0019      	movs	r1, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bc8:	f000 f820 	bl	8004c0c <HAL_RCC_GetSysClockFreq>
 8004bcc:	0001      	movs	r1, r0
 8004bce:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1a0>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	091b      	lsrs	r3, r3, #4
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8004c04 <HAL_RCC_ClockConfig+0x1ac>)
 8004bda:	5cd3      	ldrb	r3, [r2, r3]
 8004bdc:	000a      	movs	r2, r1
 8004bde:	40da      	lsrs	r2, r3
 8004be0:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <HAL_RCC_ClockConfig+0x1b0>)
 8004be2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004be4:	2003      	movs	r0, #3
 8004be6:	f7fd fbc9 	bl	800237c <HAL_InitTick>
  
  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	0018      	movs	r0, r3
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b004      	add	sp, #16
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40022000 	.word	0x40022000
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	00001388 	.word	0x00001388
 8004c00:	fffff8ff 	.word	0xfffff8ff
 8004c04:	08006448 	.word	0x08006448
 8004c08:	20000050 	.word	0x20000050

08004c0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b086      	sub	sp, #24
 8004c10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	2300      	movs	r3, #0
 8004c18:	60bb      	str	r3, [r7, #8]
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	2300      	movs	r3, #0
 8004c20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c26:	4b2d      	ldr	r3, [pc, #180]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	220c      	movs	r2, #12
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d046      	beq.n	8004cc4 <HAL_RCC_GetSysClockFreq+0xb8>
 8004c36:	d848      	bhi.n	8004cca <HAL_RCC_GetSysClockFreq+0xbe>
 8004c38:	2b04      	cmp	r3, #4
 8004c3a:	d002      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x36>
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d003      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x3c>
 8004c40:	e043      	b.n	8004cca <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c42:	4b27      	ldr	r3, [pc, #156]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c44:	613b      	str	r3, [r7, #16]
      break;
 8004c46:	e043      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	0c9b      	lsrs	r3, r3, #18
 8004c4c:	220f      	movs	r2, #15
 8004c4e:	4013      	ands	r3, r2
 8004c50:	4a24      	ldr	r2, [pc, #144]	@ (8004ce4 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c56:	4b21      	ldr	r3, [pc, #132]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	220f      	movs	r2, #15
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	4a22      	ldr	r2, [pc, #136]	@ (8004ce8 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004c60:	5cd3      	ldrb	r3, [r2, r3]
 8004c62:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	23c0      	movs	r3, #192	@ 0xc0
 8004c68:	025b      	lsls	r3, r3, #9
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	025b      	lsls	r3, r3, #9
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d109      	bne.n	8004c88 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c74:	68b9      	ldr	r1, [r7, #8]
 8004c76:	481a      	ldr	r0, [pc, #104]	@ (8004ce0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c78:	f7fb fa46 	bl	8000108 <__udivsi3>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	001a      	movs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4353      	muls	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
 8004c86:	e01a      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	23c0      	movs	r3, #192	@ 0xc0
 8004c8c:	025b      	lsls	r3, r3, #9
 8004c8e:	401a      	ands	r2, r3
 8004c90:	23c0      	movs	r3, #192	@ 0xc0
 8004c92:	025b      	lsls	r3, r3, #9
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d109      	bne.n	8004cac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c98:	68b9      	ldr	r1, [r7, #8]
 8004c9a:	4814      	ldr	r0, [pc, #80]	@ (8004cec <HAL_RCC_GetSysClockFreq+0xe0>)
 8004c9c:	f7fb fa34 	bl	8000108 <__udivsi3>
 8004ca0:	0003      	movs	r3, r0
 8004ca2:	001a      	movs	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4353      	muls	r3, r2
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	e008      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4810      	ldr	r0, [pc, #64]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8004cb0:	f7fb fa2a 	bl	8000108 <__udivsi3>
 8004cb4:	0003      	movs	r3, r0
 8004cb6:	001a      	movs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4353      	muls	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	613b      	str	r3, [r7, #16]
      break;
 8004cc2:	e005      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004cc4:	4b09      	ldr	r3, [pc, #36]	@ (8004cec <HAL_RCC_GetSysClockFreq+0xe0>)
 8004cc6:	613b      	str	r3, [r7, #16]
      break;
 8004cc8:	e002      	b.n	8004cd0 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cca:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0xe4>)
 8004ccc:	613b      	str	r3, [r7, #16]
      break;
 8004cce:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004cd0:	693b      	ldr	r3, [r7, #16]
}
 8004cd2:	0018      	movs	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	b006      	add	sp, #24
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	46c0      	nop			@ (mov r8, r8)
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	016e3600 	.word	0x016e3600
 8004ce4:	08006458 	.word	0x08006458
 8004ce8:	08006468 	.word	0x08006468
 8004cec:	02dc6c00 	.word	0x02dc6c00
 8004cf0:	007a1200 	.word	0x007a1200

08004cf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e0a8      	b.n	8004e58 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d109      	bne.n	8004d22 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	2382      	movs	r3, #130	@ 0x82
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d009      	beq.n	8004d2e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	61da      	str	r2, [r3, #28]
 8004d20:	e005      	b.n	8004d2e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	225d      	movs	r2, #93	@ 0x5d
 8004d38:	5c9b      	ldrb	r3, [r3, r2]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d107      	bne.n	8004d50 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	225c      	movs	r2, #92	@ 0x5c
 8004d44:	2100      	movs	r1, #0
 8004d46:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7fd f890 	bl	8001e70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	225d      	movs	r2, #93	@ 0x5d
 8004d54:	2102      	movs	r1, #2
 8004d56:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2140      	movs	r1, #64	@ 0x40
 8004d64:	438a      	bics	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	23e0      	movs	r3, #224	@ 0xe0
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d902      	bls.n	8004d7a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e002      	b.n	8004d80 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004d7a:	2380      	movs	r3, #128	@ 0x80
 8004d7c:	015b      	lsls	r3, r3, #5
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	23f0      	movs	r3, #240	@ 0xf0
 8004d86:	011b      	lsls	r3, r3, #4
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d008      	beq.n	8004d9e <HAL_SPI_Init+0xaa>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	23e0      	movs	r3, #224	@ 0xe0
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d002      	beq.n	8004d9e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	2382      	movs	r3, #130	@ 0x82
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	401a      	ands	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6899      	ldr	r1, [r3, #8]
 8004dac:	2384      	movs	r3, #132	@ 0x84
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	400b      	ands	r3, r1
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2102      	movs	r1, #2
 8004dba:	400b      	ands	r3, r1
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	695b      	ldr	r3, [r3, #20]
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	400b      	ands	r3, r1
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6999      	ldr	r1, [r3, #24]
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	400b      	ands	r3, r1
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	2138      	movs	r1, #56	@ 0x38
 8004dda:	400b      	ands	r3, r1
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	2180      	movs	r1, #128	@ 0x80
 8004de4:	400b      	ands	r3, r1
 8004de6:	431a      	orrs	r2, r3
 8004de8:	0011      	movs	r1, r2
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dee:	2380      	movs	r3, #128	@ 0x80
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	401a      	ands	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	430a      	orrs	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	0c1b      	lsrs	r3, r3, #16
 8004e02:	2204      	movs	r2, #4
 8004e04:	401a      	ands	r2, r3
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0a:	2110      	movs	r1, #16
 8004e0c:	400b      	ands	r3, r1
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e14:	2108      	movs	r1, #8
 8004e16:	400b      	ands	r3, r1
 8004e18:	431a      	orrs	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68d9      	ldr	r1, [r3, #12]
 8004e1e:	23f0      	movs	r3, #240	@ 0xf0
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	400b      	ands	r3, r1
 8004e24:	431a      	orrs	r2, r3
 8004e26:	0011      	movs	r1, r2
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	2380      	movs	r3, #128	@ 0x80
 8004e2c:	015b      	lsls	r3, r3, #5
 8004e2e:	401a      	ands	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4907      	ldr	r1, [pc, #28]	@ (8004e60 <HAL_SPI_Init+0x16c>)
 8004e44:	400a      	ands	r2, r1
 8004e46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	225d      	movs	r2, #93	@ 0x5d
 8004e52:	2101      	movs	r1, #1
 8004e54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b004      	add	sp, #16
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	fffff7ff 	.word	0xfffff7ff

08004e64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b08a      	sub	sp, #40	@ 0x28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	001a      	movs	r2, r3
 8004e72:	1cbb      	adds	r3, r7, #2
 8004e74:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e76:	2301      	movs	r3, #1
 8004e78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e7a:	2323      	movs	r3, #35	@ 0x23
 8004e7c:	18fb      	adds	r3, r7, r3
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	225c      	movs	r2, #92	@ 0x5c
 8004e86:	5c9b      	ldrb	r3, [r3, r2]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_SPI_TransmitReceive+0x2c>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e1c4      	b.n	800521a <HAL_SPI_TransmitReceive+0x3b6>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	225c      	movs	r2, #92	@ 0x5c
 8004e94:	2101      	movs	r1, #1
 8004e96:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e98:	f7fd fab6 	bl	8002408 <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ea0:	201b      	movs	r0, #27
 8004ea2:	183b      	adds	r3, r7, r0
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	215d      	movs	r1, #93	@ 0x5d
 8004ea8:	5c52      	ldrb	r2, [r2, r1]
 8004eaa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004eb2:	2312      	movs	r3, #18
 8004eb4:	18fb      	adds	r3, r7, r3
 8004eb6:	1cba      	adds	r2, r7, #2
 8004eb8:	8812      	ldrh	r2, [r2, #0]
 8004eba:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ebc:	183b      	adds	r3, r7, r0
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d011      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x84>
 8004ec4:	697a      	ldr	r2, [r7, #20]
 8004ec6:	2382      	movs	r3, #130	@ 0x82
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d107      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d103      	bne.n	8004ede <HAL_SPI_TransmitReceive+0x7a>
 8004ed6:	183b      	adds	r3, r7, r0
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	d004      	beq.n	8004ee8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004ede:	2323      	movs	r3, #35	@ 0x23
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ee6:	e191      	b.n	800520c <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d006      	beq.n	8004efc <HAL_SPI_TransmitReceive+0x98>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d003      	beq.n	8004efc <HAL_SPI_TransmitReceive+0x98>
 8004ef4:	1cbb      	adds	r3, r7, #2
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d104      	bne.n	8004f06 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004efc:	2323      	movs	r3, #35	@ 0x23
 8004efe:	18fb      	adds	r3, r7, r3
 8004f00:	2201      	movs	r2, #1
 8004f02:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f04:	e182      	b.n	800520c <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	225d      	movs	r2, #93	@ 0x5d
 8004f0a:	5c9b      	ldrb	r3, [r3, r2]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d003      	beq.n	8004f1a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	225d      	movs	r2, #93	@ 0x5d
 8004f16:	2105      	movs	r1, #5
 8004f18:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	1cba      	adds	r2, r7, #2
 8004f2a:	2146      	movs	r1, #70	@ 0x46
 8004f2c:	8812      	ldrh	r2, [r2, #0]
 8004f2e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	1cba      	adds	r2, r7, #2
 8004f34:	2144      	movs	r1, #68	@ 0x44
 8004f36:	8812      	ldrh	r2, [r2, #0]
 8004f38:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	1cba      	adds	r2, r7, #2
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	1cba      	adds	r2, r7, #2
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	23e0      	movs	r3, #224	@ 0xe0
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d908      	bls.n	8004f7a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	49ac      	ldr	r1, [pc, #688]	@ (8005224 <HAL_SPI_TransmitReceive+0x3c0>)
 8004f74:	400a      	ands	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	e008      	b.n	8004f8c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2180      	movs	r1, #128	@ 0x80
 8004f86:	0149      	lsls	r1, r1, #5
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2240      	movs	r2, #64	@ 0x40
 8004f94:	4013      	ands	r3, r2
 8004f96:	2b40      	cmp	r3, #64	@ 0x40
 8004f98:	d007      	beq.n	8004faa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2140      	movs	r1, #64	@ 0x40
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	23e0      	movs	r3, #224	@ 0xe0
 8004fb0:	00db      	lsls	r3, r3, #3
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d800      	bhi.n	8004fb8 <HAL_SPI_TransmitReceive+0x154>
 8004fb6:	e083      	b.n	80050c0 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x168>
 8004fc0:	2312      	movs	r3, #18
 8004fc2:	18fb      	adds	r3, r7, r3
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d000      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x168>
 8004fca:	e06d      	b.n	80050a8 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fd0:	881a      	ldrh	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ff0:	e05a      	b.n	80050a8 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d11b      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x1d4>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d016      	beq.n	8005038 <HAL_SPI_TransmitReceive+0x1d4>
 800500a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500c:	2b01      	cmp	r3, #1
 800500e:	d113      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005014:	881a      	ldrh	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005020:	1c9a      	adds	r2, r3, #2
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800502a:	b29b      	uxth	r3, r3
 800502c:	3b01      	subs	r3, #1
 800502e:	b29a      	uxth	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005034:	2300      	movs	r3, #0
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	2201      	movs	r2, #1
 8005040:	4013      	ands	r3, r2
 8005042:	2b01      	cmp	r3, #1
 8005044:	d11c      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x21c>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2246      	movs	r2, #70	@ 0x46
 800504a:	5a9b      	ldrh	r3, [r3, r2]
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505c:	b292      	uxth	r2, r2
 800505e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	1c9a      	adds	r2, r3, #2
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2246      	movs	r2, #70	@ 0x46
 800506e:	5a9b      	ldrh	r3, [r3, r2]
 8005070:	b29b      	uxth	r3, r3
 8005072:	3b01      	subs	r3, #1
 8005074:	b299      	uxth	r1, r3
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2246      	movs	r2, #70	@ 0x46
 800507a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800507c:	2301      	movs	r3, #1
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005080:	f7fd f9c2 	bl	8002408 <HAL_GetTick>
 8005084:	0002      	movs	r2, r0
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800508c:	429a      	cmp	r2, r3
 800508e:	d80b      	bhi.n	80050a8 <HAL_SPI_TransmitReceive+0x244>
 8005090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005092:	3301      	adds	r3, #1
 8005094:	d008      	beq.n	80050a8 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005096:	2323      	movs	r3, #35	@ 0x23
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	2203      	movs	r2, #3
 800509c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	225d      	movs	r2, #93	@ 0x5d
 80050a2:	2101      	movs	r1, #1
 80050a4:	5499      	strb	r1, [r3, r2]
        goto error;
 80050a6:	e0b1      	b.n	800520c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d19f      	bne.n	8004ff2 <HAL_SPI_TransmitReceive+0x18e>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2246      	movs	r2, #70	@ 0x46
 80050b6:	5a9b      	ldrh	r3, [r3, r2]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d199      	bne.n	8004ff2 <HAL_SPI_TransmitReceive+0x18e>
 80050be:	e089      	b.n	80051d4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d005      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x270>
 80050c8:	2312      	movs	r3, #18
 80050ca:	18fb      	adds	r3, r7, r3
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d000      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x270>
 80050d2:	e074      	b.n	80051be <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	7812      	ldrb	r2, [r2, #0]
 80050e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	3b01      	subs	r3, #1
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050fa:	e060      	b.n	80051be <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	2202      	movs	r2, #2
 8005104:	4013      	ands	r3, r2
 8005106:	2b02      	cmp	r3, #2
 8005108:	d11c      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x2e0>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800510e:	b29b      	uxth	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d017      	beq.n	8005144 <HAL_SPI_TransmitReceive+0x2e0>
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	2b01      	cmp	r3, #1
 8005118:	d114      	bne.n	8005144 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	7812      	ldrb	r2, [r2, #0]
 8005126:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29a      	uxth	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2201      	movs	r2, #1
 800514c:	4013      	ands	r3, r2
 800514e:	2b01      	cmp	r3, #1
 8005150:	d11e      	bne.n	8005190 <HAL_SPI_TransmitReceive+0x32c>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2246      	movs	r2, #70	@ 0x46
 8005156:	5a9b      	ldrh	r3, [r3, r2]
 8005158:	b29b      	uxth	r3, r3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d018      	beq.n	8005190 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	001a      	movs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	7812      	ldrb	r2, [r2, #0]
 800516c:	b2d2      	uxtb	r2, r2
 800516e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005174:	1c5a      	adds	r2, r3, #1
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2246      	movs	r2, #70	@ 0x46
 800517e:	5a9b      	ldrh	r3, [r3, r2]
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b299      	uxth	r1, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2246      	movs	r2, #70	@ 0x46
 800518a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800518c:	2301      	movs	r3, #1
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005190:	f7fd f93a 	bl	8002408 <HAL_GetTick>
 8005194:	0002      	movs	r2, r0
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800519c:	429a      	cmp	r2, r3
 800519e:	d802      	bhi.n	80051a6 <HAL_SPI_TransmitReceive+0x342>
 80051a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a2:	3301      	adds	r3, #1
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x348>
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d108      	bne.n	80051be <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80051ac:	2323      	movs	r3, #35	@ 0x23
 80051ae:	18fb      	adds	r3, r7, r3
 80051b0:	2203      	movs	r2, #3
 80051b2:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	225d      	movs	r2, #93	@ 0x5d
 80051b8:	2101      	movs	r1, #1
 80051ba:	5499      	strb	r1, [r3, r2]
        goto error;
 80051bc:	e026      	b.n	800520c <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d199      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x298>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2246      	movs	r2, #70	@ 0x46
 80051cc:	5a9b      	ldrh	r3, [r3, r2]
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d193      	bne.n	80050fc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	0018      	movs	r0, r3
 80051dc:	f000 f954 	bl	8005488 <SPI_EndRxTxTransaction>
 80051e0:	1e03      	subs	r3, r0, #0
 80051e2:	d006      	beq.n	80051f2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80051e4:	2323      	movs	r3, #35	@ 0x23
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	2201      	movs	r2, #1
 80051ea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80051fa:	2323      	movs	r3, #35	@ 0x23
 80051fc:	18fb      	adds	r3, r7, r3
 80051fe:	2201      	movs	r2, #1
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	e003      	b.n	800520c <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	225d      	movs	r2, #93	@ 0x5d
 8005208:	2101      	movs	r1, #1
 800520a:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	225c      	movs	r2, #92	@ 0x5c
 8005210:	2100      	movs	r1, #0
 8005212:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005214:	2323      	movs	r3, #35	@ 0x23
 8005216:	18fb      	adds	r3, r7, r3
 8005218:	781b      	ldrb	r3, [r3, #0]
}
 800521a:	0018      	movs	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	b00a      	add	sp, #40	@ 0x28
 8005220:	bd80      	pop	{r7, pc}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	ffffefff 	.word	0xffffefff

08005228 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b088      	sub	sp, #32
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	1dfb      	adds	r3, r7, #7
 8005236:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005238:	f7fd f8e6 	bl	8002408 <HAL_GetTick>
 800523c:	0002      	movs	r2, r0
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	18d3      	adds	r3, r2, r3
 8005246:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005248:	f7fd f8de 	bl	8002408 <HAL_GetTick>
 800524c:	0003      	movs	r3, r0
 800524e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005250:	4b3a      	ldr	r3, [pc, #232]	@ (800533c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	015b      	lsls	r3, r3, #5
 8005256:	0d1b      	lsrs	r3, r3, #20
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	4353      	muls	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800525e:	e058      	b.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	3301      	adds	r3, #1
 8005264:	d055      	beq.n	8005312 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005266:	f7fd f8cf 	bl	8002408 <HAL_GetTick>
 800526a:	0002      	movs	r2, r0
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	69fa      	ldr	r2, [r7, #28]
 8005272:	429a      	cmp	r2, r3
 8005274:	d902      	bls.n	800527c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d142      	bne.n	8005302 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	21e0      	movs	r1, #224	@ 0xe0
 8005288:	438a      	bics	r2, r1
 800528a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	2382      	movs	r3, #130	@ 0x82
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	429a      	cmp	r2, r3
 8005296:	d113      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	2380      	movs	r3, #128	@ 0x80
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d005      	beq.n	80052b0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	2380      	movs	r3, #128	@ 0x80
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d107      	bne.n	80052c0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2140      	movs	r1, #64	@ 0x40
 80052bc:	438a      	bics	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052c4:	2380      	movs	r3, #128	@ 0x80
 80052c6:	019b      	lsls	r3, r3, #6
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d110      	bne.n	80052ee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	491a      	ldr	r1, [pc, #104]	@ (8005340 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80052d8:	400a      	ands	r2, r1
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2180      	movs	r1, #128	@ 0x80
 80052e8:	0189      	lsls	r1, r1, #6
 80052ea:	430a      	orrs	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	225d      	movs	r2, #93	@ 0x5d
 80052f2:	2101      	movs	r1, #1
 80052f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	225c      	movs	r2, #92	@ 0x5c
 80052fa:	2100      	movs	r1, #0
 80052fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e017      	b.n	8005332 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	3b01      	subs	r3, #1
 8005310:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	4013      	ands	r3, r2
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	425a      	negs	r2, r3
 8005322:	4153      	adcs	r3, r2
 8005324:	b2db      	uxtb	r3, r3
 8005326:	001a      	movs	r2, r3
 8005328:	1dfb      	adds	r3, r7, #7
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d197      	bne.n	8005260 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	0018      	movs	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	b008      	add	sp, #32
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			@ (mov r8, r8)
 800533c:	20000050 	.word	0x20000050
 8005340:	ffffdfff 	.word	0xffffdfff

08005344 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	@ 0x28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005352:	2317      	movs	r3, #23
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800535a:	f7fd f855 	bl	8002408 <HAL_GetTick>
 800535e:	0002      	movs	r2, r0
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	1a9b      	subs	r3, r3, r2
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	18d3      	adds	r3, r2, r3
 8005368:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800536a:	f7fd f84d 	bl	8002408 <HAL_GetTick>
 800536e:	0003      	movs	r3, r0
 8005370:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	330c      	adds	r3, #12
 8005378:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800537a:	4b41      	ldr	r3, [pc, #260]	@ (8005480 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	0013      	movs	r3, r2
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	189b      	adds	r3, r3, r2
 8005384:	00da      	lsls	r2, r3, #3
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	0d1b      	lsrs	r3, r3, #20
 800538a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800538c:	4353      	muls	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005390:	e068      	b.n	8005464 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	23c0      	movs	r3, #192	@ 0xc0
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	429a      	cmp	r2, r3
 800539a:	d10a      	bne.n	80053b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d107      	bne.n	80053b2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	2117      	movs	r1, #23
 80053aa:	187b      	adds	r3, r7, r1
 80053ac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053ae:	187b      	adds	r3, r7, r1
 80053b0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	3301      	adds	r3, #1
 80053b6:	d055      	beq.n	8005464 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053b8:	f7fd f826 	bl	8002408 <HAL_GetTick>
 80053bc:	0002      	movs	r2, r0
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d902      	bls.n	80053ce <SPI_WaitFifoStateUntilTimeout+0x8a>
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d142      	bne.n	8005454 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	21e0      	movs	r1, #224	@ 0xe0
 80053da:	438a      	bics	r2, r1
 80053dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	2382      	movs	r3, #130	@ 0x82
 80053e4:	005b      	lsls	r3, r3, #1
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d113      	bne.n	8005412 <SPI_WaitFifoStateUntilTimeout+0xce>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	2380      	movs	r3, #128	@ 0x80
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d005      	beq.n	8005402 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	2380      	movs	r3, #128	@ 0x80
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	429a      	cmp	r2, r3
 8005400:	d107      	bne.n	8005412 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2140      	movs	r1, #64	@ 0x40
 800540e:	438a      	bics	r2, r1
 8005410:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005416:	2380      	movs	r3, #128	@ 0x80
 8005418:	019b      	lsls	r3, r3, #6
 800541a:	429a      	cmp	r2, r3
 800541c:	d110      	bne.n	8005440 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4916      	ldr	r1, [pc, #88]	@ (8005484 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800542a:	400a      	ands	r2, r1
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2180      	movs	r1, #128	@ 0x80
 800543a:	0189      	lsls	r1, r1, #6
 800543c:	430a      	orrs	r2, r1
 800543e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	225d      	movs	r2, #93	@ 0x5d
 8005444:	2101      	movs	r1, #1
 8005446:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	225c      	movs	r2, #92	@ 0x5c
 800544c:	2100      	movs	r1, #0
 800544e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e010      	b.n	8005476 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800545a:	2300      	movs	r3, #0
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	3b01      	subs	r3, #1
 8005462:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4013      	ands	r3, r2
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	429a      	cmp	r2, r3
 8005472:	d18e      	bne.n	8005392 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	0018      	movs	r0, r3
 8005478:	46bd      	mov	sp, r7
 800547a:	b00a      	add	sp, #40	@ 0x28
 800547c:	bd80      	pop	{r7, pc}
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	20000050 	.word	0x20000050
 8005484:	ffffdfff 	.word	0xffffdfff

08005488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af02      	add	r7, sp, #8
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	23c0      	movs	r3, #192	@ 0xc0
 8005498:	0159      	lsls	r1, r3, #5
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	0013      	movs	r3, r2
 80054a2:	2200      	movs	r2, #0
 80054a4:	f7ff ff4e 	bl	8005344 <SPI_WaitFifoStateUntilTimeout>
 80054a8:	1e03      	subs	r3, r0, #0
 80054aa:	d007      	beq.n	80054bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054b0:	2220      	movs	r2, #32
 80054b2:	431a      	orrs	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e027      	b.n	800550c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054bc:	68ba      	ldr	r2, [r7, #8]
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	9300      	str	r3, [sp, #0]
 80054c4:	0013      	movs	r3, r2
 80054c6:	2200      	movs	r2, #0
 80054c8:	2180      	movs	r1, #128	@ 0x80
 80054ca:	f7ff fead 	bl	8005228 <SPI_WaitFlagStateUntilTimeout>
 80054ce:	1e03      	subs	r3, r0, #0
 80054d0:	d007      	beq.n	80054e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054d6:	2220      	movs	r2, #32
 80054d8:	431a      	orrs	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e014      	b.n	800550c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	23c0      	movs	r3, #192	@ 0xc0
 80054e6:	00d9      	lsls	r1, r3, #3
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	0013      	movs	r3, r2
 80054f0:	2200      	movs	r2, #0
 80054f2:	f7ff ff27 	bl	8005344 <SPI_WaitFifoStateUntilTimeout>
 80054f6:	1e03      	subs	r3, r0, #0
 80054f8:	d007      	beq.n	800550a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054fe:	2220      	movs	r2, #32
 8005500:	431a      	orrs	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e000      	b.n	800550c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	0018      	movs	r0, r3
 800550e:	46bd      	mov	sp, r7
 8005510:	b004      	add	sp, #16
 8005512:	bd80      	pop	{r7, pc}

08005514 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e042      	b.n	80055ac <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	223d      	movs	r2, #61	@ 0x3d
 800552a:	5c9b      	ldrb	r3, [r3, r2]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	d107      	bne.n	8005542 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	223c      	movs	r2, #60	@ 0x3c
 8005536:	2100      	movs	r1, #0
 8005538:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	0018      	movs	r0, r3
 800553e:	f7fc fd45 	bl	8001fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	223d      	movs	r2, #61	@ 0x3d
 8005546:	2102      	movs	r1, #2
 8005548:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3304      	adds	r3, #4
 8005552:	0019      	movs	r1, r3
 8005554:	0010      	movs	r0, r2
 8005556:	f000 fbf1 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2246      	movs	r2, #70	@ 0x46
 800555e:	2101      	movs	r1, #1
 8005560:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	223e      	movs	r2, #62	@ 0x3e
 8005566:	2101      	movs	r1, #1
 8005568:	5499      	strb	r1, [r3, r2]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	223f      	movs	r2, #63	@ 0x3f
 800556e:	2101      	movs	r1, #1
 8005570:	5499      	strb	r1, [r3, r2]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2240      	movs	r2, #64	@ 0x40
 8005576:	2101      	movs	r1, #1
 8005578:	5499      	strb	r1, [r3, r2]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2241      	movs	r2, #65	@ 0x41
 800557e:	2101      	movs	r1, #1
 8005580:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2242      	movs	r2, #66	@ 0x42
 8005586:	2101      	movs	r1, #1
 8005588:	5499      	strb	r1, [r3, r2]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2243      	movs	r2, #67	@ 0x43
 800558e:	2101      	movs	r1, #1
 8005590:	5499      	strb	r1, [r3, r2]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2244      	movs	r2, #68	@ 0x44
 8005596:	2101      	movs	r1, #1
 8005598:	5499      	strb	r1, [r3, r2]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2245      	movs	r2, #69	@ 0x45
 800559e:	2101      	movs	r1, #1
 80055a0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	223d      	movs	r2, #61	@ 0x3d
 80055a6:	2101      	movs	r1, #1
 80055a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	0018      	movs	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b002      	add	sp, #8
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	223d      	movs	r2, #61	@ 0x3d
 80055c0:	5c9b      	ldrb	r3, [r3, r2]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d001      	beq.n	80055cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e036      	b.n	800563a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	223d      	movs	r2, #61	@ 0x3d
 80055d0:	2102      	movs	r1, #2
 80055d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2101      	movs	r1, #1
 80055e0:	430a      	orrs	r2, r1
 80055e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a16      	ldr	r2, [pc, #88]	@ (8005644 <HAL_TIM_Base_Start_IT+0x90>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d00a      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x50>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	2380      	movs	r3, #128	@ 0x80
 80055f4:	05db      	lsls	r3, r3, #23
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d004      	beq.n	8005604 <HAL_TIM_Base_Start_IT+0x50>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a12      	ldr	r2, [pc, #72]	@ (8005648 <HAL_TIM_Base_Start_IT+0x94>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d111      	bne.n	8005628 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	2207      	movs	r2, #7
 800560c:	4013      	ands	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b06      	cmp	r3, #6
 8005614:	d010      	beq.n	8005638 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2101      	movs	r1, #1
 8005622:	430a      	orrs	r2, r1
 8005624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005626:	e007      	b.n	8005638 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2101      	movs	r1, #1
 8005634:	430a      	orrs	r2, r1
 8005636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	0018      	movs	r0, r3
 800563c:	46bd      	mov	sp, r7
 800563e:	b004      	add	sp, #16
 8005640:	bd80      	pop	{r7, pc}
 8005642:	46c0      	nop			@ (mov r8, r8)
 8005644:	40012c00 	.word	0x40012c00
 8005648:	40000400 	.word	0x40000400

0800564c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e042      	b.n	80056e4 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	223d      	movs	r2, #61	@ 0x3d
 8005662:	5c9b      	ldrb	r3, [r3, r2]
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	223c      	movs	r2, #60	@ 0x3c
 800566e:	2100      	movs	r1, #0
 8005670:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	0018      	movs	r0, r3
 8005676:	f7fc fc49 	bl	8001f0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	223d      	movs	r2, #61	@ 0x3d
 800567e:	2102      	movs	r1, #2
 8005680:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3304      	adds	r3, #4
 800568a:	0019      	movs	r1, r3
 800568c:	0010      	movs	r0, r2
 800568e:	f000 fb55 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2246      	movs	r2, #70	@ 0x46
 8005696:	2101      	movs	r1, #1
 8005698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	223e      	movs	r2, #62	@ 0x3e
 800569e:	2101      	movs	r1, #1
 80056a0:	5499      	strb	r1, [r3, r2]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	223f      	movs	r2, #63	@ 0x3f
 80056a6:	2101      	movs	r1, #1
 80056a8:	5499      	strb	r1, [r3, r2]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2240      	movs	r2, #64	@ 0x40
 80056ae:	2101      	movs	r1, #1
 80056b0:	5499      	strb	r1, [r3, r2]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2241      	movs	r2, #65	@ 0x41
 80056b6:	2101      	movs	r1, #1
 80056b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2242      	movs	r2, #66	@ 0x42
 80056be:	2101      	movs	r1, #1
 80056c0:	5499      	strb	r1, [r3, r2]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2243      	movs	r2, #67	@ 0x43
 80056c6:	2101      	movs	r1, #1
 80056c8:	5499      	strb	r1, [r3, r2]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2244      	movs	r2, #68	@ 0x44
 80056ce:	2101      	movs	r1, #1
 80056d0:	5499      	strb	r1, [r3, r2]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2245      	movs	r2, #69	@ 0x45
 80056d6:	2101      	movs	r1, #1
 80056d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	223d      	movs	r2, #61	@ 0x3d
 80056de:	2101      	movs	r1, #1
 80056e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	0018      	movs	r0, r3
 80056e6:	46bd      	mov	sp, r7
 80056e8:	b002      	add	sp, #8
 80056ea:	bd80      	pop	{r7, pc}

080056ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d101      	bne.n	80056fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e042      	b.n	8005784 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	223d      	movs	r2, #61	@ 0x3d
 8005702:	5c9b      	ldrb	r3, [r3, r2]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d107      	bne.n	800571a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	223c      	movs	r2, #60	@ 0x3c
 800570e:	2100      	movs	r1, #0
 8005710:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	0018      	movs	r0, r3
 8005716:	f7fc fc29 	bl	8001f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	223d      	movs	r2, #61	@ 0x3d
 800571e:	2102      	movs	r1, #2
 8005720:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3304      	adds	r3, #4
 800572a:	0019      	movs	r1, r3
 800572c:	0010      	movs	r0, r2
 800572e:	f000 fb05 	bl	8005d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2246      	movs	r2, #70	@ 0x46
 8005736:	2101      	movs	r1, #1
 8005738:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	223e      	movs	r2, #62	@ 0x3e
 800573e:	2101      	movs	r1, #1
 8005740:	5499      	strb	r1, [r3, r2]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	223f      	movs	r2, #63	@ 0x3f
 8005746:	2101      	movs	r1, #1
 8005748:	5499      	strb	r1, [r3, r2]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2240      	movs	r2, #64	@ 0x40
 800574e:	2101      	movs	r1, #1
 8005750:	5499      	strb	r1, [r3, r2]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2241      	movs	r2, #65	@ 0x41
 8005756:	2101      	movs	r1, #1
 8005758:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2242      	movs	r2, #66	@ 0x42
 800575e:	2101      	movs	r1, #1
 8005760:	5499      	strb	r1, [r3, r2]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2243      	movs	r2, #67	@ 0x43
 8005766:	2101      	movs	r1, #1
 8005768:	5499      	strb	r1, [r3, r2]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2244      	movs	r2, #68	@ 0x44
 800576e:	2101      	movs	r1, #1
 8005770:	5499      	strb	r1, [r3, r2]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2245      	movs	r2, #69	@ 0x45
 8005776:	2101      	movs	r1, #1
 8005778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	223d      	movs	r2, #61	@ 0x3d
 800577e:	2101      	movs	r1, #1
 8005780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	0018      	movs	r0, r3
 8005786:	46bd      	mov	sp, r7
 8005788:	b002      	add	sp, #8
 800578a:	bd80      	pop	{r7, pc}

0800578c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d108      	bne.n	80057ae <HAL_TIM_PWM_Start+0x22>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	223e      	movs	r2, #62	@ 0x3e
 80057a0:	5c9b      	ldrb	r3, [r3, r2]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	1e5a      	subs	r2, r3, #1
 80057a8:	4193      	sbcs	r3, r2
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	e01f      	b.n	80057ee <HAL_TIM_PWM_Start+0x62>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d108      	bne.n	80057c6 <HAL_TIM_PWM_Start+0x3a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	223f      	movs	r2, #63	@ 0x3f
 80057b8:	5c9b      	ldrb	r3, [r3, r2]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	1e5a      	subs	r2, r3, #1
 80057c0:	4193      	sbcs	r3, r2
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	e013      	b.n	80057ee <HAL_TIM_PWM_Start+0x62>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d108      	bne.n	80057de <HAL_TIM_PWM_Start+0x52>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2240      	movs	r2, #64	@ 0x40
 80057d0:	5c9b      	ldrb	r3, [r3, r2]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	3b01      	subs	r3, #1
 80057d6:	1e5a      	subs	r2, r3, #1
 80057d8:	4193      	sbcs	r3, r2
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	e007      	b.n	80057ee <HAL_TIM_PWM_Start+0x62>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2241      	movs	r2, #65	@ 0x41
 80057e2:	5c9b      	ldrb	r3, [r3, r2]
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	1e5a      	subs	r2, r3, #1
 80057ea:	4193      	sbcs	r3, r2
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e06a      	b.n	80058cc <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0x7a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	223e      	movs	r2, #62	@ 0x3e
 8005800:	2102      	movs	r1, #2
 8005802:	5499      	strb	r1, [r3, r2]
 8005804:	e013      	b.n	800582e <HAL_TIM_PWM_Start+0xa2>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b04      	cmp	r3, #4
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Start+0x8a>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	223f      	movs	r2, #63	@ 0x3f
 8005810:	2102      	movs	r1, #2
 8005812:	5499      	strb	r1, [r3, r2]
 8005814:	e00b      	b.n	800582e <HAL_TIM_PWM_Start+0xa2>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b08      	cmp	r3, #8
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start+0x9a>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2240      	movs	r2, #64	@ 0x40
 8005820:	2102      	movs	r1, #2
 8005822:	5499      	strb	r1, [r3, r2]
 8005824:	e003      	b.n	800582e <HAL_TIM_PWM_Start+0xa2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2241      	movs	r2, #65	@ 0x41
 800582a:	2102      	movs	r1, #2
 800582c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	2201      	movs	r2, #1
 8005836:	0018      	movs	r0, r3
 8005838:	f000 fce4 	bl	8006204 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a24      	ldr	r2, [pc, #144]	@ (80058d4 <HAL_TIM_PWM_Start+0x148>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <HAL_TIM_PWM_Start+0xce>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a23      	ldr	r2, [pc, #140]	@ (80058d8 <HAL_TIM_PWM_Start+0x14c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_TIM_PWM_Start+0xce>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a21      	ldr	r2, [pc, #132]	@ (80058dc <HAL_TIM_PWM_Start+0x150>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d101      	bne.n	800585e <HAL_TIM_PWM_Start+0xd2>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_TIM_PWM_Start+0xd4>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2180      	movs	r1, #128	@ 0x80
 8005870:	0209      	lsls	r1, r1, #8
 8005872:	430a      	orrs	r2, r1
 8005874:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a16      	ldr	r2, [pc, #88]	@ (80058d4 <HAL_TIM_PWM_Start+0x148>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d00a      	beq.n	8005896 <HAL_TIM_PWM_Start+0x10a>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	2380      	movs	r3, #128	@ 0x80
 8005886:	05db      	lsls	r3, r3, #23
 8005888:	429a      	cmp	r2, r3
 800588a:	d004      	beq.n	8005896 <HAL_TIM_PWM_Start+0x10a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a13      	ldr	r2, [pc, #76]	@ (80058e0 <HAL_TIM_PWM_Start+0x154>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d111      	bne.n	80058ba <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2207      	movs	r2, #7
 800589e:	4013      	ands	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2b06      	cmp	r3, #6
 80058a6:	d010      	beq.n	80058ca <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2101      	movs	r1, #1
 80058b4:	430a      	orrs	r2, r1
 80058b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	e007      	b.n	80058ca <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2101      	movs	r1, #1
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	0018      	movs	r0, r3
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b004      	add	sp, #16
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800
 80058e0:	40000400 	.word	0x40000400

080058e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	2202      	movs	r2, #2
 8005900:	4013      	ands	r3, r2
 8005902:	d021      	beq.n	8005948 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2202      	movs	r2, #2
 8005908:	4013      	ands	r3, r2
 800590a:	d01d      	beq.n	8005948 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2203      	movs	r2, #3
 8005912:	4252      	negs	r2, r2
 8005914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2201      	movs	r2, #1
 800591a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	2203      	movs	r2, #3
 8005924:	4013      	ands	r3, r2
 8005926:	d004      	beq.n	8005932 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	0018      	movs	r0, r3
 800592c:	f000 f9ee 	bl	8005d0c <HAL_TIM_IC_CaptureCallback>
 8005930:	e007      	b.n	8005942 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	0018      	movs	r0, r3
 8005936:	f000 f9e1 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	0018      	movs	r0, r3
 800593e:	f000 f9ed 	bl	8005d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2204      	movs	r2, #4
 800594c:	4013      	ands	r3, r2
 800594e:	d022      	beq.n	8005996 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2204      	movs	r2, #4
 8005954:	4013      	ands	r3, r2
 8005956:	d01e      	beq.n	8005996 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2205      	movs	r2, #5
 800595e:	4252      	negs	r2, r2
 8005960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	23c0      	movs	r3, #192	@ 0xc0
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4013      	ands	r3, r2
 8005974:	d004      	beq.n	8005980 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	0018      	movs	r0, r3
 800597a:	f000 f9c7 	bl	8005d0c <HAL_TIM_IC_CaptureCallback>
 800597e:	e007      	b.n	8005990 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	0018      	movs	r0, r3
 8005984:	f000 f9ba 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	0018      	movs	r0, r3
 800598c:	f000 f9c6 	bl	8005d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2208      	movs	r2, #8
 800599a:	4013      	ands	r3, r2
 800599c:	d021      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2208      	movs	r2, #8
 80059a2:	4013      	ands	r3, r2
 80059a4:	d01d      	beq.n	80059e2 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2209      	movs	r2, #9
 80059ac:	4252      	negs	r2, r2
 80059ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2204      	movs	r2, #4
 80059b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	2203      	movs	r2, #3
 80059be:	4013      	ands	r3, r2
 80059c0:	d004      	beq.n	80059cc <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	0018      	movs	r0, r3
 80059c6:	f000 f9a1 	bl	8005d0c <HAL_TIM_IC_CaptureCallback>
 80059ca:	e007      	b.n	80059dc <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	0018      	movs	r0, r3
 80059d0:	f000 f994 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 f9a0 	bl	8005d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2210      	movs	r2, #16
 80059e6:	4013      	ands	r3, r2
 80059e8:	d022      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2210      	movs	r2, #16
 80059ee:	4013      	ands	r3, r2
 80059f0:	d01e      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2211      	movs	r2, #17
 80059f8:	4252      	negs	r2, r2
 80059fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2208      	movs	r2, #8
 8005a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	69da      	ldr	r2, [r3, #28]
 8005a08:	23c0      	movs	r3, #192	@ 0xc0
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 f97a 	bl	8005d0c <HAL_TIM_IC_CaptureCallback>
 8005a18:	e007      	b.n	8005a2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f000 f96d 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	0018      	movs	r0, r3
 8005a26:	f000 f979 	bl	8005d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	2201      	movs	r2, #1
 8005a34:	4013      	ands	r3, r2
 8005a36:	d00c      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	d008      	beq.n	8005a52 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2202      	movs	r2, #2
 8005a46:	4252      	negs	r2, r2
 8005a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	0018      	movs	r0, r3
 8005a4e:	f7fc f8bb 	bl	8001bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2280      	movs	r2, #128	@ 0x80
 8005a56:	4013      	ands	r3, r2
 8005a58:	d00c      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2280      	movs	r2, #128	@ 0x80
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d008      	beq.n	8005a74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2281      	movs	r2, #129	@ 0x81
 8005a68:	4252      	negs	r2, r2
 8005a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	0018      	movs	r0, r3
 8005a70:	f000 fcaa 	bl	80063c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2240      	movs	r2, #64	@ 0x40
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d00c      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2240      	movs	r2, #64	@ 0x40
 8005a80:	4013      	ands	r3, r2
 8005a82:	d008      	beq.n	8005a96 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2241      	movs	r2, #65	@ 0x41
 8005a8a:	4252      	negs	r2, r2
 8005a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f000 f94b 	bl	8005d2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d00c      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d008      	beq.n	8005ab8 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2221      	movs	r2, #33	@ 0x21
 8005aac:	4252      	negs	r2, r2
 8005aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 fc80 	bl	80063b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ab8:	46c0      	nop			@ (mov r8, r8)
 8005aba:	46bd      	mov	sp, r7
 8005abc:	b004      	add	sp, #16
 8005abe:	bd80      	pop	{r7, pc}

08005ac0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005acc:	2317      	movs	r3, #23
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	223c      	movs	r2, #60	@ 0x3c
 8005ad8:	5c9b      	ldrb	r3, [r3, r2]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_TIM_OC_ConfigChannel+0x22>
 8005ade:	2302      	movs	r3, #2
 8005ae0:	e042      	b.n	8005b68 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	223c      	movs	r2, #60	@ 0x3c
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b0c      	cmp	r3, #12
 8005aee:	d027      	beq.n	8005b40 <HAL_TIM_OC_ConfigChannel+0x80>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2b0c      	cmp	r3, #12
 8005af4:	d82c      	bhi.n	8005b50 <HAL_TIM_OC_ConfigChannel+0x90>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b08      	cmp	r3, #8
 8005afa:	d019      	beq.n	8005b30 <HAL_TIM_OC_ConfigChannel+0x70>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d826      	bhi.n	8005b50 <HAL_TIM_OC_ConfigChannel+0x90>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_TIM_OC_ConfigChannel+0x50>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d008      	beq.n	8005b20 <HAL_TIM_OC_ConfigChannel+0x60>
 8005b0e:	e01f      	b.n	8005b50 <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	0011      	movs	r1, r2
 8005b18:	0018      	movs	r0, r3
 8005b1a:	f000 f993 	bl	8005e44 <TIM_OC1_SetConfig>
      break;
 8005b1e:	e01c      	b.n	8005b5a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	0011      	movs	r1, r2
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f000 fa09 	bl	8005f40 <TIM_OC2_SetConfig>
      break;
 8005b2e:	e014      	b.n	8005b5a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	0011      	movs	r1, r2
 8005b38:	0018      	movs	r0, r3
 8005b3a:	f000 fa7f 	bl	800603c <TIM_OC3_SetConfig>
      break;
 8005b3e:	e00c      	b.n	8005b5a <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	0011      	movs	r1, r2
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 faf7 	bl	800613c <TIM_OC4_SetConfig>
      break;
 8005b4e:	e004      	b.n	8005b5a <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005b50:	2317      	movs	r3, #23
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
      break;
 8005b58:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	223c      	movs	r2, #60	@ 0x3c
 8005b5e:	2100      	movs	r1, #0
 8005b60:	5499      	strb	r1, [r3, r2]

  return status;
 8005b62:	2317      	movs	r3, #23
 8005b64:	18fb      	adds	r3, r7, r3
 8005b66:	781b      	ldrb	r3, [r3, #0]
}
 8005b68:	0018      	movs	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	b006      	add	sp, #24
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	60f8      	str	r0, [r7, #12]
 8005b78:	60b9      	str	r1, [r7, #8]
 8005b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7c:	2317      	movs	r3, #23
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	223c      	movs	r2, #60	@ 0x3c
 8005b88:	5c9b      	ldrb	r3, [r3, r2]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d101      	bne.n	8005b92 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	e0ad      	b.n	8005cee <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	223c      	movs	r2, #60	@ 0x3c
 8005b96:	2101      	movs	r1, #1
 8005b98:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b0c      	cmp	r3, #12
 8005b9e:	d100      	bne.n	8005ba2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005ba0:	e076      	b.n	8005c90 <HAL_TIM_PWM_ConfigChannel+0x120>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b0c      	cmp	r3, #12
 8005ba6:	d900      	bls.n	8005baa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005ba8:	e095      	b.n	8005cd6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d04e      	beq.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0xde>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d900      	bls.n	8005bb8 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005bb6:	e08e      	b.n	8005cd6 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_PWM_ConfigChannel+0x56>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d021      	beq.n	8005c08 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005bc4:	e087      	b.n	8005cd6 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	0011      	movs	r1, r2
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f000 f938 	bl	8005e44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2108      	movs	r1, #8
 8005be0:	430a      	orrs	r2, r1
 8005be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2104      	movs	r1, #4
 8005bf0:	438a      	bics	r2, r1
 8005bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6999      	ldr	r1, [r3, #24]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	619a      	str	r2, [r3, #24]
      break;
 8005c06:	e06b      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	0011      	movs	r1, r2
 8005c10:	0018      	movs	r0, r3
 8005c12:	f000 f995 	bl	8005f40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2180      	movs	r1, #128	@ 0x80
 8005c22:	0109      	lsls	r1, r1, #4
 8005c24:	430a      	orrs	r2, r1
 8005c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4931      	ldr	r1, [pc, #196]	@ (8005cf8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005c34:	400a      	ands	r2, r1
 8005c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	6999      	ldr	r1, [r3, #24]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	021a      	lsls	r2, r3, #8
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	619a      	str	r2, [r3, #24]
      break;
 8005c4c:	e048      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	0011      	movs	r1, r2
 8005c56:	0018      	movs	r0, r3
 8005c58:	f000 f9f0 	bl	800603c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2108      	movs	r1, #8
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69da      	ldr	r2, [r3, #28]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2104      	movs	r1, #4
 8005c78:	438a      	bics	r2, r1
 8005c7a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	69d9      	ldr	r1, [r3, #28]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691a      	ldr	r2, [r3, #16]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	61da      	str	r2, [r3, #28]
      break;
 8005c8e:	e027      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68ba      	ldr	r2, [r7, #8]
 8005c96:	0011      	movs	r1, r2
 8005c98:	0018      	movs	r0, r3
 8005c9a:	f000 fa4f 	bl	800613c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2180      	movs	r1, #128	@ 0x80
 8005caa:	0109      	lsls	r1, r1, #4
 8005cac:	430a      	orrs	r2, r1
 8005cae:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	69da      	ldr	r2, [r3, #28]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	490f      	ldr	r1, [pc, #60]	@ (8005cf8 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005cbc:	400a      	ands	r2, r1
 8005cbe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	69d9      	ldr	r1, [r3, #28]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	021a      	lsls	r2, r3, #8
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	61da      	str	r2, [r3, #28]
      break;
 8005cd4:	e004      	b.n	8005ce0 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005cd6:	2317      	movs	r3, #23
 8005cd8:	18fb      	adds	r3, r7, r3
 8005cda:	2201      	movs	r2, #1
 8005cdc:	701a      	strb	r2, [r3, #0]
      break;
 8005cde:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	223c      	movs	r2, #60	@ 0x3c
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	5499      	strb	r1, [r3, r2]

  return status;
 8005ce8:	2317      	movs	r3, #23
 8005cea:	18fb      	adds	r3, r7, r3
 8005cec:	781b      	ldrb	r3, [r3, #0]
}
 8005cee:	0018      	movs	r0, r3
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	b006      	add	sp, #24
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	46c0      	nop			@ (mov r8, r8)
 8005cf8:	fffffbff 	.word	0xfffffbff

08005cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d04:	46c0      	nop			@ (mov r8, r8)
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b002      	add	sp, #8
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d14:	46c0      	nop			@ (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	b002      	add	sp, #8
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d24:	46c0      	nop			@ (mov r8, r8)
 8005d26:	46bd      	mov	sp, r7
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d34:	46c0      	nop			@ (mov r8, r8)
 8005d36:	46bd      	mov	sp, r7
 8005d38:	b002      	add	sp, #8
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a37      	ldr	r2, [pc, #220]	@ (8005e2c <TIM_Base_SetConfig+0xf0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d008      	beq.n	8005d66 <TIM_Base_SetConfig+0x2a>
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	2380      	movs	r3, #128	@ 0x80
 8005d58:	05db      	lsls	r3, r3, #23
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d003      	beq.n	8005d66 <TIM_Base_SetConfig+0x2a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a33      	ldr	r2, [pc, #204]	@ (8005e30 <TIM_Base_SetConfig+0xf4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d108      	bne.n	8005d78 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2270      	movs	r2, #112	@ 0x70
 8005d6a:	4393      	bics	r3, r2
 8005d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a2c      	ldr	r2, [pc, #176]	@ (8005e2c <TIM_Base_SetConfig+0xf0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d014      	beq.n	8005daa <TIM_Base_SetConfig+0x6e>
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	2380      	movs	r3, #128	@ 0x80
 8005d84:	05db      	lsls	r3, r3, #23
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d00f      	beq.n	8005daa <TIM_Base_SetConfig+0x6e>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a28      	ldr	r2, [pc, #160]	@ (8005e30 <TIM_Base_SetConfig+0xf4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00b      	beq.n	8005daa <TIM_Base_SetConfig+0x6e>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a27      	ldr	r2, [pc, #156]	@ (8005e34 <TIM_Base_SetConfig+0xf8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d007      	beq.n	8005daa <TIM_Base_SetConfig+0x6e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a26      	ldr	r2, [pc, #152]	@ (8005e38 <TIM_Base_SetConfig+0xfc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_Base_SetConfig+0x6e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a25      	ldr	r2, [pc, #148]	@ (8005e3c <TIM_Base_SetConfig+0x100>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a24      	ldr	r2, [pc, #144]	@ (8005e40 <TIM_Base_SetConfig+0x104>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2280      	movs	r2, #128	@ 0x80
 8005dc0:	4393      	bics	r3, r2
 8005dc2:	001a      	movs	r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	689a      	ldr	r2, [r3, #8]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a11      	ldr	r2, [pc, #68]	@ (8005e2c <TIM_Base_SetConfig+0xf0>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d007      	beq.n	8005dfa <TIM_Base_SetConfig+0xbe>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a12      	ldr	r2, [pc, #72]	@ (8005e38 <TIM_Base_SetConfig+0xfc>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d003      	beq.n	8005dfa <TIM_Base_SetConfig+0xbe>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a11      	ldr	r2, [pc, #68]	@ (8005e3c <TIM_Base_SetConfig+0x100>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d103      	bne.n	8005e02 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d106      	bne.n	8005e22 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	4393      	bics	r3, r2
 8005e1c:	001a      	movs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	611a      	str	r2, [r3, #16]
  }
}
 8005e22:	46c0      	nop			@ (mov r8, r8)
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b004      	add	sp, #16
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	46c0      	nop			@ (mov r8, r8)
 8005e2c:	40012c00 	.word	0x40012c00
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40002000 	.word	0x40002000
 8005e38:	40014400 	.word	0x40014400
 8005e3c:	40014800 	.word	0x40014800
 8005e40:	fffffcff 	.word	0xfffffcff

08005e44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a1b      	ldr	r3, [r3, #32]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	4393      	bics	r3, r2
 8005e5c:	001a      	movs	r2, r3
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2270      	movs	r2, #112	@ 0x70
 8005e72:	4393      	bics	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2203      	movs	r2, #3
 8005e7a:	4393      	bics	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	4393      	bics	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a23      	ldr	r2, [pc, #140]	@ (8005f2c <TIM_OC1_SetConfig+0xe8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d007      	beq.n	8005eb2 <TIM_OC1_SetConfig+0x6e>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a22      	ldr	r2, [pc, #136]	@ (8005f30 <TIM_OC1_SetConfig+0xec>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <TIM_OC1_SetConfig+0x6e>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a21      	ldr	r2, [pc, #132]	@ (8005f34 <TIM_OC1_SetConfig+0xf0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d10c      	bne.n	8005ecc <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2208      	movs	r2, #8
 8005eb6:	4393      	bics	r3, r2
 8005eb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	2204      	movs	r2, #4
 8005ec8:	4393      	bics	r3, r2
 8005eca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a17      	ldr	r2, [pc, #92]	@ (8005f2c <TIM_OC1_SetConfig+0xe8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d007      	beq.n	8005ee4 <TIM_OC1_SetConfig+0xa0>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a16      	ldr	r2, [pc, #88]	@ (8005f30 <TIM_OC1_SetConfig+0xec>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d003      	beq.n	8005ee4 <TIM_OC1_SetConfig+0xa0>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <TIM_OC1_SetConfig+0xf0>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d111      	bne.n	8005f08 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4a14      	ldr	r2, [pc, #80]	@ (8005f38 <TIM_OC1_SetConfig+0xf4>)
 8005ee8:	4013      	ands	r3, r2
 8005eea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	4a13      	ldr	r2, [pc, #76]	@ (8005f3c <TIM_OC1_SetConfig+0xf8>)
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	695b      	ldr	r3, [r3, #20]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b006      	add	sp, #24
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	40012c00 	.word	0x40012c00
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800
 8005f38:	fffffeff 	.word	0xfffffeff
 8005f3c:	fffffdff 	.word	0xfffffdff

08005f40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	2210      	movs	r2, #16
 8005f56:	4393      	bics	r3, r2
 8005f58:	001a      	movs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	699b      	ldr	r3, [r3, #24]
 8005f68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8006020 <TIM_OC2_SetConfig+0xe0>)
 8005f6e:	4013      	ands	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4a2b      	ldr	r2, [pc, #172]	@ (8006024 <TIM_OC2_SetConfig+0xe4>)
 8005f76:	4013      	ands	r3, r2
 8005f78:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	021b      	lsls	r3, r3, #8
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2220      	movs	r2, #32
 8005f8a:	4393      	bics	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a22      	ldr	r2, [pc, #136]	@ (8006028 <TIM_OC2_SetConfig+0xe8>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d10d      	bne.n	8005fbe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	2280      	movs	r2, #128	@ 0x80
 8005fa6:	4393      	bics	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2240      	movs	r2, #64	@ 0x40
 8005fba:	4393      	bics	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a19      	ldr	r2, [pc, #100]	@ (8006028 <TIM_OC2_SetConfig+0xe8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d007      	beq.n	8005fd6 <TIM_OC2_SetConfig+0x96>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a18      	ldr	r2, [pc, #96]	@ (800602c <TIM_OC2_SetConfig+0xec>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d003      	beq.n	8005fd6 <TIM_OC2_SetConfig+0x96>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a17      	ldr	r2, [pc, #92]	@ (8006030 <TIM_OC2_SetConfig+0xf0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d113      	bne.n	8005ffe <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	4a16      	ldr	r2, [pc, #88]	@ (8006034 <TIM_OC2_SetConfig+0xf4>)
 8005fda:	4013      	ands	r3, r2
 8005fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	4a15      	ldr	r2, [pc, #84]	@ (8006038 <TIM_OC2_SetConfig+0xf8>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	693a      	ldr	r2, [r7, #16]
 8006002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	621a      	str	r2, [r3, #32]
}
 8006018:	46c0      	nop			@ (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b006      	add	sp, #24
 800601e:	bd80      	pop	{r7, pc}
 8006020:	ffff8fff 	.word	0xffff8fff
 8006024:	fffffcff 	.word	0xfffffcff
 8006028:	40012c00 	.word	0x40012c00
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800
 8006034:	fffffbff 	.word	0xfffffbff
 8006038:	fffff7ff 	.word	0xfffff7ff

0800603c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	4a31      	ldr	r2, [pc, #196]	@ (8006118 <TIM_OC3_SetConfig+0xdc>)
 8006052:	401a      	ands	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2270      	movs	r2, #112	@ 0x70
 8006068:	4393      	bics	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2203      	movs	r2, #3
 8006070:	4393      	bics	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	4313      	orrs	r3, r2
 800607c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4a26      	ldr	r2, [pc, #152]	@ (800611c <TIM_OC3_SetConfig+0xe0>)
 8006082:	4013      	ands	r3, r2
 8006084:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	021b      	lsls	r3, r3, #8
 800608c:	697a      	ldr	r2, [r7, #20]
 800608e:	4313      	orrs	r3, r2
 8006090:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a22      	ldr	r2, [pc, #136]	@ (8006120 <TIM_OC3_SetConfig+0xe4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d10d      	bne.n	80060b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	4a21      	ldr	r2, [pc, #132]	@ (8006124 <TIM_OC3_SetConfig+0xe8>)
 800609e:	4013      	ands	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006128 <TIM_OC3_SetConfig+0xec>)
 80060b2:	4013      	ands	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a19      	ldr	r2, [pc, #100]	@ (8006120 <TIM_OC3_SetConfig+0xe4>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d007      	beq.n	80060ce <TIM_OC3_SetConfig+0x92>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a1a      	ldr	r2, [pc, #104]	@ (800612c <TIM_OC3_SetConfig+0xf0>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d003      	beq.n	80060ce <TIM_OC3_SetConfig+0x92>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a19      	ldr	r2, [pc, #100]	@ (8006130 <TIM_OC3_SetConfig+0xf4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d113      	bne.n	80060f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4a18      	ldr	r2, [pc, #96]	@ (8006134 <TIM_OC3_SetConfig+0xf8>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	4a17      	ldr	r2, [pc, #92]	@ (8006138 <TIM_OC3_SetConfig+0xfc>)
 80060da:	4013      	ands	r3, r2
 80060dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68fa      	ldr	r2, [r7, #12]
 8006100:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685a      	ldr	r2, [r3, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	621a      	str	r2, [r3, #32]
}
 8006110:	46c0      	nop			@ (mov r8, r8)
 8006112:	46bd      	mov	sp, r7
 8006114:	b006      	add	sp, #24
 8006116:	bd80      	pop	{r7, pc}
 8006118:	fffffeff 	.word	0xfffffeff
 800611c:	fffffdff 	.word	0xfffffdff
 8006120:	40012c00 	.word	0x40012c00
 8006124:	fffff7ff 	.word	0xfffff7ff
 8006128:	fffffbff 	.word	0xfffffbff
 800612c:	40014400 	.word	0x40014400
 8006130:	40014800 	.word	0x40014800
 8006134:	ffffefff 	.word	0xffffefff
 8006138:	ffffdfff 	.word	0xffffdfff

0800613c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	4a24      	ldr	r2, [pc, #144]	@ (80061e4 <TIM_OC4_SetConfig+0xa8>)
 8006152:	401a      	ands	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4a20      	ldr	r2, [pc, #128]	@ (80061e8 <TIM_OC4_SetConfig+0xac>)
 8006168:	4013      	ands	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <TIM_OC4_SetConfig+0xb0>)
 8006170:	4013      	ands	r3, r2
 8006172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	021b      	lsls	r3, r3, #8
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4313      	orrs	r3, r2
 800617e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	4a1b      	ldr	r2, [pc, #108]	@ (80061f0 <TIM_OC4_SetConfig+0xb4>)
 8006184:	4013      	ands	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	031b      	lsls	r3, r3, #12
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a17      	ldr	r2, [pc, #92]	@ (80061f4 <TIM_OC4_SetConfig+0xb8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d007      	beq.n	80061ac <TIM_OC4_SetConfig+0x70>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a16      	ldr	r2, [pc, #88]	@ (80061f8 <TIM_OC4_SetConfig+0xbc>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d003      	beq.n	80061ac <TIM_OC4_SetConfig+0x70>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a15      	ldr	r2, [pc, #84]	@ (80061fc <TIM_OC4_SetConfig+0xc0>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d109      	bne.n	80061c0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	4a14      	ldr	r2, [pc, #80]	@ (8006200 <TIM_OC4_SetConfig+0xc4>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	695b      	ldr	r3, [r3, #20]
 80061b8:	019b      	lsls	r3, r3, #6
 80061ba:	697a      	ldr	r2, [r7, #20]
 80061bc:	4313      	orrs	r3, r2
 80061be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	46c0      	nop			@ (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	b006      	add	sp, #24
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			@ (mov r8, r8)
 80061e4:	ffffefff 	.word	0xffffefff
 80061e8:	ffff8fff 	.word	0xffff8fff
 80061ec:	fffffcff 	.word	0xfffffcff
 80061f0:	ffffdfff 	.word	0xffffdfff
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40014400 	.word	0x40014400
 80061fc:	40014800 	.word	0x40014800
 8006200:	ffffbfff 	.word	0xffffbfff

08006204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	221f      	movs	r2, #31
 8006214:	4013      	ands	r3, r2
 8006216:	2201      	movs	r2, #1
 8006218:	409a      	lsls	r2, r3
 800621a:	0013      	movs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	43d2      	mvns	r2, r2
 8006226:	401a      	ands	r2, r3
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a1a      	ldr	r2, [r3, #32]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	211f      	movs	r1, #31
 8006234:	400b      	ands	r3, r1
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4099      	lsls	r1, r3
 800623a:	000b      	movs	r3, r1
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	621a      	str	r2, [r3, #32]
}
 8006242:	46c0      	nop			@ (mov r8, r8)
 8006244:	46bd      	mov	sp, r7
 8006246:	b006      	add	sp, #24
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	223c      	movs	r2, #60	@ 0x3c
 800625a:	5c9b      	ldrb	r3, [r3, r2]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e042      	b.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	223c      	movs	r2, #60	@ 0x3c
 8006268:	2101      	movs	r1, #1
 800626a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	223d      	movs	r2, #61	@ 0x3d
 8006270:	2102      	movs	r1, #2
 8006272:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2270      	movs	r2, #112	@ 0x70
 8006288:	4393      	bics	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4313      	orrs	r3, r2
 8006294:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a14      	ldr	r2, [pc, #80]	@ (80062f4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d00a      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	2380      	movs	r3, #128	@ 0x80
 80062ae:	05db      	lsls	r3, r3, #23
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d004      	beq.n	80062be <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a0f      	ldr	r2, [pc, #60]	@ (80062f8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d10c      	bne.n	80062d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2280      	movs	r2, #128	@ 0x80
 80062c2:	4393      	bics	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	223d      	movs	r2, #61	@ 0x3d
 80062dc:	2101      	movs	r1, #1
 80062de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	223c      	movs	r2, #60	@ 0x3c
 80062e4:	2100      	movs	r1, #0
 80062e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	0018      	movs	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	b004      	add	sp, #16
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	46c0      	nop			@ (mov r8, r8)
 80062f4:	40012c00 	.word	0x40012c00
 80062f8:	40000400 	.word	0x40000400

080062fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	223c      	movs	r2, #60	@ 0x3c
 800630e:	5c9b      	ldrb	r3, [r3, r2]
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006314:	2302      	movs	r3, #2
 8006316:	e03e      	b.n	8006396 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	223c      	movs	r2, #60	@ 0x3c
 800631c:	2101      	movs	r1, #1
 800631e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	22ff      	movs	r2, #255	@ 0xff
 8006324:	4393      	bics	r3, r2
 8006326:	001a      	movs	r2, r3
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4a1b      	ldr	r2, [pc, #108]	@ (80063a0 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006334:	401a      	ands	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	4a18      	ldr	r2, [pc, #96]	@ (80063a4 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006342:	401a      	ands	r2, r3
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	4a16      	ldr	r2, [pc, #88]	@ (80063a8 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006350:	401a      	ands	r2, r3
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a13      	ldr	r2, [pc, #76]	@ (80063ac <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800635e:	401a      	ands	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4a11      	ldr	r2, [pc, #68]	@ (80063b0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800636c:	401a      	ands	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4a0e      	ldr	r2, [pc, #56]	@ (80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800637a:	401a      	ands	r2, r3
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	4313      	orrs	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	223c      	movs	r2, #60	@ 0x3c
 8006390:	2100      	movs	r1, #0
 8006392:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006394:	2300      	movs	r3, #0
}
 8006396:	0018      	movs	r0, r3
 8006398:	46bd      	mov	sp, r7
 800639a:	b004      	add	sp, #16
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			@ (mov r8, r8)
 80063a0:	fffffcff 	.word	0xfffffcff
 80063a4:	fffffbff 	.word	0xfffffbff
 80063a8:	fffff7ff 	.word	0xfffff7ff
 80063ac:	ffffefff 	.word	0xffffefff
 80063b0:	ffffdfff 	.word	0xffffdfff
 80063b4:	ffffbfff 	.word	0xffffbfff

080063b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063c0:	46c0      	nop			@ (mov r8, r8)
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b002      	add	sp, #8
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063d0:	46c0      	nop			@ (mov r8, r8)
 80063d2:	46bd      	mov	sp, r7
 80063d4:	b002      	add	sp, #8
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <memset>:
 80063d8:	0003      	movs	r3, r0
 80063da:	1882      	adds	r2, r0, r2
 80063dc:	4293      	cmp	r3, r2
 80063de:	d100      	bne.n	80063e2 <memset+0xa>
 80063e0:	4770      	bx	lr
 80063e2:	7019      	strb	r1, [r3, #0]
 80063e4:	3301      	adds	r3, #1
 80063e6:	e7f9      	b.n	80063dc <memset+0x4>

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	2600      	movs	r6, #0
 80063ec:	4c0c      	ldr	r4, [pc, #48]	@ (8006420 <__libc_init_array+0x38>)
 80063ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006424 <__libc_init_array+0x3c>)
 80063f0:	1b64      	subs	r4, r4, r5
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	2600      	movs	r6, #0
 80063fa:	f000 f819 	bl	8006430 <_init>
 80063fe:	4c0a      	ldr	r4, [pc, #40]	@ (8006428 <__libc_init_array+0x40>)
 8006400:	4d0a      	ldr	r5, [pc, #40]	@ (800642c <__libc_init_array+0x44>)
 8006402:	1b64      	subs	r4, r4, r5
 8006404:	10a4      	asrs	r4, r4, #2
 8006406:	42a6      	cmp	r6, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	00b3      	lsls	r3, r6, #2
 800640e:	58eb      	ldr	r3, [r5, r3]
 8006410:	4798      	blx	r3
 8006412:	3601      	adds	r6, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	00b3      	lsls	r3, r6, #2
 8006418:	58eb      	ldr	r3, [r5, r3]
 800641a:	4798      	blx	r3
 800641c:	3601      	adds	r6, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	08006478 	.word	0x08006478
 8006424:	08006478 	.word	0x08006478
 8006428:	0800647c 	.word	0x0800647c
 800642c:	08006478 	.word	0x08006478

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	46c0      	nop			@ (mov r8, r8)
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
