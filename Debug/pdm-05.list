
pdm-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08007384  08007384  00008384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073b4  080073b4  00009058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080073b4  080073b4  00009058  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080073b4  080073b4  00009058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b4  080073b4  000083b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073b8  080073b8  000083b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  080073bc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  20000058  08007414  00009058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08007414  000095f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d86d  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000205a  00000000  00000000  000168ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00018948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b45  00000000  00000000  000197b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bd0  00000000  00000000  0001a2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001020c  00000000  00000000  00032ec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009192c  00000000  00000000  000430d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d49fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000354c  00000000  00000000  000d4a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000d7f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000058 	.word	0x20000058
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800736c 	.word	0x0800736c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000005c 	.word	0x2000005c
 8000104:	0800736c 	.word	0x0800736c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_dmul>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4657      	mov	r7, sl
 8000224:	464e      	mov	r6, r9
 8000226:	46de      	mov	lr, fp
 8000228:	4645      	mov	r5, r8
 800022a:	b5e0      	push	{r5, r6, r7, lr}
 800022c:	001f      	movs	r7, r3
 800022e:	030b      	lsls	r3, r1, #12
 8000230:	0b1b      	lsrs	r3, r3, #12
 8000232:	0016      	movs	r6, r2
 8000234:	469a      	mov	sl, r3
 8000236:	0fca      	lsrs	r2, r1, #31
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	0004      	movs	r4, r0
 800023c:	4691      	mov	r9, r2
 800023e:	b085      	sub	sp, #20
 8000240:	0d5b      	lsrs	r3, r3, #21
 8000242:	d100      	bne.n	8000246 <__aeabi_dmul+0x26>
 8000244:	e1cf      	b.n	80005e6 <__aeabi_dmul+0x3c6>
 8000246:	4acd      	ldr	r2, [pc, #820]	@ (800057c <__aeabi_dmul+0x35c>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d055      	beq.n	80002f8 <__aeabi_dmul+0xd8>
 800024c:	4651      	mov	r1, sl
 800024e:	0f42      	lsrs	r2, r0, #29
 8000250:	00c9      	lsls	r1, r1, #3
 8000252:	430a      	orrs	r2, r1
 8000254:	2180      	movs	r1, #128	@ 0x80
 8000256:	0409      	lsls	r1, r1, #16
 8000258:	4311      	orrs	r1, r2
 800025a:	00c2      	lsls	r2, r0, #3
 800025c:	4690      	mov	r8, r2
 800025e:	4ac8      	ldr	r2, [pc, #800]	@ (8000580 <__aeabi_dmul+0x360>)
 8000260:	468a      	mov	sl, r1
 8000262:	4693      	mov	fp, r2
 8000264:	449b      	add	fp, r3
 8000266:	2300      	movs	r3, #0
 8000268:	2500      	movs	r5, #0
 800026a:	9302      	str	r3, [sp, #8]
 800026c:	033c      	lsls	r4, r7, #12
 800026e:	007b      	lsls	r3, r7, #1
 8000270:	0ffa      	lsrs	r2, r7, #31
 8000272:	9601      	str	r6, [sp, #4]
 8000274:	0b24      	lsrs	r4, r4, #12
 8000276:	0d5b      	lsrs	r3, r3, #21
 8000278:	9200      	str	r2, [sp, #0]
 800027a:	d100      	bne.n	800027e <__aeabi_dmul+0x5e>
 800027c:	e188      	b.n	8000590 <__aeabi_dmul+0x370>
 800027e:	4abf      	ldr	r2, [pc, #764]	@ (800057c <__aeabi_dmul+0x35c>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d100      	bne.n	8000286 <__aeabi_dmul+0x66>
 8000284:	e092      	b.n	80003ac <__aeabi_dmul+0x18c>
 8000286:	4abe      	ldr	r2, [pc, #760]	@ (8000580 <__aeabi_dmul+0x360>)
 8000288:	4694      	mov	ip, r2
 800028a:	4463      	add	r3, ip
 800028c:	449b      	add	fp, r3
 800028e:	2d0a      	cmp	r5, #10
 8000290:	dc42      	bgt.n	8000318 <__aeabi_dmul+0xf8>
 8000292:	00e4      	lsls	r4, r4, #3
 8000294:	0f73      	lsrs	r3, r6, #29
 8000296:	4323      	orrs	r3, r4
 8000298:	2480      	movs	r4, #128	@ 0x80
 800029a:	4649      	mov	r1, r9
 800029c:	0424      	lsls	r4, r4, #16
 800029e:	431c      	orrs	r4, r3
 80002a0:	00f3      	lsls	r3, r6, #3
 80002a2:	9301      	str	r3, [sp, #4]
 80002a4:	9b00      	ldr	r3, [sp, #0]
 80002a6:	2000      	movs	r0, #0
 80002a8:	4059      	eors	r1, r3
 80002aa:	b2cb      	uxtb	r3, r1
 80002ac:	9303      	str	r3, [sp, #12]
 80002ae:	2d02      	cmp	r5, #2
 80002b0:	dc00      	bgt.n	80002b4 <__aeabi_dmul+0x94>
 80002b2:	e094      	b.n	80003de <__aeabi_dmul+0x1be>
 80002b4:	2301      	movs	r3, #1
 80002b6:	40ab      	lsls	r3, r5
 80002b8:	001d      	movs	r5, r3
 80002ba:	23a6      	movs	r3, #166	@ 0xa6
 80002bc:	002a      	movs	r2, r5
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	401a      	ands	r2, r3
 80002c2:	421d      	tst	r5, r3
 80002c4:	d000      	beq.n	80002c8 <__aeabi_dmul+0xa8>
 80002c6:	e229      	b.n	800071c <__aeabi_dmul+0x4fc>
 80002c8:	2390      	movs	r3, #144	@ 0x90
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	421d      	tst	r5, r3
 80002ce:	d100      	bne.n	80002d2 <__aeabi_dmul+0xb2>
 80002d0:	e24d      	b.n	800076e <__aeabi_dmul+0x54e>
 80002d2:	2300      	movs	r3, #0
 80002d4:	2480      	movs	r4, #128	@ 0x80
 80002d6:	4699      	mov	r9, r3
 80002d8:	0324      	lsls	r4, r4, #12
 80002da:	4ba8      	ldr	r3, [pc, #672]	@ (800057c <__aeabi_dmul+0x35c>)
 80002dc:	0010      	movs	r0, r2
 80002de:	464a      	mov	r2, r9
 80002e0:	051b      	lsls	r3, r3, #20
 80002e2:	4323      	orrs	r3, r4
 80002e4:	07d2      	lsls	r2, r2, #31
 80002e6:	4313      	orrs	r3, r2
 80002e8:	0019      	movs	r1, r3
 80002ea:	b005      	add	sp, #20
 80002ec:	bcf0      	pop	{r4, r5, r6, r7}
 80002ee:	46bb      	mov	fp, r7
 80002f0:	46b2      	mov	sl, r6
 80002f2:	46a9      	mov	r9, r5
 80002f4:	46a0      	mov	r8, r4
 80002f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f8:	4652      	mov	r2, sl
 80002fa:	4302      	orrs	r2, r0
 80002fc:	4690      	mov	r8, r2
 80002fe:	d000      	beq.n	8000302 <__aeabi_dmul+0xe2>
 8000300:	e1ac      	b.n	800065c <__aeabi_dmul+0x43c>
 8000302:	469b      	mov	fp, r3
 8000304:	2302      	movs	r3, #2
 8000306:	4692      	mov	sl, r2
 8000308:	2508      	movs	r5, #8
 800030a:	9302      	str	r3, [sp, #8]
 800030c:	e7ae      	b.n	800026c <__aeabi_dmul+0x4c>
 800030e:	9b00      	ldr	r3, [sp, #0]
 8000310:	46a2      	mov	sl, r4
 8000312:	4699      	mov	r9, r3
 8000314:	9b01      	ldr	r3, [sp, #4]
 8000316:	4698      	mov	r8, r3
 8000318:	9b02      	ldr	r3, [sp, #8]
 800031a:	2b02      	cmp	r3, #2
 800031c:	d100      	bne.n	8000320 <__aeabi_dmul+0x100>
 800031e:	e1ca      	b.n	80006b6 <__aeabi_dmul+0x496>
 8000320:	2b03      	cmp	r3, #3
 8000322:	d100      	bne.n	8000326 <__aeabi_dmul+0x106>
 8000324:	e192      	b.n	800064c <__aeabi_dmul+0x42c>
 8000326:	2b01      	cmp	r3, #1
 8000328:	d110      	bne.n	800034c <__aeabi_dmul+0x12c>
 800032a:	2300      	movs	r3, #0
 800032c:	2400      	movs	r4, #0
 800032e:	2200      	movs	r2, #0
 8000330:	e7d4      	b.n	80002dc <__aeabi_dmul+0xbc>
 8000332:	2201      	movs	r2, #1
 8000334:	087b      	lsrs	r3, r7, #1
 8000336:	403a      	ands	r2, r7
 8000338:	4313      	orrs	r3, r2
 800033a:	4652      	mov	r2, sl
 800033c:	07d2      	lsls	r2, r2, #31
 800033e:	4313      	orrs	r3, r2
 8000340:	4698      	mov	r8, r3
 8000342:	4653      	mov	r3, sl
 8000344:	085b      	lsrs	r3, r3, #1
 8000346:	469a      	mov	sl, r3
 8000348:	9b03      	ldr	r3, [sp, #12]
 800034a:	4699      	mov	r9, r3
 800034c:	465b      	mov	r3, fp
 800034e:	1c58      	adds	r0, r3, #1
 8000350:	2380      	movs	r3, #128	@ 0x80
 8000352:	00db      	lsls	r3, r3, #3
 8000354:	445b      	add	r3, fp
 8000356:	2b00      	cmp	r3, #0
 8000358:	dc00      	bgt.n	800035c <__aeabi_dmul+0x13c>
 800035a:	e1b1      	b.n	80006c0 <__aeabi_dmul+0x4a0>
 800035c:	4642      	mov	r2, r8
 800035e:	0752      	lsls	r2, r2, #29
 8000360:	d00b      	beq.n	800037a <__aeabi_dmul+0x15a>
 8000362:	220f      	movs	r2, #15
 8000364:	4641      	mov	r1, r8
 8000366:	400a      	ands	r2, r1
 8000368:	2a04      	cmp	r2, #4
 800036a:	d006      	beq.n	800037a <__aeabi_dmul+0x15a>
 800036c:	4642      	mov	r2, r8
 800036e:	1d11      	adds	r1, r2, #4
 8000370:	4541      	cmp	r1, r8
 8000372:	4192      	sbcs	r2, r2
 8000374:	4688      	mov	r8, r1
 8000376:	4252      	negs	r2, r2
 8000378:	4492      	add	sl, r2
 800037a:	4652      	mov	r2, sl
 800037c:	01d2      	lsls	r2, r2, #7
 800037e:	d506      	bpl.n	800038e <__aeabi_dmul+0x16e>
 8000380:	4652      	mov	r2, sl
 8000382:	4b80      	ldr	r3, [pc, #512]	@ (8000584 <__aeabi_dmul+0x364>)
 8000384:	401a      	ands	r2, r3
 8000386:	2380      	movs	r3, #128	@ 0x80
 8000388:	4692      	mov	sl, r2
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	18c3      	adds	r3, r0, r3
 800038e:	4a7e      	ldr	r2, [pc, #504]	@ (8000588 <__aeabi_dmul+0x368>)
 8000390:	4293      	cmp	r3, r2
 8000392:	dd00      	ble.n	8000396 <__aeabi_dmul+0x176>
 8000394:	e18f      	b.n	80006b6 <__aeabi_dmul+0x496>
 8000396:	4642      	mov	r2, r8
 8000398:	08d1      	lsrs	r1, r2, #3
 800039a:	4652      	mov	r2, sl
 800039c:	0752      	lsls	r2, r2, #29
 800039e:	430a      	orrs	r2, r1
 80003a0:	4651      	mov	r1, sl
 80003a2:	055b      	lsls	r3, r3, #21
 80003a4:	024c      	lsls	r4, r1, #9
 80003a6:	0b24      	lsrs	r4, r4, #12
 80003a8:	0d5b      	lsrs	r3, r3, #21
 80003aa:	e797      	b.n	80002dc <__aeabi_dmul+0xbc>
 80003ac:	4b73      	ldr	r3, [pc, #460]	@ (800057c <__aeabi_dmul+0x35c>)
 80003ae:	4326      	orrs	r6, r4
 80003b0:	469c      	mov	ip, r3
 80003b2:	44e3      	add	fp, ip
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d100      	bne.n	80003ba <__aeabi_dmul+0x19a>
 80003b8:	e16f      	b.n	800069a <__aeabi_dmul+0x47a>
 80003ba:	2303      	movs	r3, #3
 80003bc:	4649      	mov	r1, r9
 80003be:	431d      	orrs	r5, r3
 80003c0:	9b00      	ldr	r3, [sp, #0]
 80003c2:	4059      	eors	r1, r3
 80003c4:	b2cb      	uxtb	r3, r1
 80003c6:	9303      	str	r3, [sp, #12]
 80003c8:	2d0a      	cmp	r5, #10
 80003ca:	dd00      	ble.n	80003ce <__aeabi_dmul+0x1ae>
 80003cc:	e133      	b.n	8000636 <__aeabi_dmul+0x416>
 80003ce:	2301      	movs	r3, #1
 80003d0:	40ab      	lsls	r3, r5
 80003d2:	001d      	movs	r5, r3
 80003d4:	2303      	movs	r3, #3
 80003d6:	9302      	str	r3, [sp, #8]
 80003d8:	2288      	movs	r2, #136	@ 0x88
 80003da:	422a      	tst	r2, r5
 80003dc:	d197      	bne.n	800030e <__aeabi_dmul+0xee>
 80003de:	4642      	mov	r2, r8
 80003e0:	4643      	mov	r3, r8
 80003e2:	0412      	lsls	r2, r2, #16
 80003e4:	0c12      	lsrs	r2, r2, #16
 80003e6:	0016      	movs	r6, r2
 80003e8:	9801      	ldr	r0, [sp, #4]
 80003ea:	0c1d      	lsrs	r5, r3, #16
 80003ec:	0c03      	lsrs	r3, r0, #16
 80003ee:	0400      	lsls	r0, r0, #16
 80003f0:	0c00      	lsrs	r0, r0, #16
 80003f2:	4346      	muls	r6, r0
 80003f4:	46b4      	mov	ip, r6
 80003f6:	001e      	movs	r6, r3
 80003f8:	436e      	muls	r6, r5
 80003fa:	9600      	str	r6, [sp, #0]
 80003fc:	0016      	movs	r6, r2
 80003fe:	0007      	movs	r7, r0
 8000400:	435e      	muls	r6, r3
 8000402:	4661      	mov	r1, ip
 8000404:	46b0      	mov	r8, r6
 8000406:	436f      	muls	r7, r5
 8000408:	0c0e      	lsrs	r6, r1, #16
 800040a:	44b8      	add	r8, r7
 800040c:	4446      	add	r6, r8
 800040e:	42b7      	cmp	r7, r6
 8000410:	d905      	bls.n	800041e <__aeabi_dmul+0x1fe>
 8000412:	2180      	movs	r1, #128	@ 0x80
 8000414:	0249      	lsls	r1, r1, #9
 8000416:	4688      	mov	r8, r1
 8000418:	9f00      	ldr	r7, [sp, #0]
 800041a:	4447      	add	r7, r8
 800041c:	9700      	str	r7, [sp, #0]
 800041e:	4661      	mov	r1, ip
 8000420:	0409      	lsls	r1, r1, #16
 8000422:	0c09      	lsrs	r1, r1, #16
 8000424:	0c37      	lsrs	r7, r6, #16
 8000426:	0436      	lsls	r6, r6, #16
 8000428:	468c      	mov	ip, r1
 800042a:	0031      	movs	r1, r6
 800042c:	4461      	add	r1, ip
 800042e:	9101      	str	r1, [sp, #4]
 8000430:	0011      	movs	r1, r2
 8000432:	0c26      	lsrs	r6, r4, #16
 8000434:	0424      	lsls	r4, r4, #16
 8000436:	0c24      	lsrs	r4, r4, #16
 8000438:	4361      	muls	r1, r4
 800043a:	468c      	mov	ip, r1
 800043c:	0021      	movs	r1, r4
 800043e:	4369      	muls	r1, r5
 8000440:	4689      	mov	r9, r1
 8000442:	4661      	mov	r1, ip
 8000444:	0c09      	lsrs	r1, r1, #16
 8000446:	4688      	mov	r8, r1
 8000448:	4372      	muls	r2, r6
 800044a:	444a      	add	r2, r9
 800044c:	4442      	add	r2, r8
 800044e:	4375      	muls	r5, r6
 8000450:	4591      	cmp	r9, r2
 8000452:	d903      	bls.n	800045c <__aeabi_dmul+0x23c>
 8000454:	2180      	movs	r1, #128	@ 0x80
 8000456:	0249      	lsls	r1, r1, #9
 8000458:	4688      	mov	r8, r1
 800045a:	4445      	add	r5, r8
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	4688      	mov	r8, r1
 8000460:	4661      	mov	r1, ip
 8000462:	0409      	lsls	r1, r1, #16
 8000464:	0c09      	lsrs	r1, r1, #16
 8000466:	468c      	mov	ip, r1
 8000468:	0412      	lsls	r2, r2, #16
 800046a:	4462      	add	r2, ip
 800046c:	18b9      	adds	r1, r7, r2
 800046e:	9102      	str	r1, [sp, #8]
 8000470:	4651      	mov	r1, sl
 8000472:	0c09      	lsrs	r1, r1, #16
 8000474:	468c      	mov	ip, r1
 8000476:	4651      	mov	r1, sl
 8000478:	040f      	lsls	r7, r1, #16
 800047a:	0c3f      	lsrs	r7, r7, #16
 800047c:	0039      	movs	r1, r7
 800047e:	4341      	muls	r1, r0
 8000480:	4445      	add	r5, r8
 8000482:	4688      	mov	r8, r1
 8000484:	4661      	mov	r1, ip
 8000486:	4341      	muls	r1, r0
 8000488:	468a      	mov	sl, r1
 800048a:	4641      	mov	r1, r8
 800048c:	4660      	mov	r0, ip
 800048e:	0c09      	lsrs	r1, r1, #16
 8000490:	4689      	mov	r9, r1
 8000492:	4358      	muls	r0, r3
 8000494:	437b      	muls	r3, r7
 8000496:	4453      	add	r3, sl
 8000498:	444b      	add	r3, r9
 800049a:	459a      	cmp	sl, r3
 800049c:	d903      	bls.n	80004a6 <__aeabi_dmul+0x286>
 800049e:	2180      	movs	r1, #128	@ 0x80
 80004a0:	0249      	lsls	r1, r1, #9
 80004a2:	4689      	mov	r9, r1
 80004a4:	4448      	add	r0, r9
 80004a6:	0c19      	lsrs	r1, r3, #16
 80004a8:	4689      	mov	r9, r1
 80004aa:	4641      	mov	r1, r8
 80004ac:	0409      	lsls	r1, r1, #16
 80004ae:	0c09      	lsrs	r1, r1, #16
 80004b0:	4688      	mov	r8, r1
 80004b2:	0039      	movs	r1, r7
 80004b4:	4361      	muls	r1, r4
 80004b6:	041b      	lsls	r3, r3, #16
 80004b8:	4443      	add	r3, r8
 80004ba:	4688      	mov	r8, r1
 80004bc:	4661      	mov	r1, ip
 80004be:	434c      	muls	r4, r1
 80004c0:	4371      	muls	r1, r6
 80004c2:	468c      	mov	ip, r1
 80004c4:	4641      	mov	r1, r8
 80004c6:	4377      	muls	r7, r6
 80004c8:	0c0e      	lsrs	r6, r1, #16
 80004ca:	193f      	adds	r7, r7, r4
 80004cc:	19f6      	adds	r6, r6, r7
 80004ce:	4448      	add	r0, r9
 80004d0:	42b4      	cmp	r4, r6
 80004d2:	d903      	bls.n	80004dc <__aeabi_dmul+0x2bc>
 80004d4:	2180      	movs	r1, #128	@ 0x80
 80004d6:	0249      	lsls	r1, r1, #9
 80004d8:	4689      	mov	r9, r1
 80004da:	44cc      	add	ip, r9
 80004dc:	9902      	ldr	r1, [sp, #8]
 80004de:	9f00      	ldr	r7, [sp, #0]
 80004e0:	4689      	mov	r9, r1
 80004e2:	0431      	lsls	r1, r6, #16
 80004e4:	444f      	add	r7, r9
 80004e6:	4689      	mov	r9, r1
 80004e8:	4641      	mov	r1, r8
 80004ea:	4297      	cmp	r7, r2
 80004ec:	4192      	sbcs	r2, r2
 80004ee:	040c      	lsls	r4, r1, #16
 80004f0:	0c24      	lsrs	r4, r4, #16
 80004f2:	444c      	add	r4, r9
 80004f4:	18ff      	adds	r7, r7, r3
 80004f6:	4252      	negs	r2, r2
 80004f8:	1964      	adds	r4, r4, r5
 80004fa:	18a1      	adds	r1, r4, r2
 80004fc:	429f      	cmp	r7, r3
 80004fe:	419b      	sbcs	r3, r3
 8000500:	4688      	mov	r8, r1
 8000502:	4682      	mov	sl, r0
 8000504:	425b      	negs	r3, r3
 8000506:	4699      	mov	r9, r3
 8000508:	4590      	cmp	r8, r2
 800050a:	4192      	sbcs	r2, r2
 800050c:	42ac      	cmp	r4, r5
 800050e:	41a4      	sbcs	r4, r4
 8000510:	44c2      	add	sl, r8
 8000512:	44d1      	add	r9, sl
 8000514:	4252      	negs	r2, r2
 8000516:	4264      	negs	r4, r4
 8000518:	4314      	orrs	r4, r2
 800051a:	4599      	cmp	r9, r3
 800051c:	419b      	sbcs	r3, r3
 800051e:	4582      	cmp	sl, r0
 8000520:	4192      	sbcs	r2, r2
 8000522:	425b      	negs	r3, r3
 8000524:	4252      	negs	r2, r2
 8000526:	4313      	orrs	r3, r2
 8000528:	464a      	mov	r2, r9
 800052a:	0c36      	lsrs	r6, r6, #16
 800052c:	19a4      	adds	r4, r4, r6
 800052e:	18e3      	adds	r3, r4, r3
 8000530:	4463      	add	r3, ip
 8000532:	025b      	lsls	r3, r3, #9
 8000534:	0dd2      	lsrs	r2, r2, #23
 8000536:	431a      	orrs	r2, r3
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	4692      	mov	sl, r2
 800053c:	027a      	lsls	r2, r7, #9
 800053e:	430a      	orrs	r2, r1
 8000540:	1e50      	subs	r0, r2, #1
 8000542:	4182      	sbcs	r2, r0
 8000544:	0dff      	lsrs	r7, r7, #23
 8000546:	4317      	orrs	r7, r2
 8000548:	464a      	mov	r2, r9
 800054a:	0252      	lsls	r2, r2, #9
 800054c:	4317      	orrs	r7, r2
 800054e:	46b8      	mov	r8, r7
 8000550:	01db      	lsls	r3, r3, #7
 8000552:	d500      	bpl.n	8000556 <__aeabi_dmul+0x336>
 8000554:	e6ed      	b.n	8000332 <__aeabi_dmul+0x112>
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <__aeabi_dmul+0x36c>)
 8000558:	9a03      	ldr	r2, [sp, #12]
 800055a:	445b      	add	r3, fp
 800055c:	4691      	mov	r9, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	dc00      	bgt.n	8000564 <__aeabi_dmul+0x344>
 8000562:	e0ac      	b.n	80006be <__aeabi_dmul+0x49e>
 8000564:	003a      	movs	r2, r7
 8000566:	0752      	lsls	r2, r2, #29
 8000568:	d100      	bne.n	800056c <__aeabi_dmul+0x34c>
 800056a:	e710      	b.n	800038e <__aeabi_dmul+0x16e>
 800056c:	220f      	movs	r2, #15
 800056e:	4658      	mov	r0, fp
 8000570:	403a      	ands	r2, r7
 8000572:	2a04      	cmp	r2, #4
 8000574:	d000      	beq.n	8000578 <__aeabi_dmul+0x358>
 8000576:	e6f9      	b.n	800036c <__aeabi_dmul+0x14c>
 8000578:	e709      	b.n	800038e <__aeabi_dmul+0x16e>
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	000007ff 	.word	0x000007ff
 8000580:	fffffc01 	.word	0xfffffc01
 8000584:	feffffff 	.word	0xfeffffff
 8000588:	000007fe 	.word	0x000007fe
 800058c:	000003ff 	.word	0x000003ff
 8000590:	0022      	movs	r2, r4
 8000592:	4332      	orrs	r2, r6
 8000594:	d06f      	beq.n	8000676 <__aeabi_dmul+0x456>
 8000596:	2c00      	cmp	r4, #0
 8000598:	d100      	bne.n	800059c <__aeabi_dmul+0x37c>
 800059a:	e0c2      	b.n	8000722 <__aeabi_dmul+0x502>
 800059c:	0020      	movs	r0, r4
 800059e:	f000 fd99 	bl	80010d4 <__clzsi2>
 80005a2:	0002      	movs	r2, r0
 80005a4:	0003      	movs	r3, r0
 80005a6:	3a0b      	subs	r2, #11
 80005a8:	201d      	movs	r0, #29
 80005aa:	1a82      	subs	r2, r0, r2
 80005ac:	0030      	movs	r0, r6
 80005ae:	0019      	movs	r1, r3
 80005b0:	40d0      	lsrs	r0, r2
 80005b2:	3908      	subs	r1, #8
 80005b4:	408c      	lsls	r4, r1
 80005b6:	0002      	movs	r2, r0
 80005b8:	4322      	orrs	r2, r4
 80005ba:	0034      	movs	r4, r6
 80005bc:	408c      	lsls	r4, r1
 80005be:	4659      	mov	r1, fp
 80005c0:	1acb      	subs	r3, r1, r3
 80005c2:	4986      	ldr	r1, [pc, #536]	@ (80007dc <__aeabi_dmul+0x5bc>)
 80005c4:	468b      	mov	fp, r1
 80005c6:	449b      	add	fp, r3
 80005c8:	2d0a      	cmp	r5, #10
 80005ca:	dd00      	ble.n	80005ce <__aeabi_dmul+0x3ae>
 80005cc:	e6a4      	b.n	8000318 <__aeabi_dmul+0xf8>
 80005ce:	4649      	mov	r1, r9
 80005d0:	9b00      	ldr	r3, [sp, #0]
 80005d2:	9401      	str	r4, [sp, #4]
 80005d4:	4059      	eors	r1, r3
 80005d6:	b2cb      	uxtb	r3, r1
 80005d8:	0014      	movs	r4, r2
 80005da:	2000      	movs	r0, #0
 80005dc:	9303      	str	r3, [sp, #12]
 80005de:	2d02      	cmp	r5, #2
 80005e0:	dd00      	ble.n	80005e4 <__aeabi_dmul+0x3c4>
 80005e2:	e667      	b.n	80002b4 <__aeabi_dmul+0x94>
 80005e4:	e6fb      	b.n	80003de <__aeabi_dmul+0x1be>
 80005e6:	4653      	mov	r3, sl
 80005e8:	4303      	orrs	r3, r0
 80005ea:	4698      	mov	r8, r3
 80005ec:	d03c      	beq.n	8000668 <__aeabi_dmul+0x448>
 80005ee:	4653      	mov	r3, sl
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_dmul+0x3d6>
 80005f4:	e0a3      	b.n	800073e <__aeabi_dmul+0x51e>
 80005f6:	4650      	mov	r0, sl
 80005f8:	f000 fd6c 	bl	80010d4 <__clzsi2>
 80005fc:	230b      	movs	r3, #11
 80005fe:	425b      	negs	r3, r3
 8000600:	469c      	mov	ip, r3
 8000602:	0002      	movs	r2, r0
 8000604:	4484      	add	ip, r0
 8000606:	0011      	movs	r1, r2
 8000608:	4650      	mov	r0, sl
 800060a:	3908      	subs	r1, #8
 800060c:	4088      	lsls	r0, r1
 800060e:	231d      	movs	r3, #29
 8000610:	4680      	mov	r8, r0
 8000612:	4660      	mov	r0, ip
 8000614:	1a1b      	subs	r3, r3, r0
 8000616:	0020      	movs	r0, r4
 8000618:	40d8      	lsrs	r0, r3
 800061a:	0003      	movs	r3, r0
 800061c:	4640      	mov	r0, r8
 800061e:	4303      	orrs	r3, r0
 8000620:	469a      	mov	sl, r3
 8000622:	0023      	movs	r3, r4
 8000624:	408b      	lsls	r3, r1
 8000626:	4698      	mov	r8, r3
 8000628:	4b6c      	ldr	r3, [pc, #432]	@ (80007dc <__aeabi_dmul+0x5bc>)
 800062a:	2500      	movs	r5, #0
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	469b      	mov	fp, r3
 8000630:	2300      	movs	r3, #0
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	e61a      	b.n	800026c <__aeabi_dmul+0x4c>
 8000636:	2d0f      	cmp	r5, #15
 8000638:	d000      	beq.n	800063c <__aeabi_dmul+0x41c>
 800063a:	e0c9      	b.n	80007d0 <__aeabi_dmul+0x5b0>
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	4652      	mov	r2, sl
 8000640:	031b      	lsls	r3, r3, #12
 8000642:	421a      	tst	r2, r3
 8000644:	d002      	beq.n	800064c <__aeabi_dmul+0x42c>
 8000646:	421c      	tst	r4, r3
 8000648:	d100      	bne.n	800064c <__aeabi_dmul+0x42c>
 800064a:	e092      	b.n	8000772 <__aeabi_dmul+0x552>
 800064c:	2480      	movs	r4, #128	@ 0x80
 800064e:	4653      	mov	r3, sl
 8000650:	0324      	lsls	r4, r4, #12
 8000652:	431c      	orrs	r4, r3
 8000654:	0324      	lsls	r4, r4, #12
 8000656:	4642      	mov	r2, r8
 8000658:	0b24      	lsrs	r4, r4, #12
 800065a:	e63e      	b.n	80002da <__aeabi_dmul+0xba>
 800065c:	469b      	mov	fp, r3
 800065e:	2303      	movs	r3, #3
 8000660:	4680      	mov	r8, r0
 8000662:	250c      	movs	r5, #12
 8000664:	9302      	str	r3, [sp, #8]
 8000666:	e601      	b.n	800026c <__aeabi_dmul+0x4c>
 8000668:	2300      	movs	r3, #0
 800066a:	469a      	mov	sl, r3
 800066c:	469b      	mov	fp, r3
 800066e:	3301      	adds	r3, #1
 8000670:	2504      	movs	r5, #4
 8000672:	9302      	str	r3, [sp, #8]
 8000674:	e5fa      	b.n	800026c <__aeabi_dmul+0x4c>
 8000676:	2101      	movs	r1, #1
 8000678:	430d      	orrs	r5, r1
 800067a:	2d0a      	cmp	r5, #10
 800067c:	dd00      	ble.n	8000680 <__aeabi_dmul+0x460>
 800067e:	e64b      	b.n	8000318 <__aeabi_dmul+0xf8>
 8000680:	4649      	mov	r1, r9
 8000682:	9800      	ldr	r0, [sp, #0]
 8000684:	4041      	eors	r1, r0
 8000686:	b2c9      	uxtb	r1, r1
 8000688:	9103      	str	r1, [sp, #12]
 800068a:	2d02      	cmp	r5, #2
 800068c:	dc00      	bgt.n	8000690 <__aeabi_dmul+0x470>
 800068e:	e096      	b.n	80007be <__aeabi_dmul+0x59e>
 8000690:	2300      	movs	r3, #0
 8000692:	2400      	movs	r4, #0
 8000694:	2001      	movs	r0, #1
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	e60c      	b.n	80002b4 <__aeabi_dmul+0x94>
 800069a:	4649      	mov	r1, r9
 800069c:	2302      	movs	r3, #2
 800069e:	9a00      	ldr	r2, [sp, #0]
 80006a0:	432b      	orrs	r3, r5
 80006a2:	4051      	eors	r1, r2
 80006a4:	b2ca      	uxtb	r2, r1
 80006a6:	9203      	str	r2, [sp, #12]
 80006a8:	2b0a      	cmp	r3, #10
 80006aa:	dd00      	ble.n	80006ae <__aeabi_dmul+0x48e>
 80006ac:	e634      	b.n	8000318 <__aeabi_dmul+0xf8>
 80006ae:	2d00      	cmp	r5, #0
 80006b0:	d157      	bne.n	8000762 <__aeabi_dmul+0x542>
 80006b2:	9b03      	ldr	r3, [sp, #12]
 80006b4:	4699      	mov	r9, r3
 80006b6:	2400      	movs	r4, #0
 80006b8:	2200      	movs	r2, #0
 80006ba:	4b49      	ldr	r3, [pc, #292]	@ (80007e0 <__aeabi_dmul+0x5c0>)
 80006bc:	e60e      	b.n	80002dc <__aeabi_dmul+0xbc>
 80006be:	4658      	mov	r0, fp
 80006c0:	2101      	movs	r1, #1
 80006c2:	1ac9      	subs	r1, r1, r3
 80006c4:	2938      	cmp	r1, #56	@ 0x38
 80006c6:	dd00      	ble.n	80006ca <__aeabi_dmul+0x4aa>
 80006c8:	e62f      	b.n	800032a <__aeabi_dmul+0x10a>
 80006ca:	291f      	cmp	r1, #31
 80006cc:	dd56      	ble.n	800077c <__aeabi_dmul+0x55c>
 80006ce:	221f      	movs	r2, #31
 80006d0:	4654      	mov	r4, sl
 80006d2:	4252      	negs	r2, r2
 80006d4:	1ad3      	subs	r3, r2, r3
 80006d6:	40dc      	lsrs	r4, r3
 80006d8:	2920      	cmp	r1, #32
 80006da:	d007      	beq.n	80006ec <__aeabi_dmul+0x4cc>
 80006dc:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <__aeabi_dmul+0x5c4>)
 80006de:	4642      	mov	r2, r8
 80006e0:	469c      	mov	ip, r3
 80006e2:	4653      	mov	r3, sl
 80006e4:	4460      	add	r0, ip
 80006e6:	4083      	lsls	r3, r0
 80006e8:	431a      	orrs	r2, r3
 80006ea:	4690      	mov	r8, r2
 80006ec:	4642      	mov	r2, r8
 80006ee:	2107      	movs	r1, #7
 80006f0:	1e53      	subs	r3, r2, #1
 80006f2:	419a      	sbcs	r2, r3
 80006f4:	000b      	movs	r3, r1
 80006f6:	4322      	orrs	r2, r4
 80006f8:	4013      	ands	r3, r2
 80006fa:	2400      	movs	r4, #0
 80006fc:	4211      	tst	r1, r2
 80006fe:	d009      	beq.n	8000714 <__aeabi_dmul+0x4f4>
 8000700:	230f      	movs	r3, #15
 8000702:	4013      	ands	r3, r2
 8000704:	2b04      	cmp	r3, #4
 8000706:	d05d      	beq.n	80007c4 <__aeabi_dmul+0x5a4>
 8000708:	1d11      	adds	r1, r2, #4
 800070a:	4291      	cmp	r1, r2
 800070c:	419b      	sbcs	r3, r3
 800070e:	000a      	movs	r2, r1
 8000710:	425b      	negs	r3, r3
 8000712:	075b      	lsls	r3, r3, #29
 8000714:	08d2      	lsrs	r2, r2, #3
 8000716:	431a      	orrs	r2, r3
 8000718:	2300      	movs	r3, #0
 800071a:	e5df      	b.n	80002dc <__aeabi_dmul+0xbc>
 800071c:	9b03      	ldr	r3, [sp, #12]
 800071e:	4699      	mov	r9, r3
 8000720:	e5fa      	b.n	8000318 <__aeabi_dmul+0xf8>
 8000722:	9801      	ldr	r0, [sp, #4]
 8000724:	f000 fcd6 	bl	80010d4 <__clzsi2>
 8000728:	0002      	movs	r2, r0
 800072a:	0003      	movs	r3, r0
 800072c:	3215      	adds	r2, #21
 800072e:	3320      	adds	r3, #32
 8000730:	2a1c      	cmp	r2, #28
 8000732:	dc00      	bgt.n	8000736 <__aeabi_dmul+0x516>
 8000734:	e738      	b.n	80005a8 <__aeabi_dmul+0x388>
 8000736:	9a01      	ldr	r2, [sp, #4]
 8000738:	3808      	subs	r0, #8
 800073a:	4082      	lsls	r2, r0
 800073c:	e73f      	b.n	80005be <__aeabi_dmul+0x39e>
 800073e:	f000 fcc9 	bl	80010d4 <__clzsi2>
 8000742:	2315      	movs	r3, #21
 8000744:	469c      	mov	ip, r3
 8000746:	4484      	add	ip, r0
 8000748:	0002      	movs	r2, r0
 800074a:	4663      	mov	r3, ip
 800074c:	3220      	adds	r2, #32
 800074e:	2b1c      	cmp	r3, #28
 8000750:	dc00      	bgt.n	8000754 <__aeabi_dmul+0x534>
 8000752:	e758      	b.n	8000606 <__aeabi_dmul+0x3e6>
 8000754:	2300      	movs	r3, #0
 8000756:	4698      	mov	r8, r3
 8000758:	0023      	movs	r3, r4
 800075a:	3808      	subs	r0, #8
 800075c:	4083      	lsls	r3, r0
 800075e:	469a      	mov	sl, r3
 8000760:	e762      	b.n	8000628 <__aeabi_dmul+0x408>
 8000762:	001d      	movs	r5, r3
 8000764:	2300      	movs	r3, #0
 8000766:	2400      	movs	r4, #0
 8000768:	2002      	movs	r0, #2
 800076a:	9301      	str	r3, [sp, #4]
 800076c:	e5a2      	b.n	80002b4 <__aeabi_dmul+0x94>
 800076e:	9002      	str	r0, [sp, #8]
 8000770:	e632      	b.n	80003d8 <__aeabi_dmul+0x1b8>
 8000772:	431c      	orrs	r4, r3
 8000774:	9b00      	ldr	r3, [sp, #0]
 8000776:	9a01      	ldr	r2, [sp, #4]
 8000778:	4699      	mov	r9, r3
 800077a:	e5ae      	b.n	80002da <__aeabi_dmul+0xba>
 800077c:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <__aeabi_dmul+0x5c8>)
 800077e:	4652      	mov	r2, sl
 8000780:	18c3      	adds	r3, r0, r3
 8000782:	4640      	mov	r0, r8
 8000784:	409a      	lsls	r2, r3
 8000786:	40c8      	lsrs	r0, r1
 8000788:	4302      	orrs	r2, r0
 800078a:	4640      	mov	r0, r8
 800078c:	4098      	lsls	r0, r3
 800078e:	0003      	movs	r3, r0
 8000790:	1e58      	subs	r0, r3, #1
 8000792:	4183      	sbcs	r3, r0
 8000794:	4654      	mov	r4, sl
 8000796:	431a      	orrs	r2, r3
 8000798:	40cc      	lsrs	r4, r1
 800079a:	0753      	lsls	r3, r2, #29
 800079c:	d009      	beq.n	80007b2 <__aeabi_dmul+0x592>
 800079e:	230f      	movs	r3, #15
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d005      	beq.n	80007b2 <__aeabi_dmul+0x592>
 80007a6:	1d13      	adds	r3, r2, #4
 80007a8:	4293      	cmp	r3, r2
 80007aa:	4192      	sbcs	r2, r2
 80007ac:	4252      	negs	r2, r2
 80007ae:	18a4      	adds	r4, r4, r2
 80007b0:	001a      	movs	r2, r3
 80007b2:	0223      	lsls	r3, r4, #8
 80007b4:	d508      	bpl.n	80007c8 <__aeabi_dmul+0x5a8>
 80007b6:	2301      	movs	r3, #1
 80007b8:	2400      	movs	r4, #0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e58e      	b.n	80002dc <__aeabi_dmul+0xbc>
 80007be:	4689      	mov	r9, r1
 80007c0:	2400      	movs	r4, #0
 80007c2:	e58b      	b.n	80002dc <__aeabi_dmul+0xbc>
 80007c4:	2300      	movs	r3, #0
 80007c6:	e7a5      	b.n	8000714 <__aeabi_dmul+0x4f4>
 80007c8:	0763      	lsls	r3, r4, #29
 80007ca:	0264      	lsls	r4, r4, #9
 80007cc:	0b24      	lsrs	r4, r4, #12
 80007ce:	e7a1      	b.n	8000714 <__aeabi_dmul+0x4f4>
 80007d0:	9b00      	ldr	r3, [sp, #0]
 80007d2:	46a2      	mov	sl, r4
 80007d4:	4699      	mov	r9, r3
 80007d6:	9b01      	ldr	r3, [sp, #4]
 80007d8:	4698      	mov	r8, r3
 80007da:	e737      	b.n	800064c <__aeabi_dmul+0x42c>
 80007dc:	fffffc0d 	.word	0xfffffc0d
 80007e0:	000007ff 	.word	0x000007ff
 80007e4:	0000043e 	.word	0x0000043e
 80007e8:	0000041e 	.word	0x0000041e

080007ec <__aeabi_dsub>:
 80007ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ee:	4657      	mov	r7, sl
 80007f0:	464e      	mov	r6, r9
 80007f2:	4645      	mov	r5, r8
 80007f4:	46de      	mov	lr, fp
 80007f6:	b5e0      	push	{r5, r6, r7, lr}
 80007f8:	b083      	sub	sp, #12
 80007fa:	9000      	str	r0, [sp, #0]
 80007fc:	9101      	str	r1, [sp, #4]
 80007fe:	030c      	lsls	r4, r1, #12
 8000800:	004d      	lsls	r5, r1, #1
 8000802:	0fce      	lsrs	r6, r1, #31
 8000804:	0a61      	lsrs	r1, r4, #9
 8000806:	9c00      	ldr	r4, [sp, #0]
 8000808:	005f      	lsls	r7, r3, #1
 800080a:	0f64      	lsrs	r4, r4, #29
 800080c:	430c      	orrs	r4, r1
 800080e:	9900      	ldr	r1, [sp, #0]
 8000810:	9200      	str	r2, [sp, #0]
 8000812:	9301      	str	r3, [sp, #4]
 8000814:	00c8      	lsls	r0, r1, #3
 8000816:	0319      	lsls	r1, r3, #12
 8000818:	0d7b      	lsrs	r3, r7, #21
 800081a:	4699      	mov	r9, r3
 800081c:	9b01      	ldr	r3, [sp, #4]
 800081e:	4fcc      	ldr	r7, [pc, #816]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000820:	0fdb      	lsrs	r3, r3, #31
 8000822:	469c      	mov	ip, r3
 8000824:	0a4b      	lsrs	r3, r1, #9
 8000826:	9900      	ldr	r1, [sp, #0]
 8000828:	4680      	mov	r8, r0
 800082a:	0f49      	lsrs	r1, r1, #29
 800082c:	4319      	orrs	r1, r3
 800082e:	9b00      	ldr	r3, [sp, #0]
 8000830:	468b      	mov	fp, r1
 8000832:	00da      	lsls	r2, r3, #3
 8000834:	4692      	mov	sl, r2
 8000836:	0d6d      	lsrs	r5, r5, #21
 8000838:	45b9      	cmp	r9, r7
 800083a:	d100      	bne.n	800083e <__aeabi_dsub+0x52>
 800083c:	e0bf      	b.n	80009be <__aeabi_dsub+0x1d2>
 800083e:	2301      	movs	r3, #1
 8000840:	4661      	mov	r1, ip
 8000842:	4059      	eors	r1, r3
 8000844:	464b      	mov	r3, r9
 8000846:	468c      	mov	ip, r1
 8000848:	1aeb      	subs	r3, r5, r3
 800084a:	428e      	cmp	r6, r1
 800084c:	d075      	beq.n	800093a <__aeabi_dsub+0x14e>
 800084e:	2b00      	cmp	r3, #0
 8000850:	dc00      	bgt.n	8000854 <__aeabi_dsub+0x68>
 8000852:	e2a3      	b.n	8000d9c <__aeabi_dsub+0x5b0>
 8000854:	4649      	mov	r1, r9
 8000856:	2900      	cmp	r1, #0
 8000858:	d100      	bne.n	800085c <__aeabi_dsub+0x70>
 800085a:	e0ce      	b.n	80009fa <__aeabi_dsub+0x20e>
 800085c:	42bd      	cmp	r5, r7
 800085e:	d100      	bne.n	8000862 <__aeabi_dsub+0x76>
 8000860:	e200      	b.n	8000c64 <__aeabi_dsub+0x478>
 8000862:	2701      	movs	r7, #1
 8000864:	2b38      	cmp	r3, #56	@ 0x38
 8000866:	dc19      	bgt.n	800089c <__aeabi_dsub+0xb0>
 8000868:	2780      	movs	r7, #128	@ 0x80
 800086a:	4659      	mov	r1, fp
 800086c:	043f      	lsls	r7, r7, #16
 800086e:	4339      	orrs	r1, r7
 8000870:	468b      	mov	fp, r1
 8000872:	2b1f      	cmp	r3, #31
 8000874:	dd00      	ble.n	8000878 <__aeabi_dsub+0x8c>
 8000876:	e1fa      	b.n	8000c6e <__aeabi_dsub+0x482>
 8000878:	2720      	movs	r7, #32
 800087a:	1af9      	subs	r1, r7, r3
 800087c:	468c      	mov	ip, r1
 800087e:	4659      	mov	r1, fp
 8000880:	4667      	mov	r7, ip
 8000882:	40b9      	lsls	r1, r7
 8000884:	000f      	movs	r7, r1
 8000886:	0011      	movs	r1, r2
 8000888:	40d9      	lsrs	r1, r3
 800088a:	430f      	orrs	r7, r1
 800088c:	4661      	mov	r1, ip
 800088e:	408a      	lsls	r2, r1
 8000890:	1e51      	subs	r1, r2, #1
 8000892:	418a      	sbcs	r2, r1
 8000894:	4659      	mov	r1, fp
 8000896:	40d9      	lsrs	r1, r3
 8000898:	4317      	orrs	r7, r2
 800089a:	1a64      	subs	r4, r4, r1
 800089c:	1bc7      	subs	r7, r0, r7
 800089e:	42b8      	cmp	r0, r7
 80008a0:	4180      	sbcs	r0, r0
 80008a2:	4240      	negs	r0, r0
 80008a4:	1a24      	subs	r4, r4, r0
 80008a6:	0223      	lsls	r3, r4, #8
 80008a8:	d400      	bmi.n	80008ac <__aeabi_dsub+0xc0>
 80008aa:	e140      	b.n	8000b2e <__aeabi_dsub+0x342>
 80008ac:	0264      	lsls	r4, r4, #9
 80008ae:	0a64      	lsrs	r4, r4, #9
 80008b0:	2c00      	cmp	r4, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_dsub+0xca>
 80008b4:	e154      	b.n	8000b60 <__aeabi_dsub+0x374>
 80008b6:	0020      	movs	r0, r4
 80008b8:	f000 fc0c 	bl	80010d4 <__clzsi2>
 80008bc:	0003      	movs	r3, r0
 80008be:	3b08      	subs	r3, #8
 80008c0:	2120      	movs	r1, #32
 80008c2:	0038      	movs	r0, r7
 80008c4:	1aca      	subs	r2, r1, r3
 80008c6:	40d0      	lsrs	r0, r2
 80008c8:	409c      	lsls	r4, r3
 80008ca:	0002      	movs	r2, r0
 80008cc:	409f      	lsls	r7, r3
 80008ce:	4322      	orrs	r2, r4
 80008d0:	429d      	cmp	r5, r3
 80008d2:	dd00      	ble.n	80008d6 <__aeabi_dsub+0xea>
 80008d4:	e1a6      	b.n	8000c24 <__aeabi_dsub+0x438>
 80008d6:	1b58      	subs	r0, r3, r5
 80008d8:	3001      	adds	r0, #1
 80008da:	1a09      	subs	r1, r1, r0
 80008dc:	003c      	movs	r4, r7
 80008de:	408f      	lsls	r7, r1
 80008e0:	40c4      	lsrs	r4, r0
 80008e2:	1e7b      	subs	r3, r7, #1
 80008e4:	419f      	sbcs	r7, r3
 80008e6:	0013      	movs	r3, r2
 80008e8:	408b      	lsls	r3, r1
 80008ea:	4327      	orrs	r7, r4
 80008ec:	431f      	orrs	r7, r3
 80008ee:	40c2      	lsrs	r2, r0
 80008f0:	003b      	movs	r3, r7
 80008f2:	0014      	movs	r4, r2
 80008f4:	2500      	movs	r5, #0
 80008f6:	4313      	orrs	r3, r2
 80008f8:	d100      	bne.n	80008fc <__aeabi_dsub+0x110>
 80008fa:	e1f7      	b.n	8000cec <__aeabi_dsub+0x500>
 80008fc:	077b      	lsls	r3, r7, #29
 80008fe:	d100      	bne.n	8000902 <__aeabi_dsub+0x116>
 8000900:	e377      	b.n	8000ff2 <__aeabi_dsub+0x806>
 8000902:	230f      	movs	r3, #15
 8000904:	0038      	movs	r0, r7
 8000906:	403b      	ands	r3, r7
 8000908:	2b04      	cmp	r3, #4
 800090a:	d004      	beq.n	8000916 <__aeabi_dsub+0x12a>
 800090c:	1d38      	adds	r0, r7, #4
 800090e:	42b8      	cmp	r0, r7
 8000910:	41bf      	sbcs	r7, r7
 8000912:	427f      	negs	r7, r7
 8000914:	19e4      	adds	r4, r4, r7
 8000916:	0223      	lsls	r3, r4, #8
 8000918:	d400      	bmi.n	800091c <__aeabi_dsub+0x130>
 800091a:	e368      	b.n	8000fee <__aeabi_dsub+0x802>
 800091c:	4b8c      	ldr	r3, [pc, #560]	@ (8000b50 <__aeabi_dsub+0x364>)
 800091e:	3501      	adds	r5, #1
 8000920:	429d      	cmp	r5, r3
 8000922:	d100      	bne.n	8000926 <__aeabi_dsub+0x13a>
 8000924:	e0f4      	b.n	8000b10 <__aeabi_dsub+0x324>
 8000926:	4b8b      	ldr	r3, [pc, #556]	@ (8000b54 <__aeabi_dsub+0x368>)
 8000928:	056d      	lsls	r5, r5, #21
 800092a:	401c      	ands	r4, r3
 800092c:	0d6d      	lsrs	r5, r5, #21
 800092e:	0767      	lsls	r7, r4, #29
 8000930:	08c0      	lsrs	r0, r0, #3
 8000932:	0264      	lsls	r4, r4, #9
 8000934:	4307      	orrs	r7, r0
 8000936:	0b24      	lsrs	r4, r4, #12
 8000938:	e0ec      	b.n	8000b14 <__aeabi_dsub+0x328>
 800093a:	2b00      	cmp	r3, #0
 800093c:	dc00      	bgt.n	8000940 <__aeabi_dsub+0x154>
 800093e:	e329      	b.n	8000f94 <__aeabi_dsub+0x7a8>
 8000940:	4649      	mov	r1, r9
 8000942:	2900      	cmp	r1, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_dsub+0x15c>
 8000946:	e0d6      	b.n	8000af6 <__aeabi_dsub+0x30a>
 8000948:	4659      	mov	r1, fp
 800094a:	4311      	orrs	r1, r2
 800094c:	d100      	bne.n	8000950 <__aeabi_dsub+0x164>
 800094e:	e12e      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000950:	1e59      	subs	r1, r3, #1
 8000952:	2b01      	cmp	r3, #1
 8000954:	d100      	bne.n	8000958 <__aeabi_dsub+0x16c>
 8000956:	e1e6      	b.n	8000d26 <__aeabi_dsub+0x53a>
 8000958:	42bb      	cmp	r3, r7
 800095a:	d100      	bne.n	800095e <__aeabi_dsub+0x172>
 800095c:	e182      	b.n	8000c64 <__aeabi_dsub+0x478>
 800095e:	2701      	movs	r7, #1
 8000960:	000b      	movs	r3, r1
 8000962:	2938      	cmp	r1, #56	@ 0x38
 8000964:	dc14      	bgt.n	8000990 <__aeabi_dsub+0x1a4>
 8000966:	2b1f      	cmp	r3, #31
 8000968:	dd00      	ble.n	800096c <__aeabi_dsub+0x180>
 800096a:	e23c      	b.n	8000de6 <__aeabi_dsub+0x5fa>
 800096c:	2720      	movs	r7, #32
 800096e:	1af9      	subs	r1, r7, r3
 8000970:	468c      	mov	ip, r1
 8000972:	4659      	mov	r1, fp
 8000974:	4667      	mov	r7, ip
 8000976:	40b9      	lsls	r1, r7
 8000978:	000f      	movs	r7, r1
 800097a:	0011      	movs	r1, r2
 800097c:	40d9      	lsrs	r1, r3
 800097e:	430f      	orrs	r7, r1
 8000980:	4661      	mov	r1, ip
 8000982:	408a      	lsls	r2, r1
 8000984:	1e51      	subs	r1, r2, #1
 8000986:	418a      	sbcs	r2, r1
 8000988:	4659      	mov	r1, fp
 800098a:	40d9      	lsrs	r1, r3
 800098c:	4317      	orrs	r7, r2
 800098e:	1864      	adds	r4, r4, r1
 8000990:	183f      	adds	r7, r7, r0
 8000992:	4287      	cmp	r7, r0
 8000994:	4180      	sbcs	r0, r0
 8000996:	4240      	negs	r0, r0
 8000998:	1824      	adds	r4, r4, r0
 800099a:	0223      	lsls	r3, r4, #8
 800099c:	d400      	bmi.n	80009a0 <__aeabi_dsub+0x1b4>
 800099e:	e0c6      	b.n	8000b2e <__aeabi_dsub+0x342>
 80009a0:	4b6b      	ldr	r3, [pc, #428]	@ (8000b50 <__aeabi_dsub+0x364>)
 80009a2:	3501      	adds	r5, #1
 80009a4:	429d      	cmp	r5, r3
 80009a6:	d100      	bne.n	80009aa <__aeabi_dsub+0x1be>
 80009a8:	e0b2      	b.n	8000b10 <__aeabi_dsub+0x324>
 80009aa:	2101      	movs	r1, #1
 80009ac:	4b69      	ldr	r3, [pc, #420]	@ (8000b54 <__aeabi_dsub+0x368>)
 80009ae:	087a      	lsrs	r2, r7, #1
 80009b0:	401c      	ands	r4, r3
 80009b2:	4039      	ands	r1, r7
 80009b4:	430a      	orrs	r2, r1
 80009b6:	07e7      	lsls	r7, r4, #31
 80009b8:	4317      	orrs	r7, r2
 80009ba:	0864      	lsrs	r4, r4, #1
 80009bc:	e79e      	b.n	80008fc <__aeabi_dsub+0x110>
 80009be:	4b66      	ldr	r3, [pc, #408]	@ (8000b58 <__aeabi_dsub+0x36c>)
 80009c0:	4311      	orrs	r1, r2
 80009c2:	468a      	mov	sl, r1
 80009c4:	18eb      	adds	r3, r5, r3
 80009c6:	2900      	cmp	r1, #0
 80009c8:	d028      	beq.n	8000a1c <__aeabi_dsub+0x230>
 80009ca:	4566      	cmp	r6, ip
 80009cc:	d02c      	beq.n	8000a28 <__aeabi_dsub+0x23c>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d05b      	beq.n	8000a8a <__aeabi_dsub+0x29e>
 80009d2:	2d00      	cmp	r5, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dsub+0x1ec>
 80009d6:	e12c      	b.n	8000c32 <__aeabi_dsub+0x446>
 80009d8:	465b      	mov	r3, fp
 80009da:	4666      	mov	r6, ip
 80009dc:	075f      	lsls	r7, r3, #29
 80009de:	08d2      	lsrs	r2, r2, #3
 80009e0:	4317      	orrs	r7, r2
 80009e2:	08dd      	lsrs	r5, r3, #3
 80009e4:	003b      	movs	r3, r7
 80009e6:	432b      	orrs	r3, r5
 80009e8:	d100      	bne.n	80009ec <__aeabi_dsub+0x200>
 80009ea:	e0e2      	b.n	8000bb2 <__aeabi_dsub+0x3c6>
 80009ec:	2480      	movs	r4, #128	@ 0x80
 80009ee:	0324      	lsls	r4, r4, #12
 80009f0:	432c      	orrs	r4, r5
 80009f2:	0324      	lsls	r4, r4, #12
 80009f4:	4d56      	ldr	r5, [pc, #344]	@ (8000b50 <__aeabi_dsub+0x364>)
 80009f6:	0b24      	lsrs	r4, r4, #12
 80009f8:	e08c      	b.n	8000b14 <__aeabi_dsub+0x328>
 80009fa:	4659      	mov	r1, fp
 80009fc:	4311      	orrs	r1, r2
 80009fe:	d100      	bne.n	8000a02 <__aeabi_dsub+0x216>
 8000a00:	e0d5      	b.n	8000bae <__aeabi_dsub+0x3c2>
 8000a02:	1e59      	subs	r1, r3, #1
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d100      	bne.n	8000a0a <__aeabi_dsub+0x21e>
 8000a08:	e1b9      	b.n	8000d7e <__aeabi_dsub+0x592>
 8000a0a:	42bb      	cmp	r3, r7
 8000a0c:	d100      	bne.n	8000a10 <__aeabi_dsub+0x224>
 8000a0e:	e1b1      	b.n	8000d74 <__aeabi_dsub+0x588>
 8000a10:	2701      	movs	r7, #1
 8000a12:	000b      	movs	r3, r1
 8000a14:	2938      	cmp	r1, #56	@ 0x38
 8000a16:	dd00      	ble.n	8000a1a <__aeabi_dsub+0x22e>
 8000a18:	e740      	b.n	800089c <__aeabi_dsub+0xb0>
 8000a1a:	e72a      	b.n	8000872 <__aeabi_dsub+0x86>
 8000a1c:	4661      	mov	r1, ip
 8000a1e:	2701      	movs	r7, #1
 8000a20:	4079      	eors	r1, r7
 8000a22:	468c      	mov	ip, r1
 8000a24:	4566      	cmp	r6, ip
 8000a26:	d1d2      	bne.n	80009ce <__aeabi_dsub+0x1e2>
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d100      	bne.n	8000a2e <__aeabi_dsub+0x242>
 8000a2c:	e0c5      	b.n	8000bba <__aeabi_dsub+0x3ce>
 8000a2e:	2d00      	cmp	r5, #0
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dsub+0x248>
 8000a32:	e155      	b.n	8000ce0 <__aeabi_dsub+0x4f4>
 8000a34:	464b      	mov	r3, r9
 8000a36:	0025      	movs	r5, r4
 8000a38:	4305      	orrs	r5, r0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dsub+0x252>
 8000a3c:	e212      	b.n	8000e64 <__aeabi_dsub+0x678>
 8000a3e:	1e59      	subs	r1, r3, #1
 8000a40:	468c      	mov	ip, r1
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dsub+0x25c>
 8000a46:	e249      	b.n	8000edc <__aeabi_dsub+0x6f0>
 8000a48:	4d41      	ldr	r5, [pc, #260]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000a4a:	42ab      	cmp	r3, r5
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_dsub+0x264>
 8000a4e:	e28f      	b.n	8000f70 <__aeabi_dsub+0x784>
 8000a50:	2701      	movs	r7, #1
 8000a52:	2938      	cmp	r1, #56	@ 0x38
 8000a54:	dc11      	bgt.n	8000a7a <__aeabi_dsub+0x28e>
 8000a56:	4663      	mov	r3, ip
 8000a58:	2b1f      	cmp	r3, #31
 8000a5a:	dd00      	ble.n	8000a5e <__aeabi_dsub+0x272>
 8000a5c:	e25b      	b.n	8000f16 <__aeabi_dsub+0x72a>
 8000a5e:	4661      	mov	r1, ip
 8000a60:	2320      	movs	r3, #32
 8000a62:	0027      	movs	r7, r4
 8000a64:	1a5b      	subs	r3, r3, r1
 8000a66:	0005      	movs	r5, r0
 8000a68:	4098      	lsls	r0, r3
 8000a6a:	409f      	lsls	r7, r3
 8000a6c:	40cd      	lsrs	r5, r1
 8000a6e:	1e43      	subs	r3, r0, #1
 8000a70:	4198      	sbcs	r0, r3
 8000a72:	40cc      	lsrs	r4, r1
 8000a74:	432f      	orrs	r7, r5
 8000a76:	4307      	orrs	r7, r0
 8000a78:	44a3      	add	fp, r4
 8000a7a:	18bf      	adds	r7, r7, r2
 8000a7c:	4297      	cmp	r7, r2
 8000a7e:	4192      	sbcs	r2, r2
 8000a80:	4252      	negs	r2, r2
 8000a82:	445a      	add	r2, fp
 8000a84:	0014      	movs	r4, r2
 8000a86:	464d      	mov	r5, r9
 8000a88:	e787      	b.n	800099a <__aeabi_dsub+0x1ae>
 8000a8a:	4f34      	ldr	r7, [pc, #208]	@ (8000b5c <__aeabi_dsub+0x370>)
 8000a8c:	1c6b      	adds	r3, r5, #1
 8000a8e:	423b      	tst	r3, r7
 8000a90:	d000      	beq.n	8000a94 <__aeabi_dsub+0x2a8>
 8000a92:	e0b6      	b.n	8000c02 <__aeabi_dsub+0x416>
 8000a94:	4659      	mov	r1, fp
 8000a96:	0023      	movs	r3, r4
 8000a98:	4311      	orrs	r1, r2
 8000a9a:	000f      	movs	r7, r1
 8000a9c:	4303      	orrs	r3, r0
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_dsub+0x2b8>
 8000aa2:	e126      	b.n	8000cf2 <__aeabi_dsub+0x506>
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d100      	bne.n	8000aaa <__aeabi_dsub+0x2be>
 8000aa8:	e1c0      	b.n	8000e2c <__aeabi_dsub+0x640>
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d100      	bne.n	8000ab0 <__aeabi_dsub+0x2c4>
 8000aae:	e0a1      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000ab0:	1a83      	subs	r3, r0, r2
 8000ab2:	4698      	mov	r8, r3
 8000ab4:	465b      	mov	r3, fp
 8000ab6:	4540      	cmp	r0, r8
 8000ab8:	41ad      	sbcs	r5, r5
 8000aba:	1ae3      	subs	r3, r4, r3
 8000abc:	426d      	negs	r5, r5
 8000abe:	1b5b      	subs	r3, r3, r5
 8000ac0:	2580      	movs	r5, #128	@ 0x80
 8000ac2:	042d      	lsls	r5, r5, #16
 8000ac4:	422b      	tst	r3, r5
 8000ac6:	d100      	bne.n	8000aca <__aeabi_dsub+0x2de>
 8000ac8:	e14b      	b.n	8000d62 <__aeabi_dsub+0x576>
 8000aca:	465b      	mov	r3, fp
 8000acc:	1a10      	subs	r0, r2, r0
 8000ace:	4282      	cmp	r2, r0
 8000ad0:	4192      	sbcs	r2, r2
 8000ad2:	1b1c      	subs	r4, r3, r4
 8000ad4:	0007      	movs	r7, r0
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	4663      	mov	r3, ip
 8000ada:	4252      	negs	r2, r2
 8000adc:	1aa4      	subs	r4, r4, r2
 8000ade:	4327      	orrs	r7, r4
 8000ae0:	401e      	ands	r6, r3
 8000ae2:	2f00      	cmp	r7, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_dsub+0x2fc>
 8000ae6:	e142      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000ae8:	422c      	tst	r4, r5
 8000aea:	d100      	bne.n	8000aee <__aeabi_dsub+0x302>
 8000aec:	e26d      	b.n	8000fca <__aeabi_dsub+0x7de>
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <__aeabi_dsub+0x368>)
 8000af0:	2501      	movs	r5, #1
 8000af2:	401c      	ands	r4, r3
 8000af4:	e71b      	b.n	800092e <__aeabi_dsub+0x142>
 8000af6:	42bd      	cmp	r5, r7
 8000af8:	d100      	bne.n	8000afc <__aeabi_dsub+0x310>
 8000afa:	e13b      	b.n	8000d74 <__aeabi_dsub+0x588>
 8000afc:	2701      	movs	r7, #1
 8000afe:	2b38      	cmp	r3, #56	@ 0x38
 8000b00:	dd00      	ble.n	8000b04 <__aeabi_dsub+0x318>
 8000b02:	e745      	b.n	8000990 <__aeabi_dsub+0x1a4>
 8000b04:	2780      	movs	r7, #128	@ 0x80
 8000b06:	4659      	mov	r1, fp
 8000b08:	043f      	lsls	r7, r7, #16
 8000b0a:	4339      	orrs	r1, r7
 8000b0c:	468b      	mov	fp, r1
 8000b0e:	e72a      	b.n	8000966 <__aeabi_dsub+0x17a>
 8000b10:	2400      	movs	r4, #0
 8000b12:	2700      	movs	r7, #0
 8000b14:	052d      	lsls	r5, r5, #20
 8000b16:	4325      	orrs	r5, r4
 8000b18:	07f6      	lsls	r6, r6, #31
 8000b1a:	4335      	orrs	r5, r6
 8000b1c:	0038      	movs	r0, r7
 8000b1e:	0029      	movs	r1, r5
 8000b20:	b003      	add	sp, #12
 8000b22:	bcf0      	pop	{r4, r5, r6, r7}
 8000b24:	46bb      	mov	fp, r7
 8000b26:	46b2      	mov	sl, r6
 8000b28:	46a9      	mov	r9, r5
 8000b2a:	46a0      	mov	r8, r4
 8000b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b2e:	077b      	lsls	r3, r7, #29
 8000b30:	d004      	beq.n	8000b3c <__aeabi_dsub+0x350>
 8000b32:	230f      	movs	r3, #15
 8000b34:	403b      	ands	r3, r7
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d000      	beq.n	8000b3c <__aeabi_dsub+0x350>
 8000b3a:	e6e7      	b.n	800090c <__aeabi_dsub+0x120>
 8000b3c:	002b      	movs	r3, r5
 8000b3e:	08f8      	lsrs	r0, r7, #3
 8000b40:	4a03      	ldr	r2, [pc, #12]	@ (8000b50 <__aeabi_dsub+0x364>)
 8000b42:	0767      	lsls	r7, r4, #29
 8000b44:	4307      	orrs	r7, r0
 8000b46:	08e5      	lsrs	r5, r4, #3
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d100      	bne.n	8000b4e <__aeabi_dsub+0x362>
 8000b4c:	e74a      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000b4e:	e0a5      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000b50:	000007ff 	.word	0x000007ff
 8000b54:	ff7fffff 	.word	0xff7fffff
 8000b58:	fffff801 	.word	0xfffff801
 8000b5c:	000007fe 	.word	0x000007fe
 8000b60:	0038      	movs	r0, r7
 8000b62:	f000 fab7 	bl	80010d4 <__clzsi2>
 8000b66:	0003      	movs	r3, r0
 8000b68:	3318      	adds	r3, #24
 8000b6a:	2b1f      	cmp	r3, #31
 8000b6c:	dc00      	bgt.n	8000b70 <__aeabi_dsub+0x384>
 8000b6e:	e6a7      	b.n	80008c0 <__aeabi_dsub+0xd4>
 8000b70:	003a      	movs	r2, r7
 8000b72:	3808      	subs	r0, #8
 8000b74:	4082      	lsls	r2, r0
 8000b76:	429d      	cmp	r5, r3
 8000b78:	dd00      	ble.n	8000b7c <__aeabi_dsub+0x390>
 8000b7a:	e08a      	b.n	8000c92 <__aeabi_dsub+0x4a6>
 8000b7c:	1b5b      	subs	r3, r3, r5
 8000b7e:	1c58      	adds	r0, r3, #1
 8000b80:	281f      	cmp	r0, #31
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_dsub+0x39a>
 8000b84:	e1d8      	b.n	8000f38 <__aeabi_dsub+0x74c>
 8000b86:	0017      	movs	r7, r2
 8000b88:	3b1f      	subs	r3, #31
 8000b8a:	40df      	lsrs	r7, r3
 8000b8c:	2820      	cmp	r0, #32
 8000b8e:	d005      	beq.n	8000b9c <__aeabi_dsub+0x3b0>
 8000b90:	2340      	movs	r3, #64	@ 0x40
 8000b92:	1a1b      	subs	r3, r3, r0
 8000b94:	409a      	lsls	r2, r3
 8000b96:	1e53      	subs	r3, r2, #1
 8000b98:	419a      	sbcs	r2, r3
 8000b9a:	4317      	orrs	r7, r2
 8000b9c:	2500      	movs	r5, #0
 8000b9e:	2f00      	cmp	r7, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dsub+0x3b8>
 8000ba2:	e0e5      	b.n	8000d70 <__aeabi_dsub+0x584>
 8000ba4:	077b      	lsls	r3, r7, #29
 8000ba6:	d000      	beq.n	8000baa <__aeabi_dsub+0x3be>
 8000ba8:	e6ab      	b.n	8000902 <__aeabi_dsub+0x116>
 8000baa:	002c      	movs	r4, r5
 8000bac:	e7c6      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000bae:	08c0      	lsrs	r0, r0, #3
 8000bb0:	e7c6      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	4dd1      	ldr	r5, [pc, #836]	@ (8000efc <__aeabi_dsub+0x710>)
 8000bb8:	e7ac      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000bba:	4fd1      	ldr	r7, [pc, #836]	@ (8000f00 <__aeabi_dsub+0x714>)
 8000bbc:	1c6b      	adds	r3, r5, #1
 8000bbe:	423b      	tst	r3, r7
 8000bc0:	d171      	bne.n	8000ca6 <__aeabi_dsub+0x4ba>
 8000bc2:	0023      	movs	r3, r4
 8000bc4:	4303      	orrs	r3, r0
 8000bc6:	2d00      	cmp	r5, #0
 8000bc8:	d000      	beq.n	8000bcc <__aeabi_dsub+0x3e0>
 8000bca:	e14e      	b.n	8000e6a <__aeabi_dsub+0x67e>
 8000bcc:	4657      	mov	r7, sl
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d100      	bne.n	8000bd4 <__aeabi_dsub+0x3e8>
 8000bd2:	e1b5      	b.n	8000f40 <__aeabi_dsub+0x754>
 8000bd4:	2f00      	cmp	r7, #0
 8000bd6:	d00d      	beq.n	8000bf4 <__aeabi_dsub+0x408>
 8000bd8:	1883      	adds	r3, r0, r2
 8000bda:	4283      	cmp	r3, r0
 8000bdc:	4180      	sbcs	r0, r0
 8000bde:	445c      	add	r4, fp
 8000be0:	4240      	negs	r0, r0
 8000be2:	1824      	adds	r4, r4, r0
 8000be4:	0222      	lsls	r2, r4, #8
 8000be6:	d500      	bpl.n	8000bea <__aeabi_dsub+0x3fe>
 8000be8:	e1c8      	b.n	8000f7c <__aeabi_dsub+0x790>
 8000bea:	001f      	movs	r7, r3
 8000bec:	4698      	mov	r8, r3
 8000bee:	4327      	orrs	r7, r4
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dsub+0x408>
 8000bf2:	e0bc      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000bf4:	4643      	mov	r3, r8
 8000bf6:	0767      	lsls	r7, r4, #29
 8000bf8:	08db      	lsrs	r3, r3, #3
 8000bfa:	431f      	orrs	r7, r3
 8000bfc:	08e5      	lsrs	r5, r4, #3
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e04c      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000c02:	1a83      	subs	r3, r0, r2
 8000c04:	4698      	mov	r8, r3
 8000c06:	465b      	mov	r3, fp
 8000c08:	4540      	cmp	r0, r8
 8000c0a:	41bf      	sbcs	r7, r7
 8000c0c:	1ae3      	subs	r3, r4, r3
 8000c0e:	427f      	negs	r7, r7
 8000c10:	1bdb      	subs	r3, r3, r7
 8000c12:	021f      	lsls	r7, r3, #8
 8000c14:	d47c      	bmi.n	8000d10 <__aeabi_dsub+0x524>
 8000c16:	4647      	mov	r7, r8
 8000c18:	431f      	orrs	r7, r3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_dsub+0x432>
 8000c1c:	e0a6      	b.n	8000d6c <__aeabi_dsub+0x580>
 8000c1e:	001c      	movs	r4, r3
 8000c20:	4647      	mov	r7, r8
 8000c22:	e645      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000c24:	4cb7      	ldr	r4, [pc, #732]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000c26:	1aed      	subs	r5, r5, r3
 8000c28:	4014      	ands	r4, r2
 8000c2a:	077b      	lsls	r3, r7, #29
 8000c2c:	d000      	beq.n	8000c30 <__aeabi_dsub+0x444>
 8000c2e:	e780      	b.n	8000b32 <__aeabi_dsub+0x346>
 8000c30:	e784      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000c32:	464b      	mov	r3, r9
 8000c34:	0025      	movs	r5, r4
 8000c36:	4305      	orrs	r5, r0
 8000c38:	d066      	beq.n	8000d08 <__aeabi_dsub+0x51c>
 8000c3a:	1e5f      	subs	r7, r3, #1
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dsub+0x456>
 8000c40:	e0fc      	b.n	8000e3c <__aeabi_dsub+0x650>
 8000c42:	4dae      	ldr	r5, [pc, #696]	@ (8000efc <__aeabi_dsub+0x710>)
 8000c44:	42ab      	cmp	r3, r5
 8000c46:	d100      	bne.n	8000c4a <__aeabi_dsub+0x45e>
 8000c48:	e15e      	b.n	8000f08 <__aeabi_dsub+0x71c>
 8000c4a:	4666      	mov	r6, ip
 8000c4c:	2f38      	cmp	r7, #56	@ 0x38
 8000c4e:	dc00      	bgt.n	8000c52 <__aeabi_dsub+0x466>
 8000c50:	e0b4      	b.n	8000dbc <__aeabi_dsub+0x5d0>
 8000c52:	2001      	movs	r0, #1
 8000c54:	1a17      	subs	r7, r2, r0
 8000c56:	42ba      	cmp	r2, r7
 8000c58:	4192      	sbcs	r2, r2
 8000c5a:	465b      	mov	r3, fp
 8000c5c:	4252      	negs	r2, r2
 8000c5e:	464d      	mov	r5, r9
 8000c60:	1a9c      	subs	r4, r3, r2
 8000c62:	e620      	b.n	80008a6 <__aeabi_dsub+0xba>
 8000c64:	0767      	lsls	r7, r4, #29
 8000c66:	08c0      	lsrs	r0, r0, #3
 8000c68:	4307      	orrs	r7, r0
 8000c6a:	08e5      	lsrs	r5, r4, #3
 8000c6c:	e6ba      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000c6e:	001f      	movs	r7, r3
 8000c70:	4659      	mov	r1, fp
 8000c72:	3f20      	subs	r7, #32
 8000c74:	40f9      	lsrs	r1, r7
 8000c76:	000f      	movs	r7, r1
 8000c78:	2b20      	cmp	r3, #32
 8000c7a:	d005      	beq.n	8000c88 <__aeabi_dsub+0x49c>
 8000c7c:	2140      	movs	r1, #64	@ 0x40
 8000c7e:	1acb      	subs	r3, r1, r3
 8000c80:	4659      	mov	r1, fp
 8000c82:	4099      	lsls	r1, r3
 8000c84:	430a      	orrs	r2, r1
 8000c86:	4692      	mov	sl, r2
 8000c88:	4653      	mov	r3, sl
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	4193      	sbcs	r3, r2
 8000c8e:	431f      	orrs	r7, r3
 8000c90:	e604      	b.n	800089c <__aeabi_dsub+0xb0>
 8000c92:	1aeb      	subs	r3, r5, r3
 8000c94:	4d9b      	ldr	r5, [pc, #620]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000c96:	4015      	ands	r5, r2
 8000c98:	076f      	lsls	r7, r5, #29
 8000c9a:	08ed      	lsrs	r5, r5, #3
 8000c9c:	032c      	lsls	r4, r5, #12
 8000c9e:	055d      	lsls	r5, r3, #21
 8000ca0:	0b24      	lsrs	r4, r4, #12
 8000ca2:	0d6d      	lsrs	r5, r5, #21
 8000ca4:	e736      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000ca6:	4d95      	ldr	r5, [pc, #596]	@ (8000efc <__aeabi_dsub+0x710>)
 8000ca8:	42ab      	cmp	r3, r5
 8000caa:	d100      	bne.n	8000cae <__aeabi_dsub+0x4c2>
 8000cac:	e0d6      	b.n	8000e5c <__aeabi_dsub+0x670>
 8000cae:	1882      	adds	r2, r0, r2
 8000cb0:	0021      	movs	r1, r4
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	4180      	sbcs	r0, r0
 8000cb6:	4459      	add	r1, fp
 8000cb8:	4240      	negs	r0, r0
 8000cba:	1808      	adds	r0, r1, r0
 8000cbc:	07c7      	lsls	r7, r0, #31
 8000cbe:	0852      	lsrs	r2, r2, #1
 8000cc0:	4317      	orrs	r7, r2
 8000cc2:	0844      	lsrs	r4, r0, #1
 8000cc4:	0752      	lsls	r2, r2, #29
 8000cc6:	d400      	bmi.n	8000cca <__aeabi_dsub+0x4de>
 8000cc8:	e185      	b.n	8000fd6 <__aeabi_dsub+0x7ea>
 8000cca:	220f      	movs	r2, #15
 8000ccc:	001d      	movs	r5, r3
 8000cce:	403a      	ands	r2, r7
 8000cd0:	2a04      	cmp	r2, #4
 8000cd2:	d000      	beq.n	8000cd6 <__aeabi_dsub+0x4ea>
 8000cd4:	e61a      	b.n	800090c <__aeabi_dsub+0x120>
 8000cd6:	08ff      	lsrs	r7, r7, #3
 8000cd8:	0764      	lsls	r4, r4, #29
 8000cda:	4327      	orrs	r7, r4
 8000cdc:	0905      	lsrs	r5, r0, #4
 8000cde:	e7dd      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000ce0:	465b      	mov	r3, fp
 8000ce2:	08d2      	lsrs	r2, r2, #3
 8000ce4:	075f      	lsls	r7, r3, #29
 8000ce6:	4317      	orrs	r7, r2
 8000ce8:	08dd      	lsrs	r5, r3, #3
 8000cea:	e67b      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000cec:	2700      	movs	r7, #0
 8000cee:	2400      	movs	r4, #0
 8000cf0:	e710      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_dsub+0x50c>
 8000cf6:	e0d6      	b.n	8000ea6 <__aeabi_dsub+0x6ba>
 8000cf8:	2900      	cmp	r1, #0
 8000cfa:	d000      	beq.n	8000cfe <__aeabi_dsub+0x512>
 8000cfc:	e12f      	b.n	8000f5e <__aeabi_dsub+0x772>
 8000cfe:	2480      	movs	r4, #128	@ 0x80
 8000d00:	2600      	movs	r6, #0
 8000d02:	4d7e      	ldr	r5, [pc, #504]	@ (8000efc <__aeabi_dsub+0x710>)
 8000d04:	0324      	lsls	r4, r4, #12
 8000d06:	e705      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000d08:	4666      	mov	r6, ip
 8000d0a:	465c      	mov	r4, fp
 8000d0c:	08d0      	lsrs	r0, r2, #3
 8000d0e:	e717      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000d10:	465b      	mov	r3, fp
 8000d12:	1a17      	subs	r7, r2, r0
 8000d14:	42ba      	cmp	r2, r7
 8000d16:	4192      	sbcs	r2, r2
 8000d18:	1b1c      	subs	r4, r3, r4
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	4663      	mov	r3, ip
 8000d1e:	4252      	negs	r2, r2
 8000d20:	1aa4      	subs	r4, r4, r2
 8000d22:	401e      	ands	r6, r3
 8000d24:	e5c4      	b.n	80008b0 <__aeabi_dsub+0xc4>
 8000d26:	1883      	adds	r3, r0, r2
 8000d28:	4283      	cmp	r3, r0
 8000d2a:	4180      	sbcs	r0, r0
 8000d2c:	445c      	add	r4, fp
 8000d2e:	4240      	negs	r0, r0
 8000d30:	1825      	adds	r5, r4, r0
 8000d32:	022a      	lsls	r2, r5, #8
 8000d34:	d400      	bmi.n	8000d38 <__aeabi_dsub+0x54c>
 8000d36:	e0da      	b.n	8000eee <__aeabi_dsub+0x702>
 8000d38:	4a72      	ldr	r2, [pc, #456]	@ (8000f04 <__aeabi_dsub+0x718>)
 8000d3a:	085b      	lsrs	r3, r3, #1
 8000d3c:	4015      	ands	r5, r2
 8000d3e:	07ea      	lsls	r2, r5, #31
 8000d40:	431a      	orrs	r2, r3
 8000d42:	0869      	lsrs	r1, r5, #1
 8000d44:	075b      	lsls	r3, r3, #29
 8000d46:	d400      	bmi.n	8000d4a <__aeabi_dsub+0x55e>
 8000d48:	e14a      	b.n	8000fe0 <__aeabi_dsub+0x7f4>
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d100      	bne.n	8000d54 <__aeabi_dsub+0x568>
 8000d52:	e0fc      	b.n	8000f4e <__aeabi_dsub+0x762>
 8000d54:	1d17      	adds	r7, r2, #4
 8000d56:	4297      	cmp	r7, r2
 8000d58:	41a4      	sbcs	r4, r4
 8000d5a:	4264      	negs	r4, r4
 8000d5c:	2502      	movs	r5, #2
 8000d5e:	1864      	adds	r4, r4, r1
 8000d60:	e6ec      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000d62:	4647      	mov	r7, r8
 8000d64:	001c      	movs	r4, r3
 8000d66:	431f      	orrs	r7, r3
 8000d68:	d000      	beq.n	8000d6c <__aeabi_dsub+0x580>
 8000d6a:	e743      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	2500      	movs	r5, #0
 8000d70:	2400      	movs	r4, #0
 8000d72:	e6cf      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000d74:	08c0      	lsrs	r0, r0, #3
 8000d76:	0767      	lsls	r7, r4, #29
 8000d78:	4307      	orrs	r7, r0
 8000d7a:	08e5      	lsrs	r5, r4, #3
 8000d7c:	e632      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000d7e:	1a87      	subs	r7, r0, r2
 8000d80:	465b      	mov	r3, fp
 8000d82:	42b8      	cmp	r0, r7
 8000d84:	4180      	sbcs	r0, r0
 8000d86:	1ae4      	subs	r4, r4, r3
 8000d88:	4240      	negs	r0, r0
 8000d8a:	1a24      	subs	r4, r4, r0
 8000d8c:	0223      	lsls	r3, r4, #8
 8000d8e:	d428      	bmi.n	8000de2 <__aeabi_dsub+0x5f6>
 8000d90:	0763      	lsls	r3, r4, #29
 8000d92:	08ff      	lsrs	r7, r7, #3
 8000d94:	431f      	orrs	r7, r3
 8000d96:	08e5      	lsrs	r5, r4, #3
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e77f      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_dsub+0x5b6>
 8000da0:	e673      	b.n	8000a8a <__aeabi_dsub+0x29e>
 8000da2:	464b      	mov	r3, r9
 8000da4:	1b5f      	subs	r7, r3, r5
 8000da6:	003b      	movs	r3, r7
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d100      	bne.n	8000dae <__aeabi_dsub+0x5c2>
 8000dac:	e742      	b.n	8000c34 <__aeabi_dsub+0x448>
 8000dae:	2f38      	cmp	r7, #56	@ 0x38
 8000db0:	dd00      	ble.n	8000db4 <__aeabi_dsub+0x5c8>
 8000db2:	e0ec      	b.n	8000f8e <__aeabi_dsub+0x7a2>
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	000e      	movs	r6, r1
 8000db8:	041b      	lsls	r3, r3, #16
 8000dba:	431c      	orrs	r4, r3
 8000dbc:	2f1f      	cmp	r7, #31
 8000dbe:	dc25      	bgt.n	8000e0c <__aeabi_dsub+0x620>
 8000dc0:	2520      	movs	r5, #32
 8000dc2:	0023      	movs	r3, r4
 8000dc4:	1bed      	subs	r5, r5, r7
 8000dc6:	0001      	movs	r1, r0
 8000dc8:	40a8      	lsls	r0, r5
 8000dca:	40ab      	lsls	r3, r5
 8000dcc:	40f9      	lsrs	r1, r7
 8000dce:	1e45      	subs	r5, r0, #1
 8000dd0:	41a8      	sbcs	r0, r5
 8000dd2:	430b      	orrs	r3, r1
 8000dd4:	40fc      	lsrs	r4, r7
 8000dd6:	4318      	orrs	r0, r3
 8000dd8:	465b      	mov	r3, fp
 8000dda:	1b1b      	subs	r3, r3, r4
 8000ddc:	469b      	mov	fp, r3
 8000dde:	e739      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000de0:	4666      	mov	r6, ip
 8000de2:	2501      	movs	r5, #1
 8000de4:	e562      	b.n	80008ac <__aeabi_dsub+0xc0>
 8000de6:	001f      	movs	r7, r3
 8000de8:	4659      	mov	r1, fp
 8000dea:	3f20      	subs	r7, #32
 8000dec:	40f9      	lsrs	r1, r7
 8000dee:	468c      	mov	ip, r1
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d005      	beq.n	8000e00 <__aeabi_dsub+0x614>
 8000df4:	2740      	movs	r7, #64	@ 0x40
 8000df6:	4659      	mov	r1, fp
 8000df8:	1afb      	subs	r3, r7, r3
 8000dfa:	4099      	lsls	r1, r3
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	4692      	mov	sl, r2
 8000e00:	4657      	mov	r7, sl
 8000e02:	1e7b      	subs	r3, r7, #1
 8000e04:	419f      	sbcs	r7, r3
 8000e06:	4663      	mov	r3, ip
 8000e08:	431f      	orrs	r7, r3
 8000e0a:	e5c1      	b.n	8000990 <__aeabi_dsub+0x1a4>
 8000e0c:	003b      	movs	r3, r7
 8000e0e:	0025      	movs	r5, r4
 8000e10:	3b20      	subs	r3, #32
 8000e12:	40dd      	lsrs	r5, r3
 8000e14:	2f20      	cmp	r7, #32
 8000e16:	d004      	beq.n	8000e22 <__aeabi_dsub+0x636>
 8000e18:	2340      	movs	r3, #64	@ 0x40
 8000e1a:	1bdb      	subs	r3, r3, r7
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	4320      	orrs	r0, r4
 8000e20:	4680      	mov	r8, r0
 8000e22:	4640      	mov	r0, r8
 8000e24:	1e43      	subs	r3, r0, #1
 8000e26:	4198      	sbcs	r0, r3
 8000e28:	4328      	orrs	r0, r5
 8000e2a:	e713      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000e2c:	2900      	cmp	r1, #0
 8000e2e:	d09d      	beq.n	8000d6c <__aeabi_dsub+0x580>
 8000e30:	2601      	movs	r6, #1
 8000e32:	4663      	mov	r3, ip
 8000e34:	465c      	mov	r4, fp
 8000e36:	4690      	mov	r8, r2
 8000e38:	401e      	ands	r6, r3
 8000e3a:	e6db      	b.n	8000bf4 <__aeabi_dsub+0x408>
 8000e3c:	1a17      	subs	r7, r2, r0
 8000e3e:	465b      	mov	r3, fp
 8000e40:	42ba      	cmp	r2, r7
 8000e42:	4192      	sbcs	r2, r2
 8000e44:	1b1c      	subs	r4, r3, r4
 8000e46:	4252      	negs	r2, r2
 8000e48:	1aa4      	subs	r4, r4, r2
 8000e4a:	0223      	lsls	r3, r4, #8
 8000e4c:	d4c8      	bmi.n	8000de0 <__aeabi_dsub+0x5f4>
 8000e4e:	0763      	lsls	r3, r4, #29
 8000e50:	08ff      	lsrs	r7, r7, #3
 8000e52:	431f      	orrs	r7, r3
 8000e54:	4666      	mov	r6, ip
 8000e56:	2301      	movs	r3, #1
 8000e58:	08e5      	lsrs	r5, r4, #3
 8000e5a:	e71f      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000e5c:	001d      	movs	r5, r3
 8000e5e:	2400      	movs	r4, #0
 8000e60:	2700      	movs	r7, #0
 8000e62:	e657      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000e64:	465c      	mov	r4, fp
 8000e66:	08d0      	lsrs	r0, r2, #3
 8000e68:	e66a      	b.n	8000b40 <__aeabi_dsub+0x354>
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d100      	bne.n	8000e70 <__aeabi_dsub+0x684>
 8000e6e:	e737      	b.n	8000ce0 <__aeabi_dsub+0x4f4>
 8000e70:	4653      	mov	r3, sl
 8000e72:	08c0      	lsrs	r0, r0, #3
 8000e74:	0767      	lsls	r7, r4, #29
 8000e76:	4307      	orrs	r7, r0
 8000e78:	08e5      	lsrs	r5, r4, #3
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d100      	bne.n	8000e80 <__aeabi_dsub+0x694>
 8000e7e:	e5b1      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000e80:	2380      	movs	r3, #128	@ 0x80
 8000e82:	031b      	lsls	r3, r3, #12
 8000e84:	421d      	tst	r5, r3
 8000e86:	d008      	beq.n	8000e9a <__aeabi_dsub+0x6ae>
 8000e88:	4659      	mov	r1, fp
 8000e8a:	08c8      	lsrs	r0, r1, #3
 8000e8c:	4218      	tst	r0, r3
 8000e8e:	d104      	bne.n	8000e9a <__aeabi_dsub+0x6ae>
 8000e90:	08d2      	lsrs	r2, r2, #3
 8000e92:	0749      	lsls	r1, r1, #29
 8000e94:	430a      	orrs	r2, r1
 8000e96:	0017      	movs	r7, r2
 8000e98:	0005      	movs	r5, r0
 8000e9a:	0f7b      	lsrs	r3, r7, #29
 8000e9c:	00ff      	lsls	r7, r7, #3
 8000e9e:	08ff      	lsrs	r7, r7, #3
 8000ea0:	075b      	lsls	r3, r3, #29
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	e59e      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000ea6:	08c0      	lsrs	r0, r0, #3
 8000ea8:	0763      	lsls	r3, r4, #29
 8000eaa:	4318      	orrs	r0, r3
 8000eac:	08e5      	lsrs	r5, r4, #3
 8000eae:	2900      	cmp	r1, #0
 8000eb0:	d053      	beq.n	8000f5a <__aeabi_dsub+0x76e>
 8000eb2:	2380      	movs	r3, #128	@ 0x80
 8000eb4:	031b      	lsls	r3, r3, #12
 8000eb6:	421d      	tst	r5, r3
 8000eb8:	d00a      	beq.n	8000ed0 <__aeabi_dsub+0x6e4>
 8000eba:	4659      	mov	r1, fp
 8000ebc:	08cc      	lsrs	r4, r1, #3
 8000ebe:	421c      	tst	r4, r3
 8000ec0:	d106      	bne.n	8000ed0 <__aeabi_dsub+0x6e4>
 8000ec2:	2601      	movs	r6, #1
 8000ec4:	4663      	mov	r3, ip
 8000ec6:	0025      	movs	r5, r4
 8000ec8:	08d0      	lsrs	r0, r2, #3
 8000eca:	0749      	lsls	r1, r1, #29
 8000ecc:	4308      	orrs	r0, r1
 8000ece:	401e      	ands	r6, r3
 8000ed0:	0f47      	lsrs	r7, r0, #29
 8000ed2:	00c0      	lsls	r0, r0, #3
 8000ed4:	08c0      	lsrs	r0, r0, #3
 8000ed6:	077f      	lsls	r7, r7, #29
 8000ed8:	4307      	orrs	r7, r0
 8000eda:	e583      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000edc:	1883      	adds	r3, r0, r2
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	4192      	sbcs	r2, r2
 8000ee2:	445c      	add	r4, fp
 8000ee4:	4252      	negs	r2, r2
 8000ee6:	18a5      	adds	r5, r4, r2
 8000ee8:	022a      	lsls	r2, r5, #8
 8000eea:	d500      	bpl.n	8000eee <__aeabi_dsub+0x702>
 8000eec:	e724      	b.n	8000d38 <__aeabi_dsub+0x54c>
 8000eee:	076f      	lsls	r7, r5, #29
 8000ef0:	08db      	lsrs	r3, r3, #3
 8000ef2:	431f      	orrs	r7, r3
 8000ef4:	08ed      	lsrs	r5, r5, #3
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e6d0      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	000007ff 	.word	0x000007ff
 8000f00:	000007fe 	.word	0x000007fe
 8000f04:	ff7fffff 	.word	0xff7fffff
 8000f08:	465b      	mov	r3, fp
 8000f0a:	08d2      	lsrs	r2, r2, #3
 8000f0c:	075f      	lsls	r7, r3, #29
 8000f0e:	4666      	mov	r6, ip
 8000f10:	4317      	orrs	r7, r2
 8000f12:	08dd      	lsrs	r5, r3, #3
 8000f14:	e566      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f16:	0025      	movs	r5, r4
 8000f18:	3b20      	subs	r3, #32
 8000f1a:	40dd      	lsrs	r5, r3
 8000f1c:	4663      	mov	r3, ip
 8000f1e:	2b20      	cmp	r3, #32
 8000f20:	d005      	beq.n	8000f2e <__aeabi_dsub+0x742>
 8000f22:	2340      	movs	r3, #64	@ 0x40
 8000f24:	4661      	mov	r1, ip
 8000f26:	1a5b      	subs	r3, r3, r1
 8000f28:	409c      	lsls	r4, r3
 8000f2a:	4320      	orrs	r0, r4
 8000f2c:	4680      	mov	r8, r0
 8000f2e:	4647      	mov	r7, r8
 8000f30:	1e7b      	subs	r3, r7, #1
 8000f32:	419f      	sbcs	r7, r3
 8000f34:	432f      	orrs	r7, r5
 8000f36:	e5a0      	b.n	8000a7a <__aeabi_dsub+0x28e>
 8000f38:	2120      	movs	r1, #32
 8000f3a:	2700      	movs	r7, #0
 8000f3c:	1a09      	subs	r1, r1, r0
 8000f3e:	e4d2      	b.n	80008e6 <__aeabi_dsub+0xfa>
 8000f40:	2f00      	cmp	r7, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_dsub+0x75a>
 8000f44:	e713      	b.n	8000d6e <__aeabi_dsub+0x582>
 8000f46:	465c      	mov	r4, fp
 8000f48:	0017      	movs	r7, r2
 8000f4a:	2500      	movs	r5, #0
 8000f4c:	e5f6      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000f4e:	08d7      	lsrs	r7, r2, #3
 8000f50:	0749      	lsls	r1, r1, #29
 8000f52:	2302      	movs	r3, #2
 8000f54:	430f      	orrs	r7, r1
 8000f56:	092d      	lsrs	r5, r5, #4
 8000f58:	e6a0      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000f5a:	0007      	movs	r7, r0
 8000f5c:	e542      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f5e:	465b      	mov	r3, fp
 8000f60:	2601      	movs	r6, #1
 8000f62:	075f      	lsls	r7, r3, #29
 8000f64:	08dd      	lsrs	r5, r3, #3
 8000f66:	4663      	mov	r3, ip
 8000f68:	08d2      	lsrs	r2, r2, #3
 8000f6a:	4317      	orrs	r7, r2
 8000f6c:	401e      	ands	r6, r3
 8000f6e:	e539      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f70:	465b      	mov	r3, fp
 8000f72:	08d2      	lsrs	r2, r2, #3
 8000f74:	075f      	lsls	r7, r3, #29
 8000f76:	4317      	orrs	r7, r2
 8000f78:	08dd      	lsrs	r5, r3, #3
 8000f7a:	e533      	b.n	80009e4 <__aeabi_dsub+0x1f8>
 8000f7c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <__aeabi_dsub+0x80c>)
 8000f7e:	08db      	lsrs	r3, r3, #3
 8000f80:	4022      	ands	r2, r4
 8000f82:	0757      	lsls	r7, r2, #29
 8000f84:	0252      	lsls	r2, r2, #9
 8000f86:	2501      	movs	r5, #1
 8000f88:	431f      	orrs	r7, r3
 8000f8a:	0b14      	lsrs	r4, r2, #12
 8000f8c:	e5c2      	b.n	8000b14 <__aeabi_dsub+0x328>
 8000f8e:	000e      	movs	r6, r1
 8000f90:	2001      	movs	r0, #1
 8000f92:	e65f      	b.n	8000c54 <__aeabi_dsub+0x468>
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d00d      	beq.n	8000fb4 <__aeabi_dsub+0x7c8>
 8000f98:	464b      	mov	r3, r9
 8000f9a:	1b5b      	subs	r3, r3, r5
 8000f9c:	469c      	mov	ip, r3
 8000f9e:	2d00      	cmp	r5, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_dsub+0x7b8>
 8000fa2:	e548      	b.n	8000a36 <__aeabi_dsub+0x24a>
 8000fa4:	2701      	movs	r7, #1
 8000fa6:	2b38      	cmp	r3, #56	@ 0x38
 8000fa8:	dd00      	ble.n	8000fac <__aeabi_dsub+0x7c0>
 8000faa:	e566      	b.n	8000a7a <__aeabi_dsub+0x28e>
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	431c      	orrs	r4, r3
 8000fb2:	e550      	b.n	8000a56 <__aeabi_dsub+0x26a>
 8000fb4:	1c6b      	adds	r3, r5, #1
 8000fb6:	4d11      	ldr	r5, [pc, #68]	@ (8000ffc <__aeabi_dsub+0x810>)
 8000fb8:	422b      	tst	r3, r5
 8000fba:	d000      	beq.n	8000fbe <__aeabi_dsub+0x7d2>
 8000fbc:	e673      	b.n	8000ca6 <__aeabi_dsub+0x4ba>
 8000fbe:	4659      	mov	r1, fp
 8000fc0:	0023      	movs	r3, r4
 8000fc2:	4311      	orrs	r1, r2
 8000fc4:	468a      	mov	sl, r1
 8000fc6:	4303      	orrs	r3, r0
 8000fc8:	e600      	b.n	8000bcc <__aeabi_dsub+0x3e0>
 8000fca:	0767      	lsls	r7, r4, #29
 8000fcc:	08c0      	lsrs	r0, r0, #3
 8000fce:	2300      	movs	r3, #0
 8000fd0:	4307      	orrs	r7, r0
 8000fd2:	08e5      	lsrs	r5, r4, #3
 8000fd4:	e662      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fd6:	0764      	lsls	r4, r4, #29
 8000fd8:	08ff      	lsrs	r7, r7, #3
 8000fda:	4327      	orrs	r7, r4
 8000fdc:	0905      	lsrs	r5, r0, #4
 8000fde:	e65d      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fe0:	08d2      	lsrs	r2, r2, #3
 8000fe2:	0749      	lsls	r1, r1, #29
 8000fe4:	4311      	orrs	r1, r2
 8000fe6:	000f      	movs	r7, r1
 8000fe8:	2302      	movs	r3, #2
 8000fea:	092d      	lsrs	r5, r5, #4
 8000fec:	e656      	b.n	8000c9c <__aeabi_dsub+0x4b0>
 8000fee:	0007      	movs	r7, r0
 8000ff0:	e5a4      	b.n	8000b3c <__aeabi_dsub+0x350>
 8000ff2:	0038      	movs	r0, r7
 8000ff4:	e48f      	b.n	8000916 <__aeabi_dsub+0x12a>
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	ff7fffff 	.word	0xff7fffff
 8000ffc:	000007fe 	.word	0x000007fe

08001000 <__aeabi_d2iz>:
 8001000:	000b      	movs	r3, r1
 8001002:	0002      	movs	r2, r0
 8001004:	b570      	push	{r4, r5, r6, lr}
 8001006:	4d16      	ldr	r5, [pc, #88]	@ (8001060 <__aeabi_d2iz+0x60>)
 8001008:	030c      	lsls	r4, r1, #12
 800100a:	b082      	sub	sp, #8
 800100c:	0049      	lsls	r1, r1, #1
 800100e:	2000      	movs	r0, #0
 8001010:	9200      	str	r2, [sp, #0]
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	0b24      	lsrs	r4, r4, #12
 8001016:	0d49      	lsrs	r1, r1, #21
 8001018:	0fde      	lsrs	r6, r3, #31
 800101a:	42a9      	cmp	r1, r5
 800101c:	dd04      	ble.n	8001028 <__aeabi_d2iz+0x28>
 800101e:	4811      	ldr	r0, [pc, #68]	@ (8001064 <__aeabi_d2iz+0x64>)
 8001020:	4281      	cmp	r1, r0
 8001022:	dd03      	ble.n	800102c <__aeabi_d2iz+0x2c>
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <__aeabi_d2iz+0x68>)
 8001026:	18f0      	adds	r0, r6, r3
 8001028:	b002      	add	sp, #8
 800102a:	bd70      	pop	{r4, r5, r6, pc}
 800102c:	2080      	movs	r0, #128	@ 0x80
 800102e:	0340      	lsls	r0, r0, #13
 8001030:	4320      	orrs	r0, r4
 8001032:	4c0e      	ldr	r4, [pc, #56]	@ (800106c <__aeabi_d2iz+0x6c>)
 8001034:	1a64      	subs	r4, r4, r1
 8001036:	2c1f      	cmp	r4, #31
 8001038:	dd08      	ble.n	800104c <__aeabi_d2iz+0x4c>
 800103a:	4b0d      	ldr	r3, [pc, #52]	@ (8001070 <__aeabi_d2iz+0x70>)
 800103c:	1a5b      	subs	r3, r3, r1
 800103e:	40d8      	lsrs	r0, r3
 8001040:	0003      	movs	r3, r0
 8001042:	4258      	negs	r0, r3
 8001044:	2e00      	cmp	r6, #0
 8001046:	d1ef      	bne.n	8001028 <__aeabi_d2iz+0x28>
 8001048:	0018      	movs	r0, r3
 800104a:	e7ed      	b.n	8001028 <__aeabi_d2iz+0x28>
 800104c:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <__aeabi_d2iz+0x74>)
 800104e:	9a00      	ldr	r2, [sp, #0]
 8001050:	469c      	mov	ip, r3
 8001052:	0003      	movs	r3, r0
 8001054:	4461      	add	r1, ip
 8001056:	408b      	lsls	r3, r1
 8001058:	40e2      	lsrs	r2, r4
 800105a:	4313      	orrs	r3, r2
 800105c:	e7f1      	b.n	8001042 <__aeabi_d2iz+0x42>
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	000003fe 	.word	0x000003fe
 8001064:	0000041d 	.word	0x0000041d
 8001068:	7fffffff 	.word	0x7fffffff
 800106c:	00000433 	.word	0x00000433
 8001070:	00000413 	.word	0x00000413
 8001074:	fffffbed 	.word	0xfffffbed

08001078 <__aeabi_i2d>:
 8001078:	b570      	push	{r4, r5, r6, lr}
 800107a:	2800      	cmp	r0, #0
 800107c:	d016      	beq.n	80010ac <__aeabi_i2d+0x34>
 800107e:	17c3      	asrs	r3, r0, #31
 8001080:	18c5      	adds	r5, r0, r3
 8001082:	405d      	eors	r5, r3
 8001084:	0fc4      	lsrs	r4, r0, #31
 8001086:	0028      	movs	r0, r5
 8001088:	f000 f824 	bl	80010d4 <__clzsi2>
 800108c:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <__aeabi_i2d+0x58>)
 800108e:	1a1b      	subs	r3, r3, r0
 8001090:	055b      	lsls	r3, r3, #21
 8001092:	0d5b      	lsrs	r3, r3, #21
 8001094:	280a      	cmp	r0, #10
 8001096:	dc14      	bgt.n	80010c2 <__aeabi_i2d+0x4a>
 8001098:	0002      	movs	r2, r0
 800109a:	002e      	movs	r6, r5
 800109c:	3215      	adds	r2, #21
 800109e:	4096      	lsls	r6, r2
 80010a0:	220b      	movs	r2, #11
 80010a2:	1a12      	subs	r2, r2, r0
 80010a4:	40d5      	lsrs	r5, r2
 80010a6:	032d      	lsls	r5, r5, #12
 80010a8:	0b2d      	lsrs	r5, r5, #12
 80010aa:	e003      	b.n	80010b4 <__aeabi_i2d+0x3c>
 80010ac:	2400      	movs	r4, #0
 80010ae:	2300      	movs	r3, #0
 80010b0:	2500      	movs	r5, #0
 80010b2:	2600      	movs	r6, #0
 80010b4:	051b      	lsls	r3, r3, #20
 80010b6:	432b      	orrs	r3, r5
 80010b8:	07e4      	lsls	r4, r4, #31
 80010ba:	4323      	orrs	r3, r4
 80010bc:	0030      	movs	r0, r6
 80010be:	0019      	movs	r1, r3
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
 80010c2:	380b      	subs	r0, #11
 80010c4:	4085      	lsls	r5, r0
 80010c6:	032d      	lsls	r5, r5, #12
 80010c8:	2600      	movs	r6, #0
 80010ca:	0b2d      	lsrs	r5, r5, #12
 80010cc:	e7f2      	b.n	80010b4 <__aeabi_i2d+0x3c>
 80010ce:	46c0      	nop			@ (mov r8, r8)
 80010d0:	0000041e 	.word	0x0000041e

080010d4 <__clzsi2>:
 80010d4:	211c      	movs	r1, #28
 80010d6:	2301      	movs	r3, #1
 80010d8:	041b      	lsls	r3, r3, #16
 80010da:	4298      	cmp	r0, r3
 80010dc:	d301      	bcc.n	80010e2 <__clzsi2+0xe>
 80010de:	0c00      	lsrs	r0, r0, #16
 80010e0:	3910      	subs	r1, #16
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	4298      	cmp	r0, r3
 80010e6:	d301      	bcc.n	80010ec <__clzsi2+0x18>
 80010e8:	0a00      	lsrs	r0, r0, #8
 80010ea:	3908      	subs	r1, #8
 80010ec:	091b      	lsrs	r3, r3, #4
 80010ee:	4298      	cmp	r0, r3
 80010f0:	d301      	bcc.n	80010f6 <__clzsi2+0x22>
 80010f2:	0900      	lsrs	r0, r0, #4
 80010f4:	3904      	subs	r1, #4
 80010f6:	a202      	add	r2, pc, #8	@ (adr r2, 8001100 <__clzsi2+0x2c>)
 80010f8:	5c10      	ldrb	r0, [r2, r0]
 80010fa:	1840      	adds	r0, r0, r1
 80010fc:	4770      	bx	lr
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	02020304 	.word	0x02020304
 8001104:	01010101 	.word	0x01010101
	...

08001110 <HAL_CAN_RxFifo0MsgPendingCallback>:
#define CS_HIGH() HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
#define V12NpOff() HAL_GPIO_WritePin(V12_NP_Signal_GPIO_Port, V12_NP_Signal_Pin, RESET);
#define V12NpOn() HAL_GPIO_WritePin(V12_NP_Signal_GPIO_Port, V12_NP_Signal_Pin, SET);


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001118:	4b5c      	ldr	r3, [pc, #368]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800111a:	4a5d      	ldr	r2, [pc, #372]	@ (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	2100      	movs	r1, #0
 8001120:	f003 f94c 	bl	80043bc <HAL_CAN_GetRxMessage>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>

		Error_Handler();
 8001128:	f001 fe12 	bl	8002d50 <Error_Handler>
	}

	if (RxHeader.StdId == 0x3A1) {
 800112c:	4b58      	ldr	r3, [pc, #352]	@ (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a58      	ldr	r2, [pc, #352]	@ (8001294 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d13c      	bne.n	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			tempDataFlag = 1;
 8001136:	4b58      	ldr	r3, [pc, #352]	@ (8001298 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
			ect = (RxData[3] << 8) | RxData[2];
 800113c:	4b53      	ldr	r3, [pc, #332]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800113e:	78db      	ldrb	r3, [r3, #3]
 8001140:	b21b      	sxth	r3, r3
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b51      	ldr	r3, [pc, #324]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001148:	789b      	ldrb	r3, [r3, #2]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b52      	ldr	r3, [pc, #328]	@ (800129c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001152:	801a      	strh	r2, [r3, #0]
			ect = ect - 50;
 8001154:	4b51      	ldr	r3, [pc, #324]	@ (800129c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001156:	2200      	movs	r2, #0
 8001158:	5e9b      	ldrsh	r3, [r3, r2]
 800115a:	b29b      	uxth	r3, r3
 800115c:	3b32      	subs	r3, #50	@ 0x32
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b4e      	ldr	r3, [pc, #312]	@ (800129c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001164:	801a      	strh	r2, [r3, #0]
			if(ect < 0){
 8001166:	4b4d      	ldr	r3, [pc, #308]	@ (800129c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001168:	2200      	movs	r2, #0
 800116a:	5e9b      	ldrsh	r3, [r3, r2]
 800116c:	2b00      	cmp	r3, #0
 800116e:	da02      	bge.n	8001176 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
				ect = 0;
 8001170:	4b4a      	ldr	r3, [pc, #296]	@ (800129c <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 8001172:	2200      	movs	r2, #0
 8001174:	801a      	strh	r2, [r3, #0]
			}
			oilTemp = (RxData[5] << 8) | RxData[4];
 8001176:	4b45      	ldr	r3, [pc, #276]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001178:	795b      	ldrb	r3, [r3, #5]
 800117a:	b21b      	sxth	r3, r3
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b42      	ldr	r3, [pc, #264]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001182:	791b      	ldrb	r3, [r3, #4]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b45      	ldr	r3, [pc, #276]	@ (80012a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800118c:	801a      	strh	r2, [r3, #0]
			oilTemp = oilTemp - 50;
 800118e:	4b44      	ldr	r3, [pc, #272]	@ (80012a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8001190:	2200      	movs	r2, #0
 8001192:	5e9b      	ldrsh	r3, [r3, r2]
 8001194:	b29b      	uxth	r3, r3
 8001196:	3b32      	subs	r3, #50	@ 0x32
 8001198:	b29b      	uxth	r3, r3
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b40      	ldr	r3, [pc, #256]	@ (80012a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800119e:	801a      	strh	r2, [r3, #0]
			if(oilTemp < 0){
 80011a0:	4b3f      	ldr	r3, [pc, #252]	@ (80012a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	5e9b      	ldrsh	r3, [r3, r2]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da02      	bge.n	80011b0 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
				oilTemp = 0;
 80011aa:	4b3d      	ldr	r3, [pc, #244]	@ (80012a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	801a      	strh	r2, [r3, #0]
			}
	}
	if (RxHeader.StdId == 0x3A2){
 80011b0:	4b37      	ldr	r3, [pc, #220]	@ (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a3b      	ldr	r2, [pc, #236]	@ (80012a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d11a      	bne.n	80011f0 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
			pressDataFlag = 1;
 80011ba:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 80011bc:	2201      	movs	r2, #1
 80011be:	701a      	strb	r2, [r3, #0]
			fuelPress = (RxData[1] << 8) | RxData[0];
 80011c0:	4b32      	ldr	r3, [pc, #200]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	4b30      	ldr	r3, [pc, #192]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b35      	ldr	r3, [pc, #212]	@ (80012ac <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 80011d6:	801a      	strh	r2, [r3, #0]
			oilPress = (RxData[3] << 8) | RxData[2];
 80011d8:	4b2c      	ldr	r3, [pc, #176]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011da:	78db      	ldrb	r3, [r3, #3]
 80011dc:	b21b      	sxth	r3, r3
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 80011ee:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x3A3){
 80011f0:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2f      	ldr	r2, [pc, #188]	@ (80012b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d10f      	bne.n	800121a <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
			fuelDataFlag = 1;
 80011fa:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
			instFuelConsumption = (RxData[3] << 8) | RxData[2];
 8001200:	4b22      	ldr	r3, [pc, #136]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001202:	78db      	ldrb	r3, [r3, #3]
 8001204:	b21b      	sxth	r3, r3
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21a      	sxth	r2, r3
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800120c:	789b      	ldrb	r3, [r3, #2]
 800120e:	b21b      	sxth	r3, r3
 8001210:	4313      	orrs	r3, r2
 8001212:	b21b      	sxth	r3, r3
 8001214:	b29a      	uxth	r2, r3
 8001216:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001218:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A4){
 800121a:	4b1d      	ldr	r3, [pc, #116]	@ (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	23e9      	movs	r3, #233	@ 0xe9
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	429a      	cmp	r2, r3
 8001224:	d10e      	bne.n	8001244 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
			rpmDataFlag = 1;
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8001228:	2201      	movs	r2, #1
 800122a:	701a      	strb	r2, [r3, #0]
			rpm = (RxData[6] << 8) | RxData[5];
 800122c:	4b17      	ldr	r3, [pc, #92]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800122e:	799b      	ldrb	r3, [r3, #6]
 8001230:	b21b      	sxth	r3, r3
 8001232:	021b      	lsls	r3, r3, #8
 8001234:	b21a      	sxth	r2, r3
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001238:	795b      	ldrb	r3, [r3, #5]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8001242:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A5){
 8001244:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1f      	ldr	r2, [pc, #124]	@ (80012c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d10e      	bne.n	800126c <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>
			battDataFlag = 1;
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
			battVolt = (RxData[1] << 8) | RxData[0];
 8001254:	4b0d      	ldr	r3, [pc, #52]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001256:	785b      	ldrb	r3, [r3, #1]
 8001258:	b21b      	sxth	r3, r3
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	b21a      	sxth	r2, r3
 800125e:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b19      	ldr	r3, [pc, #100]	@ (80012d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800126a:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x092){
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b92      	cmp	r3, #146	@ 0x92
 8001272:	d106      	bne.n	8001282 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
		if (RxData[0] == 0x02)	{
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b02      	cmp	r3, #2
 800127a:	d102      	bne.n	8001282 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
			canResetEcuFlag = 1;
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001282:	46c0      	nop			@ (mov r8, r8)
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	200003d4 	.word	0x200003d4
 8001290:	200002ec 	.word	0x200002ec
 8001294:	000003a1 	.word	0x000003a1
 8001298:	20000436 	.word	0x20000436
 800129c:	2000043c 	.word	0x2000043c
 80012a0:	2000043e 	.word	0x2000043e
 80012a4:	000003a2 	.word	0x000003a2
 80012a8:	20000437 	.word	0x20000437
 80012ac:	20000442 	.word	0x20000442
 80012b0:	20000440 	.word	0x20000440
 80012b4:	000003a3 	.word	0x000003a3
 80012b8:	20000438 	.word	0x20000438
 80012bc:	200005e4 	.word	0x200005e4
 80012c0:	20000439 	.word	0x20000439
 80012c4:	20000446 	.word	0x20000446
 80012c8:	000003a5 	.word	0x000003a5
 80012cc:	2000043a 	.word	0x2000043a
 80012d0:	20000444 	.word	0x20000444
 80012d4:	200005e8 	.word	0x200005e8

080012d8 <tempActions>:

void tempActions(){
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0

	tempDataFlag = 0;
 80012dc:	4b84      	ldr	r3, [pc, #528]	@ (80014f0 <tempActions+0x218>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
	if(ect > ectTh[0]){
 80012e2:	4b84      	ldr	r3, [pc, #528]	@ (80014f4 <tempActions+0x21c>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	5e9b      	ldrsh	r3, [r3, r2]
 80012e8:	001a      	movs	r2, r3
 80012ea:	4b83      	ldr	r3, [pc, #524]	@ (80014f8 <tempActions+0x220>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dd59      	ble.n	80013a6 <tempActions+0xce>
		HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, SET);
 80012f2:	2380      	movs	r3, #128	@ 0x80
 80012f4:	0099      	lsls	r1, r3, #2
 80012f6:	2390      	movs	r3, #144	@ 0x90
 80012f8:	05db      	lsls	r3, r3, #23
 80012fa:	2201      	movs	r2, #1
 80012fc:	0018      	movs	r0, r3
 80012fe:	f003 ffa5 	bl	800524c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1L_Signal_GPIO_Port, F1L_Signal_Pin, SET);
 8001302:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <tempActions+0x224>)
 8001304:	2201      	movs	r2, #1
 8001306:	2180      	movs	r1, #128	@ 0x80
 8001308:	0018      	movs	r0, r3
 800130a:	f003 ff9f 	bl	800524c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2L_Signal_GPIO_Port, F2L_Signal_Pin, SET);
 800130e:	4b7b      	ldr	r3, [pc, #492]	@ (80014fc <tempActions+0x224>)
 8001310:	2201      	movs	r2, #1
 8001312:	2140      	movs	r1, #64	@ 0x40
 8001314:	0018      	movs	r0, r3
 8001316:	f003 ff99 	bl	800524c <HAL_GPIO_WritePin>
		TIM2->CCR3 = dutyFanEctTh[0];
 800131a:	4b79      	ldr	r3, [pc, #484]	@ (8001500 <tempActions+0x228>)
 800131c:	881a      	ldrh	r2, [r3, #0]
 800131e:	2380      	movs	r3, #128	@ 0x80
 8001320:	05db      	lsls	r3, r3, #23
 8001322:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = dutyFanEctTh[0];
 8001324:	4b76      	ldr	r3, [pc, #472]	@ (8001500 <tempActions+0x228>)
 8001326:	881a      	ldrh	r2, [r3, #0]
 8001328:	2380      	movs	r3, #128	@ 0x80
 800132a:	05db      	lsls	r3, r3, #23
 800132c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM16->CCR1 = dutyPumpEctTh[0];
 800132e:	4b75      	ldr	r3, [pc, #468]	@ (8001504 <tempActions+0x22c>)
 8001330:	881a      	ldrh	r2, [r3, #0]
 8001332:	4b75      	ldr	r3, [pc, #468]	@ (8001508 <tempActions+0x230>)
 8001334:	635a      	str	r2, [r3, #52]	@ 0x34

		if(ect > ectTh[1]){
 8001336:	4b6f      	ldr	r3, [pc, #444]	@ (80014f4 <tempActions+0x21c>)
 8001338:	2200      	movs	r2, #0
 800133a:	5e9b      	ldrsh	r3, [r3, r2]
 800133c:	001a      	movs	r2, r3
 800133e:	4b6e      	ldr	r3, [pc, #440]	@ (80014f8 <tempActions+0x220>)
 8001340:	885b      	ldrh	r3, [r3, #2]
 8001342:	429a      	cmp	r2, r3
 8001344:	dd51      	ble.n	80013ea <tempActions+0x112>
			TIM2->CCR3 = dutyFanEctTh[1];
 8001346:	4b6e      	ldr	r3, [pc, #440]	@ (8001500 <tempActions+0x228>)
 8001348:	885a      	ldrh	r2, [r3, #2]
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = dutyFanEctTh[1];
 8001350:	4b6b      	ldr	r3, [pc, #428]	@ (8001500 <tempActions+0x228>)
 8001352:	885a      	ldrh	r2, [r3, #2]
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	05db      	lsls	r3, r3, #23
 8001358:	641a      	str	r2, [r3, #64]	@ 0x40
			TIM16->CCR1 = dutyPumpEctTh[1];
 800135a:	4b6a      	ldr	r3, [pc, #424]	@ (8001504 <tempActions+0x22c>)
 800135c:	885a      	ldrh	r2, [r3, #2]
 800135e:	4b6a      	ldr	r3, [pc, #424]	@ (8001508 <tempActions+0x230>)
 8001360:	635a      	str	r2, [r3, #52]	@ 0x34

			if(ect > ectTh[2]){
 8001362:	4b64      	ldr	r3, [pc, #400]	@ (80014f4 <tempActions+0x21c>)
 8001364:	2200      	movs	r2, #0
 8001366:	5e9b      	ldrsh	r3, [r3, r2]
 8001368:	001a      	movs	r2, r3
 800136a:	4b63      	ldr	r3, [pc, #396]	@ (80014f8 <tempActions+0x220>)
 800136c:	889b      	ldrh	r3, [r3, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	dd3b      	ble.n	80013ea <tempActions+0x112>
				TIM2->CCR3 = dutyFanEctTh[2];
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <tempActions+0x228>)
 8001374:	889a      	ldrh	r2, [r3, #4]
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	05db      	lsls	r3, r3, #23
 800137a:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM2->CCR4 = dutyFanEctTh[2];
 800137c:	4b60      	ldr	r3, [pc, #384]	@ (8001500 <tempActions+0x228>)
 800137e:	889a      	ldrh	r2, [r3, #4]
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	641a      	str	r2, [r3, #64]	@ 0x40
				TIM16->CCR1 = dutyPumpEctTh[2];
 8001386:	4b5f      	ldr	r3, [pc, #380]	@ (8001504 <tempActions+0x22c>)
 8001388:	889a      	ldrh	r2, [r3, #4]
 800138a:	4b5f      	ldr	r3, [pc, #380]	@ (8001508 <tempActions+0x230>)
 800138c:	635a      	str	r2, [r3, #52]	@ 0x34

				if(ect > ectTh[3]){
 800138e:	4b59      	ldr	r3, [pc, #356]	@ (80014f4 <tempActions+0x21c>)
 8001390:	2200      	movs	r2, #0
 8001392:	5e9b      	ldrsh	r3, [r3, r2]
 8001394:	001a      	movs	r2, r3
 8001396:	4b58      	ldr	r3, [pc, #352]	@ (80014f8 <tempActions+0x220>)
 8001398:	88db      	ldrh	r3, [r3, #6]
 800139a:	429a      	cmp	r2, r3
 800139c:	dd25      	ble.n	80013ea <tempActions+0x112>
					ectEmergencyFlag = 1;
 800139e:	4b5b      	ldr	r3, [pc, #364]	@ (800150c <tempActions+0x234>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e021      	b.n	80013ea <tempActions+0x112>
				}
			}
		}
	}else{
		HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, RESET);
 80013a6:	2380      	movs	r3, #128	@ 0x80
 80013a8:	0099      	lsls	r1, r3, #2
 80013aa:	2390      	movs	r3, #144	@ 0x90
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	2200      	movs	r2, #0
 80013b0:	0018      	movs	r0, r3
 80013b2:	f003 ff4b 	bl	800524c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1L_Signal_GPIO_Port, F1L_Signal_Pin, RESET);
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <tempActions+0x224>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	2180      	movs	r1, #128	@ 0x80
 80013bc:	0018      	movs	r0, r3
 80013be:	f003 ff45 	bl	800524c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2L_Signal_GPIO_Port, F2L_Signal_Pin, RESET);
 80013c2:	4b4e      	ldr	r3, [pc, #312]	@ (80014fc <tempActions+0x224>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	2140      	movs	r1, #64	@ 0x40
 80013c8:	0018      	movs	r0, r3
 80013ca:	f003 ff3f 	bl	800524c <HAL_GPIO_WritePin>
		TIM2->CCR3 = dutyFanNill;
 80013ce:	4b50      	ldr	r3, [pc, #320]	@ (8001510 <tempActions+0x238>)
 80013d0:	881a      	ldrh	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = dutyFanNill;
 80013d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001510 <tempActions+0x238>)
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	05db      	lsls	r3, r3, #23
 80013e0:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM16->CCR1 = dutyPumpNill;
 80013e2:	4b4c      	ldr	r3, [pc, #304]	@ (8001514 <tempActions+0x23c>)
 80013e4:	881a      	ldrh	r2, [r3, #0]
 80013e6:	4b48      	ldr	r3, [pc, #288]	@ (8001508 <tempActions+0x230>)
 80013e8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if(oilTemp > oilTh[0]){
 80013ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <tempActions+0x240>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	5e9b      	ldrsh	r3, [r3, r2]
 80013f0:	001a      	movs	r2, r3
 80013f2:	4b4a      	ldr	r3, [pc, #296]	@ (800151c <tempActions+0x244>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dd55      	ble.n	80014a6 <tempActions+0x1ce>
		HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, SET);
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	0059      	lsls	r1, r3, #1
 80013fe:	2390      	movs	r3, #144	@ 0x90
 8001400:	05db      	lsls	r3, r3, #23
 8001402:	2201      	movs	r2, #1
 8001404:	0018      	movs	r0, r3
 8001406:	f003 ff21 	bl	800524c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, SET);
 800140a:	4b3c      	ldr	r3, [pc, #240]	@ (80014fc <tempActions+0x224>)
 800140c:	2201      	movs	r2, #1
 800140e:	2108      	movs	r1, #8
 8001410:	0018      	movs	r0, r3
 8001412:	f003 ff1b 	bl	800524c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, SET);
 8001416:	2380      	movs	r3, #128	@ 0x80
 8001418:	0219      	lsls	r1, r3, #8
 800141a:	2390      	movs	r3, #144	@ 0x90
 800141c:	05db      	lsls	r3, r3, #23
 800141e:	2201      	movs	r2, #1
 8001420:	0018      	movs	r0, r3
 8001422:	f003 ff13 	bl	800524c <HAL_GPIO_WritePin>
		TIM3->CCR1 = dutyFanEctTh[0];
 8001426:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <tempActions+0x228>)
 8001428:	881a      	ldrh	r2, [r3, #0]
 800142a:	4b3d      	ldr	r3, [pc, #244]	@ (8001520 <tempActions+0x248>)
 800142c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = dutyFanEctTh[0];
 800142e:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <tempActions+0x228>)
 8001430:	881a      	ldrh	r2, [r3, #0]
 8001432:	4b3b      	ldr	r3, [pc, #236]	@ (8001520 <tempActions+0x248>)
 8001434:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM17->CCR1 = dutyPumpOilTh[0];
 8001436:	4b3b      	ldr	r3, [pc, #236]	@ (8001524 <tempActions+0x24c>)
 8001438:	881a      	ldrh	r2, [r3, #0]
 800143a:	4b3b      	ldr	r3, [pc, #236]	@ (8001528 <tempActions+0x250>)
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34

		if(oilTemp > oilTh[1]){
 800143e:	4b36      	ldr	r3, [pc, #216]	@ (8001518 <tempActions+0x240>)
 8001440:	2200      	movs	r2, #0
 8001442:	5e9b      	ldrsh	r3, [r3, r2]
 8001444:	001a      	movs	r2, r3
 8001446:	4b35      	ldr	r3, [pc, #212]	@ (800151c <tempActions+0x244>)
 8001448:	885b      	ldrh	r3, [r3, #2]
 800144a:	429a      	cmp	r2, r3
 800144c:	dd4d      	ble.n	80014ea <tempActions+0x212>
			TIM3->CCR1 = dutyFanEctTh[1];
 800144e:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <tempActions+0x228>)
 8001450:	885a      	ldrh	r2, [r3, #2]
 8001452:	4b33      	ldr	r3, [pc, #204]	@ (8001520 <tempActions+0x248>)
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM3->CCR2 = dutyFanEctTh[1];
 8001456:	4b2a      	ldr	r3, [pc, #168]	@ (8001500 <tempActions+0x228>)
 8001458:	885a      	ldrh	r2, [r3, #2]
 800145a:	4b31      	ldr	r3, [pc, #196]	@ (8001520 <tempActions+0x248>)
 800145c:	639a      	str	r2, [r3, #56]	@ 0x38
			TIM17->CCR1 = dutyPumpOilTh[1];
 800145e:	4b31      	ldr	r3, [pc, #196]	@ (8001524 <tempActions+0x24c>)
 8001460:	885a      	ldrh	r2, [r3, #2]
 8001462:	4b31      	ldr	r3, [pc, #196]	@ (8001528 <tempActions+0x250>)
 8001464:	635a      	str	r2, [r3, #52]	@ 0x34

			if(oilTemp > oilTh[2]){
 8001466:	4b2c      	ldr	r3, [pc, #176]	@ (8001518 <tempActions+0x240>)
 8001468:	2200      	movs	r2, #0
 800146a:	5e9b      	ldrsh	r3, [r3, r2]
 800146c:	001a      	movs	r2, r3
 800146e:	4b2b      	ldr	r3, [pc, #172]	@ (800151c <tempActions+0x244>)
 8001470:	889b      	ldrh	r3, [r3, #4]
 8001472:	429a      	cmp	r2, r3
 8001474:	dd39      	ble.n	80014ea <tempActions+0x212>
				TIM3->CCR1 = dutyFanEctTh[2];
 8001476:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <tempActions+0x228>)
 8001478:	889a      	ldrh	r2, [r3, #4]
 800147a:	4b29      	ldr	r3, [pc, #164]	@ (8001520 <tempActions+0x248>)
 800147c:	635a      	str	r2, [r3, #52]	@ 0x34
				TIM3->CCR2 = dutyFanEctTh[2];
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <tempActions+0x228>)
 8001480:	889a      	ldrh	r2, [r3, #4]
 8001482:	4b27      	ldr	r3, [pc, #156]	@ (8001520 <tempActions+0x248>)
 8001484:	639a      	str	r2, [r3, #56]	@ 0x38
				TIM17->CCR1 = dutyPumpOilTh[2];
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <tempActions+0x24c>)
 8001488:	889a      	ldrh	r2, [r3, #4]
 800148a:	4b27      	ldr	r3, [pc, #156]	@ (8001528 <tempActions+0x250>)
 800148c:	635a      	str	r2, [r3, #52]	@ 0x34

				if(oilTemp > oilTh[3]){
 800148e:	4b22      	ldr	r3, [pc, #136]	@ (8001518 <tempActions+0x240>)
 8001490:	2200      	movs	r2, #0
 8001492:	5e9b      	ldrsh	r3, [r3, r2]
 8001494:	001a      	movs	r2, r3
 8001496:	4b21      	ldr	r3, [pc, #132]	@ (800151c <tempActions+0x244>)
 8001498:	88db      	ldrh	r3, [r3, #6]
 800149a:	429a      	cmp	r2, r3
 800149c:	dd25      	ble.n	80014ea <tempActions+0x212>
					oilEmergencyFlag = 1;
 800149e:	4b23      	ldr	r3, [pc, #140]	@ (800152c <tempActions+0x254>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, RESET);
		TIM3->CCR1 = dutyFanNill;
		TIM3->CCR2 = dutyFanNill;
		TIM17->CCR1 = dutyPumpNill;
	}
}
 80014a4:	e021      	b.n	80014ea <tempActions+0x212>
		HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, RESET);
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	0059      	lsls	r1, r3, #1
 80014aa:	2390      	movs	r3, #144	@ 0x90
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	2200      	movs	r2, #0
 80014b0:	0018      	movs	r0, r3
 80014b2:	f003 fecb 	bl	800524c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, RESET);
 80014b6:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <tempActions+0x224>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	2108      	movs	r1, #8
 80014bc:	0018      	movs	r0, r3
 80014be:	f003 fec5 	bl	800524c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, RESET);
 80014c2:	2380      	movs	r3, #128	@ 0x80
 80014c4:	0219      	lsls	r1, r3, #8
 80014c6:	2390      	movs	r3, #144	@ 0x90
 80014c8:	05db      	lsls	r3, r3, #23
 80014ca:	2200      	movs	r2, #0
 80014cc:	0018      	movs	r0, r3
 80014ce:	f003 febd 	bl	800524c <HAL_GPIO_WritePin>
		TIM3->CCR1 = dutyFanNill;
 80014d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <tempActions+0x238>)
 80014d4:	881a      	ldrh	r2, [r3, #0]
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <tempActions+0x248>)
 80014d8:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM3->CCR2 = dutyFanNill;
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <tempActions+0x238>)
 80014dc:	881a      	ldrh	r2, [r3, #0]
 80014de:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <tempActions+0x248>)
 80014e0:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM17->CCR1 = dutyPumpNill;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <tempActions+0x23c>)
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	4b10      	ldr	r3, [pc, #64]	@ (8001528 <tempActions+0x250>)
 80014e8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80014ea:	46c0      	nop			@ (mov r8, r8)
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000436 	.word	0x20000436
 80014f4:	2000043c 	.word	0x2000043c
 80014f8:	20000000 	.word	0x20000000
 80014fc:	48000400 	.word	0x48000400
 8001500:	20000018 	.word	0x20000018
 8001504:	20000020 	.word	0x20000020
 8001508:	40014400 	.word	0x40014400
 800150c:	200005ea 	.word	0x200005ea
 8001510:	20000448 	.word	0x20000448
 8001514:	2000044a 	.word	0x2000044a
 8001518:	2000043e 	.word	0x2000043e
 800151c:	20000008 	.word	0x20000008
 8001520:	40000400 	.word	0x40000400
 8001524:	20000030 	.word	0x20000030
 8001528:	40014800 	.word	0x40014800
 800152c:	200005eb 	.word	0x200005eb

08001530 <sendCan>:

void sendCan(){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	send = 0;
 8001534:	4b51      	ldr	r3, [pc, #324]	@ (800167c <sendCan+0x14c>)
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]

	TxData_adc[0] = (adc8 >> 8) & 0xFF;
 800153a:	4b51      	ldr	r3, [pc, #324]	@ (8001680 <sendCan+0x150>)
 800153c:	2200      	movs	r2, #0
 800153e:	5e9b      	ldrsh	r3, [r3, r2]
 8001540:	121b      	asrs	r3, r3, #8
 8001542:	b21b      	sxth	r3, r3
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4b4f      	ldr	r3, [pc, #316]	@ (8001684 <sendCan+0x154>)
 8001548:	701a      	strb	r2, [r3, #0]
	TxData_adc[1] = adc8 & 0xFF;
 800154a:	4b4d      	ldr	r3, [pc, #308]	@ (8001680 <sendCan+0x150>)
 800154c:	2200      	movs	r2, #0
 800154e:	5e9b      	ldrsh	r3, [r3, r2]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4b4c      	ldr	r3, [pc, #304]	@ (8001684 <sendCan+0x154>)
 8001554:	705a      	strb	r2, [r3, #1]
	TxData_adc[2] = (adc2 >> 8) & 0xFF;
 8001556:	4b4c      	ldr	r3, [pc, #304]	@ (8001688 <sendCan+0x158>)
 8001558:	2200      	movs	r2, #0
 800155a:	5e9b      	ldrsh	r3, [r3, r2]
 800155c:	121b      	asrs	r3, r3, #8
 800155e:	b21b      	sxth	r3, r3
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b48      	ldr	r3, [pc, #288]	@ (8001684 <sendCan+0x154>)
 8001564:	709a      	strb	r2, [r3, #2]
	TxData_adc[3] = adc2 & 0xFF;
 8001566:	4b48      	ldr	r3, [pc, #288]	@ (8001688 <sendCan+0x158>)
 8001568:	2200      	movs	r2, #0
 800156a:	5e9b      	ldrsh	r3, [r3, r2]
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b45      	ldr	r3, [pc, #276]	@ (8001684 <sendCan+0x154>)
 8001570:	70da      	strb	r2, [r3, #3]
	TxData_adc[4] = (adc3 >> 8) & 0xFF;
 8001572:	4b46      	ldr	r3, [pc, #280]	@ (800168c <sendCan+0x15c>)
 8001574:	2200      	movs	r2, #0
 8001576:	5e9b      	ldrsh	r3, [r3, r2]
 8001578:	121b      	asrs	r3, r3, #8
 800157a:	b21b      	sxth	r3, r3
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b41      	ldr	r3, [pc, #260]	@ (8001684 <sendCan+0x154>)
 8001580:	711a      	strb	r2, [r3, #4]
	TxData_adc[5] = adc3 & 0xFF;
 8001582:	4b42      	ldr	r3, [pc, #264]	@ (800168c <sendCan+0x15c>)
 8001584:	2200      	movs	r2, #0
 8001586:	5e9b      	ldrsh	r3, [r3, r2]
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b3e      	ldr	r3, [pc, #248]	@ (8001684 <sendCan+0x154>)
 800158c:	715a      	strb	r2, [r3, #5]
	TxData_adc[6] = (adc4 >> 8) & 0xFF;
 800158e:	4b40      	ldr	r3, [pc, #256]	@ (8001690 <sendCan+0x160>)
 8001590:	2200      	movs	r2, #0
 8001592:	5e9b      	ldrsh	r3, [r3, r2]
 8001594:	121b      	asrs	r3, r3, #8
 8001596:	b21b      	sxth	r3, r3
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4b3a      	ldr	r3, [pc, #232]	@ (8001684 <sendCan+0x154>)
 800159c:	719a      	strb	r2, [r3, #6]
	TxData_adc[7] = adc4 & 0xFF;
 800159e:	4b3c      	ldr	r3, [pc, #240]	@ (8001690 <sendCan+0x160>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	5e9b      	ldrsh	r3, [r3, r2]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	4b37      	ldr	r3, [pc, #220]	@ (8001684 <sendCan+0x154>)
 80015a8:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc, TxData_adc, &TxMailBox);
 80015aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001694 <sendCan+0x164>)
 80015ac:	4a35      	ldr	r2, [pc, #212]	@ (8001684 <sendCan+0x154>)
 80015ae:	493a      	ldr	r1, [pc, #232]	@ (8001698 <sendCan+0x168>)
 80015b0:	483a      	ldr	r0, [pc, #232]	@ (800169c <sendCan+0x16c>)
 80015b2:	f002 fe31 	bl	8004218 <HAL_CAN_AddTxMessage>

	TxData_adc1[0] = (adc5 >> 8) & 0xFF;
 80015b6:	4b3a      	ldr	r3, [pc, #232]	@ (80016a0 <sendCan+0x170>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	5e9b      	ldrsh	r3, [r3, r2]
 80015bc:	121b      	asrs	r3, r3, #8
 80015be:	b21b      	sxth	r3, r3
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <sendCan+0x174>)
 80015c4:	701a      	strb	r2, [r3, #0]
	TxData_adc1[1] = adc5 & 0xFF;
 80015c6:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <sendCan+0x170>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	5e9b      	ldrsh	r3, [r3, r2]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b35      	ldr	r3, [pc, #212]	@ (80016a4 <sendCan+0x174>)
 80015d0:	705a      	strb	r2, [r3, #1]
	TxData_adc1[2] = (adc1 >> 8) & 0xFF;
 80015d2:	4b35      	ldr	r3, [pc, #212]	@ (80016a8 <sendCan+0x178>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	5e9b      	ldrsh	r3, [r3, r2]
 80015d8:	121b      	asrs	r3, r3, #8
 80015da:	b21b      	sxth	r3, r3
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <sendCan+0x174>)
 80015e0:	709a      	strb	r2, [r3, #2]
	TxData_adc1[3] = adc1 & 0xFF;
 80015e2:	4b31      	ldr	r3, [pc, #196]	@ (80016a8 <sendCan+0x178>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	5e9b      	ldrsh	r3, [r3, r2]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b2e      	ldr	r3, [pc, #184]	@ (80016a4 <sendCan+0x174>)
 80015ec:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc1, TxData_adc1, &TxMailBox);
 80015ee:	4b29      	ldr	r3, [pc, #164]	@ (8001694 <sendCan+0x164>)
 80015f0:	4a2c      	ldr	r2, [pc, #176]	@ (80016a4 <sendCan+0x174>)
 80015f2:	492e      	ldr	r1, [pc, #184]	@ (80016ac <sendCan+0x17c>)
 80015f4:	4829      	ldr	r0, [pc, #164]	@ (800169c <sendCan+0x16c>)
 80015f6:	f002 fe0f 	bl	8004218 <HAL_CAN_AddTxMessage>

	TxData_adc2[0] = (adc6 >> 8) & 0xFF;
 80015fa:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <sendCan+0x180>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	5e9b      	ldrsh	r3, [r3, r2]
 8001600:	121b      	asrs	r3, r3, #8
 8001602:	b21b      	sxth	r3, r3
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4b2b      	ldr	r3, [pc, #172]	@ (80016b4 <sendCan+0x184>)
 8001608:	701a      	strb	r2, [r3, #0]
	TxData_adc2[1] = adc6 & 0xFF;
 800160a:	4b29      	ldr	r3, [pc, #164]	@ (80016b0 <sendCan+0x180>)
 800160c:	2200      	movs	r2, #0
 800160e:	5e9b      	ldrsh	r3, [r3, r2]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <sendCan+0x184>)
 8001614:	705a      	strb	r2, [r3, #1]
	TxData_adc2[2] = (adc9 >> 8) & 0xFF;
 8001616:	4b28      	ldr	r3, [pc, #160]	@ (80016b8 <sendCan+0x188>)
 8001618:	2200      	movs	r2, #0
 800161a:	5e9b      	ldrsh	r3, [r3, r2]
 800161c:	121b      	asrs	r3, r3, #8
 800161e:	b21b      	sxth	r3, r3
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b24      	ldr	r3, [pc, #144]	@ (80016b4 <sendCan+0x184>)
 8001624:	709a      	strb	r2, [r3, #2]
	TxData_adc2[3] = adc9 & 0xFF;
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <sendCan+0x188>)
 8001628:	2200      	movs	r2, #0
 800162a:	5e9b      	ldrsh	r3, [r3, r2]
 800162c:	b2da      	uxtb	r2, r3
 800162e:	4b21      	ldr	r3, [pc, #132]	@ (80016b4 <sendCan+0x184>)
 8001630:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc2, TxData_adc2, &TxMailBox);
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <sendCan+0x164>)
 8001634:	4a1f      	ldr	r2, [pc, #124]	@ (80016b4 <sendCan+0x184>)
 8001636:	4921      	ldr	r1, [pc, #132]	@ (80016bc <sendCan+0x18c>)
 8001638:	4818      	ldr	r0, [pc, #96]	@ (800169c <sendCan+0x16c>)
 800163a:	f002 fded 	bl	8004218 <HAL_CAN_AddTxMessage>

	if(fuelPumpEmergencyFlag){
 800163e:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <sendCan+0x190>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d002      	beq.n	800164c <sendCan+0x11c>
		TxData_emergency[0] = 1;
 8001646:	4b1f      	ldr	r3, [pc, #124]	@ (80016c4 <sendCan+0x194>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
	}
	if(ectEmergencyFlag){
 800164c:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <sendCan+0x198>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d002      	beq.n	800165a <sendCan+0x12a>
		TxData_emergency[1] = 1;
 8001654:	4b1b      	ldr	r3, [pc, #108]	@ (80016c4 <sendCan+0x194>)
 8001656:	2201      	movs	r2, #1
 8001658:	705a      	strb	r2, [r3, #1]
	}
	if(oilEmergencyFlag){
 800165a:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <sendCan+0x19c>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <sendCan+0x138>
		TxData_emergency[2] = 1;
 8001662:	4b18      	ldr	r3, [pc, #96]	@ (80016c4 <sendCan+0x194>)
 8001664:	2201      	movs	r2, #1
 8001666:	709a      	strb	r2, [r3, #2]
	}
	HAL_CAN_AddTxMessage(&hcan, &TxHeader_emergency, TxData_emergency, &TxMailBox);
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <sendCan+0x164>)
 800166a:	4a16      	ldr	r2, [pc, #88]	@ (80016c4 <sendCan+0x194>)
 800166c:	4918      	ldr	r1, [pc, #96]	@ (80016d0 <sendCan+0x1a0>)
 800166e:	480b      	ldr	r0, [pc, #44]	@ (800169c <sendCan+0x16c>)
 8001670:	f002 fdd2 	bl	8004218 <HAL_CAN_AddTxMessage>

}
 8001674:	46c0      	nop			@ (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	46c0      	nop			@ (mov r8, r8)
 800167c:	200005ed 	.word	0x200005ed
 8001680:	2000042c 	.word	0x2000042c
 8001684:	200003b4 	.word	0x200003b4
 8001688:	20000420 	.word	0x20000420
 800168c:	20000422 	.word	0x20000422
 8001690:	20000424 	.word	0x20000424
 8001694:	200003b0 	.word	0x200003b0
 8001698:	20000308 	.word	0x20000308
 800169c:	200000f8 	.word	0x200000f8
 80016a0:	20000426 	.word	0x20000426
 80016a4:	200003bc 	.word	0x200003bc
 80016a8:	2000041e 	.word	0x2000041e
 80016ac:	20000320 	.word	0x20000320
 80016b0:	20000428 	.word	0x20000428
 80016b4:	200003c0 	.word	0x200003c0
 80016b8:	2000042e 	.word	0x2000042e
 80016bc:	20000338 	.word	0x20000338
 80016c0:	200005ec 	.word	0x200005ec
 80016c4:	200003cc 	.word	0x200003cc
 80016c8:	200005ea 	.word	0x200005ea
 80016cc:	200005eb 	.word	0x200005eb
 80016d0:	20000398 	.word	0x20000398

080016d4 <heartbeat>:

void heartbeat(){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	TxData_heartbeat[0] = 4;
 80016d8:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <heartbeat+0x24>)
 80016da:	2204      	movs	r2, #4
 80016dc:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader_heartbeat, TxData_heartbeat,&TxMailBox);
 80016de:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <heartbeat+0x28>)
 80016e0:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <heartbeat+0x24>)
 80016e2:	4907      	ldr	r1, [pc, #28]	@ (8001700 <heartbeat+0x2c>)
 80016e4:	4807      	ldr	r0, [pc, #28]	@ (8001704 <heartbeat+0x30>)
 80016e6:	f002 fd97 	bl	8004218 <HAL_CAN_AddTxMessage>
	heartbeatFlag = 0;
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <heartbeat+0x34>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]

}
 80016f0:	46c0      	nop			@ (mov r8, r8)
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	200003c4 	.word	0x200003c4
 80016fc:	200003b0 	.word	0x200003b0
 8001700:	20000380 	.word	0x20000380
 8001704:	200000f8 	.word	0x200000f8
 8001708:	200005ee 	.word	0x200005ee

0800170c <mapeoADC>:

void mapeoADC(){
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	adc1 = ((value_adc[0] * (3.3 / 4095)) - 0.26) * (1000 / 0.132); // ALTERNATOR
 8001710:	4bd7      	ldr	r3, [pc, #860]	@ (8001a70 <mapeoADC+0x364>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff fcaf 	bl	8001078 <__aeabi_i2d>
 800171a:	4ad6      	ldr	r2, [pc, #856]	@ (8001a74 <mapeoADC+0x368>)
 800171c:	4bd6      	ldr	r3, [pc, #856]	@ (8001a78 <mapeoADC+0x36c>)
 800171e:	f7fe fd7f 	bl	8000220 <__aeabi_dmul>
 8001722:	0002      	movs	r2, r0
 8001724:	000b      	movs	r3, r1
 8001726:	0010      	movs	r0, r2
 8001728:	0019      	movs	r1, r3
 800172a:	4ad4      	ldr	r2, [pc, #848]	@ (8001a7c <mapeoADC+0x370>)
 800172c:	4bd4      	ldr	r3, [pc, #848]	@ (8001a80 <mapeoADC+0x374>)
 800172e:	f7ff f85d 	bl	80007ec <__aeabi_dsub>
 8001732:	0002      	movs	r2, r0
 8001734:	000b      	movs	r3, r1
 8001736:	0010      	movs	r0, r2
 8001738:	0019      	movs	r1, r3
 800173a:	4ad2      	ldr	r2, [pc, #840]	@ (8001a84 <mapeoADC+0x378>)
 800173c:	4bd2      	ldr	r3, [pc, #840]	@ (8001a88 <mapeoADC+0x37c>)
 800173e:	f7fe fd6f 	bl	8000220 <__aeabi_dmul>
 8001742:	0002      	movs	r2, r0
 8001744:	000b      	movs	r3, r1
 8001746:	0010      	movs	r0, r2
 8001748:	0019      	movs	r1, r3
 800174a:	f7ff fc59 	bl	8001000 <__aeabi_d2iz>
 800174e:	0003      	movs	r3, r0
 8001750:	b21a      	sxth	r2, r3
 8001752:	4bce      	ldr	r3, [pc, #824]	@ (8001a8c <mapeoADC+0x380>)
 8001754:	801a      	strh	r2, [r3, #0]
	adc2 = ((value_adc[1] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); // WPL
 8001756:	4bc6      	ldr	r3, [pc, #792]	@ (8001a70 <mapeoADC+0x364>)
 8001758:	885b      	ldrh	r3, [r3, #2]
 800175a:	0018      	movs	r0, r3
 800175c:	f7ff fc8c 	bl	8001078 <__aeabi_i2d>
 8001760:	4ac4      	ldr	r2, [pc, #784]	@ (8001a74 <mapeoADC+0x368>)
 8001762:	4bc5      	ldr	r3, [pc, #788]	@ (8001a78 <mapeoADC+0x36c>)
 8001764:	f7fe fd5c 	bl	8000220 <__aeabi_dmul>
 8001768:	0002      	movs	r2, r0
 800176a:	000b      	movs	r3, r1
 800176c:	0010      	movs	r0, r2
 800176e:	0019      	movs	r1, r3
 8001770:	4ac2      	ldr	r2, [pc, #776]	@ (8001a7c <mapeoADC+0x370>)
 8001772:	4bc3      	ldr	r3, [pc, #780]	@ (8001a80 <mapeoADC+0x374>)
 8001774:	f7ff f83a 	bl	80007ec <__aeabi_dsub>
 8001778:	0002      	movs	r2, r0
 800177a:	000b      	movs	r3, r1
 800177c:	0010      	movs	r0, r2
 800177e:	0019      	movs	r1, r3
 8001780:	4ac0      	ldr	r2, [pc, #768]	@ (8001a84 <mapeoADC+0x378>)
 8001782:	4bc3      	ldr	r3, [pc, #780]	@ (8001a90 <mapeoADC+0x384>)
 8001784:	f7fe fd4c 	bl	8000220 <__aeabi_dmul>
 8001788:	0002      	movs	r2, r0
 800178a:	000b      	movs	r3, r1
 800178c:	0010      	movs	r0, r2
 800178e:	0019      	movs	r1, r3
 8001790:	f7ff fc36 	bl	8001000 <__aeabi_d2iz>
 8001794:	0003      	movs	r3, r0
 8001796:	b21a      	sxth	r2, r3
 8001798:	4bbe      	ldr	r3, [pc, #760]	@ (8001a94 <mapeoADC+0x388>)
 800179a:	801a      	strh	r2, [r3, #0]
	adc3 = ((value_adc[2] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); // WPR
 800179c:	4bb4      	ldr	r3, [pc, #720]	@ (8001a70 <mapeoADC+0x364>)
 800179e:	889b      	ldrh	r3, [r3, #4]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff fc69 	bl	8001078 <__aeabi_i2d>
 80017a6:	4ab3      	ldr	r2, [pc, #716]	@ (8001a74 <mapeoADC+0x368>)
 80017a8:	4bb3      	ldr	r3, [pc, #716]	@ (8001a78 <mapeoADC+0x36c>)
 80017aa:	f7fe fd39 	bl	8000220 <__aeabi_dmul>
 80017ae:	0002      	movs	r2, r0
 80017b0:	000b      	movs	r3, r1
 80017b2:	0010      	movs	r0, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	4ab1      	ldr	r2, [pc, #708]	@ (8001a7c <mapeoADC+0x370>)
 80017b8:	4bb1      	ldr	r3, [pc, #708]	@ (8001a80 <mapeoADC+0x374>)
 80017ba:	f7ff f817 	bl	80007ec <__aeabi_dsub>
 80017be:	0002      	movs	r2, r0
 80017c0:	000b      	movs	r3, r1
 80017c2:	0010      	movs	r0, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	4aaf      	ldr	r2, [pc, #700]	@ (8001a84 <mapeoADC+0x378>)
 80017c8:	4bb1      	ldr	r3, [pc, #708]	@ (8001a90 <mapeoADC+0x384>)
 80017ca:	f7fe fd29 	bl	8000220 <__aeabi_dmul>
 80017ce:	0002      	movs	r2, r0
 80017d0:	000b      	movs	r3, r1
 80017d2:	0010      	movs	r0, r2
 80017d4:	0019      	movs	r1, r3
 80017d6:	f7ff fc13 	bl	8001000 <__aeabi_d2iz>
 80017da:	0003      	movs	r3, r0
 80017dc:	b21a      	sxth	r2, r3
 80017de:	4bae      	ldr	r3, [pc, #696]	@ (8001a98 <mapeoADC+0x38c>)
 80017e0:	801a      	strh	r2, [r3, #0]
	adc4 = ((value_adc[3] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); // F1R
 80017e2:	4ba3      	ldr	r3, [pc, #652]	@ (8001a70 <mapeoADC+0x364>)
 80017e4:	88db      	ldrh	r3, [r3, #6]
 80017e6:	0018      	movs	r0, r3
 80017e8:	f7ff fc46 	bl	8001078 <__aeabi_i2d>
 80017ec:	4aa1      	ldr	r2, [pc, #644]	@ (8001a74 <mapeoADC+0x368>)
 80017ee:	4ba2      	ldr	r3, [pc, #648]	@ (8001a78 <mapeoADC+0x36c>)
 80017f0:	f7fe fd16 	bl	8000220 <__aeabi_dmul>
 80017f4:	0002      	movs	r2, r0
 80017f6:	000b      	movs	r3, r1
 80017f8:	0010      	movs	r0, r2
 80017fa:	0019      	movs	r1, r3
 80017fc:	4a9f      	ldr	r2, [pc, #636]	@ (8001a7c <mapeoADC+0x370>)
 80017fe:	4ba0      	ldr	r3, [pc, #640]	@ (8001a80 <mapeoADC+0x374>)
 8001800:	f7fe fff4 	bl	80007ec <__aeabi_dsub>
 8001804:	0002      	movs	r2, r0
 8001806:	000b      	movs	r3, r1
 8001808:	0010      	movs	r0, r2
 800180a:	0019      	movs	r1, r3
 800180c:	4a9d      	ldr	r2, [pc, #628]	@ (8001a84 <mapeoADC+0x378>)
 800180e:	4ba0      	ldr	r3, [pc, #640]	@ (8001a90 <mapeoADC+0x384>)
 8001810:	f7fe fd06 	bl	8000220 <__aeabi_dmul>
 8001814:	0002      	movs	r2, r0
 8001816:	000b      	movs	r3, r1
 8001818:	0010      	movs	r0, r2
 800181a:	0019      	movs	r1, r3
 800181c:	f7ff fbf0 	bl	8001000 <__aeabi_d2iz>
 8001820:	0003      	movs	r3, r0
 8001822:	b21a      	sxth	r2, r3
 8001824:	4b9d      	ldr	r3, [pc, #628]	@ (8001a9c <mapeoADC+0x390>)
 8001826:	801a      	strh	r2, [r3, #0]
	adc5 = ((value_adc[4] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); // F2R
 8001828:	4b91      	ldr	r3, [pc, #580]	@ (8001a70 <mapeoADC+0x364>)
 800182a:	891b      	ldrh	r3, [r3, #8]
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fc23 	bl	8001078 <__aeabi_i2d>
 8001832:	4a90      	ldr	r2, [pc, #576]	@ (8001a74 <mapeoADC+0x368>)
 8001834:	4b90      	ldr	r3, [pc, #576]	@ (8001a78 <mapeoADC+0x36c>)
 8001836:	f7fe fcf3 	bl	8000220 <__aeabi_dmul>
 800183a:	0002      	movs	r2, r0
 800183c:	000b      	movs	r3, r1
 800183e:	0010      	movs	r0, r2
 8001840:	0019      	movs	r1, r3
 8001842:	4a8e      	ldr	r2, [pc, #568]	@ (8001a7c <mapeoADC+0x370>)
 8001844:	4b8e      	ldr	r3, [pc, #568]	@ (8001a80 <mapeoADC+0x374>)
 8001846:	f7fe ffd1 	bl	80007ec <__aeabi_dsub>
 800184a:	0002      	movs	r2, r0
 800184c:	000b      	movs	r3, r1
 800184e:	0010      	movs	r0, r2
 8001850:	0019      	movs	r1, r3
 8001852:	4a8c      	ldr	r2, [pc, #560]	@ (8001a84 <mapeoADC+0x378>)
 8001854:	4b8e      	ldr	r3, [pc, #568]	@ (8001a90 <mapeoADC+0x384>)
 8001856:	f7fe fce3 	bl	8000220 <__aeabi_dmul>
 800185a:	0002      	movs	r2, r0
 800185c:	000b      	movs	r3, r1
 800185e:	0010      	movs	r0, r2
 8001860:	0019      	movs	r1, r3
 8001862:	f7ff fbcd 	bl	8001000 <__aeabi_d2iz>
 8001866:	0003      	movs	r3, r0
 8001868:	b21a      	sxth	r2, r3
 800186a:	4b8d      	ldr	r3, [pc, #564]	@ (8001aa0 <mapeoADC+0x394>)
 800186c:	801a      	strh	r2, [r3, #0]
	adc6 = ((value_adc[5] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); // F1L
 800186e:	4b80      	ldr	r3, [pc, #512]	@ (8001a70 <mapeoADC+0x364>)
 8001870:	895b      	ldrh	r3, [r3, #10]
 8001872:	0018      	movs	r0, r3
 8001874:	f7ff fc00 	bl	8001078 <__aeabi_i2d>
 8001878:	4a7e      	ldr	r2, [pc, #504]	@ (8001a74 <mapeoADC+0x368>)
 800187a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a78 <mapeoADC+0x36c>)
 800187c:	f7fe fcd0 	bl	8000220 <__aeabi_dmul>
 8001880:	0002      	movs	r2, r0
 8001882:	000b      	movs	r3, r1
 8001884:	0010      	movs	r0, r2
 8001886:	0019      	movs	r1, r3
 8001888:	4a7c      	ldr	r2, [pc, #496]	@ (8001a7c <mapeoADC+0x370>)
 800188a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a80 <mapeoADC+0x374>)
 800188c:	f7fe ffae 	bl	80007ec <__aeabi_dsub>
 8001890:	0002      	movs	r2, r0
 8001892:	000b      	movs	r3, r1
 8001894:	0010      	movs	r0, r2
 8001896:	0019      	movs	r1, r3
 8001898:	4a7a      	ldr	r2, [pc, #488]	@ (8001a84 <mapeoADC+0x378>)
 800189a:	4b7d      	ldr	r3, [pc, #500]	@ (8001a90 <mapeoADC+0x384>)
 800189c:	f7fe fcc0 	bl	8000220 <__aeabi_dmul>
 80018a0:	0002      	movs	r2, r0
 80018a2:	000b      	movs	r3, r1
 80018a4:	0010      	movs	r0, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	f7ff fbaa 	bl	8001000 <__aeabi_d2iz>
 80018ac:	0003      	movs	r3, r0
 80018ae:	b21a      	sxth	r2, r3
 80018b0:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa4 <mapeoADC+0x398>)
 80018b2:	801a      	strh	r2, [r3, #0]
	adc7 = ((value_adc[6] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); // F2L
 80018b4:	4b6e      	ldr	r3, [pc, #440]	@ (8001a70 <mapeoADC+0x364>)
 80018b6:	899b      	ldrh	r3, [r3, #12]
 80018b8:	0018      	movs	r0, r3
 80018ba:	f7ff fbdd 	bl	8001078 <__aeabi_i2d>
 80018be:	4a6d      	ldr	r2, [pc, #436]	@ (8001a74 <mapeoADC+0x368>)
 80018c0:	4b6d      	ldr	r3, [pc, #436]	@ (8001a78 <mapeoADC+0x36c>)
 80018c2:	f7fe fcad 	bl	8000220 <__aeabi_dmul>
 80018c6:	0002      	movs	r2, r0
 80018c8:	000b      	movs	r3, r1
 80018ca:	0010      	movs	r0, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	4a6b      	ldr	r2, [pc, #428]	@ (8001a7c <mapeoADC+0x370>)
 80018d0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a80 <mapeoADC+0x374>)
 80018d2:	f7fe ff8b 	bl	80007ec <__aeabi_dsub>
 80018d6:	0002      	movs	r2, r0
 80018d8:	000b      	movs	r3, r1
 80018da:	0010      	movs	r0, r2
 80018dc:	0019      	movs	r1, r3
 80018de:	4a69      	ldr	r2, [pc, #420]	@ (8001a84 <mapeoADC+0x378>)
 80018e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a90 <mapeoADC+0x384>)
 80018e2:	f7fe fc9d 	bl	8000220 <__aeabi_dmul>
 80018e6:	0002      	movs	r2, r0
 80018e8:	000b      	movs	r3, r1
 80018ea:	0010      	movs	r0, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	f7ff fb87 	bl	8001000 <__aeabi_d2iz>
 80018f2:	0003      	movs	r3, r0
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa8 <mapeoADC+0x39c>)
 80018f8:	801a      	strh	r2, [r3, #0]
	adc8 = ((value_adc[7] * (3.3 / 4095)) - 0.27) * (1000 / 0.088); // 12VNP
 80018fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <mapeoADC+0x364>)
 80018fc:	89db      	ldrh	r3, [r3, #14]
 80018fe:	0018      	movs	r0, r3
 8001900:	f7ff fbba 	bl	8001078 <__aeabi_i2d>
 8001904:	4a5b      	ldr	r2, [pc, #364]	@ (8001a74 <mapeoADC+0x368>)
 8001906:	4b5c      	ldr	r3, [pc, #368]	@ (8001a78 <mapeoADC+0x36c>)
 8001908:	f7fe fc8a 	bl	8000220 <__aeabi_dmul>
 800190c:	0002      	movs	r2, r0
 800190e:	000b      	movs	r3, r1
 8001910:	0010      	movs	r0, r2
 8001912:	0019      	movs	r1, r3
 8001914:	4a65      	ldr	r2, [pc, #404]	@ (8001aac <mapeoADC+0x3a0>)
 8001916:	4b66      	ldr	r3, [pc, #408]	@ (8001ab0 <mapeoADC+0x3a4>)
 8001918:	f7fe ff68 	bl	80007ec <__aeabi_dsub>
 800191c:	0002      	movs	r2, r0
 800191e:	000b      	movs	r3, r1
 8001920:	0010      	movs	r0, r2
 8001922:	0019      	movs	r1, r3
 8001924:	4a63      	ldr	r2, [pc, #396]	@ (8001ab4 <mapeoADC+0x3a8>)
 8001926:	4b64      	ldr	r3, [pc, #400]	@ (8001ab8 <mapeoADC+0x3ac>)
 8001928:	f7fe fc7a 	bl	8000220 <__aeabi_dmul>
 800192c:	0002      	movs	r2, r0
 800192e:	000b      	movs	r3, r1
 8001930:	0010      	movs	r0, r2
 8001932:	0019      	movs	r1, r3
 8001934:	f7ff fb64 	bl	8001000 <__aeabi_d2iz>
 8001938:	0003      	movs	r3, r0
 800193a:	b21a      	sxth	r2, r3
 800193c:	4b5f      	ldr	r3, [pc, #380]	@ (8001abc <mapeoADC+0x3b0>)
 800193e:	801a      	strh	r2, [r3, #0]
	adc9 = (((value_adc[8] * (3.3 / 4095) - 0.5)) * (1000 / 10) * 1000); // calibración del sensor 0.01V/ºC
 8001940:	4b4b      	ldr	r3, [pc, #300]	@ (8001a70 <mapeoADC+0x364>)
 8001942:	8a1b      	ldrh	r3, [r3, #16]
 8001944:	0018      	movs	r0, r3
 8001946:	f7ff fb97 	bl	8001078 <__aeabi_i2d>
 800194a:	4a4a      	ldr	r2, [pc, #296]	@ (8001a74 <mapeoADC+0x368>)
 800194c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a78 <mapeoADC+0x36c>)
 800194e:	f7fe fc67 	bl	8000220 <__aeabi_dmul>
 8001952:	0002      	movs	r2, r0
 8001954:	000b      	movs	r3, r1
 8001956:	0010      	movs	r0, r2
 8001958:	0019      	movs	r1, r3
 800195a:	2200      	movs	r2, #0
 800195c:	4b58      	ldr	r3, [pc, #352]	@ (8001ac0 <mapeoADC+0x3b4>)
 800195e:	f7fe ff45 	bl	80007ec <__aeabi_dsub>
 8001962:	0002      	movs	r2, r0
 8001964:	000b      	movs	r3, r1
 8001966:	0010      	movs	r0, r2
 8001968:	0019      	movs	r1, r3
 800196a:	2200      	movs	r2, #0
 800196c:	4b55      	ldr	r3, [pc, #340]	@ (8001ac4 <mapeoADC+0x3b8>)
 800196e:	f7fe fc57 	bl	8000220 <__aeabi_dmul>
 8001972:	0002      	movs	r2, r0
 8001974:	000b      	movs	r3, r1
 8001976:	0010      	movs	r0, r2
 8001978:	0019      	movs	r1, r3
 800197a:	2200      	movs	r2, #0
 800197c:	4b52      	ldr	r3, [pc, #328]	@ (8001ac8 <mapeoADC+0x3bc>)
 800197e:	f7fe fc4f 	bl	8000220 <__aeabi_dmul>
 8001982:	0002      	movs	r2, r0
 8001984:	000b      	movs	r3, r1
 8001986:	0010      	movs	r0, r2
 8001988:	0019      	movs	r1, r3
 800198a:	f7ff fb39 	bl	8001000 <__aeabi_d2iz>
 800198e:	0003      	movs	r3, r0
 8001990:	b21a      	sxth	r2, r3
 8001992:	4b4e      	ldr	r3, [pc, #312]	@ (8001acc <mapeoADC+0x3c0>)
 8001994:	801a      	strh	r2, [r3, #0]
	adc10 = ((adcSpiBuffer[0] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); //Injection
 8001996:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad0 <mapeoADC+0x3c4>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	0018      	movs	r0, r3
 800199c:	f7ff fb6c 	bl	8001078 <__aeabi_i2d>
 80019a0:	4a34      	ldr	r2, [pc, #208]	@ (8001a74 <mapeoADC+0x368>)
 80019a2:	4b35      	ldr	r3, [pc, #212]	@ (8001a78 <mapeoADC+0x36c>)
 80019a4:	f7fe fc3c 	bl	8000220 <__aeabi_dmul>
 80019a8:	0002      	movs	r2, r0
 80019aa:	000b      	movs	r3, r1
 80019ac:	0010      	movs	r0, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	4a32      	ldr	r2, [pc, #200]	@ (8001a7c <mapeoADC+0x370>)
 80019b2:	4b33      	ldr	r3, [pc, #204]	@ (8001a80 <mapeoADC+0x374>)
 80019b4:	f7fe ff1a 	bl	80007ec <__aeabi_dsub>
 80019b8:	0002      	movs	r2, r0
 80019ba:	000b      	movs	r3, r1
 80019bc:	0010      	movs	r0, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	4a30      	ldr	r2, [pc, #192]	@ (8001a84 <mapeoADC+0x378>)
 80019c2:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <mapeoADC+0x384>)
 80019c4:	f7fe fc2c 	bl	8000220 <__aeabi_dmul>
 80019c8:	0002      	movs	r2, r0
 80019ca:	000b      	movs	r3, r1
 80019cc:	0010      	movs	r0, r2
 80019ce:	0019      	movs	r1, r3
 80019d0:	f7ff fb16 	bl	8001000 <__aeabi_d2iz>
 80019d4:	0003      	movs	r3, r0
 80019d6:	b21a      	sxth	r2, r3
 80019d8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad4 <mapeoADC+0x3c8>)
 80019da:	801a      	strh	r2, [r3, #0]
	adc11 = ((adcSpiBuffer[1] * (3.3 / 4095)) - 0.26) * (1000 / 0.264); // Fuel Pump
 80019dc:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad0 <mapeoADC+0x3c4>)
 80019de:	885b      	ldrh	r3, [r3, #2]
 80019e0:	0018      	movs	r0, r3
 80019e2:	f7ff fb49 	bl	8001078 <__aeabi_i2d>
 80019e6:	4a23      	ldr	r2, [pc, #140]	@ (8001a74 <mapeoADC+0x368>)
 80019e8:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <mapeoADC+0x36c>)
 80019ea:	f7fe fc19 	bl	8000220 <__aeabi_dmul>
 80019ee:	0002      	movs	r2, r0
 80019f0:	000b      	movs	r3, r1
 80019f2:	0010      	movs	r0, r2
 80019f4:	0019      	movs	r1, r3
 80019f6:	4a21      	ldr	r2, [pc, #132]	@ (8001a7c <mapeoADC+0x370>)
 80019f8:	4b21      	ldr	r3, [pc, #132]	@ (8001a80 <mapeoADC+0x374>)
 80019fa:	f7fe fef7 	bl	80007ec <__aeabi_dsub>
 80019fe:	0002      	movs	r2, r0
 8001a00:	000b      	movs	r3, r1
 8001a02:	0010      	movs	r0, r2
 8001a04:	0019      	movs	r1, r3
 8001a06:	4a1f      	ldr	r2, [pc, #124]	@ (8001a84 <mapeoADC+0x378>)
 8001a08:	4b21      	ldr	r3, [pc, #132]	@ (8001a90 <mapeoADC+0x384>)
 8001a0a:	f7fe fc09 	bl	8000220 <__aeabi_dmul>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	000b      	movs	r3, r1
 8001a12:	0010      	movs	r0, r2
 8001a14:	0019      	movs	r1, r3
 8001a16:	f7ff faf3 	bl	8001000 <__aeabi_d2iz>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad8 <mapeoADC+0x3cc>)
 8001a20:	801a      	strh	r2, [r3, #0]
	adc12 = ((adcSpiBuffer[2] * (3.3 / 4095)) - 0.27) * (1000 / 0.088); // Ignition
 8001a22:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <mapeoADC+0x3c4>)
 8001a24:	889b      	ldrh	r3, [r3, #4]
 8001a26:	0018      	movs	r0, r3
 8001a28:	f7ff fb26 	bl	8001078 <__aeabi_i2d>
 8001a2c:	4a11      	ldr	r2, [pc, #68]	@ (8001a74 <mapeoADC+0x368>)
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <mapeoADC+0x36c>)
 8001a30:	f7fe fbf6 	bl	8000220 <__aeabi_dmul>
 8001a34:	0002      	movs	r2, r0
 8001a36:	000b      	movs	r3, r1
 8001a38:	0010      	movs	r0, r2
 8001a3a:	0019      	movs	r1, r3
 8001a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001aac <mapeoADC+0x3a0>)
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab0 <mapeoADC+0x3a4>)
 8001a40:	f7fe fed4 	bl	80007ec <__aeabi_dsub>
 8001a44:	0002      	movs	r2, r0
 8001a46:	000b      	movs	r3, r1
 8001a48:	0010      	movs	r0, r2
 8001a4a:	0019      	movs	r1, r3
 8001a4c:	4a19      	ldr	r2, [pc, #100]	@ (8001ab4 <mapeoADC+0x3a8>)
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <mapeoADC+0x3ac>)
 8001a50:	f7fe fbe6 	bl	8000220 <__aeabi_dmul>
 8001a54:	0002      	movs	r2, r0
 8001a56:	000b      	movs	r3, r1
 8001a58:	0010      	movs	r0, r2
 8001a5a:	0019      	movs	r1, r3
 8001a5c:	f7ff fad0 	bl	8001000 <__aeabi_d2iz>
 8001a60:	0003      	movs	r3, r0
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	4b1d      	ldr	r3, [pc, #116]	@ (8001adc <mapeoADC+0x3d0>)
 8001a66:	801a      	strh	r2, [r3, #0]
}
 8001a68:	46c0      	nop			@ (mov r8, r8)
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	20000400 	.word	0x20000400
 8001a74:	e734d9b4 	.word	0xe734d9b4
 8001a78:	3f4a680c 	.word	0x3f4a680c
 8001a7c:	0a3d70a4 	.word	0x0a3d70a4
 8001a80:	3fd0a3d7 	.word	0x3fd0a3d7
 8001a84:	f07c1f07 	.word	0xf07c1f07
 8001a88:	40bd97c1 	.word	0x40bd97c1
 8001a8c:	2000041e 	.word	0x2000041e
 8001a90:	40ad97c1 	.word	0x40ad97c1
 8001a94:	20000420 	.word	0x20000420
 8001a98:	20000422 	.word	0x20000422
 8001a9c:	20000424 	.word	0x20000424
 8001aa0:	20000426 	.word	0x20000426
 8001aa4:	20000428 	.word	0x20000428
 8001aa8:	2000042a 	.word	0x2000042a
 8001aac:	147ae148 	.word	0x147ae148
 8001ab0:	3fd147ae 	.word	0x3fd147ae
 8001ab4:	745d1746 	.word	0x745d1746
 8001ab8:	40c631d1 	.word	0x40c631d1
 8001abc:	2000042c 	.word	0x2000042c
 8001ac0:	3fe00000 	.word	0x3fe00000
 8001ac4:	40590000 	.word	0x40590000
 8001ac8:	408f4000 	.word	0x408f4000
 8001acc:	2000042e 	.word	0x2000042e
 8001ad0:	20000414 	.word	0x20000414
 8001ad4:	20000430 	.word	0x20000430
 8001ad8:	20000432 	.word	0x20000432
 8001adc:	20000434 	.word	0x20000434

08001ae0 <battControl>:

void battControl(){
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
	battDataFlag = 0;
 8001ae6:	4b59      	ldr	r3, [pc, #356]	@ (8001c4c <battControl+0x16c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
	uint8_t arrayLength = (sizeof(dutyFanEctTh)/sizeof(dutyFanEctTh[0]));
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2203      	movs	r2, #3
 8001af0:	701a      	strb	r2, [r3, #0]
	if((battVoltAverage < battTh[2])&&(battVoltFlagDone[0] == 0)){
 8001af2:	4b57      	ldr	r3, [pc, #348]	@ (8001c50 <battControl+0x170>)
 8001af4:	889a      	ldrh	r2, [r3, #4]
 8001af6:	4b57      	ldr	r3, [pc, #348]	@ (8001c54 <battControl+0x174>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d92d      	bls.n	8001b5a <battControl+0x7a>
 8001afe:	4b56      	ldr	r3, [pc, #344]	@ (8001c58 <battControl+0x178>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d129      	bne.n	8001b5a <battControl+0x7a>
		battVoltFlagDone[0] = 1;
 8001b06:	4b54      	ldr	r3, [pc, #336]	@ (8001c58 <battControl+0x178>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; (i<arrayLength); i++){
 8001b0c:	1dfb      	adds	r3, r7, #7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
 8001b12:	e01c      	b.n	8001b4e <battControl+0x6e>
			dutyFanEctTh[i] = dutyFanEctTh[i]-5;
 8001b14:	1dfb      	adds	r3, r7, #7
 8001b16:	781a      	ldrb	r2, [r3, #0]
 8001b18:	4b50      	ldr	r3, [pc, #320]	@ (8001c5c <battControl+0x17c>)
 8001b1a:	0052      	lsls	r2, r2, #1
 8001b1c:	5ad3      	ldrh	r3, [r2, r3]
 8001b1e:	1dfa      	adds	r2, r7, #7
 8001b20:	7812      	ldrb	r2, [r2, #0]
 8001b22:	3b05      	subs	r3, #5
 8001b24:	b299      	uxth	r1, r3
 8001b26:	4b4d      	ldr	r3, [pc, #308]	@ (8001c5c <battControl+0x17c>)
 8001b28:	0052      	lsls	r2, r2, #1
 8001b2a:	52d1      	strh	r1, [r2, r3]
			dutyFanOilTh[i] = dutyFanOilTh[i]-5;
 8001b2c:	1dfb      	adds	r3, r7, #7
 8001b2e:	781a      	ldrb	r2, [r3, #0]
 8001b30:	4b4b      	ldr	r3, [pc, #300]	@ (8001c60 <battControl+0x180>)
 8001b32:	0052      	lsls	r2, r2, #1
 8001b34:	5ad3      	ldrh	r3, [r2, r3]
 8001b36:	1dfa      	adds	r2, r7, #7
 8001b38:	7812      	ldrb	r2, [r2, #0]
 8001b3a:	3b05      	subs	r3, #5
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	4b48      	ldr	r3, [pc, #288]	@ (8001c60 <battControl+0x180>)
 8001b40:	0052      	lsls	r2, r2, #1
 8001b42:	52d1      	strh	r1, [r2, r3]
		for(uint8_t i=0; (i<arrayLength); i++){
 8001b44:	1dfb      	adds	r3, r7, #7
 8001b46:	781a      	ldrb	r2, [r3, #0]
 8001b48:	1dfb      	adds	r3, r7, #7
 8001b4a:	3201      	adds	r2, #1
 8001b4c:	701a      	strb	r2, [r3, #0]
 8001b4e:	1dfa      	adds	r2, r7, #7
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d3dc      	bcc.n	8001b14 <battControl+0x34>
		}
	}
	if((battVoltAverage < battTh[1])&&(battVoltFlagDone[1] == 0)){
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c50 <battControl+0x170>)
 8001b5c:	885a      	ldrh	r2, [r3, #2]
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c54 <battControl+0x174>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d92d      	bls.n	8001bc2 <battControl+0xe2>
 8001b66:	4b3c      	ldr	r3, [pc, #240]	@ (8001c58 <battControl+0x178>)
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d129      	bne.n	8001bc2 <battControl+0xe2>
		battVoltFlagDone[1] = 1;
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c58 <battControl+0x178>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	705a      	strb	r2, [r3, #1]
		for(uint8_t i=0; (i<arrayLength); i++){
 8001b74:	1dbb      	adds	r3, r7, #6
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	e01c      	b.n	8001bb6 <battControl+0xd6>
			dutyFanEctTh[i] = dutyFanEctTh[i]-7;
 8001b7c:	1dbb      	adds	r3, r7, #6
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	4b36      	ldr	r3, [pc, #216]	@ (8001c5c <battControl+0x17c>)
 8001b82:	0052      	lsls	r2, r2, #1
 8001b84:	5ad3      	ldrh	r3, [r2, r3]
 8001b86:	1dba      	adds	r2, r7, #6
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	3b07      	subs	r3, #7
 8001b8c:	b299      	uxth	r1, r3
 8001b8e:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <battControl+0x17c>)
 8001b90:	0052      	lsls	r2, r2, #1
 8001b92:	52d1      	strh	r1, [r2, r3]
			dutyFanOilTh[i] = dutyFanOilTh[i]-7;
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	781a      	ldrb	r2, [r3, #0]
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <battControl+0x180>)
 8001b9a:	0052      	lsls	r2, r2, #1
 8001b9c:	5ad3      	ldrh	r3, [r2, r3]
 8001b9e:	1dba      	adds	r2, r7, #6
 8001ba0:	7812      	ldrb	r2, [r2, #0]
 8001ba2:	3b07      	subs	r3, #7
 8001ba4:	b299      	uxth	r1, r3
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	@ (8001c60 <battControl+0x180>)
 8001ba8:	0052      	lsls	r2, r2, #1
 8001baa:	52d1      	strh	r1, [r2, r3]
		for(uint8_t i=0; (i<arrayLength); i++){
 8001bac:	1dbb      	adds	r3, r7, #6
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	1dbb      	adds	r3, r7, #6
 8001bb2:	3201      	adds	r2, #1
 8001bb4:	701a      	strb	r2, [r3, #0]
 8001bb6:	1dba      	adds	r2, r7, #6
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	7812      	ldrb	r2, [r2, #0]
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3dc      	bcc.n	8001b7c <battControl+0x9c>

		}
	}
	if(battVoltAverage < battTh[0]){
 8001bc2:	4b23      	ldr	r3, [pc, #140]	@ (8001c50 <battControl+0x170>)
 8001bc4:	881a      	ldrh	r2, [r3, #0]
 8001bc6:	4b23      	ldr	r3, [pc, #140]	@ (8001c54 <battControl+0x174>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d934      	bls.n	8001c38 <battControl+0x158>
		V12NpOff();
 8001bce:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <battControl+0x184>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f003 fb39 	bl	800524c <HAL_GPIO_WritePin>
		if(battVoltFlagDone[2] == 0){
 8001bda:	4b1f      	ldr	r3, [pc, #124]	@ (8001c58 <battControl+0x178>)
 8001bdc:	789b      	ldrb	r3, [r3, #2]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d130      	bne.n	8001c44 <battControl+0x164>
			battVoltFlagDone[2] = 1;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c58 <battControl+0x178>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	709a      	strb	r2, [r3, #2]
			for(uint8_t i=0; (i<arrayLength); i++){
 8001be8:	1d7b      	adds	r3, r7, #5
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e01c      	b.n	8001c2a <battControl+0x14a>
				dutyFanEctTh[i] = dutyFanEctTh[i]-10;
 8001bf0:	1d7b      	adds	r3, r7, #5
 8001bf2:	781a      	ldrb	r2, [r3, #0]
 8001bf4:	4b19      	ldr	r3, [pc, #100]	@ (8001c5c <battControl+0x17c>)
 8001bf6:	0052      	lsls	r2, r2, #1
 8001bf8:	5ad3      	ldrh	r3, [r2, r3]
 8001bfa:	1d7a      	adds	r2, r7, #5
 8001bfc:	7812      	ldrb	r2, [r2, #0]
 8001bfe:	3b0a      	subs	r3, #10
 8001c00:	b299      	uxth	r1, r3
 8001c02:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <battControl+0x17c>)
 8001c04:	0052      	lsls	r2, r2, #1
 8001c06:	52d1      	strh	r1, [r2, r3]
				dutyFanOilTh[i] = dutyFanOilTh[i]-10;
 8001c08:	1d7b      	adds	r3, r7, #5
 8001c0a:	781a      	ldrb	r2, [r3, #0]
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <battControl+0x180>)
 8001c0e:	0052      	lsls	r2, r2, #1
 8001c10:	5ad3      	ldrh	r3, [r2, r3]
 8001c12:	1d7a      	adds	r2, r7, #5
 8001c14:	7812      	ldrb	r2, [r2, #0]
 8001c16:	3b0a      	subs	r3, #10
 8001c18:	b299      	uxth	r1, r3
 8001c1a:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <battControl+0x180>)
 8001c1c:	0052      	lsls	r2, r2, #1
 8001c1e:	52d1      	strh	r1, [r2, r3]
			for(uint8_t i=0; (i<arrayLength); i++){
 8001c20:	1d7b      	adds	r3, r7, #5
 8001c22:	781a      	ldrb	r2, [r3, #0]
 8001c24:	1d7b      	adds	r3, r7, #5
 8001c26:	3201      	adds	r2, #1
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	1d7a      	adds	r2, r7, #5
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	7812      	ldrb	r2, [r2, #0]
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d3dc      	bcc.n	8001bf0 <battControl+0x110>
			}
		}
	}else{
		V12NpOn();
	}
}
 8001c36:	e005      	b.n	8001c44 <battControl+0x164>
		V12NpOn();
 8001c38:	4b0a      	ldr	r3, [pc, #40]	@ (8001c64 <battControl+0x184>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	2104      	movs	r1, #4
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f003 fb04 	bl	800524c <HAL_GPIO_WritePin>
}
 8001c44:	46c0      	nop			@ (mov r8, r8)
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b002      	add	sp, #8
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000043a 	.word	0x2000043a
 8001c50:	20000010 	.word	0x20000010
 8001c54:	200005e0 	.word	0x200005e0
 8001c58:	2000044c 	.word	0x2000044c
 8001c5c:	20000018 	.word	0x20000018
 8001c60:	20000028 	.word	0x20000028
 8001c64:	48000400 	.word	0x48000400

08001c68 <gettBatVoltAverage>:
	        battVoltBuffer[i] = battVoltBuffer[i + 1];
	}
	battVoltBuffer[bufferSize-1] = battVolt;
}

void gettBatVoltAverage(){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	607b      	str	r3, [r7, #4]
	uint8_t bufferSize = (sizeof(battVoltBuffer)/sizeof(battVoltBuffer[0]));
 8001c72:	1cbb      	adds	r3, r7, #2
 8001c74:	220a      	movs	r2, #10
 8001c76:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < bufferSize; i++) {
 8001c78:	1cfb      	adds	r3, r7, #3
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e00d      	b.n	8001c9c <gettBatVoltAverage+0x34>
		sum += battVoltBuffer[i];
 8001c80:	1cfb      	adds	r3, r7, #3
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <gettBatVoltAverage+0x5c>)
 8001c86:	0052      	lsls	r2, r2, #1
 8001c88:	5ad3      	ldrh	r3, [r2, r3]
 8001c8a:	001a      	movs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	189b      	adds	r3, r3, r2
 8001c90:	607b      	str	r3, [r7, #4]
	for (uint8_t i = 0; i < bufferSize; i++) {
 8001c92:	1cfb      	adds	r3, r7, #3
 8001c94:	781a      	ldrb	r2, [r3, #0]
 8001c96:	1cfb      	adds	r3, r7, #3
 8001c98:	3201      	adds	r2, #1
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	1cfa      	adds	r2, r7, #3
 8001c9e:	1cbb      	adds	r3, r7, #2
 8001ca0:	7812      	ldrb	r2, [r2, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3eb      	bcc.n	8001c80 <gettBatVoltAverage+0x18>
	}
	battVoltAverage = sum / bufferSize;
 8001ca8:	1cbb      	adds	r3, r7, #2
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	0019      	movs	r1, r3
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fa2a 	bl	8000108 <__udivsi3>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b03      	ldr	r3, [pc, #12]	@ (8001cc8 <gettBatVoltAverage+0x60>)
 8001cba:	801a      	strh	r2, [r3, #0]
}
 8001cbc:	46c0      	nop			@ (mov r8, r8)
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b002      	add	sp, #8
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20000038 	.word	0x20000038
 8001cc8:	200005e0 	.word	0x200005e0

08001ccc <canResetEcu>:

void canResetEcu(){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, RESET);
 8001cd0:	2380      	movs	r3, #128	@ 0x80
 8001cd2:	019b      	lsls	r3, r3, #6
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <canResetEcu+0x3c>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	0019      	movs	r1, r3
 8001cda:	f003 fab7 	bl	800524c <HAL_GPIO_WritePin>
	if(resetCounter >= 2){
 8001cde:	4b0b      	ldr	r3, [pc, #44]	@ (8001d0c <canResetEcu+0x40>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d90c      	bls.n	8001d00 <canResetEcu+0x34>
		canResetEcuFlag = 0;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <canResetEcu+0x44>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
		resetCounter = 0;
 8001cec:	4b07      	ldr	r3, [pc, #28]	@ (8001d0c <canResetEcu+0x40>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 8001cf2:	2380      	movs	r3, #128	@ 0x80
 8001cf4:	019b      	lsls	r3, r3, #6
 8001cf6:	4804      	ldr	r0, [pc, #16]	@ (8001d08 <canResetEcu+0x3c>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	f003 faa6 	bl	800524c <HAL_GPIO_WritePin>
	}

}
 8001d00:	46c0      	nop			@ (mov r8, r8)
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			@ (mov r8, r8)
 8001d08:	48000800 	.word	0x48000800
 8001d0c:	200005e9 	.word	0x200005e9
 8001d10:	200005e8 	.word	0x200005e8

08001d14 <Read_All_ADC_Channels>:

void Read_All_ADC_Channels() {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af02      	add	r7, sp, #8
    uint8_t numChannels = 3;
 8001d1a:	1d7b      	adds	r3, r7, #5
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	701a      	strb	r2, [r3, #0]
    uint16_t dummyRead;  // Variable para la primera lectura incorrecta

    // 1ª vuelta: se configuran los canales pero los datos leídos no son válidos aún
    for (uint8_t i = 0; i < numChannels; i++) {
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	2200      	movs	r2, #0
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e026      	b.n	8001d76 <Read_All_ADC_Channels+0x62>
        txSpiData = (i & 0x07) << 12;  // Configurar el canal en el mensaje de SPI
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	031b      	lsls	r3, r3, #12
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	23e0      	movs	r3, #224	@ 0xe0
 8001d34:	01db      	lsls	r3, r3, #7
 8001d36:	4013      	ands	r3, r2
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b35      	ldr	r3, [pc, #212]	@ (8001e10 <Read_All_ADC_Channels+0xfc>)
 8001d3c:	801a      	strh	r2, [r3, #0]
        CS_LOW();
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	015b      	lsls	r3, r3, #5
 8001d42:	4834      	ldr	r0, [pc, #208]	@ (8001e14 <Read_All_ADC_Channels+0x100>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	0019      	movs	r1, r3
 8001d48:	f003 fa80 	bl	800524c <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&txSpiData, (uint8_t*)&dummyRead, 1, HAL_MAX_DELAY);
 8001d4c:	1cba      	adds	r2, r7, #2
 8001d4e:	4930      	ldr	r1, [pc, #192]	@ (8001e10 <Read_All_ADC_Channels+0xfc>)
 8001d50:	4831      	ldr	r0, [pc, #196]	@ (8001e18 <Read_All_ADC_Channels+0x104>)
 8001d52:	2301      	movs	r3, #1
 8001d54:	425b      	negs	r3, r3
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	2301      	movs	r3, #1
 8001d5a:	f004 f821 	bl	8005da0 <HAL_SPI_TransmitReceive>
        CS_HIGH();
 8001d5e:	2380      	movs	r3, #128	@ 0x80
 8001d60:	015b      	lsls	r3, r3, #5
 8001d62:	482c      	ldr	r0, [pc, #176]	@ (8001e14 <Read_All_ADC_Channels+0x100>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	0019      	movs	r1, r3
 8001d68:	f003 fa70 	bl	800524c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < numChannels; i++) {
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	781a      	ldrb	r2, [r3, #0]
 8001d70:	1dfb      	adds	r3, r7, #7
 8001d72:	3201      	adds	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
 8001d76:	1dfa      	adds	r2, r7, #7
 8001d78:	1d7b      	adds	r3, r7, #5
 8001d7a:	7812      	ldrb	r2, [r2, #0]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d3d2      	bcc.n	8001d28 <Read_All_ADC_Channels+0x14>
    }

    HAL_Delay(1);  // Breve pausa para asegurar estabilidad
 8001d82:	2001      	movs	r0, #1
 8001d84:	f001 fb94 	bl	80034b0 <HAL_Delay>

    // 2ª vuelta: ahora sí obtenemos los datos correctos
    for (uint8_t i = 0; i < numChannels; i++) {
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	701a      	strb	r2, [r3, #0]
 8001d8e:	e033      	b.n	8001df8 <Read_All_ADC_Channels+0xe4>
        txSpiData = (i & 0x07) << 12;  // Configurar el canal en el mensaje de SPI
 8001d90:	1dbb      	adds	r3, r7, #6
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	031b      	lsls	r3, r3, #12
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	23e0      	movs	r3, #224	@ 0xe0
 8001d9c:	01db      	lsls	r3, r3, #7
 8001d9e:	4013      	ands	r3, r2
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e10 <Read_All_ADC_Channels+0xfc>)
 8001da4:	801a      	strh	r2, [r3, #0]
        rxSpiData = 0;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <Read_All_ADC_Channels+0x108>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	801a      	strh	r2, [r3, #0]

        CS_LOW();
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	015b      	lsls	r3, r3, #5
 8001db0:	4818      	ldr	r0, [pc, #96]	@ (8001e14 <Read_All_ADC_Channels+0x100>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	0019      	movs	r1, r3
 8001db6:	f003 fa49 	bl	800524c <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&txSpiData, (uint8_t*)&rxSpiData, 1, HAL_MAX_DELAY);
 8001dba:	4a18      	ldr	r2, [pc, #96]	@ (8001e1c <Read_All_ADC_Channels+0x108>)
 8001dbc:	4914      	ldr	r1, [pc, #80]	@ (8001e10 <Read_All_ADC_Channels+0xfc>)
 8001dbe:	4816      	ldr	r0, [pc, #88]	@ (8001e18 <Read_All_ADC_Channels+0x104>)
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	425b      	negs	r3, r3
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f003 ffea 	bl	8005da0 <HAL_SPI_TransmitReceive>
        CS_HIGH();
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	015b      	lsls	r3, r3, #5
 8001dd0:	4810      	ldr	r0, [pc, #64]	@ (8001e14 <Read_All_ADC_Channels+0x100>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	f003 fa39 	bl	800524c <HAL_GPIO_WritePin>

        adcSpiBuffer[i] = rxSpiData & 0x0FFF;  // Extraer solo los 12 bits de datos del ADC
 8001dda:	4b10      	ldr	r3, [pc, #64]	@ (8001e1c <Read_All_ADC_Channels+0x108>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	1dba      	adds	r2, r7, #6
 8001de0:	7812      	ldrb	r2, [r2, #0]
 8001de2:	051b      	lsls	r3, r3, #20
 8001de4:	0d1b      	lsrs	r3, r3, #20
 8001de6:	b299      	uxth	r1, r3
 8001de8:	4b0d      	ldr	r3, [pc, #52]	@ (8001e20 <Read_All_ADC_Channels+0x10c>)
 8001dea:	0052      	lsls	r2, r2, #1
 8001dec:	52d1      	strh	r1, [r2, r3]
    for (uint8_t i = 0; i < numChannels; i++) {
 8001dee:	1dbb      	adds	r3, r7, #6
 8001df0:	781a      	ldrb	r2, [r3, #0]
 8001df2:	1dbb      	adds	r3, r7, #6
 8001df4:	3201      	adds	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
 8001df8:	1dba      	adds	r2, r7, #6
 8001dfa:	1d7b      	adds	r3, r7, #5
 8001dfc:	7812      	ldrb	r2, [r2, #0]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d3c5      	bcc.n	8001d90 <Read_All_ADC_Channels+0x7c>
    }
}
 8001e04:	46c0      	nop			@ (mov r8, r8)
 8001e06:	46c0      	nop			@ (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b002      	add	sp, #8
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			@ (mov r8, r8)
 8001e10:	2000041a 	.word	0x2000041a
 8001e14:	48000400 	.word	0x48000400
 8001e18:	20000120 	.word	0x20000120
 8001e1c:	2000041c 	.word	0x2000041c
 8001e20:	20000414 	.word	0x20000414

08001e24 <getBufferAverage>:
void currentChecking(){

}
uint16_t getBufferAverage(uint16_t *buffer, uint8_t bufferSize) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	000a      	movs	r2, r1
 8001e2e:	1cfb      	adds	r3, r7, #3
 8001e30:	701a      	strb	r2, [r3, #0]
    uint32_t sum = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]

    for (uint8_t i = 0; i < bufferSize; i++) {
 8001e36:	230b      	movs	r3, #11
 8001e38:	18fb      	adds	r3, r7, r3
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	701a      	strb	r2, [r3, #0]
 8001e3e:	e00f      	b.n	8001e60 <getBufferAverage+0x3c>
        sum += buffer[i];
 8001e40:	210b      	movs	r1, #11
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	18d3      	adds	r3, r2, r3
 8001e4c:	881b      	ldrh	r3, [r3, #0]
 8001e4e:	001a      	movs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	189b      	adds	r3, r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < bufferSize; i++) {
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	3201      	adds	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
 8001e60:	230b      	movs	r3, #11
 8001e62:	18fa      	adds	r2, r7, r3
 8001e64:	1cfb      	adds	r3, r7, #3
 8001e66:	7812      	ldrb	r2, [r2, #0]
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d3e8      	bcc.n	8001e40 <getBufferAverage+0x1c>
    }

    return (sum + (bufferSize / 2)) / bufferSize;  // Redondeo clásico
 8001e6e:	1cfb      	adds	r3, r7, #3
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	001a      	movs	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	18d2      	adds	r2, r2, r3
 8001e7c:	1cfb      	adds	r3, r7, #3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	0019      	movs	r1, r3
 8001e82:	0010      	movs	r0, r2
 8001e84:	f7fe f940 	bl	8000108 <__udivsi3>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	b29b      	uxth	r3, r3
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b004      	add	sp, #16
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <fillBuffer>:
void fillBuffer(uint16_t *buffer, uint16_t bufferSize, uint16_t newValue) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	0008      	movs	r0, r1
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	1cbb      	adds	r3, r7, #2
 8001ea2:	1c02      	adds	r2, r0, #0
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	003b      	movs	r3, r7
 8001ea8:	1c0a      	adds	r2, r1, #0
 8001eaa:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < bufferSize - 1; i++) {
 8001eac:	230f      	movs	r3, #15
 8001eae:	18fb      	adds	r3, r7, r3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
 8001eb4:	e012      	b.n	8001edc <fillBuffer+0x48>
        buffer[i] = buffer[i + 1];  // Mueve los valores a la izquierda
 8001eb6:	200f      	movs	r0, #15
 8001eb8:	183b      	adds	r3, r7, r0
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	18d2      	adds	r2, r2, r3
 8001ec4:	183b      	adds	r3, r7, r0
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	18cb      	adds	r3, r1, r3
 8001ece:	8812      	ldrh	r2, [r2, #0]
 8001ed0:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < bufferSize - 1; i++) {
 8001ed2:	183b      	adds	r3, r7, r0
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	183b      	adds	r3, r7, r0
 8001ed8:	3201      	adds	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
 8001edc:	230f      	movs	r3, #15
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	781a      	ldrb	r2, [r3, #0]
 8001ee2:	1cbb      	adds	r3, r7, #2
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbe4      	blt.n	8001eb6 <fillBuffer+0x22>
    }

    buffer[bufferSize - 1] = newValue;  // Inserta el nuevo valor al final
 8001eec:	1cbb      	adds	r3, r7, #2
 8001eee:	881b      	ldrh	r3, [r3, #0]
 8001ef0:	4a06      	ldr	r2, [pc, #24]	@ (8001f0c <fillBuffer+0x78>)
 8001ef2:	4694      	mov	ip, r2
 8001ef4:	4463      	add	r3, ip
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	18d3      	adds	r3, r2, r3
 8001efc:	003a      	movs	r2, r7
 8001efe:	8812      	ldrh	r2, [r2, #0]
 8001f00:	801a      	strh	r2, [r3, #0]
}
 8001f02:	46c0      	nop			@ (mov r8, r8)
 8001f04:	46bd      	mov	sp, r7
 8001f06:	b004      	add	sp, #16
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	7fffffff 	.word	0x7fffffff

08001f10 <fuelPumpProtection>:
void fuelPumpProtection(){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	fillBuffer(fuelPumpCurrentBuffer, 100, adcSpiBuffer[2]);
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <fuelPumpProtection+0x8c>)
 8001f16:	889a      	ldrh	r2, [r3, #4]
 8001f18:	4b21      	ldr	r3, [pc, #132]	@ (8001fa0 <fuelPumpProtection+0x90>)
 8001f1a:	2164      	movs	r1, #100	@ 0x64
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff ffb9 	bl	8001e94 <fillBuffer>
	fuelPumpCurrentAverage = getBufferAverage(fuelPumpCurrentBuffer, 100);
 8001f22:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <fuelPumpProtection+0x90>)
 8001f24:	2164      	movs	r1, #100	@ 0x64
 8001f26:	0018      	movs	r0, r3
 8001f28:	f7ff ff7c 	bl	8001e24 <getBufferAverage>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	001a      	movs	r2, r3
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <fuelPumpProtection+0x94>)
 8001f32:	801a      	strh	r2, [r3, #0]
	fillBuffer(fuelPressBuffer, 100,fuelPress);
 8001f34:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa8 <fuelPumpProtection+0x98>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	5e9b      	ldrsh	r3, [r3, r2]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <fuelPumpProtection+0x9c>)
 8001f3e:	2164      	movs	r1, #100	@ 0x64
 8001f40:	0018      	movs	r0, r3
 8001f42:	f7ff ffa7 	bl	8001e94 <fillBuffer>
	fuelPressAverage = getBufferAverage(fuelPressBuffer, 100);
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <fuelPumpProtection+0x9c>)
 8001f48:	2164      	movs	r1, #100	@ 0x64
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f7ff ff6a 	bl	8001e24 <getBufferAverage>
 8001f50:	0003      	movs	r3, r0
 8001f52:	001a      	movs	r2, r3
 8001f54:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <fuelPumpProtection+0xa0>)
 8001f56:	801a      	strh	r2, [r3, #0]
	if((fuelPumpCurrentAverage > 65000)&&(fuelPumpEmergencyFlag == 0)){
 8001f58:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <fuelPumpProtection+0x94>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	4a15      	ldr	r2, [pc, #84]	@ (8001fb4 <fuelPumpProtection+0xa4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d906      	bls.n	8001f70 <fuelPumpProtection+0x60>
 8001f62:	4b15      	ldr	r3, [pc, #84]	@ (8001fb8 <fuelPumpProtection+0xa8>)
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d102      	bne.n	8001f70 <fuelPumpProtection+0x60>
		fuelPumpEmergencyFlag = 1;
 8001f6a:	4b13      	ldr	r3, [pc, #76]	@ (8001fb8 <fuelPumpProtection+0xa8>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
	}
	if((fuelPressAverage < 200)&&(rpm > 1000)&&(fuelPumpEmergencyFlag == 0)){
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <fuelPumpProtection+0xa0>)
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	2bc7      	cmp	r3, #199	@ 0xc7
 8001f76:	d80d      	bhi.n	8001f94 <fuelPumpProtection+0x84>
 8001f78:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <fuelPumpProtection+0xac>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	5e9a      	ldrsh	r2, [r3, r2]
 8001f7e:	23fa      	movs	r3, #250	@ 0xfa
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dd06      	ble.n	8001f94 <fuelPumpProtection+0x84>
 8001f86:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb8 <fuelPumpProtection+0xa8>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <fuelPumpProtection+0x84>
		fuelPumpEmergencyFlag = 1;
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <fuelPumpProtection+0xa8>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
	}
}
 8001f94:	46c0      	nop			@ (mov r8, r8)
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	20000414 	.word	0x20000414
 8001fa0:	20000450 	.word	0x20000450
 8001fa4:	200005e2 	.word	0x200005e2
 8001fa8:	20000442 	.word	0x20000442
 8001fac:	20000518 	.word	0x20000518
 8001fb0:	200005e6 	.word	0x200005e6
 8001fb4:	0000fde8 	.word	0x0000fde8
 8001fb8:	200005ec 	.word	0x200005ec
 8001fbc:	20000446 	.word	0x20000446

08001fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fc4:	f001 fa10 	bl	80033e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fc8:	f000 f96c 	bl	80022a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fcc:	f000 fdbe 	bl	8002b4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001fd0:	f000 fd9e 	bl	8002b10 <MX_DMA_Init>
  MX_ADC_Init();
 8001fd4:	f000 f9b4 	bl	8002340 <MX_ADC_Init>
  MX_CAN_Init();
 8001fd8:	f000 fa82 	bl	80024e0 <MX_CAN_Init>
  MX_SPI2_Init();
 8001fdc:	f000 fae4 	bl	80025a8 <MX_SPI2_Init>
  MX_TIM3_Init();
 8001fe0:	f000 fc1e 	bl	8002820 <MX_TIM3_Init>
  MX_TIM17_Init();
 8001fe4:	f000 fd0e 	bl	8002a04 <MX_TIM17_Init>
  MX_TIM16_Init();
 8001fe8:	f000 fc86 	bl	80028f8 <MX_TIM16_Init>
  MX_TIM2_Init();
 8001fec:	f000 fbae 	bl	800274c <MX_TIM2_Init>
  MX_TIM1_Init();
 8001ff0:	f000 fb18 	bl	8002624 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adc_buff, 9); //Inicia el DMA se le pasa el ADC, la variable donde guardar los datos y el numero de canales
 8001ff4:	4989      	ldr	r1, [pc, #548]	@ (800221c <main+0x25c>)
 8001ff6:	4b8a      	ldr	r3, [pc, #552]	@ (8002220 <main+0x260>)
 8001ff8:	2209      	movs	r2, #9
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f001 fc2e 	bl	800385c <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc); //Se inicia la interrupcion de fin de conversion del ADC en el "Set-up"
 8002000:	4b87      	ldr	r3, [pc, #540]	@ (8002220 <main+0x260>)
 8002002:	0018      	movs	r0, r3
 8002004:	f001 fbb8 	bl	8003778 <HAL_ADC_Start_IT>
  HAL_CAN_Start(&hcan);
 8002008:	4b86      	ldr	r3, [pc, #536]	@ (8002224 <main+0x264>)
 800200a:	0018      	movs	r0, r3
 800200c:	f002 f8be 	bl	800418c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002010:	4b84      	ldr	r3, [pc, #528]	@ (8002224 <main+0x264>)
 8002012:	2102      	movs	r1, #2
 8002014:	0018      	movs	r0, r3
 8002016:	f002 fafc 	bl	8004612 <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim1);
 800201a:	4b83      	ldr	r3, [pc, #524]	@ (8002228 <main+0x268>)
 800201c:	0018      	movs	r0, r3
 800201e:	f004 fa67 	bl	80064f0 <HAL_TIM_Base_Start_IT>
  TIM2->CCR3 = dutyFanNill;
 8002022:	4b82      	ldr	r3, [pc, #520]	@ (800222c <main+0x26c>)
 8002024:	881a      	ldrh	r2, [r3, #0]
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	05db      	lsls	r3, r3, #23
 800202a:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = dutyFanNill;
 800202c:	4b7f      	ldr	r3, [pc, #508]	@ (800222c <main+0x26c>)
 800202e:	881a      	ldrh	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	05db      	lsls	r3, r3, #23
 8002034:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = dutyFanNill;
 8002036:	4b7d      	ldr	r3, [pc, #500]	@ (800222c <main+0x26c>)
 8002038:	881a      	ldrh	r2, [r3, #0]
 800203a:	4b7d      	ldr	r3, [pc, #500]	@ (8002230 <main+0x270>)
 800203c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = dutyFanNill;
 800203e:	4b7b      	ldr	r3, [pc, #492]	@ (800222c <main+0x26c>)
 8002040:	881a      	ldrh	r2, [r3, #0]
 8002042:	4b7b      	ldr	r3, [pc, #492]	@ (8002230 <main+0x270>)
 8002044:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM16->CCR1 = dutyPumpNill;
 8002046:	4b7b      	ldr	r3, [pc, #492]	@ (8002234 <main+0x274>)
 8002048:	881a      	ldrh	r2, [r3, #0]
 800204a:	4b7b      	ldr	r3, [pc, #492]	@ (8002238 <main+0x278>)
 800204c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->CCR1 = dutyPumpNill;
 800204e:	4b79      	ldr	r3, [pc, #484]	@ (8002234 <main+0x274>)
 8002050:	881a      	ldrh	r2, [r3, #0]
 8002052:	4b7a      	ldr	r3, [pc, #488]	@ (800223c <main+0x27c>)
 8002054:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002056:	4b7a      	ldr	r3, [pc, #488]	@ (8002240 <main+0x280>)
 8002058:	2100      	movs	r1, #0
 800205a:	0018      	movs	r0, r3
 800205c:	f004 fb34 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002060:	4b77      	ldr	r3, [pc, #476]	@ (8002240 <main+0x280>)
 8002062:	2104      	movs	r1, #4
 8002064:	0018      	movs	r0, r3
 8002066:	f004 fb2f 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800206a:	4b76      	ldr	r3, [pc, #472]	@ (8002244 <main+0x284>)
 800206c:	2108      	movs	r1, #8
 800206e:	0018      	movs	r0, r3
 8002070:	f004 fb2a 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002074:	4b73      	ldr	r3, [pc, #460]	@ (8002244 <main+0x284>)
 8002076:	210c      	movs	r1, #12
 8002078:	0018      	movs	r0, r3
 800207a:	f004 fb25 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800207e:	4b72      	ldr	r3, [pc, #456]	@ (8002248 <main+0x288>)
 8002080:	2100      	movs	r1, #0
 8002082:	0018      	movs	r0, r3
 8002084:	f004 fb20 	bl	80066c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002088:	4b70      	ldr	r3, [pc, #448]	@ (800224c <main+0x28c>)
 800208a:	2100      	movs	r1, #0
 800208c:	0018      	movs	r0, r3
 800208e:	f004 fb1b 	bl	80066c8 <HAL_TIM_PWM_Start>


	TxHeader_adc.DLC = 8;
 8002092:	4b6f      	ldr	r3, [pc, #444]	@ (8002250 <main+0x290>)
 8002094:	2208      	movs	r2, #8
 8002096:	611a      	str	r2, [r3, #16]
	TxHeader_adc.ExtId = 0;
 8002098:	4b6d      	ldr	r3, [pc, #436]	@ (8002250 <main+0x290>)
 800209a:	2200      	movs	r2, #0
 800209c:	605a      	str	r2, [r3, #4]
	TxHeader_adc.IDE = CAN_ID_STD;
 800209e:	4b6c      	ldr	r3, [pc, #432]	@ (8002250 <main+0x290>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
	TxHeader_adc.RTR = CAN_RTR_DATA;
 80020a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002250 <main+0x290>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
	TxHeader_adc.StdId = ADC_ID;
 80020aa:	4b69      	ldr	r3, [pc, #420]	@ (8002250 <main+0x290>)
 80020ac:	4a69      	ldr	r2, [pc, #420]	@ (8002254 <main+0x294>)
 80020ae:	601a      	str	r2, [r3, #0]
	TxHeader_adc.TransmitGlobalTime = DISABLE;
 80020b0:	4b67      	ldr	r3, [pc, #412]	@ (8002250 <main+0x290>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	751a      	strb	r2, [r3, #20]

	TxHeader_adc1.DLC = 4;
 80020b6:	4b68      	ldr	r3, [pc, #416]	@ (8002258 <main+0x298>)
 80020b8:	2204      	movs	r2, #4
 80020ba:	611a      	str	r2, [r3, #16]
	TxHeader_adc1.ExtId = 0;
 80020bc:	4b66      	ldr	r3, [pc, #408]	@ (8002258 <main+0x298>)
 80020be:	2200      	movs	r2, #0
 80020c0:	605a      	str	r2, [r3, #4]
	TxHeader_adc1.IDE = CAN_ID_STD;
 80020c2:	4b65      	ldr	r3, [pc, #404]	@ (8002258 <main+0x298>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
	TxHeader_adc1.RTR = CAN_RTR_DATA;
 80020c8:	4b63      	ldr	r3, [pc, #396]	@ (8002258 <main+0x298>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
	TxHeader_adc1.StdId = ADC_ID1;
 80020ce:	4b62      	ldr	r3, [pc, #392]	@ (8002258 <main+0x298>)
 80020d0:	4a62      	ldr	r2, [pc, #392]	@ (800225c <main+0x29c>)
 80020d2:	601a      	str	r2, [r3, #0]
	TxHeader_adc1.TransmitGlobalTime = DISABLE;
 80020d4:	4b60      	ldr	r3, [pc, #384]	@ (8002258 <main+0x298>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	751a      	strb	r2, [r3, #20]

	TxHeader_adc2.DLC = 4;
 80020da:	4b61      	ldr	r3, [pc, #388]	@ (8002260 <main+0x2a0>)
 80020dc:	2204      	movs	r2, #4
 80020de:	611a      	str	r2, [r3, #16]
	TxHeader_adc2.ExtId = 0;
 80020e0:	4b5f      	ldr	r3, [pc, #380]	@ (8002260 <main+0x2a0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	605a      	str	r2, [r3, #4]
	TxHeader_adc2.IDE = CAN_ID_STD;
 80020e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002260 <main+0x2a0>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
	TxHeader_adc2.RTR = CAN_RTR_DATA;
 80020ec:	4b5c      	ldr	r3, [pc, #368]	@ (8002260 <main+0x2a0>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
	TxHeader_adc2.StdId = ADC_ID2;
 80020f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002260 <main+0x2a0>)
 80020f4:	4a5b      	ldr	r2, [pc, #364]	@ (8002264 <main+0x2a4>)
 80020f6:	601a      	str	r2, [r3, #0]
	TxHeader_adc2.TransmitGlobalTime = DISABLE;
 80020f8:	4b59      	ldr	r3, [pc, #356]	@ (8002260 <main+0x2a0>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	751a      	strb	r2, [r3, #20]

	TxHeader_adc3.DLC = 2; //AQUI ESTABA EL ERROR; ESO ESTABA COMO TxHeader_adc2
 80020fe:	4b5a      	ldr	r3, [pc, #360]	@ (8002268 <main+0x2a8>)
 8002100:	2202      	movs	r2, #2
 8002102:	611a      	str	r2, [r3, #16]
	TxHeader_adc3.ExtId = 0;
 8002104:	4b58      	ldr	r3, [pc, #352]	@ (8002268 <main+0x2a8>)
 8002106:	2200      	movs	r2, #0
 8002108:	605a      	str	r2, [r3, #4]
	TxHeader_adc3.IDE = CAN_ID_STD;
 800210a:	4b57      	ldr	r3, [pc, #348]	@ (8002268 <main+0x2a8>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
	TxHeader_adc3.RTR = CAN_RTR_DATA;
 8002110:	4b55      	ldr	r3, [pc, #340]	@ (8002268 <main+0x2a8>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
	TxHeader_adc3.StdId = ADC_ID3;
 8002116:	4b54      	ldr	r3, [pc, #336]	@ (8002268 <main+0x2a8>)
 8002118:	22ed      	movs	r2, #237	@ 0xed
 800211a:	0092      	lsls	r2, r2, #2
 800211c:	601a      	str	r2, [r3, #0]
	TxHeader_adc3.TransmitGlobalTime = DISABLE;
 800211e:	4b52      	ldr	r3, [pc, #328]	@ (8002268 <main+0x2a8>)
 8002120:	2200      	movs	r2, #0
 8002122:	751a      	strb	r2, [r3, #20]

	TxHeader_anw.DLC = 2;
 8002124:	4b51      	ldr	r3, [pc, #324]	@ (800226c <main+0x2ac>)
 8002126:	2202      	movs	r2, #2
 8002128:	611a      	str	r2, [r3, #16]
	TxHeader_anw.ExtId = 0;
 800212a:	4b50      	ldr	r3, [pc, #320]	@ (800226c <main+0x2ac>)
 800212c:	2200      	movs	r2, #0
 800212e:	605a      	str	r2, [r3, #4]
	TxHeader_anw.IDE = CAN_ID_STD;
 8002130:	4b4e      	ldr	r3, [pc, #312]	@ (800226c <main+0x2ac>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
	TxHeader_anw.RTR = CAN_RTR_DATA;
 8002136:	4b4d      	ldr	r3, [pc, #308]	@ (800226c <main+0x2ac>)
 8002138:	2200      	movs	r2, #0
 800213a:	60da      	str	r2, [r3, #12]
	TxHeader_anw.StdId = ANW_ID;
 800213c:	4b4b      	ldr	r3, [pc, #300]	@ (800226c <main+0x2ac>)
 800213e:	4a4c      	ldr	r2, [pc, #304]	@ (8002270 <main+0x2b0>)
 8002140:	601a      	str	r2, [r3, #0]
	TxHeader_anw.TransmitGlobalTime = DISABLE;
 8002142:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <main+0x2ac>)
 8002144:	2200      	movs	r2, #0
 8002146:	751a      	strb	r2, [r3, #20]

	TxHeader_heartbeat.DLC = 1;
 8002148:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <main+0x2b4>)
 800214a:	2201      	movs	r2, #1
 800214c:	611a      	str	r2, [r3, #16]
	TxHeader_heartbeat.ExtId = 0;
 800214e:	4b49      	ldr	r3, [pc, #292]	@ (8002274 <main+0x2b4>)
 8002150:	2200      	movs	r2, #0
 8002152:	605a      	str	r2, [r3, #4]
	TxHeader_heartbeat.IDE = CAN_ID_STD;
 8002154:	4b47      	ldr	r3, [pc, #284]	@ (8002274 <main+0x2b4>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
	TxHeader_heartbeat.RTR = CAN_RTR_DATA;
 800215a:	4b46      	ldr	r3, [pc, #280]	@ (8002274 <main+0x2b4>)
 800215c:	2200      	movs	r2, #0
 800215e:	60da      	str	r2, [r3, #12]
	TxHeader_heartbeat.StdId = HEARTBEAT_ID;
 8002160:	4b44      	ldr	r3, [pc, #272]	@ (8002274 <main+0x2b4>)
 8002162:	22ec      	movs	r2, #236	@ 0xec
 8002164:	0092      	lsls	r2, r2, #2
 8002166:	601a      	str	r2, [r3, #0]
	TxHeader_heartbeat.TransmitGlobalTime = DISABLE;
 8002168:	4b42      	ldr	r3, [pc, #264]	@ (8002274 <main+0x2b4>)
 800216a:	2200      	movs	r2, #0
 800216c:	751a      	strb	r2, [r3, #20]

	TxHeader_emergency.DLC = 8;
 800216e:	4b42      	ldr	r3, [pc, #264]	@ (8002278 <main+0x2b8>)
 8002170:	2208      	movs	r2, #8
 8002172:	611a      	str	r2, [r3, #16]
	TxHeader_emergency.ExtId = 0;
 8002174:	4b40      	ldr	r3, [pc, #256]	@ (8002278 <main+0x2b8>)
 8002176:	2200      	movs	r2, #0
 8002178:	605a      	str	r2, [r3, #4]
	TxHeader_emergency.IDE = CAN_ID_STD;
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <main+0x2b8>)
 800217c:	2200      	movs	r2, #0
 800217e:	609a      	str	r2, [r3, #8]
	TxHeader_emergency.RTR = CAN_RTR_DATA;
 8002180:	4b3d      	ldr	r3, [pc, #244]	@ (8002278 <main+0x2b8>)
 8002182:	2200      	movs	r2, #0
 8002184:	60da      	str	r2, [r3, #12]
	TxHeader_emergency.StdId = EMERGENCY_ID;
 8002186:	4b3c      	ldr	r3, [pc, #240]	@ (8002278 <main+0x2b8>)
 8002188:	4a3c      	ldr	r2, [pc, #240]	@ (800227c <main+0x2bc>)
 800218a:	601a      	str	r2, [r3, #0]
	TxHeader_emergency.TransmitGlobalTime = DISABLE;
 800218c:	4b3a      	ldr	r3, [pc, #232]	@ (8002278 <main+0x2b8>)
 800218e:	2200      	movs	r2, #0
 8002190:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8002192:	4b24      	ldr	r3, [pc, #144]	@ (8002224 <main+0x264>)
 8002194:	2102      	movs	r1, #2
 8002196:	0018      	movs	r0, r3
 8002198:	f002 fa3b 	bl	8004612 <HAL_CAN_ActivateNotification>
 800219c:	1e03      	subs	r3, r0, #0
 800219e:	d001      	beq.n	80021a4 <main+0x1e4>
			!= HAL_OK) {
		Error_Handler();
 80021a0:	f000 fdd6 	bl	8002d50 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  mapeoADC();
 80021a4:	f7ff fab2 	bl	800170c <mapeoADC>
	  if(tempDataFlag){
 80021a8:	4b35      	ldr	r3, [pc, #212]	@ (8002280 <main+0x2c0>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <main+0x1f4>
		  tempActions();
 80021b0:	f7ff f892 	bl	80012d8 <tempActions>
	  }
	  if(send){
 80021b4:	4b33      	ldr	r3, [pc, #204]	@ (8002284 <main+0x2c4>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <main+0x204>
		  sendCan();
 80021bc:	f7ff f9b8 	bl	8001530 <sendCan>
		  Read_All_ADC_Channels();
 80021c0:	f7ff fda8 	bl	8001d14 <Read_All_ADC_Channels>
	  }
	  if(heartbeatFlag > 5 ){
 80021c4:	4b30      	ldr	r3, [pc, #192]	@ (8002288 <main+0x2c8>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d901      	bls.n	80021d0 <main+0x210>
		  heartbeat();
 80021cc:	f7ff fa82 	bl	80016d4 <heartbeat>
	  }
	  if(battDataFlag){
 80021d0:	4b2e      	ldr	r3, [pc, #184]	@ (800228c <main+0x2cc>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00c      	beq.n	80021f2 <main+0x232>
		  fillBuffer(battVoltBuffer, 10, battVolt);
 80021d8:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <main+0x2d0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	5e9b      	ldrsh	r3, [r3, r2]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	4b2c      	ldr	r3, [pc, #176]	@ (8002294 <main+0x2d4>)
 80021e2:	210a      	movs	r1, #10
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff fe55 	bl	8001e94 <fillBuffer>
		  gettBatVoltAverage();
 80021ea:	f7ff fd3d 	bl	8001c68 <gettBatVoltAverage>
		  battControl();
 80021ee:	f7ff fc77 	bl	8001ae0 <battControl>
	  }
	  if(canResetEcuFlag){
 80021f2:	4b29      	ldr	r3, [pc, #164]	@ (8002298 <main+0x2d8>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <main+0x240>
		  canResetEcu();
 80021fa:	f7ff fd67 	bl	8001ccc <canResetEcu>
 80021fe:	e006      	b.n	800220e <main+0x24e>
	  }else{
		  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	019b      	lsls	r3, r3, #6
 8002204:	4825      	ldr	r0, [pc, #148]	@ (800229c <main+0x2dc>)
 8002206:	2201      	movs	r2, #1
 8002208:	0019      	movs	r1, r3
 800220a:	f003 f81f 	bl	800524c <HAL_GPIO_WritePin>
	  }
	  if(pressDataFlag){
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <main+0x2e0>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0c6      	beq.n	80021a4 <main+0x1e4>
		  fuelPumpProtection();
 8002216:	f7ff fe7b 	bl	8001f10 <fuelPumpProtection>
	  mapeoADC();
 800221a:	e7c3      	b.n	80021a4 <main+0x1e4>
 800221c:	200003dc 	.word	0x200003dc
 8002220:	20000074 	.word	0x20000074
 8002224:	200000f8 	.word	0x200000f8
 8002228:	20000184 	.word	0x20000184
 800222c:	20000448 	.word	0x20000448
 8002230:	40000400 	.word	0x40000400
 8002234:	2000044a 	.word	0x2000044a
 8002238:	40014400 	.word	0x40014400
 800223c:	40014800 	.word	0x40014800
 8002240:	20000214 	.word	0x20000214
 8002244:	200001cc 	.word	0x200001cc
 8002248:	2000025c 	.word	0x2000025c
 800224c:	200002a4 	.word	0x200002a4
 8002250:	20000308 	.word	0x20000308
 8002254:	000003b1 	.word	0x000003b1
 8002258:	20000320 	.word	0x20000320
 800225c:	000003b2 	.word	0x000003b2
 8002260:	20000338 	.word	0x20000338
 8002264:	000003b3 	.word	0x000003b3
 8002268:	20000350 	.word	0x20000350
 800226c:	20000368 	.word	0x20000368
 8002270:	000002b1 	.word	0x000002b1
 8002274:	20000380 	.word	0x20000380
 8002278:	20000398 	.word	0x20000398
 800227c:	000003b5 	.word	0x000003b5
 8002280:	20000436 	.word	0x20000436
 8002284:	200005ed 	.word	0x200005ed
 8002288:	200005ee 	.word	0x200005ee
 800228c:	2000043a 	.word	0x2000043a
 8002290:	20000444 	.word	0x20000444
 8002294:	20000038 	.word	0x20000038
 8002298:	200005e8 	.word	0x200005e8
 800229c:	48000800 	.word	0x48000800
 80022a0:	20000437 	.word	0x20000437

080022a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b093      	sub	sp, #76	@ 0x4c
 80022a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022aa:	2414      	movs	r4, #20
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	0018      	movs	r0, r3
 80022b0:	2334      	movs	r3, #52	@ 0x34
 80022b2:	001a      	movs	r2, r3
 80022b4:	2100      	movs	r1, #0
 80022b6:	f005 f82d 	bl	8007314 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	0018      	movs	r0, r3
 80022be:	2310      	movs	r3, #16
 80022c0:	001a      	movs	r2, r3
 80022c2:	2100      	movs	r1, #0
 80022c4:	f005 f826 	bl	8007314 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80022c8:	0021      	movs	r1, r4
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	2211      	movs	r2, #17
 80022ce:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022d0:	187b      	adds	r3, r7, r1
 80022d2:	2201      	movs	r2, #1
 80022d4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	2201      	movs	r2, #1
 80022da:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	2210      	movs	r2, #16
 80022e0:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022e2:	187b      	adds	r3, r7, r1
 80022e4:	2202      	movs	r2, #2
 80022e6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e8:	187b      	adds	r3, r7, r1
 80022ea:	2280      	movs	r2, #128	@ 0x80
 80022ec:	0252      	lsls	r2, r2, #9
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2200      	movs	r2, #0
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80022f6:	187b      	adds	r3, r7, r1
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	0018      	movs	r0, r3
 8002300:	f002 ffc2 	bl	8005288 <HAL_RCC_OscConfig>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8002308:	f000 fd22 	bl	8002d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2207      	movs	r2, #7
 8002310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2202      	movs	r2, #2
 8002316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	2200      	movs	r2, #0
 800231c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	2101      	movs	r1, #1
 8002328:	0018      	movs	r0, r3
 800232a:	f003 fb33 	bl	8005994 <HAL_RCC_ClockConfig>
 800232e:	1e03      	subs	r3, r0, #0
 8002330:	d001      	beq.n	8002336 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002332:	f000 fd0d 	bl	8002d50 <Error_Handler>
  }
}
 8002336:	46c0      	nop			@ (mov r8, r8)
 8002338:	46bd      	mov	sp, r7
 800233a:	b013      	add	sp, #76	@ 0x4c
 800233c:	bd90      	pop	{r4, r7, pc}
	...

08002340 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002346:	1d3b      	adds	r3, r7, #4
 8002348:	0018      	movs	r0, r3
 800234a:	230c      	movs	r3, #12
 800234c:	001a      	movs	r2, r3
 800234e:	2100      	movs	r1, #0
 8002350:	f004 ffe0 	bl	8007314 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002354:	4b60      	ldr	r3, [pc, #384]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002356:	4a61      	ldr	r2, [pc, #388]	@ (80024dc <MX_ADC_Init+0x19c>)
 8002358:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800235a:	4b5f      	ldr	r3, [pc, #380]	@ (80024d8 <MX_ADC_Init+0x198>)
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002360:	4b5d      	ldr	r3, [pc, #372]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002366:	4b5c      	ldr	r3, [pc, #368]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002368:	2200      	movs	r2, #0
 800236a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800236c:	4b5a      	ldr	r3, [pc, #360]	@ (80024d8 <MX_ADC_Init+0x198>)
 800236e:	2201      	movs	r2, #1
 8002370:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002372:	4b59      	ldr	r3, [pc, #356]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002374:	2204      	movs	r2, #4
 8002376:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002378:	4b57      	ldr	r3, [pc, #348]	@ (80024d8 <MX_ADC_Init+0x198>)
 800237a:	2200      	movs	r2, #0
 800237c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800237e:	4b56      	ldr	r3, [pc, #344]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002380:	2200      	movs	r2, #0
 8002382:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002384:	4b54      	ldr	r3, [pc, #336]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002386:	2201      	movs	r2, #1
 8002388:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800238a:	4b53      	ldr	r3, [pc, #332]	@ (80024d8 <MX_ADC_Init+0x198>)
 800238c:	2200      	movs	r2, #0
 800238e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002390:	4b51      	ldr	r3, [pc, #324]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002392:	22c2      	movs	r2, #194	@ 0xc2
 8002394:	32ff      	adds	r2, #255	@ 0xff
 8002396:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002398:	4b4f      	ldr	r3, [pc, #316]	@ (80024d8 <MX_ADC_Init+0x198>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800239e:	4b4e      	ldr	r3, [pc, #312]	@ (80024d8 <MX_ADC_Init+0x198>)
 80023a0:	2224      	movs	r2, #36	@ 0x24
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80023a6:	4b4c      	ldr	r3, [pc, #304]	@ (80024d8 <MX_ADC_Init+0x198>)
 80023a8:	2201      	movs	r2, #1
 80023aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80023ac:	4b4a      	ldr	r3, [pc, #296]	@ (80024d8 <MX_ADC_Init+0x198>)
 80023ae:	0018      	movs	r0, r3
 80023b0:	f001 f8a2 	bl	80034f8 <HAL_ADC_Init>
 80023b4:	1e03      	subs	r3, r0, #0
 80023b6:	d001      	beq.n	80023bc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80023b8:	f000 fcca 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	2200      	movs	r2, #0
 80023c0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	0152      	lsls	r2, r2, #5
 80023c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80023ca:	1d3b      	adds	r3, r7, #4
 80023cc:	2207      	movs	r2, #7
 80023ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80023d0:	1d3a      	adds	r2, r7, #4
 80023d2:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <MX_ADC_Init+0x198>)
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f001 fad2 	bl	8003980 <HAL_ADC_ConfigChannel>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d001      	beq.n	80023e4 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80023e0:	f000 fcb6 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80023ea:	1d3a      	adds	r2, r7, #4
 80023ec:	4b3a      	ldr	r3, [pc, #232]	@ (80024d8 <MX_ADC_Init+0x198>)
 80023ee:	0011      	movs	r1, r2
 80023f0:	0018      	movs	r0, r3
 80023f2:	f001 fac5 	bl	8003980 <HAL_ADC_ConfigChannel>
 80023f6:	1e03      	subs	r3, r0, #0
 80023f8:	d001      	beq.n	80023fe <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80023fa:	f000 fca9 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	2202      	movs	r2, #2
 8002402:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002404:	1d3a      	adds	r2, r7, #4
 8002406:	4b34      	ldr	r3, [pc, #208]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002408:	0011      	movs	r1, r2
 800240a:	0018      	movs	r0, r3
 800240c:	f001 fab8 	bl	8003980 <HAL_ADC_ConfigChannel>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d001      	beq.n	8002418 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8002414:	f000 fc9c 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	2203      	movs	r2, #3
 800241c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800241e:	1d3a      	adds	r2, r7, #4
 8002420:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002422:	0011      	movs	r1, r2
 8002424:	0018      	movs	r0, r3
 8002426:	f001 faab 	bl	8003980 <HAL_ADC_ConfigChannel>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d001      	beq.n	8002432 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800242e:	f000 fc8f 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2204      	movs	r2, #4
 8002436:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002438:	1d3a      	adds	r2, r7, #4
 800243a:	4b27      	ldr	r3, [pc, #156]	@ (80024d8 <MX_ADC_Init+0x198>)
 800243c:	0011      	movs	r1, r2
 800243e:	0018      	movs	r0, r3
 8002440:	f001 fa9e 	bl	8003980 <HAL_ADC_ConfigChannel>
 8002444:	1e03      	subs	r3, r0, #0
 8002446:	d001      	beq.n	800244c <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8002448:	f000 fc82 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2205      	movs	r2, #5
 8002450:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002452:	1d3a      	adds	r2, r7, #4
 8002454:	4b20      	ldr	r3, [pc, #128]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002456:	0011      	movs	r1, r2
 8002458:	0018      	movs	r0, r3
 800245a:	f001 fa91 	bl	8003980 <HAL_ADC_ConfigChannel>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d001      	beq.n	8002466 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8002462:	f000 fc75 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	2206      	movs	r2, #6
 800246a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800246c:	1d3a      	adds	r2, r7, #4
 800246e:	4b1a      	ldr	r3, [pc, #104]	@ (80024d8 <MX_ADC_Init+0x198>)
 8002470:	0011      	movs	r1, r2
 8002472:	0018      	movs	r0, r3
 8002474:	f001 fa84 	bl	8003980 <HAL_ADC_ConfigChannel>
 8002478:	1e03      	subs	r3, r0, #0
 800247a:	d001      	beq.n	8002480 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 800247c:	f000 fc68 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8002480:	1d3b      	adds	r3, r7, #4
 8002482:	2207      	movs	r2, #7
 8002484:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8002486:	1d3a      	adds	r2, r7, #4
 8002488:	4b13      	ldr	r3, [pc, #76]	@ (80024d8 <MX_ADC_Init+0x198>)
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f001 fa77 	bl	8003980 <HAL_ADC_ConfigChannel>
 8002492:	1e03      	subs	r3, r0, #0
 8002494:	d001      	beq.n	800249a <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8002496:	f000 fc5b 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2208      	movs	r2, #8
 800249e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024a0:	1d3a      	adds	r2, r7, #4
 80024a2:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <MX_ADC_Init+0x198>)
 80024a4:	0011      	movs	r1, r2
 80024a6:	0018      	movs	r0, r3
 80024a8:	f001 fa6a 	bl	8003980 <HAL_ADC_ConfigChannel>
 80024ac:	1e03      	subs	r3, r0, #0
 80024ae:	d001      	beq.n	80024b4 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 80024b0:	f000 fc4e 	bl	8002d50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	2209      	movs	r2, #9
 80024b8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024ba:	1d3a      	adds	r2, r7, #4
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <MX_ADC_Init+0x198>)
 80024be:	0011      	movs	r1, r2
 80024c0:	0018      	movs	r0, r3
 80024c2:	f001 fa5d 	bl	8003980 <HAL_ADC_ConfigChannel>
 80024c6:	1e03      	subs	r3, r0, #0
 80024c8:	d001      	beq.n	80024ce <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 80024ca:	f000 fc41 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	46bd      	mov	sp, r7
 80024d2:	b004      	add	sp, #16
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	46c0      	nop			@ (mov r8, r8)
 80024d8:	20000074 	.word	0x20000074
 80024dc:	40012400 	.word	0x40012400

080024e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b08a      	sub	sp, #40	@ 0x28
 80024e4:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80024e6:	4b2e      	ldr	r3, [pc, #184]	@ (80025a0 <MX_CAN_Init+0xc0>)
 80024e8:	4a2e      	ldr	r2, [pc, #184]	@ (80025a4 <MX_CAN_Init+0xc4>)
 80024ea:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80024ec:	4b2c      	ldr	r3, [pc, #176]	@ (80025a0 <MX_CAN_Init+0xc0>)
 80024ee:	2203      	movs	r2, #3
 80024f0:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80024f2:	4b2b      	ldr	r3, [pc, #172]	@ (80025a0 <MX_CAN_Init+0xc0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80024f8:	4b29      	ldr	r3, [pc, #164]	@ (80025a0 <MX_CAN_Init+0xc0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80024fe:	4b28      	ldr	r3, [pc, #160]	@ (80025a0 <MX_CAN_Init+0xc0>)
 8002500:	22c0      	movs	r2, #192	@ 0xc0
 8002502:	0312      	lsls	r2, r2, #12
 8002504:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002506:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <MX_CAN_Init+0xc0>)
 8002508:	2280      	movs	r2, #128	@ 0x80
 800250a:	0352      	lsls	r2, r2, #13
 800250c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800250e:	4b24      	ldr	r3, [pc, #144]	@ (80025a0 <MX_CAN_Init+0xc0>)
 8002510:	2200      	movs	r2, #0
 8002512:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <MX_CAN_Init+0xc0>)
 8002516:	2200      	movs	r2, #0
 8002518:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <MX_CAN_Init+0xc0>)
 800251c:	2200      	movs	r2, #0
 800251e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8002520:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <MX_CAN_Init+0xc0>)
 8002522:	2201      	movs	r2, #1
 8002524:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8002526:	4b1e      	ldr	r3, [pc, #120]	@ (80025a0 <MX_CAN_Init+0xc0>)
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800252c:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <MX_CAN_Init+0xc0>)
 800252e:	2200      	movs	r2, #0
 8002530:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8002532:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <MX_CAN_Init+0xc0>)
 8002534:	0018      	movs	r0, r3
 8002536:	f001 fc39 	bl	8003dac <HAL_CAN_Init>
 800253a:	1e03      	subs	r3, r0, #0
 800253c:	d001      	beq.n	8002542 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800253e:	f000 fc07 	bl	8002d50 <Error_Handler>
//	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
//	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
//	canfilterconfig.FilterIdHigh = 0x1B1 << 5;
//	canfilterconfig.FilterIdLow = 0x3A1 << 5;
//	canfilterconfig.SlaveStartFilterBank = 0;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8002542:	003b      	movs	r3, r7
 8002544:	2201      	movs	r2, #1
 8002546:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 10;
 8002548:	003b      	movs	r3, r7
 800254a:	220a      	movs	r2, #10
 800254c:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800254e:	003b      	movs	r3, r7
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Modo enmascarado
 8002554:	003b      	movs	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT; // Filtro de 32 bits
 800255a:	003b      	movs	r3, r7
 800255c:	2201      	movs	r2, #1
 800255e:	61da      	str	r2, [r3, #28]

	// Aceptar todos los IDs: ID = 0x00000000, Máscara = 0x00000000
	canfilterconfig.FilterIdHigh = 0x0000;
 8002560:	003b      	movs	r3, r7
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8002566:	003b      	movs	r3, r7
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 800256c:	003b      	movs	r3, r7
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8002572:	003b      	movs	r3, r7
 8002574:	2200      	movs	r2, #0
 8002576:	60da      	str	r2, [r3, #12]

	canfilterconfig.SlaveStartFilterBank = 0;
 8002578:	003b      	movs	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800257e:	003a      	movs	r2, r7
 8002580:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <MX_CAN_Init+0xc0>)
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f001 fd0f 	bl	8003fa8 <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800258a:	003a      	movs	r2, r7
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <MX_CAN_Init+0xc0>)
 800258e:	0011      	movs	r1, r2
 8002590:	0018      	movs	r0, r3
 8002592:	f001 fd09 	bl	8003fa8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8002596:	46c0      	nop			@ (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b00a      	add	sp, #40	@ 0x28
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			@ (mov r8, r8)
 80025a0:	200000f8 	.word	0x200000f8
 80025a4:	40006400 	.word	0x40006400

080025a8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025ac:	4b1b      	ldr	r3, [pc, #108]	@ (800261c <MX_SPI2_Init+0x74>)
 80025ae:	4a1c      	ldr	r2, [pc, #112]	@ (8002620 <MX_SPI2_Init+0x78>)
 80025b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <MX_SPI2_Init+0x74>)
 80025b4:	2282      	movs	r2, #130	@ 0x82
 80025b6:	0052      	lsls	r2, r2, #1
 80025b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <MX_SPI2_Init+0x74>)
 80025bc:	2200      	movs	r2, #0
 80025be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80025c0:	4b16      	ldr	r3, [pc, #88]	@ (800261c <MX_SPI2_Init+0x74>)
 80025c2:	22f0      	movs	r2, #240	@ 0xf0
 80025c4:	0112      	lsls	r2, r2, #4
 80025c6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c8:	4b14      	ldr	r3, [pc, #80]	@ (800261c <MX_SPI2_Init+0x74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025ce:	4b13      	ldr	r3, [pc, #76]	@ (800261c <MX_SPI2_Init+0x74>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025d4:	4b11      	ldr	r3, [pc, #68]	@ (800261c <MX_SPI2_Init+0x74>)
 80025d6:	2280      	movs	r2, #128	@ 0x80
 80025d8:	0092      	lsls	r2, r2, #2
 80025da:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <MX_SPI2_Init+0x74>)
 80025de:	2220      	movs	r2, #32
 80025e0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025e2:	4b0e      	ldr	r3, [pc, #56]	@ (800261c <MX_SPI2_Init+0x74>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e8:	4b0c      	ldr	r3, [pc, #48]	@ (800261c <MX_SPI2_Init+0x74>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025ee:	4b0b      	ldr	r3, [pc, #44]	@ (800261c <MX_SPI2_Init+0x74>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <MX_SPI2_Init+0x74>)
 80025f6:	2207      	movs	r2, #7
 80025f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <MX_SPI2_Init+0x74>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002600:	4b06      	ldr	r3, [pc, #24]	@ (800261c <MX_SPI2_Init+0x74>)
 8002602:	2208      	movs	r2, #8
 8002604:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002606:	4b05      	ldr	r3, [pc, #20]	@ (800261c <MX_SPI2_Init+0x74>)
 8002608:	0018      	movs	r0, r3
 800260a:	f003 fb11 	bl	8005c30 <HAL_SPI_Init>
 800260e:	1e03      	subs	r3, r0, #0
 8002610:	d001      	beq.n	8002616 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002612:	f000 fb9d 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002616:	46c0      	nop			@ (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20000120 	.word	0x20000120
 8002620:	40003800 	.word	0x40003800

08002624 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b092      	sub	sp, #72	@ 0x48
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262a:	2340      	movs	r3, #64	@ 0x40
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	0018      	movs	r0, r3
 8002630:	2308      	movs	r3, #8
 8002632:	001a      	movs	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f004 fe6d 	bl	8007314 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800263a:	2324      	movs	r3, #36	@ 0x24
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	0018      	movs	r0, r3
 8002640:	231c      	movs	r3, #28
 8002642:	001a      	movs	r2, r3
 8002644:	2100      	movs	r1, #0
 8002646:	f004 fe65 	bl	8007314 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800264a:	1d3b      	adds	r3, r7, #4
 800264c:	0018      	movs	r0, r3
 800264e:	2320      	movs	r3, #32
 8002650:	001a      	movs	r2, r3
 8002652:	2100      	movs	r1, #0
 8002654:	f004 fe5e 	bl	8007314 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002658:	4b38      	ldr	r3, [pc, #224]	@ (800273c <MX_TIM1_Init+0x118>)
 800265a:	4a39      	ldr	r2, [pc, #228]	@ (8002740 <MX_TIM1_Init+0x11c>)
 800265c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800265e:	4b37      	ldr	r3, [pc, #220]	@ (800273c <MX_TIM1_Init+0x118>)
 8002660:	4a38      	ldr	r2, [pc, #224]	@ (8002744 <MX_TIM1_Init+0x120>)
 8002662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002664:	4b35      	ldr	r3, [pc, #212]	@ (800273c <MX_TIM1_Init+0x118>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000;
 800266a:	4b34      	ldr	r3, [pc, #208]	@ (800273c <MX_TIM1_Init+0x118>)
 800266c:	4a36      	ldr	r2, [pc, #216]	@ (8002748 <MX_TIM1_Init+0x124>)
 800266e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002670:	4b32      	ldr	r3, [pc, #200]	@ (800273c <MX_TIM1_Init+0x118>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002676:	4b31      	ldr	r3, [pc, #196]	@ (800273c <MX_TIM1_Init+0x118>)
 8002678:	2200      	movs	r2, #0
 800267a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267c:	4b2f      	ldr	r3, [pc, #188]	@ (800273c <MX_TIM1_Init+0x118>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002682:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <MX_TIM1_Init+0x118>)
 8002684:	0018      	movs	r0, r3
 8002686:	f003 ff7f 	bl	8006588 <HAL_TIM_OC_Init>
 800268a:	1e03      	subs	r3, r0, #0
 800268c:	d001      	beq.n	8002692 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800268e:	f000 fb5f 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002692:	2140      	movs	r1, #64	@ 0x40
 8002694:	187b      	adds	r3, r7, r1
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800269a:	187b      	adds	r3, r7, r1
 800269c:	2200      	movs	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80026a0:	187a      	adds	r2, r7, r1
 80026a2:	4b26      	ldr	r3, [pc, #152]	@ (800273c <MX_TIM1_Init+0x118>)
 80026a4:	0011      	movs	r1, r2
 80026a6:	0018      	movs	r0, r3
 80026a8:	f004 fd6e 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 80026ac:	1e03      	subs	r3, r0, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80026b0:	f000 fb4e 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026b4:	2124      	movs	r1, #36	@ 0x24
 80026b6:	187b      	adds	r3, r7, r1
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80026bc:	187b      	adds	r3, r7, r1
 80026be:	2200      	movs	r2, #0
 80026c0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c2:	187b      	adds	r3, r7, r1
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c8:	187b      	adds	r3, r7, r1
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026da:	187b      	adds	r3, r7, r1
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026e0:	1879      	adds	r1, r7, r1
 80026e2:	4b16      	ldr	r3, [pc, #88]	@ (800273c <MX_TIM1_Init+0x118>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	0018      	movs	r0, r3
 80026e8:	f004 f988 	bl	80069fc <HAL_TIM_OC_ConfigChannel>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80026f0:	f000 fb2e 	bl	8002d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	2200      	movs	r2, #0
 80026fe:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002706:	1d3b      	adds	r3, r7, #4
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800270c:	1d3b      	adds	r3, r7, #4
 800270e:	2200      	movs	r2, #0
 8002710:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002712:	1d3b      	adds	r3, r7, #4
 8002714:	2280      	movs	r2, #128	@ 0x80
 8002716:	0192      	lsls	r2, r2, #6
 8002718:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800271a:	1d3b      	adds	r3, r7, #4
 800271c:	2200      	movs	r2, #0
 800271e:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002720:	1d3a      	adds	r2, r7, #4
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <MX_TIM1_Init+0x118>)
 8002724:	0011      	movs	r1, r2
 8002726:	0018      	movs	r0, r3
 8002728:	f004 fd86 	bl	8007238 <HAL_TIMEx_ConfigBreakDeadTime>
 800272c:	1e03      	subs	r3, r0, #0
 800272e:	d001      	beq.n	8002734 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002730:	f000 fb0e 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002734:	46c0      	nop			@ (mov r8, r8)
 8002736:	46bd      	mov	sp, r7
 8002738:	b012      	add	sp, #72	@ 0x48
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000184 	.word	0x20000184
 8002740:	40012c00 	.word	0x40012c00
 8002744:	000003e7 	.word	0x000003e7
 8002748:	0000bb80 	.word	0x0000bb80

0800274c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b08a      	sub	sp, #40	@ 0x28
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002752:	2320      	movs	r3, #32
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	0018      	movs	r0, r3
 8002758:	2308      	movs	r3, #8
 800275a:	001a      	movs	r2, r3
 800275c:	2100      	movs	r1, #0
 800275e:	f004 fdd9 	bl	8007314 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	0018      	movs	r0, r3
 8002766:	231c      	movs	r3, #28
 8002768:	001a      	movs	r2, r3
 800276a:	2100      	movs	r1, #0
 800276c:	f004 fdd2 	bl	8007314 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002770:	4b29      	ldr	r3, [pc, #164]	@ (8002818 <MX_TIM2_Init+0xcc>)
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	05d2      	lsls	r2, r2, #23
 8002776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9504;
 8002778:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <MX_TIM2_Init+0xcc>)
 800277a:	4a28      	ldr	r2, [pc, #160]	@ (800281c <MX_TIM2_Init+0xd0>)
 800277c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277e:	4b26      	ldr	r3, [pc, #152]	@ (8002818 <MX_TIM2_Init+0xcc>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002784:	4b24      	ldr	r3, [pc, #144]	@ (8002818 <MX_TIM2_Init+0xcc>)
 8002786:	2264      	movs	r2, #100	@ 0x64
 8002788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278a:	4b23      	ldr	r3, [pc, #140]	@ (8002818 <MX_TIM2_Init+0xcc>)
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002790:	4b21      	ldr	r3, [pc, #132]	@ (8002818 <MX_TIM2_Init+0xcc>)
 8002792:	2200      	movs	r2, #0
 8002794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002796:	4b20      	ldr	r3, [pc, #128]	@ (8002818 <MX_TIM2_Init+0xcc>)
 8002798:	0018      	movs	r0, r3
 800279a:	f003 ff45 	bl	8006628 <HAL_TIM_PWM_Init>
 800279e:	1e03      	subs	r3, r0, #0
 80027a0:	d001      	beq.n	80027a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80027a2:	f000 fad5 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027a6:	2120      	movs	r1, #32
 80027a8:	187b      	adds	r3, r7, r1
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ae:	187b      	adds	r3, r7, r1
 80027b0:	2200      	movs	r2, #0
 80027b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027b4:	187a      	adds	r2, r7, r1
 80027b6:	4b18      	ldr	r3, [pc, #96]	@ (8002818 <MX_TIM2_Init+0xcc>)
 80027b8:	0011      	movs	r1, r2
 80027ba:	0018      	movs	r0, r3
 80027bc:	f004 fce4 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 80027c0:	1e03      	subs	r3, r0, #0
 80027c2:	d001      	beq.n	80027c8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80027c4:	f000 fac4 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2260      	movs	r2, #96	@ 0x60
 80027cc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027d4:	1d3b      	adds	r3, r7, #4
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	2200      	movs	r2, #0
 80027de:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027e0:	1d39      	adds	r1, r7, #4
 80027e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002818 <MX_TIM2_Init+0xcc>)
 80027e4:	2208      	movs	r2, #8
 80027e6:	0018      	movs	r0, r3
 80027e8:	f004 f960 	bl	8006aac <HAL_TIM_PWM_ConfigChannel>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80027f0:	f000 faae 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80027f4:	1d39      	adds	r1, r7, #4
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <MX_TIM2_Init+0xcc>)
 80027f8:	220c      	movs	r2, #12
 80027fa:	0018      	movs	r0, r3
 80027fc:	f004 f956 	bl	8006aac <HAL_TIM_PWM_ConfigChannel>
 8002800:	1e03      	subs	r3, r0, #0
 8002802:	d001      	beq.n	8002808 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8002804:	f000 faa4 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <MX_TIM2_Init+0xcc>)
 800280a:	0018      	movs	r0, r3
 800280c:	f000 fc94 	bl	8003138 <HAL_TIM_MspPostInit>

}
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	46bd      	mov	sp, r7
 8002814:	b00a      	add	sp, #40	@ 0x28
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200001cc 	.word	0x200001cc
 800281c:	00002520 	.word	0x00002520

08002820 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002826:	2320      	movs	r3, #32
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	0018      	movs	r0, r3
 800282c:	2308      	movs	r3, #8
 800282e:	001a      	movs	r2, r3
 8002830:	2100      	movs	r1, #0
 8002832:	f004 fd6f 	bl	8007314 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	0018      	movs	r0, r3
 800283a:	231c      	movs	r3, #28
 800283c:	001a      	movs	r2, r3
 800283e:	2100      	movs	r1, #0
 8002840:	f004 fd68 	bl	8007314 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002844:	4b29      	ldr	r3, [pc, #164]	@ (80028ec <MX_TIM3_Init+0xcc>)
 8002846:	4a2a      	ldr	r2, [pc, #168]	@ (80028f0 <MX_TIM3_Init+0xd0>)
 8002848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9504;
 800284a:	4b28      	ldr	r3, [pc, #160]	@ (80028ec <MX_TIM3_Init+0xcc>)
 800284c:	4a29      	ldr	r2, [pc, #164]	@ (80028f4 <MX_TIM3_Init+0xd4>)
 800284e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002850:	4b26      	ldr	r3, [pc, #152]	@ (80028ec <MX_TIM3_Init+0xcc>)
 8002852:	2200      	movs	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8002856:	4b25      	ldr	r3, [pc, #148]	@ (80028ec <MX_TIM3_Init+0xcc>)
 8002858:	2264      	movs	r2, #100	@ 0x64
 800285a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800285c:	4b23      	ldr	r3, [pc, #140]	@ (80028ec <MX_TIM3_Init+0xcc>)
 800285e:	2200      	movs	r2, #0
 8002860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002862:	4b22      	ldr	r3, [pc, #136]	@ (80028ec <MX_TIM3_Init+0xcc>)
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002868:	4b20      	ldr	r3, [pc, #128]	@ (80028ec <MX_TIM3_Init+0xcc>)
 800286a:	0018      	movs	r0, r3
 800286c:	f003 fedc 	bl	8006628 <HAL_TIM_PWM_Init>
 8002870:	1e03      	subs	r3, r0, #0
 8002872:	d001      	beq.n	8002878 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002874:	f000 fa6c 	bl	8002d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002878:	2120      	movs	r1, #32
 800287a:	187b      	adds	r3, r7, r1
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002880:	187b      	adds	r3, r7, r1
 8002882:	2200      	movs	r2, #0
 8002884:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002886:	187a      	adds	r2, r7, r1
 8002888:	4b18      	ldr	r3, [pc, #96]	@ (80028ec <MX_TIM3_Init+0xcc>)
 800288a:	0011      	movs	r1, r2
 800288c:	0018      	movs	r0, r3
 800288e:	f004 fc7b 	bl	8007188 <HAL_TIMEx_MasterConfigSynchronization>
 8002892:	1e03      	subs	r3, r0, #0
 8002894:	d001      	beq.n	800289a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8002896:	f000 fa5b 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800289a:	1d3b      	adds	r3, r7, #4
 800289c:	2260      	movs	r2, #96	@ 0x60
 800289e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80028a0:	1d3b      	adds	r3, r7, #4
 80028a2:	2200      	movs	r2, #0
 80028a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	2200      	movs	r2, #0
 80028b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028b2:	1d39      	adds	r1, r7, #4
 80028b4:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <MX_TIM3_Init+0xcc>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	0018      	movs	r0, r3
 80028ba:	f004 f8f7 	bl	8006aac <HAL_TIM_PWM_ConfigChannel>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80028c2:	f000 fa45 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028c6:	1d39      	adds	r1, r7, #4
 80028c8:	4b08      	ldr	r3, [pc, #32]	@ (80028ec <MX_TIM3_Init+0xcc>)
 80028ca:	2204      	movs	r2, #4
 80028cc:	0018      	movs	r0, r3
 80028ce:	f004 f8ed 	bl	8006aac <HAL_TIM_PWM_ConfigChannel>
 80028d2:	1e03      	subs	r3, r0, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80028d6:	f000 fa3b 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80028da:	4b04      	ldr	r3, [pc, #16]	@ (80028ec <MX_TIM3_Init+0xcc>)
 80028dc:	0018      	movs	r0, r3
 80028de:	f000 fc2b 	bl	8003138 <HAL_TIM_MspPostInit>

}
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b00a      	add	sp, #40	@ 0x28
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	20000214 	.word	0x20000214
 80028f0:	40000400 	.word	0x40000400
 80028f4:	00002520 	.word	0x00002520

080028f8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b090      	sub	sp, #64	@ 0x40
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80028fe:	2324      	movs	r3, #36	@ 0x24
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	0018      	movs	r0, r3
 8002904:	231c      	movs	r3, #28
 8002906:	001a      	movs	r2, r3
 8002908:	2100      	movs	r1, #0
 800290a:	f004 fd03 	bl	8007314 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	0018      	movs	r0, r3
 8002912:	2320      	movs	r3, #32
 8002914:	001a      	movs	r2, r3
 8002916:	2100      	movs	r1, #0
 8002918:	f004 fcfc 	bl	8007314 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800291c:	4b36      	ldr	r3, [pc, #216]	@ (80029f8 <MX_TIM16_Init+0x100>)
 800291e:	4a37      	ldr	r2, [pc, #220]	@ (80029fc <MX_TIM16_Init+0x104>)
 8002920:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3170;
 8002922:	4b35      	ldr	r3, [pc, #212]	@ (80029f8 <MX_TIM16_Init+0x100>)
 8002924:	4a36      	ldr	r2, [pc, #216]	@ (8002a00 <MX_TIM16_Init+0x108>)
 8002926:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002928:	4b33      	ldr	r3, [pc, #204]	@ (80029f8 <MX_TIM16_Init+0x100>)
 800292a:	2200      	movs	r2, #0
 800292c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800292e:	4b32      	ldr	r3, [pc, #200]	@ (80029f8 <MX_TIM16_Init+0x100>)
 8002930:	2264      	movs	r2, #100	@ 0x64
 8002932:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002934:	4b30      	ldr	r3, [pc, #192]	@ (80029f8 <MX_TIM16_Init+0x100>)
 8002936:	2200      	movs	r2, #0
 8002938:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800293a:	4b2f      	ldr	r3, [pc, #188]	@ (80029f8 <MX_TIM16_Init+0x100>)
 800293c:	2200      	movs	r2, #0
 800293e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002940:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <MX_TIM16_Init+0x100>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002946:	4b2c      	ldr	r3, [pc, #176]	@ (80029f8 <MX_TIM16_Init+0x100>)
 8002948:	0018      	movs	r0, r3
 800294a:	f003 fd81 	bl	8006450 <HAL_TIM_Base_Init>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002952:	f000 f9fd 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002956:	4b28      	ldr	r3, [pc, #160]	@ (80029f8 <MX_TIM16_Init+0x100>)
 8002958:	0018      	movs	r0, r3
 800295a:	f003 fe65 	bl	8006628 <HAL_TIM_PWM_Init>
 800295e:	1e03      	subs	r3, r0, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8002962:	f000 f9f5 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002966:	2124      	movs	r1, #36	@ 0x24
 8002968:	187b      	adds	r3, r7, r1
 800296a:	2260      	movs	r2, #96	@ 0x60
 800296c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800296e:	187b      	adds	r3, r7, r1
 8002970:	2200      	movs	r2, #0
 8002972:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002974:	187b      	adds	r3, r7, r1
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800297a:	187b      	adds	r3, r7, r1
 800297c:	2200      	movs	r2, #0
 800297e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002980:	187b      	adds	r3, r7, r1
 8002982:	2200      	movs	r2, #0
 8002984:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002986:	187b      	adds	r3, r7, r1
 8002988:	2200      	movs	r2, #0
 800298a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800298c:	187b      	adds	r3, r7, r1
 800298e:	2200      	movs	r2, #0
 8002990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002992:	1879      	adds	r1, r7, r1
 8002994:	4b18      	ldr	r3, [pc, #96]	@ (80029f8 <MX_TIM16_Init+0x100>)
 8002996:	2200      	movs	r2, #0
 8002998:	0018      	movs	r0, r3
 800299a:	f004 f887 	bl	8006aac <HAL_TIM_PWM_ConfigChannel>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d001      	beq.n	80029a6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80029a2:	f000 f9d5 	bl	8002d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029a6:	1d3b      	adds	r3, r7, #4
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029b2:	1d3b      	adds	r3, r7, #4
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80029b8:	1d3b      	adds	r3, r7, #4
 80029ba:	2200      	movs	r2, #0
 80029bc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029be:	1d3b      	adds	r3, r7, #4
 80029c0:	2200      	movs	r2, #0
 80029c2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	2280      	movs	r2, #128	@ 0x80
 80029c8:	0192      	lsls	r2, r2, #6
 80029ca:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80029d2:	1d3a      	adds	r2, r7, #4
 80029d4:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <MX_TIM16_Init+0x100>)
 80029d6:	0011      	movs	r1, r2
 80029d8:	0018      	movs	r0, r3
 80029da:	f004 fc2d 	bl	8007238 <HAL_TIMEx_ConfigBreakDeadTime>
 80029de:	1e03      	subs	r3, r0, #0
 80029e0:	d001      	beq.n	80029e6 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 80029e2:	f000 f9b5 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80029e6:	4b04      	ldr	r3, [pc, #16]	@ (80029f8 <MX_TIM16_Init+0x100>)
 80029e8:	0018      	movs	r0, r3
 80029ea:	f000 fba5 	bl	8003138 <HAL_TIM_MspPostInit>

}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b010      	add	sp, #64	@ 0x40
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	2000025c 	.word	0x2000025c
 80029fc:	40014400 	.word	0x40014400
 8002a00:	00000c62 	.word	0x00000c62

08002a04 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b090      	sub	sp, #64	@ 0x40
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a0a:	2324      	movs	r3, #36	@ 0x24
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	0018      	movs	r0, r3
 8002a10:	231c      	movs	r3, #28
 8002a12:	001a      	movs	r2, r3
 8002a14:	2100      	movs	r1, #0
 8002a16:	f004 fc7d 	bl	8007314 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002a1a:	1d3b      	adds	r3, r7, #4
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	2320      	movs	r3, #32
 8002a20:	001a      	movs	r2, r3
 8002a22:	2100      	movs	r1, #0
 8002a24:	f004 fc76 	bl	8007314 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002a28:	4b36      	ldr	r3, [pc, #216]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a2a:	4a37      	ldr	r2, [pc, #220]	@ (8002b08 <MX_TIM17_Init+0x104>)
 8002a2c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3170;
 8002a2e:	4b35      	ldr	r3, [pc, #212]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a30:	4a36      	ldr	r2, [pc, #216]	@ (8002b0c <MX_TIM17_Init+0x108>)
 8002a32:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a34:	4b33      	ldr	r3, [pc, #204]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8002a3a:	4b32      	ldr	r3, [pc, #200]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a3c:	2264      	movs	r2, #100	@ 0x64
 8002a3e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a40:	4b30      	ldr	r3, [pc, #192]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002a46:	4b2f      	ldr	r3, [pc, #188]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002a52:	4b2c      	ldr	r3, [pc, #176]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a54:	0018      	movs	r0, r3
 8002a56:	f003 fcfb 	bl	8006450 <HAL_TIM_Base_Init>
 8002a5a:	1e03      	subs	r3, r0, #0
 8002a5c:	d001      	beq.n	8002a62 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8002a5e:	f000 f977 	bl	8002d50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002a62:	4b28      	ldr	r3, [pc, #160]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002a64:	0018      	movs	r0, r3
 8002a66:	f003 fddf 	bl	8006628 <HAL_TIM_PWM_Init>
 8002a6a:	1e03      	subs	r3, r0, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8002a6e:	f000 f96f 	bl	8002d50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a72:	2124      	movs	r1, #36	@ 0x24
 8002a74:	187b      	adds	r3, r7, r1
 8002a76:	2260      	movs	r2, #96	@ 0x60
 8002a78:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002a7a:	187b      	adds	r3, r7, r1
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	2200      	movs	r2, #0
 8002a8a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	2200      	movs	r2, #0
 8002a96:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a9e:	1879      	adds	r1, r7, r1
 8002aa0:	4b18      	ldr	r3, [pc, #96]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f004 f801 	bl	8006aac <HAL_TIM_PWM_ConfigChannel>
 8002aaa:	1e03      	subs	r3, r0, #0
 8002aac:	d001      	beq.n	8002ab2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8002aae:	f000 f94f 	bl	8002d50 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002abe:	1d3b      	adds	r3, r7, #4
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ac4:	1d3b      	adds	r3, r7, #4
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002aca:	1d3b      	adds	r3, r7, #4
 8002acc:	2200      	movs	r2, #0
 8002ace:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ad0:	1d3b      	adds	r3, r7, #4
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	0192      	lsls	r2, r2, #6
 8002ad6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002ade:	1d3a      	adds	r2, r7, #4
 8002ae0:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002ae2:	0011      	movs	r1, r2
 8002ae4:	0018      	movs	r0, r3
 8002ae6:	f004 fba7 	bl	8007238 <HAL_TIMEx_ConfigBreakDeadTime>
 8002aea:	1e03      	subs	r3, r0, #0
 8002aec:	d001      	beq.n	8002af2 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8002aee:	f000 f92f 	bl	8002d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002af2:	4b04      	ldr	r3, [pc, #16]	@ (8002b04 <MX_TIM17_Init+0x100>)
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 fb1f 	bl	8003138 <HAL_TIM_MspPostInit>

}
 8002afa:	46c0      	nop			@ (mov r8, r8)
 8002afc:	46bd      	mov	sp, r7
 8002afe:	b010      	add	sp, #64	@ 0x40
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	200002a4 	.word	0x200002a4
 8002b08:	40014800 	.word	0x40014800
 8002b0c:	00000c62 	.word	0x00000c62

08002b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b16:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <MX_DMA_Init+0x38>)
 8002b18:	695a      	ldr	r2, [r3, #20]
 8002b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <MX_DMA_Init+0x38>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	615a      	str	r2, [r3, #20]
 8002b22:	4b09      	ldr	r3, [pc, #36]	@ (8002b48 <MX_DMA_Init+0x38>)
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	2201      	movs	r2, #1
 8002b28:	4013      	ands	r3, r2
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b2e:	2200      	movs	r2, #0
 8002b30:	2100      	movs	r1, #0
 8002b32:	2009      	movs	r0, #9
 8002b34:	f002 f858 	bl	8004be8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b38:	2009      	movs	r0, #9
 8002b3a:	f002 f86a 	bl	8004c12 <HAL_NVIC_EnableIRQ>

}
 8002b3e:	46c0      	nop			@ (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			@ (mov r8, r8)
 8002b48:	40021000 	.word	0x40021000

08002b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b08b      	sub	sp, #44	@ 0x2c
 8002b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b52:	2414      	movs	r4, #20
 8002b54:	193b      	adds	r3, r7, r4
 8002b56:	0018      	movs	r0, r3
 8002b58:	2314      	movs	r3, #20
 8002b5a:	001a      	movs	r2, r3
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f004 fbd9 	bl	8007314 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b62:	4b45      	ldr	r3, [pc, #276]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002b64:	695a      	ldr	r2, [r3, #20]
 8002b66:	4b44      	ldr	r3, [pc, #272]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002b68:	2180      	movs	r1, #128	@ 0x80
 8002b6a:	0309      	lsls	r1, r1, #12
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	615a      	str	r2, [r3, #20]
 8002b70:	4b41      	ldr	r3, [pc, #260]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	2380      	movs	r3, #128	@ 0x80
 8002b76:	031b      	lsls	r3, r3, #12
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	4b3d      	ldr	r3, [pc, #244]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002b84:	2180      	movs	r1, #128	@ 0x80
 8002b86:	03c9      	lsls	r1, r1, #15
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	615a      	str	r2, [r3, #20]
 8002b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	2380      	movs	r3, #128	@ 0x80
 8002b92:	03db      	lsls	r3, r3, #15
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	4b37      	ldr	r3, [pc, #220]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	4b36      	ldr	r3, [pc, #216]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002ba0:	2180      	movs	r1, #128	@ 0x80
 8002ba2:	0289      	lsls	r1, r1, #10
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	615a      	str	r2, [r3, #20]
 8002ba8:	4b33      	ldr	r3, [pc, #204]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	2380      	movs	r3, #128	@ 0x80
 8002bae:	029b      	lsls	r3, r3, #10
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	4b30      	ldr	r3, [pc, #192]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	4b2f      	ldr	r3, [pc, #188]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002bbc:	2180      	movs	r1, #128	@ 0x80
 8002bbe:	02c9      	lsls	r1, r1, #11
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	615a      	str	r2, [r3, #20]
 8002bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8002c78 <MX_GPIO_Init+0x12c>)
 8002bc6:	695a      	ldr	r2, [r3, #20]
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	02db      	lsls	r3, r3, #11
 8002bcc:	4013      	ands	r3, r2
 8002bce:	607b      	str	r3, [r7, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, GPIO_PIN_RESET);
 8002bd2:	2380      	movs	r3, #128	@ 0x80
 8002bd4:	019b      	lsls	r3, r3, #6
 8002bd6:	4829      	ldr	r0, [pc, #164]	@ (8002c7c <MX_GPIO_Init+0x130>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	0019      	movs	r1, r3
 8002bdc:	f002 fb36 	bl	800524c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V12_NP_Signal_Pin|CS_PIN_Pin|F1R_Signal_Pin|F2L_Signal_Pin
 8002be0:	4927      	ldr	r1, [pc, #156]	@ (8002c80 <MX_GPIO_Init+0x134>)
 8002be2:	4b28      	ldr	r3, [pc, #160]	@ (8002c84 <MX_GPIO_Init+0x138>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	0018      	movs	r0, r3
 8002be8:	f002 fb30 	bl	800524c <HAL_GPIO_WritePin>
                          |F1L_Signal_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin, GPIO_PIN_RESET);
 8002bec:	2387      	movs	r3, #135	@ 0x87
 8002bee:	0219      	lsls	r1, r3, #8
 8002bf0:	2390      	movs	r3, #144	@ 0x90
 8002bf2:	05db      	lsls	r3, r3, #23
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	f002 fb28 	bl	800524c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ecu_Signal_Pin */
  GPIO_InitStruct.Pin = Ecu_Signal_Pin;
 8002bfc:	193b      	adds	r3, r7, r4
 8002bfe:	2280      	movs	r2, #128	@ 0x80
 8002c00:	0192      	lsls	r2, r2, #6
 8002c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c04:	193b      	adds	r3, r7, r4
 8002c06:	2201      	movs	r2, #1
 8002c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	193b      	adds	r3, r7, r4
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	193b      	adds	r3, r7, r4
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ecu_Signal_GPIO_Port, &GPIO_InitStruct);
 8002c16:	193b      	adds	r3, r7, r4
 8002c18:	4a18      	ldr	r2, [pc, #96]	@ (8002c7c <MX_GPIO_Init+0x130>)
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	0010      	movs	r0, r2
 8002c1e:	f002 f9ad 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : V12_NP_Signal_Pin CS_PIN_Pin F1R_Signal_Pin F2L_Signal_Pin
                           F1L_Signal_Pin */
  GPIO_InitStruct.Pin = V12_NP_Signal_Pin|CS_PIN_Pin|F1R_Signal_Pin|F2L_Signal_Pin
 8002c22:	193b      	adds	r3, r7, r4
 8002c24:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <MX_GPIO_Init+0x134>)
 8002c26:	601a      	str	r2, [r3, #0]
                          |F1L_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	4a11      	ldr	r2, [pc, #68]	@ (8002c84 <MX_GPIO_Init+0x138>)
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0010      	movs	r0, r2
 8002c42:	f002 f99b 	bl	8004f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : WPR_Signal_Pin WPL_Signal_Pin Reset_Pin F2R_Signal_Pin */
  GPIO_InitStruct.Pin = WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin;
 8002c46:	0021      	movs	r1, r4
 8002c48:	187b      	adds	r3, r7, r1
 8002c4a:	2287      	movs	r2, #135	@ 0x87
 8002c4c:	0212      	lsls	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c50:	187b      	adds	r3, r7, r1
 8002c52:	2201      	movs	r2, #1
 8002c54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2200      	movs	r2, #0
 8002c5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c62:	187a      	adds	r2, r7, r1
 8002c64:	2390      	movs	r3, #144	@ 0x90
 8002c66:	05db      	lsls	r3, r3, #23
 8002c68:	0011      	movs	r1, r2
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f002 f986 	bl	8004f7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c70:	46c0      	nop			@ (mov r8, r8)
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b00b      	add	sp, #44	@ 0x2c
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	48000800 	.word	0x48000800
 8002c80:	000010cc 	.word	0x000010cc
 8002c84:	48000400 	.word	0x48000400

08002c88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d112      	bne.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x38>
		send = 1;
 8002c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ccc <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
		heartbeatFlag = heartbeatFlag+1;
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	4b09      	ldr	r3, [pc, #36]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002caa:	701a      	strb	r2, [r3, #0]
		if(canResetEcuFlag == 1){
 8002cac:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x38>
			resetCounter = resetCounter+1;
 8002cb4:	4b08      	ldr	r3, [pc, #32]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	4b06      	ldr	r3, [pc, #24]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002cbe:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002cc0:	46c0      	nop			@ (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40012c00 	.word	0x40012c00
 8002ccc:	200005ed 	.word	0x200005ed
 8002cd0:	200005ee 	.word	0x200005ee
 8002cd4:	200005e8 	.word	0x200005e8
 8002cd8:	200005e9 	.word	0x200005e9

08002cdc <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	value_adc[0] = (uint16_t) adc_buff[0];	//Los valores pasan de 32 a 16 bits
 8002ce4:	4b18      	ldr	r3, [pc, #96]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002cec:	801a      	strh	r2, [r3, #0]
	value_adc[1] = (uint16_t) adc_buff[1];
 8002cee:	4b16      	ldr	r3, [pc, #88]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002cf6:	805a      	strh	r2, [r3, #2]
	value_adc[2] = (uint16_t) adc_buff[2];
 8002cf8:	4b13      	ldr	r3, [pc, #76]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002d00:	809a      	strh	r2, [r3, #4]
	value_adc[3] = (uint16_t) adc_buff[3];
 8002d02:	4b11      	ldr	r3, [pc, #68]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002d0a:	80da      	strh	r2, [r3, #6]
	value_adc[4] = (uint16_t) adc_buff[4];
 8002d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	4b0e      	ldr	r3, [pc, #56]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002d14:	811a      	strh	r2, [r3, #8]
	value_adc[5] = (uint16_t) adc_buff[5];
 8002d16:	4b0c      	ldr	r3, [pc, #48]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002d1e:	815a      	strh	r2, [r3, #10]
	value_adc[6] = (uint16_t) adc_buff[6];
 8002d20:	4b09      	ldr	r3, [pc, #36]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	4b09      	ldr	r3, [pc, #36]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002d28:	819a      	strh	r2, [r3, #12]
	value_adc[7] = (uint16_t) adc_buff[7];
 8002d2a:	4b07      	ldr	r3, [pc, #28]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002d32:	81da      	strh	r2, [r3, #14]
	value_adc[8] = (uint16_t) adc_buff[8];
 8002d34:	4b04      	ldr	r3, [pc, #16]	@ (8002d48 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	b29a      	uxth	r2, r3
 8002d3a:	4b04      	ldr	r3, [pc, #16]	@ (8002d4c <HAL_ADC_ConvCpltCallback+0x70>)
 8002d3c:	821a      	strh	r2, [r3, #16]
}
 8002d3e:	46c0      	nop			@ (mov r8, r8)
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b002      	add	sp, #8
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	200003dc 	.word	0x200003dc
 8002d4c:	20000400 	.word	0x20000400

08002d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d54:	b672      	cpsid	i
}
 8002d56:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d58:	46c0      	nop			@ (mov r8, r8)
 8002d5a:	e7fd      	b.n	8002d58 <Error_Handler+0x8>

08002d5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d62:	4b0f      	ldr	r3, [pc, #60]	@ (8002da0 <HAL_MspInit+0x44>)
 8002d64:	699a      	ldr	r2, [r3, #24]
 8002d66:	4b0e      	ldr	r3, [pc, #56]	@ (8002da0 <HAL_MspInit+0x44>)
 8002d68:	2101      	movs	r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	619a      	str	r2, [r3, #24]
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8002da0 <HAL_MspInit+0x44>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	2201      	movs	r2, #1
 8002d74:	4013      	ands	r3, r2
 8002d76:	607b      	str	r3, [r7, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7a:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <HAL_MspInit+0x44>)
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	4b08      	ldr	r3, [pc, #32]	@ (8002da0 <HAL_MspInit+0x44>)
 8002d80:	2180      	movs	r1, #128	@ 0x80
 8002d82:	0549      	lsls	r1, r1, #21
 8002d84:	430a      	orrs	r2, r1
 8002d86:	61da      	str	r2, [r3, #28]
 8002d88:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_MspInit+0x44>)
 8002d8a:	69da      	ldr	r2, [r3, #28]
 8002d8c:	2380      	movs	r3, #128	@ 0x80
 8002d8e:	055b      	lsls	r3, r3, #21
 8002d90:	4013      	ands	r3, r2
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d96:	46c0      	nop			@ (mov r8, r8)
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	b002      	add	sp, #8
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			@ (mov r8, r8)
 8002da0:	40021000 	.word	0x40021000

08002da4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b08b      	sub	sp, #44	@ 0x2c
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dac:	2414      	movs	r4, #20
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	0018      	movs	r0, r3
 8002db2:	2314      	movs	r3, #20
 8002db4:	001a      	movs	r2, r3
 8002db6:	2100      	movs	r1, #0
 8002db8:	f004 faac 	bl	8007314 <memset>
  if(hadc->Instance==ADC1)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a3b      	ldr	r2, [pc, #236]	@ (8002eb0 <HAL_ADC_MspInit+0x10c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d170      	bne.n	8002ea8 <HAL_ADC_MspInit+0x104>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002dc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002dc8:	699a      	ldr	r2, [r3, #24]
 8002dca:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002dcc:	2180      	movs	r1, #128	@ 0x80
 8002dce:	0089      	lsls	r1, r1, #2
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	619a      	str	r2, [r3, #24]
 8002dd4:	4b37      	ldr	r3, [pc, #220]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4013      	ands	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de2:	4b34      	ldr	r3, [pc, #208]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	4b33      	ldr	r3, [pc, #204]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002de8:	2180      	movs	r1, #128	@ 0x80
 8002dea:	0289      	lsls	r1, r1, #10
 8002dec:	430a      	orrs	r2, r1
 8002dee:	615a      	str	r2, [r3, #20]
 8002df0:	4b30      	ldr	r3, [pc, #192]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002df2:	695a      	ldr	r2, [r3, #20]
 8002df4:	2380      	movs	r3, #128	@ 0x80
 8002df6:	029b      	lsls	r3, r3, #10
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60fb      	str	r3, [r7, #12]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	4b2d      	ldr	r3, [pc, #180]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	4b2c      	ldr	r3, [pc, #176]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002e04:	2180      	movs	r1, #128	@ 0x80
 8002e06:	02c9      	lsls	r1, r1, #11
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	615a      	str	r2, [r3, #20]
 8002e0c:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <HAL_ADC_MspInit+0x110>)
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	2380      	movs	r3, #128	@ 0x80
 8002e12:	02db      	lsls	r3, r3, #11
 8002e14:	4013      	ands	r3, r2
 8002e16:	60bb      	str	r3, [r7, #8]
 8002e18:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Altrnator_Sens_Pin|WPL_Sens_Pin|WPR_Sens_Pin|F1R_Sens_Pin
 8002e1a:	193b      	adds	r3, r7, r4
 8002e1c:	22ff      	movs	r2, #255	@ 0xff
 8002e1e:	601a      	str	r2, [r3, #0]
                          |F2R_Sens_Pin|F1L_Sens_Pin|F2L_Sens_Pin|V12_NP_Sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e20:	193b      	adds	r3, r7, r4
 8002e22:	2203      	movs	r2, #3
 8002e24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	193b      	adds	r3, r7, r4
 8002e28:	2200      	movs	r2, #0
 8002e2a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2c:	193a      	adds	r2, r7, r4
 8002e2e:	2390      	movs	r3, #144	@ 0x90
 8002e30:	05db      	lsls	r3, r3, #23
 8002e32:	0011      	movs	r1, r2
 8002e34:	0018      	movs	r0, r3
 8002e36:	f002 f8a1 	bl	8004f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V12_P_Sens_Pin|Temp_Sens_Pin;
 8002e3a:	193b      	adds	r3, r7, r4
 8002e3c:	2203      	movs	r2, #3
 8002e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e40:	193b      	adds	r3, r7, r4
 8002e42:	2203      	movs	r2, #3
 8002e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	2200      	movs	r2, #0
 8002e4a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e4c:	193b      	adds	r3, r7, r4
 8002e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002eb8 <HAL_ADC_MspInit+0x114>)
 8002e50:	0019      	movs	r1, r3
 8002e52:	0010      	movs	r0, r2
 8002e54:	f002 f892 	bl	8004f7c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8002e58:	4b18      	ldr	r3, [pc, #96]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e5a:	4a19      	ldr	r2, [pc, #100]	@ (8002ec0 <HAL_ADC_MspInit+0x11c>)
 8002e5c:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e5e:	4b17      	ldr	r3, [pc, #92]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e64:	4b15      	ldr	r3, [pc, #84]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8002e6a:	4b14      	ldr	r3, [pc, #80]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e6c:	2280      	movs	r2, #128	@ 0x80
 8002e6e:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e70:	4b12      	ldr	r3, [pc, #72]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e72:	2280      	movs	r2, #128	@ 0x80
 8002e74:	0092      	lsls	r2, r2, #2
 8002e76:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e78:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e7a:	2280      	movs	r2, #128	@ 0x80
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8002e80:	4b0e      	ldr	r3, [pc, #56]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e82:	2220      	movs	r2, #32
 8002e84:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8002e86:	4b0d      	ldr	r3, [pc, #52]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f001 fedc 	bl	8004c4c <HAL_DMA_Init>
 8002e94:	1e03      	subs	r3, r0, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8002e98:	f7ff ff5a 	bl	8002d50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002ea0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ea2:	4b06      	ldr	r3, [pc, #24]	@ (8002ebc <HAL_ADC_MspInit+0x118>)
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ea8:	46c0      	nop			@ (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b00b      	add	sp, #44	@ 0x2c
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	40012400 	.word	0x40012400
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	48000400 	.word	0x48000400
 8002ebc:	200000b4 	.word	0x200000b4
 8002ec0:	40020008 	.word	0x40020008

08002ec4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b08b      	sub	sp, #44	@ 0x2c
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ecc:	2414      	movs	r4, #20
 8002ece:	193b      	adds	r3, r7, r4
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	2314      	movs	r3, #20
 8002ed4:	001a      	movs	r2, r3
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	f004 fa1c 	bl	8007314 <memset>
  if(hcan->Instance==CAN)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	@ (8002f68 <HAL_CAN_MspInit+0xa4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d13b      	bne.n	8002f5e <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002ee6:	4b21      	ldr	r3, [pc, #132]	@ (8002f6c <HAL_CAN_MspInit+0xa8>)
 8002ee8:	69da      	ldr	r2, [r3, #28]
 8002eea:	4b20      	ldr	r3, [pc, #128]	@ (8002f6c <HAL_CAN_MspInit+0xa8>)
 8002eec:	2180      	movs	r1, #128	@ 0x80
 8002eee:	0489      	lsls	r1, r1, #18
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	61da      	str	r2, [r3, #28]
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8002f6c <HAL_CAN_MspInit+0xa8>)
 8002ef6:	69da      	ldr	r2, [r3, #28]
 8002ef8:	2380      	movs	r3, #128	@ 0x80
 8002efa:	049b      	lsls	r3, r3, #18
 8002efc:	4013      	ands	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
 8002f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f02:	4b1a      	ldr	r3, [pc, #104]	@ (8002f6c <HAL_CAN_MspInit+0xa8>)
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	4b19      	ldr	r3, [pc, #100]	@ (8002f6c <HAL_CAN_MspInit+0xa8>)
 8002f08:	2180      	movs	r1, #128	@ 0x80
 8002f0a:	0289      	lsls	r1, r1, #10
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	615a      	str	r2, [r3, #20]
 8002f10:	4b16      	ldr	r3, [pc, #88]	@ (8002f6c <HAL_CAN_MspInit+0xa8>)
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	029b      	lsls	r3, r3, #10
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f1e:	193b      	adds	r3, r7, r4
 8002f20:	22c0      	movs	r2, #192	@ 0xc0
 8002f22:	0152      	lsls	r2, r2, #5
 8002f24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f26:	0021      	movs	r1, r4
 8002f28:	187b      	adds	r3, r7, r1
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2203      	movs	r2, #3
 8002f38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2204      	movs	r2, #4
 8002f3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f40:	187a      	adds	r2, r7, r1
 8002f42:	2390      	movs	r3, #144	@ 0x90
 8002f44:	05db      	lsls	r3, r3, #23
 8002f46:	0011      	movs	r1, r2
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f002 f817 	bl	8004f7c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2100      	movs	r1, #0
 8002f52:	201e      	movs	r0, #30
 8002f54:	f001 fe48 	bl	8004be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8002f58:	201e      	movs	r0, #30
 8002f5a:	f001 fe5a 	bl	8004c12 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b00b      	add	sp, #44	@ 0x2c
 8002f64:	bd90      	pop	{r4, r7, pc}
 8002f66:	46c0      	nop			@ (mov r8, r8)
 8002f68:	40006400 	.word	0x40006400
 8002f6c:	40021000 	.word	0x40021000

08002f70 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b08b      	sub	sp, #44	@ 0x2c
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f78:	2414      	movs	r4, #20
 8002f7a:	193b      	adds	r3, r7, r4
 8002f7c:	0018      	movs	r0, r3
 8002f7e:	2314      	movs	r3, #20
 8002f80:	001a      	movs	r2, r3
 8002f82:	2100      	movs	r1, #0
 8002f84:	f004 f9c6 	bl	8007314 <memset>
  if(hspi->Instance==SPI2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003000 <HAL_SPI_MspInit+0x90>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d132      	bne.n	8002ff8 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f92:	4b1c      	ldr	r3, [pc, #112]	@ (8003004 <HAL_SPI_MspInit+0x94>)
 8002f94:	69da      	ldr	r2, [r3, #28]
 8002f96:	4b1b      	ldr	r3, [pc, #108]	@ (8003004 <HAL_SPI_MspInit+0x94>)
 8002f98:	2180      	movs	r1, #128	@ 0x80
 8002f9a:	01c9      	lsls	r1, r1, #7
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	61da      	str	r2, [r3, #28]
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <HAL_SPI_MspInit+0x94>)
 8002fa2:	69da      	ldr	r2, [r3, #28]
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	01db      	lsls	r3, r3, #7
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
 8002fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fae:	4b15      	ldr	r3, [pc, #84]	@ (8003004 <HAL_SPI_MspInit+0x94>)
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	4b14      	ldr	r3, [pc, #80]	@ (8003004 <HAL_SPI_MspInit+0x94>)
 8002fb4:	2180      	movs	r1, #128	@ 0x80
 8002fb6:	02c9      	lsls	r1, r1, #11
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	615a      	str	r2, [r3, #20]
 8002fbc:	4b11      	ldr	r3, [pc, #68]	@ (8003004 <HAL_SPI_MspInit+0x94>)
 8002fbe:	695a      	ldr	r2, [r3, #20]
 8002fc0:	2380      	movs	r3, #128	@ 0x80
 8002fc2:	02db      	lsls	r3, r3, #11
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002fca:	193b      	adds	r3, r7, r4
 8002fcc:	22e0      	movs	r2, #224	@ 0xe0
 8002fce:	0212      	lsls	r2, r2, #8
 8002fd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	0021      	movs	r1, r4
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fda:	187b      	adds	r3, r7, r1
 8002fdc:	2200      	movs	r2, #0
 8002fde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fe0:	187b      	adds	r3, r7, r1
 8002fe2:	2203      	movs	r2, #3
 8002fe4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002fe6:	187b      	adds	r3, r7, r1
 8002fe8:	2200      	movs	r2, #0
 8002fea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	4a06      	ldr	r2, [pc, #24]	@ (8003008 <HAL_SPI_MspInit+0x98>)
 8002ff0:	0019      	movs	r1, r3
 8002ff2:	0010      	movs	r0, r2
 8002ff4:	f001 ffc2 	bl	8004f7c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b00b      	add	sp, #44	@ 0x2c
 8002ffe:	bd90      	pop	{r4, r7, pc}
 8003000:	40003800 	.word	0x40003800
 8003004:	40021000 	.word	0x40021000
 8003008:	48000400 	.word	0x48000400

0800300c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a12      	ldr	r2, [pc, #72]	@ (8003064 <HAL_TIM_OC_MspInit+0x58>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d11d      	bne.n	800305a <HAL_TIM_OC_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800301e:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_TIM_OC_MspInit+0x5c>)
 8003020:	699a      	ldr	r2, [r3, #24]
 8003022:	4b11      	ldr	r3, [pc, #68]	@ (8003068 <HAL_TIM_OC_MspInit+0x5c>)
 8003024:	2180      	movs	r1, #128	@ 0x80
 8003026:	0109      	lsls	r1, r1, #4
 8003028:	430a      	orrs	r2, r1
 800302a:	619a      	str	r2, [r3, #24]
 800302c:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_TIM_OC_MspInit+0x5c>)
 800302e:	699a      	ldr	r2, [r3, #24]
 8003030:	2380      	movs	r3, #128	@ 0x80
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	4013      	ands	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800303a:	2200      	movs	r2, #0
 800303c:	2100      	movs	r1, #0
 800303e:	200d      	movs	r0, #13
 8003040:	f001 fdd2 	bl	8004be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003044:	200d      	movs	r0, #13
 8003046:	f001 fde4 	bl	8004c12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	200e      	movs	r0, #14
 8003050:	f001 fdca 	bl	8004be8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003054:	200e      	movs	r0, #14
 8003056:	f001 fddc 	bl	8004c12 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800305a:	46c0      	nop			@ (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}
 8003062:	46c0      	nop			@ (mov r8, r8)
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	05db      	lsls	r3, r3, #23
 800307c:	429a      	cmp	r2, r3
 800307e:	d10c      	bne.n	800309a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003080:	4b10      	ldr	r3, [pc, #64]	@ (80030c4 <HAL_TIM_PWM_MspInit+0x58>)
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	4b0f      	ldr	r3, [pc, #60]	@ (80030c4 <HAL_TIM_PWM_MspInit+0x58>)
 8003086:	2101      	movs	r1, #1
 8003088:	430a      	orrs	r2, r1
 800308a:	61da      	str	r2, [r3, #28]
 800308c:	4b0d      	ldr	r3, [pc, #52]	@ (80030c4 <HAL_TIM_PWM_MspInit+0x58>)
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2201      	movs	r2, #1
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003098:	e010      	b.n	80030bc <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a0a      	ldr	r2, [pc, #40]	@ (80030c8 <HAL_TIM_PWM_MspInit+0x5c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d10b      	bne.n	80030bc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030a4:	4b07      	ldr	r3, [pc, #28]	@ (80030c4 <HAL_TIM_PWM_MspInit+0x58>)
 80030a6:	69da      	ldr	r2, [r3, #28]
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_TIM_PWM_MspInit+0x58>)
 80030aa:	2102      	movs	r1, #2
 80030ac:	430a      	orrs	r2, r1
 80030ae:	61da      	str	r2, [r3, #28]
 80030b0:	4b04      	ldr	r3, [pc, #16]	@ (80030c4 <HAL_TIM_PWM_MspInit+0x58>)
 80030b2:	69db      	ldr	r3, [r3, #28]
 80030b4:	2202      	movs	r2, #2
 80030b6:	4013      	ands	r3, r2
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
}
 80030bc:	46c0      	nop			@ (mov r8, r8)
 80030be:	46bd      	mov	sp, r7
 80030c0:	b004      	add	sp, #16
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40000400 	.word	0x40000400

080030cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a14      	ldr	r2, [pc, #80]	@ (800312c <HAL_TIM_Base_MspInit+0x60>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10e      	bne.n	80030fc <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80030de:	4b14      	ldr	r3, [pc, #80]	@ (8003130 <HAL_TIM_Base_MspInit+0x64>)
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_TIM_Base_MspInit+0x64>)
 80030e4:	2180      	movs	r1, #128	@ 0x80
 80030e6:	0289      	lsls	r1, r1, #10
 80030e8:	430a      	orrs	r2, r1
 80030ea:	619a      	str	r2, [r3, #24]
 80030ec:	4b10      	ldr	r3, [pc, #64]	@ (8003130 <HAL_TIM_Base_MspInit+0x64>)
 80030ee:	699a      	ldr	r2, [r3, #24]
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	029b      	lsls	r3, r3, #10
 80030f4:	4013      	ands	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 80030fa:	e012      	b.n	8003122 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0c      	ldr	r2, [pc, #48]	@ (8003134 <HAL_TIM_Base_MspInit+0x68>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10d      	bne.n	8003122 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003106:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <HAL_TIM_Base_MspInit+0x64>)
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_TIM_Base_MspInit+0x64>)
 800310c:	2180      	movs	r1, #128	@ 0x80
 800310e:	02c9      	lsls	r1, r1, #11
 8003110:	430a      	orrs	r2, r1
 8003112:	619a      	str	r2, [r3, #24]
 8003114:	4b06      	ldr	r3, [pc, #24]	@ (8003130 <HAL_TIM_Base_MspInit+0x64>)
 8003116:	699a      	ldr	r2, [r3, #24]
 8003118:	2380      	movs	r3, #128	@ 0x80
 800311a:	02db      	lsls	r3, r3, #11
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	68bb      	ldr	r3, [r7, #8]
}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	46bd      	mov	sp, r7
 8003126:	b004      	add	sp, #16
 8003128:	bd80      	pop	{r7, pc}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	40014400 	.word	0x40014400
 8003130:	40021000 	.word	0x40021000
 8003134:	40014800 	.word	0x40014800

08003138 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b08d      	sub	sp, #52	@ 0x34
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	241c      	movs	r4, #28
 8003142:	193b      	adds	r3, r7, r4
 8003144:	0018      	movs	r0, r3
 8003146:	2314      	movs	r3, #20
 8003148:	001a      	movs	r2, r3
 800314a:	2100      	movs	r1, #0
 800314c:	f004 f8e2 	bl	8007314 <memset>
  if(htim->Instance==TIM2)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	05db      	lsls	r3, r3, #23
 8003158:	429a      	cmp	r2, r3
 800315a:	d125      	bne.n	80031a8 <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315c:	4b54      	ldr	r3, [pc, #336]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	4b53      	ldr	r3, [pc, #332]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 8003162:	2180      	movs	r1, #128	@ 0x80
 8003164:	02c9      	lsls	r1, r1, #11
 8003166:	430a      	orrs	r2, r1
 8003168:	615a      	str	r2, [r3, #20]
 800316a:	4b51      	ldr	r3, [pc, #324]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 800316c:	695a      	ldr	r2, [r3, #20]
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	02db      	lsls	r3, r3, #11
 8003172:	4013      	ands	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = F1L_pwm_Pin|F2L_pwm_Pin;
 8003178:	193b      	adds	r3, r7, r4
 800317a:	22c0      	movs	r2, #192	@ 0xc0
 800317c:	0112      	lsls	r2, r2, #4
 800317e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	0021      	movs	r1, r4
 8003182:	187b      	adds	r3, r7, r1
 8003184:	2202      	movs	r2, #2
 8003186:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2200      	movs	r2, #0
 800318c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318e:	187b      	adds	r3, r7, r1
 8003190:	2200      	movs	r2, #0
 8003192:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003194:	187b      	adds	r3, r7, r1
 8003196:	2202      	movs	r2, #2
 8003198:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800319a:	187b      	adds	r3, r7, r1
 800319c:	4a45      	ldr	r2, [pc, #276]	@ (80032b4 <HAL_TIM_MspPostInit+0x17c>)
 800319e:	0019      	movs	r1, r3
 80031a0:	0010      	movs	r0, r2
 80031a2:	f001 feeb 	bl	8004f7c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80031a6:	e07e      	b.n	80032a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a42      	ldr	r2, [pc, #264]	@ (80032b8 <HAL_TIM_MspPostInit+0x180>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d124      	bne.n	80031fc <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031b2:	4b3f      	ldr	r3, [pc, #252]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	4b3e      	ldr	r3, [pc, #248]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 80031b8:	2180      	movs	r1, #128	@ 0x80
 80031ba:	02c9      	lsls	r1, r1, #11
 80031bc:	430a      	orrs	r2, r1
 80031be:	615a      	str	r2, [r3, #20]
 80031c0:	4b3b      	ldr	r3, [pc, #236]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	02db      	lsls	r3, r3, #11
 80031c8:	4013      	ands	r3, r2
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = F1R_pwm_Pin|F2R_pwm_Pin;
 80031ce:	211c      	movs	r1, #28
 80031d0:	187b      	adds	r3, r7, r1
 80031d2:	2230      	movs	r2, #48	@ 0x30
 80031d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	2202      	movs	r2, #2
 80031da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031dc:	187b      	adds	r3, r7, r1
 80031de:	2200      	movs	r2, #0
 80031e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	187b      	adds	r3, r7, r1
 80031e4:	2200      	movs	r2, #0
 80031e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80031e8:	187b      	adds	r3, r7, r1
 80031ea:	2201      	movs	r2, #1
 80031ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ee:	187b      	adds	r3, r7, r1
 80031f0:	4a30      	ldr	r2, [pc, #192]	@ (80032b4 <HAL_TIM_MspPostInit+0x17c>)
 80031f2:	0019      	movs	r1, r3
 80031f4:	0010      	movs	r0, r2
 80031f6:	f001 fec1 	bl	8004f7c <HAL_GPIO_Init>
}
 80031fa:	e054      	b.n	80032a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM16)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a2e      	ldr	r2, [pc, #184]	@ (80032bc <HAL_TIM_MspPostInit+0x184>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d125      	bne.n	8003252 <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003206:	4b2a      	ldr	r3, [pc, #168]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	4b29      	ldr	r3, [pc, #164]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 800320c:	2180      	movs	r1, #128	@ 0x80
 800320e:	02c9      	lsls	r1, r1, #11
 8003210:	430a      	orrs	r2, r1
 8003212:	615a      	str	r2, [r3, #20]
 8003214:	4b26      	ldr	r3, [pc, #152]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 8003216:	695a      	ldr	r2, [r3, #20]
 8003218:	2380      	movs	r3, #128	@ 0x80
 800321a:	02db      	lsls	r3, r3, #11
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = WPL_pwm_Pin;
 8003222:	211c      	movs	r1, #28
 8003224:	187b      	adds	r3, r7, r1
 8003226:	2280      	movs	r2, #128	@ 0x80
 8003228:	0052      	lsls	r2, r2, #1
 800322a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322c:	187b      	adds	r3, r7, r1
 800322e:	2202      	movs	r2, #2
 8003230:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	187b      	adds	r3, r7, r1
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	187b      	adds	r3, r7, r1
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800323e:	187b      	adds	r3, r7, r1
 8003240:	2202      	movs	r2, #2
 8003242:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPL_pwm_GPIO_Port, &GPIO_InitStruct);
 8003244:	187b      	adds	r3, r7, r1
 8003246:	4a1b      	ldr	r2, [pc, #108]	@ (80032b4 <HAL_TIM_MspPostInit+0x17c>)
 8003248:	0019      	movs	r1, r3
 800324a:	0010      	movs	r0, r2
 800324c:	f001 fe96 	bl	8004f7c <HAL_GPIO_Init>
}
 8003250:	e029      	b.n	80032a6 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM17)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1a      	ldr	r2, [pc, #104]	@ (80032c0 <HAL_TIM_MspPostInit+0x188>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d124      	bne.n	80032a6 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325c:	4b14      	ldr	r3, [pc, #80]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	4b13      	ldr	r3, [pc, #76]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 8003262:	2180      	movs	r1, #128	@ 0x80
 8003264:	02c9      	lsls	r1, r1, #11
 8003266:	430a      	orrs	r2, r1
 8003268:	615a      	str	r2, [r3, #20]
 800326a:	4b11      	ldr	r3, [pc, #68]	@ (80032b0 <HAL_TIM_MspPostInit+0x178>)
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	2380      	movs	r3, #128	@ 0x80
 8003270:	02db      	lsls	r3, r3, #11
 8003272:	4013      	ands	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPR_pwm_Pin;
 8003278:	211c      	movs	r1, #28
 800327a:	187b      	adds	r3, r7, r1
 800327c:	2280      	movs	r2, #128	@ 0x80
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003282:	187b      	adds	r3, r7, r1
 8003284:	2202      	movs	r2, #2
 8003286:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003288:	187b      	adds	r3, r7, r1
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	187b      	adds	r3, r7, r1
 8003290:	2200      	movs	r2, #0
 8003292:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003294:	187b      	adds	r3, r7, r1
 8003296:	2202      	movs	r2, #2
 8003298:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPR_pwm_GPIO_Port, &GPIO_InitStruct);
 800329a:	187b      	adds	r3, r7, r1
 800329c:	4a05      	ldr	r2, [pc, #20]	@ (80032b4 <HAL_TIM_MspPostInit+0x17c>)
 800329e:	0019      	movs	r1, r3
 80032a0:	0010      	movs	r0, r2
 80032a2:	f001 fe6b 	bl	8004f7c <HAL_GPIO_Init>
}
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b00d      	add	sp, #52	@ 0x34
 80032ac:	bd90      	pop	{r4, r7, pc}
 80032ae:	46c0      	nop			@ (mov r8, r8)
 80032b0:	40021000 	.word	0x40021000
 80032b4:	48000400 	.word	0x48000400
 80032b8:	40000400 	.word	0x40000400
 80032bc:	40014400 	.word	0x40014400
 80032c0:	40014800 	.word	0x40014800

080032c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	e7fd      	b.n	80032c8 <NMI_Handler+0x4>

080032cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d0:	46c0      	nop			@ (mov r8, r8)
 80032d2:	e7fd      	b.n	80032d0 <HardFault_Handler+0x4>

080032d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032ec:	f000 f8c4 	bl	8003478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80032fc:	4b03      	ldr	r3, [pc, #12]	@ (800330c <DMA1_Channel1_IRQHandler+0x14>)
 80032fe:	0018      	movs	r0, r3
 8003300:	f001 fd52 	bl	8004da8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003304:	46c0      	nop			@ (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	200000b4 	.word	0x200000b4

08003310 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003314:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8003316:	0018      	movs	r0, r3
 8003318:	f003 fa82 	bl	8006820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800331c:	46c0      	nop			@ (mov r8, r8)
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	20000184 	.word	0x20000184

08003328 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <TIM1_CC_IRQHandler+0x14>)
 800332e:	0018      	movs	r0, r3
 8003330:	f003 fa76 	bl	8006820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003334:	46c0      	nop			@ (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	20000184 	.word	0x20000184

08003340 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003344:	4b03      	ldr	r3, [pc, #12]	@ (8003354 <CEC_CAN_IRQHandler+0x14>)
 8003346:	0018      	movs	r0, r3
 8003348:	f001 f98d 	bl	8004666 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800334c:	46c0      	nop			@ (mov r8, r8)
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			@ (mov r8, r8)
 8003354:	200000f8 	.word	0x200000f8

08003358 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003364:	4813      	ldr	r0, [pc, #76]	@ (80033b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003366:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003368:	f7ff fff6 	bl	8003358 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800336c:	4812      	ldr	r0, [pc, #72]	@ (80033b8 <LoopForever+0x6>)
    LDR R1, [R0]
 800336e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003370:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003372:	4a12      	ldr	r2, [pc, #72]	@ (80033bc <LoopForever+0xa>)
    CMP R1, R2
 8003374:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003376:	d105      	bne.n	8003384 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8003378:	4811      	ldr	r0, [pc, #68]	@ (80033c0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800337a:	4912      	ldr	r1, [pc, #72]	@ (80033c4 <LoopForever+0x12>)
    STR R1, [R0]
 800337c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800337e:	4812      	ldr	r0, [pc, #72]	@ (80033c8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003380:	4912      	ldr	r1, [pc, #72]	@ (80033cc <LoopForever+0x1a>)
    STR R1, [R0]
 8003382:	6001      	str	r1, [r0, #0]

08003384 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003384:	4812      	ldr	r0, [pc, #72]	@ (80033d0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8003386:	4913      	ldr	r1, [pc, #76]	@ (80033d4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8003388:	4a13      	ldr	r2, [pc, #76]	@ (80033d8 <LoopForever+0x26>)
  movs r3, #0
 800338a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800338c:	e002      	b.n	8003394 <LoopCopyDataInit>

0800338e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800338e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003392:	3304      	adds	r3, #4

08003394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003398:	d3f9      	bcc.n	800338e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800339a:	4a10      	ldr	r2, [pc, #64]	@ (80033dc <LoopForever+0x2a>)
  ldr r4, =_ebss
 800339c:	4c10      	ldr	r4, [pc, #64]	@ (80033e0 <LoopForever+0x2e>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a0:	e001      	b.n	80033a6 <LoopFillZerobss>

080033a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033a4:	3204      	adds	r2, #4

080033a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033a8:	d3fb      	bcc.n	80033a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80033aa:	f003 ffbb 	bl	8007324 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80033ae:	f7fe fe07 	bl	8001fc0 <main>

080033b2 <LoopForever>:

LoopForever:
    b LoopForever
 80033b2:	e7fe      	b.n	80033b2 <LoopForever>
  ldr   r0, =_estack
 80033b4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 80033b8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 80033bc:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 80033c0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 80033c4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 80033c8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 80033cc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d4:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80033d8:	080073bc 	.word	0x080073bc
  ldr r2, =_sbss
 80033dc:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80033e0:	200005f4 	.word	0x200005f4

080033e4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033e4:	e7fe      	b.n	80033e4 <ADC1_IRQHandler>
	...

080033e8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033ec:	4b07      	ldr	r3, [pc, #28]	@ (800340c <HAL_Init+0x24>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_Init+0x24>)
 80033f2:	2110      	movs	r1, #16
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80033f8:	2003      	movs	r0, #3
 80033fa:	f000 f809 	bl	8003410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033fe:	f7ff fcad 	bl	8002d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	0018      	movs	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	46c0      	nop			@ (mov r8, r8)
 800340c:	40022000 	.word	0x40022000

08003410 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003410:	b590      	push	{r4, r7, lr}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003418:	4b14      	ldr	r3, [pc, #80]	@ (800346c <HAL_InitTick+0x5c>)
 800341a:	681c      	ldr	r4, [r3, #0]
 800341c:	4b14      	ldr	r3, [pc, #80]	@ (8003470 <HAL_InitTick+0x60>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	0019      	movs	r1, r3
 8003422:	23fa      	movs	r3, #250	@ 0xfa
 8003424:	0098      	lsls	r0, r3, #2
 8003426:	f7fc fe6f 	bl	8000108 <__udivsi3>
 800342a:	0003      	movs	r3, r0
 800342c:	0019      	movs	r1, r3
 800342e:	0020      	movs	r0, r4
 8003430:	f7fc fe6a 	bl	8000108 <__udivsi3>
 8003434:	0003      	movs	r3, r0
 8003436:	0018      	movs	r0, r3
 8003438:	f001 fbfb 	bl	8004c32 <HAL_SYSTICK_Config>
 800343c:	1e03      	subs	r3, r0, #0
 800343e:	d001      	beq.n	8003444 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e00f      	b.n	8003464 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d80b      	bhi.n	8003462 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	2301      	movs	r3, #1
 800344e:	425b      	negs	r3, r3
 8003450:	2200      	movs	r2, #0
 8003452:	0018      	movs	r0, r3
 8003454:	f001 fbc8 	bl	8004be8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003458:	4b06      	ldr	r3, [pc, #24]	@ (8003474 <HAL_InitTick+0x64>)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
}
 8003464:	0018      	movs	r0, r3
 8003466:	46bd      	mov	sp, r7
 8003468:	b003      	add	sp, #12
 800346a:	bd90      	pop	{r4, r7, pc}
 800346c:	2000004c 	.word	0x2000004c
 8003470:	20000054 	.word	0x20000054
 8003474:	20000050 	.word	0x20000050

08003478 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800347c:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_IncTick+0x1c>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	001a      	movs	r2, r3
 8003482:	4b05      	ldr	r3, [pc, #20]	@ (8003498 <HAL_IncTick+0x20>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	18d2      	adds	r2, r2, r3
 8003488:	4b03      	ldr	r3, [pc, #12]	@ (8003498 <HAL_IncTick+0x20>)
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	20000054 	.word	0x20000054
 8003498:	200005f0 	.word	0x200005f0

0800349c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  return uwTick;
 80034a0:	4b02      	ldr	r3, [pc, #8]	@ (80034ac <HAL_GetTick+0x10>)
 80034a2:	681b      	ldr	r3, [r3, #0]
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	200005f0 	.word	0x200005f0

080034b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034b8:	f7ff fff0 	bl	800349c <HAL_GetTick>
 80034bc:	0003      	movs	r3, r0
 80034be:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3301      	adds	r3, #1
 80034c8:	d005      	beq.n	80034d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034ca:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <HAL_Delay+0x44>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	001a      	movs	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	f7ff ffe0 	bl	800349c <HAL_GetTick>
 80034dc:	0002      	movs	r2, r0
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d8f7      	bhi.n	80034d8 <HAL_Delay+0x28>
  {
  }
}
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b004      	add	sp, #16
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	46c0      	nop			@ (mov r8, r8)
 80034f4:	20000054 	.word	0x20000054

080034f8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003500:	230f      	movs	r3, #15
 8003502:	18fb      	adds	r3, r7, r3
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e125      	b.n	8003762 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10a      	bne.n	8003534 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2234      	movs	r2, #52	@ 0x34
 8003528:	2100      	movs	r1, #0
 800352a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff fc38 	bl	8002da4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003538:	2210      	movs	r2, #16
 800353a:	4013      	ands	r3, r2
 800353c:	d000      	beq.n	8003540 <HAL_ADC_Init+0x48>
 800353e:	e103      	b.n	8003748 <HAL_ADC_Init+0x250>
 8003540:	230f      	movs	r3, #15
 8003542:	18fb      	adds	r3, r7, r3
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d000      	beq.n	800354c <HAL_ADC_Init+0x54>
 800354a:	e0fd      	b.n	8003748 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2204      	movs	r2, #4
 8003554:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8003556:	d000      	beq.n	800355a <HAL_ADC_Init+0x62>
 8003558:	e0f6      	b.n	8003748 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800355e:	4a83      	ldr	r2, [pc, #524]	@ (800376c <HAL_ADC_Init+0x274>)
 8003560:	4013      	ands	r3, r2
 8003562:	2202      	movs	r2, #2
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	2203      	movs	r2, #3
 8003572:	4013      	ands	r3, r2
 8003574:	2b01      	cmp	r3, #1
 8003576:	d112      	bne.n	800359e <HAL_ADC_Init+0xa6>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2201      	movs	r2, #1
 8003580:	4013      	ands	r3, r2
 8003582:	2b01      	cmp	r3, #1
 8003584:	d009      	beq.n	800359a <HAL_ADC_Init+0xa2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	2380      	movs	r3, #128	@ 0x80
 800358e:	021b      	lsls	r3, r3, #8
 8003590:	401a      	ands	r2, r3
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	429a      	cmp	r2, r3
 8003598:	d101      	bne.n	800359e <HAL_ADC_Init+0xa6>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_ADC_Init+0xa8>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d116      	bne.n	80035d2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	2218      	movs	r2, #24
 80035ac:	4393      	bics	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	0899      	lsrs	r1, r3, #2
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4964      	ldr	r1, [pc, #400]	@ (8003770 <HAL_ADC_Init+0x278>)
 80035de:	400a      	ands	r2, r1
 80035e0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	7e1b      	ldrb	r3, [r3, #24]
 80035e6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	7e5b      	ldrb	r3, [r3, #25]
 80035ec:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80035ee:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7e9b      	ldrb	r3, [r3, #26]
 80035f4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80035f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d002      	beq.n	8003606 <HAL_ADC_Init+0x10e>
 8003600:	2380      	movs	r3, #128	@ 0x80
 8003602:	015b      	lsls	r3, r3, #5
 8003604:	e000      	b.n	8003608 <HAL_ADC_Init+0x110>
 8003606:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003608:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800360e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d101      	bne.n	800361c <HAL_ADC_Init+0x124>
 8003618:	2304      	movs	r3, #4
 800361a:	e000      	b.n	800361e <HAL_ADC_Init+0x126>
 800361c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800361e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2124      	movs	r1, #36	@ 0x24
 8003624:	5c5b      	ldrb	r3, [r3, r1]
 8003626:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8003628:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4313      	orrs	r3, r2
 800362e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7edb      	ldrb	r3, [r3, #27]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d115      	bne.n	8003664 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	7e9b      	ldrb	r3, [r3, #26]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d105      	bne.n	800364c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	2280      	movs	r2, #128	@ 0x80
 8003644:	0252      	lsls	r2, r2, #9
 8003646:	4313      	orrs	r3, r2
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	e00b      	b.n	8003664 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003650:	2220      	movs	r2, #32
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	2201      	movs	r2, #1
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	23c2      	movs	r3, #194	@ 0xc2
 800366a:	33ff      	adds	r3, #255	@ 0xff
 800366c:	429a      	cmp	r2, r3
 800366e:	d007      	beq.n	8003680 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8003678:	4313      	orrs	r3, r2
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	4313      	orrs	r3, r2
 800367e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68d9      	ldr	r1, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	430a      	orrs	r2, r1
 800368e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003694:	2380      	movs	r3, #128	@ 0x80
 8003696:	055b      	lsls	r3, r3, #21
 8003698:	429a      	cmp	r2, r3
 800369a:	d01b      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d017      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d013      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d00f      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d00b      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d007      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c8:	2b06      	cmp	r3, #6
 80036ca:	d003      	beq.n	80036d4 <HAL_ADC_Init+0x1dc>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	2b07      	cmp	r3, #7
 80036d2:	d112      	bne.n	80036fa <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695a      	ldr	r2, [r3, #20]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2107      	movs	r1, #7
 80036e0:	438a      	bics	r2, r1
 80036e2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6959      	ldr	r1, [r3, #20]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ee:	2207      	movs	r2, #7
 80036f0:	401a      	ands	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4a1c      	ldr	r2, [pc, #112]	@ (8003774 <HAL_ADC_Init+0x27c>)
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	429a      	cmp	r2, r3
 8003708:	d10b      	bne.n	8003722 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003714:	2203      	movs	r2, #3
 8003716:	4393      	bics	r3, r2
 8003718:	2201      	movs	r2, #1
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003720:	e01c      	b.n	800375c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003726:	2212      	movs	r2, #18
 8003728:	4393      	bics	r3, r2
 800372a:	2210      	movs	r2, #16
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003736:	2201      	movs	r2, #1
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800373e:	230f      	movs	r3, #15
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003746:	e009      	b.n	800375c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374c:	2210      	movs	r2, #16
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8003754:	230f      	movs	r3, #15
 8003756:	18fb      	adds	r3, r7, r3
 8003758:	2201      	movs	r2, #1
 800375a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800375c:	230f      	movs	r3, #15
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	781b      	ldrb	r3, [r3, #0]
}
 8003762:	0018      	movs	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	b004      	add	sp, #16
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	fffffefd 	.word	0xfffffefd
 8003770:	fffe0219 	.word	0xfffe0219
 8003774:	833fffe7 	.word	0x833fffe7

08003778 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003780:	230f      	movs	r3, #15
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2204      	movs	r2, #4
 8003790:	4013      	ands	r3, r2
 8003792:	d156      	bne.n	8003842 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2234      	movs	r2, #52	@ 0x34
 8003798:	5c9b      	ldrb	r3, [r3, r2]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_Start_IT+0x2a>
 800379e:	2302      	movs	r3, #2
 80037a0:	e056      	b.n	8003850 <HAL_ADC_Start_IT+0xd8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2234      	movs	r2, #52	@ 0x34
 80037a6:	2101      	movs	r1, #1
 80037a8:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	7e5b      	ldrb	r3, [r3, #25]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d007      	beq.n	80037c2 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80037b2:	230f      	movs	r3, #15
 80037b4:	18fc      	adds	r4, r7, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 f9ef 	bl	8003b9c <ADC_Enable>
 80037be:	0003      	movs	r3, r0
 80037c0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80037c2:	230f      	movs	r3, #15
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d13e      	bne.n	800384a <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d0:	4a21      	ldr	r2, [pc, #132]	@ (8003858 <HAL_ADC_Start_IT+0xe0>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	2280      	movs	r2, #128	@ 0x80
 80037d6:	0052      	lsls	r2, r2, #1
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2234      	movs	r2, #52	@ 0x34
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	221c      	movs	r2, #28
 80037f2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d110      	bne.n	800381e <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2104      	movs	r1, #4
 8003808:	438a      	bics	r2, r1
 800380a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2118      	movs	r1, #24
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
          break;
 800381c:	e008      	b.n	8003830 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	211c      	movs	r1, #28
 800382a:	430a      	orrs	r2, r1
 800382c:	605a      	str	r2, [r3, #4]
          break;
 800382e:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2104      	movs	r1, #4
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
 8003840:	e003      	b.n	800384a <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003842:	230f      	movs	r3, #15
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	2202      	movs	r2, #2
 8003848:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800384a:	230f      	movs	r3, #15
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	781b      	ldrb	r3, [r3, #0]
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b005      	add	sp, #20
 8003856:	bd90      	pop	{r4, r7, pc}
 8003858:	fffff0fe 	.word	0xfffff0fe

0800385c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b087      	sub	sp, #28
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003868:	2317      	movs	r3, #23
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2204      	movs	r2, #4
 8003878:	4013      	ands	r3, r2
 800387a:	d15e      	bne.n	800393a <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2234      	movs	r2, #52	@ 0x34
 8003880:	5c9b      	ldrb	r3, [r3, r2]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_ADC_Start_DMA+0x2e>
 8003886:	2302      	movs	r3, #2
 8003888:	e05e      	b.n	8003948 <HAL_ADC_Start_DMA+0xec>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2234      	movs	r2, #52	@ 0x34
 800388e:	2101      	movs	r1, #1
 8003890:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	7e5b      	ldrb	r3, [r3, #25]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d007      	beq.n	80038aa <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800389a:	2317      	movs	r3, #23
 800389c:	18fc      	adds	r4, r7, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 f97b 	bl	8003b9c <ADC_Enable>
 80038a6:	0003      	movs	r3, r0
 80038a8:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038aa:	2317      	movs	r3, #23
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d146      	bne.n	8003942 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b8:	4a25      	ldr	r2, [pc, #148]	@ (8003950 <HAL_ADC_Start_DMA+0xf4>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	2280      	movs	r2, #128	@ 0x80
 80038be:	0052      	lsls	r2, r2, #1
 80038c0:	431a      	orrs	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2234      	movs	r2, #52	@ 0x34
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003954 <HAL_ADC_Start_DMA+0xf8>)
 80038da:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	4a1d      	ldr	r2, [pc, #116]	@ (8003958 <HAL_ADC_Start_DMA+0xfc>)
 80038e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	4a1c      	ldr	r2, [pc, #112]	@ (800395c <HAL_ADC_Start_DMA+0x100>)
 80038ea:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	221c      	movs	r2, #28
 80038f2:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685a      	ldr	r2, [r3, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2110      	movs	r1, #16
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	2101      	movs	r1, #1
 8003910:	430a      	orrs	r2, r1
 8003912:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	3340      	adds	r3, #64	@ 0x40
 800391e:	0019      	movs	r1, r3
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f001 f9da 	bl	8004cdc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2104      	movs	r1, #4
 8003934:	430a      	orrs	r2, r1
 8003936:	609a      	str	r2, [r3, #8]
 8003938:	e003      	b.n	8003942 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800393a:	2317      	movs	r3, #23
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2202      	movs	r2, #2
 8003940:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003942:	2317      	movs	r3, #23
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	781b      	ldrb	r3, [r3, #0]
}
 8003948:	0018      	movs	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	b007      	add	sp, #28
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	fffff0fe 	.word	0xfffff0fe
 8003954:	08003ca5 	.word	0x08003ca5
 8003958:	08003d59 	.word	0x08003d59
 800395c:	08003d77 	.word	0x08003d77

08003960 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003968:	46c0      	nop			@ (mov r8, r8)
 800396a:	46bd      	mov	sp, r7
 800396c:	b002      	add	sp, #8
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003978:	46c0      	nop			@ (mov r8, r8)
 800397a:	46bd      	mov	sp, r7
 800397c:	b002      	add	sp, #8
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800398a:	230f      	movs	r3, #15
 800398c:	18fb      	adds	r3, r7, r3
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800399a:	2380      	movs	r3, #128	@ 0x80
 800399c:	055b      	lsls	r3, r3, #21
 800399e:	429a      	cmp	r2, r3
 80039a0:	d011      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x46>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d00d      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x46>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d009      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x46>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d005      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x46>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d001      	beq.n	80039c6 <HAL_ADC_ConfigChannel+0x46>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2234      	movs	r2, #52	@ 0x34
 80039ca:	5c9b      	ldrb	r3, [r3, r2]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x54>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e0d0      	b.n	8003b76 <HAL_ADC_ConfigChannel+0x1f6>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2234      	movs	r2, #52	@ 0x34
 80039d8:	2101      	movs	r1, #1
 80039da:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2204      	movs	r2, #4
 80039e4:	4013      	ands	r3, r2
 80039e6:	d000      	beq.n	80039ea <HAL_ADC_ConfigChannel+0x6a>
 80039e8:	e0b4      	b.n	8003b54 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4a64      	ldr	r2, [pc, #400]	@ (8003b80 <HAL_ADC_ConfigChannel+0x200>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d100      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x76>
 80039f4:	e082      	b.n	8003afc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	409a      	lsls	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a10:	2380      	movs	r3, #128	@ 0x80
 8003a12:	055b      	lsls	r3, r3, #21
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d037      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d033      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d02f      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d02b      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d027      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	2b05      	cmp	r3, #5
 8003a3e:	d023      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a44:	2b06      	cmp	r3, #6
 8003a46:	d01f      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	2b07      	cmp	r3, #7
 8003a4e:	d01b      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	2107      	movs	r1, #7
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d012      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	695a      	ldr	r2, [r3, #20]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2107      	movs	r1, #7
 8003a6e:	438a      	bics	r2, r1
 8003a70:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6959      	ldr	r1, [r3, #20]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	401a      	ands	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d007      	beq.n	8003aa0 <HAL_ADC_ConfigChannel+0x120>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b11      	cmp	r3, #17
 8003a96:	d003      	beq.n	8003aa0 <HAL_ADC_ConfigChannel+0x120>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b12      	cmp	r3, #18
 8003a9e:	d163      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003aa0:	4b38      	ldr	r3, [pc, #224]	@ (8003b84 <HAL_ADC_ConfigChannel+0x204>)
 8003aa2:	6819      	ldr	r1, [r3, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d009      	beq.n	8003ac0 <HAL_ADC_ConfigChannel+0x140>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b11      	cmp	r3, #17
 8003ab2:	d102      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x13a>
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	03db      	lsls	r3, r3, #15
 8003ab8:	e004      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x144>
 8003aba:	2380      	movs	r3, #128	@ 0x80
 8003abc:	045b      	lsls	r3, r3, #17
 8003abe:	e001      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x144>
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	041b      	lsls	r3, r3, #16
 8003ac4:	4a2f      	ldr	r2, [pc, #188]	@ (8003b84 <HAL_ADC_ConfigChannel+0x204>)
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b10      	cmp	r3, #16
 8003ad0:	d14a      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b88 <HAL_ADC_ConfigChannel+0x208>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	492d      	ldr	r1, [pc, #180]	@ (8003b8c <HAL_ADC_ConfigChannel+0x20c>)
 8003ad8:	0018      	movs	r0, r3
 8003ada:	f7fc fb15 	bl	8000108 <__udivsi3>
 8003ade:	0003      	movs	r3, r0
 8003ae0:	001a      	movs	r2, r3
 8003ae2:	0013      	movs	r3, r2
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003aec:	e002      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	3b01      	subs	r3, #1
 8003af2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f9      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x16e>
 8003afa:	e035      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2101      	movs	r1, #1
 8003b08:	4099      	lsls	r1, r3
 8003b0a:	000b      	movs	r3, r1
 8003b0c:	43d9      	mvns	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	400a      	ands	r2, r1
 8003b14:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d007      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0x1ae>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b11      	cmp	r3, #17
 8003b24:	d003      	beq.n	8003b2e <HAL_ADC_ConfigChannel+0x1ae>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b12      	cmp	r3, #18
 8003b2c:	d11c      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003b2e:	4b15      	ldr	r3, [pc, #84]	@ (8003b84 <HAL_ADC_ConfigChannel+0x204>)
 8003b30:	6819      	ldr	r1, [r3, #0]
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b10      	cmp	r3, #16
 8003b38:	d007      	beq.n	8003b4a <HAL_ADC_ConfigChannel+0x1ca>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b11      	cmp	r3, #17
 8003b40:	d101      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x1c6>
 8003b42:	4b13      	ldr	r3, [pc, #76]	@ (8003b90 <HAL_ADC_ConfigChannel+0x210>)
 8003b44:	e002      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x1cc>
 8003b46:	4b13      	ldr	r3, [pc, #76]	@ (8003b94 <HAL_ADC_ConfigChannel+0x214>)
 8003b48:	e000      	b.n	8003b4c <HAL_ADC_ConfigChannel+0x1cc>
 8003b4a:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <HAL_ADC_ConfigChannel+0x218>)
 8003b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b84 <HAL_ADC_ConfigChannel+0x204>)
 8003b4e:	400b      	ands	r3, r1
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e009      	b.n	8003b68 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b58:	2220      	movs	r2, #32
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003b60:	230f      	movs	r3, #15
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2234      	movs	r2, #52	@ 0x34
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003b70:	230f      	movs	r3, #15
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	781b      	ldrb	r3, [r3, #0]
}
 8003b76:	0018      	movs	r0, r3
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	00001001 	.word	0x00001001
 8003b84:	40012708 	.word	0x40012708
 8003b88:	2000004c 	.word	0x2000004c
 8003b8c:	000f4240 	.word	0x000f4240
 8003b90:	ffbfffff 	.word	0xffbfffff
 8003b94:	feffffff 	.word	0xfeffffff
 8003b98:	ff7fffff 	.word	0xff7fffff

08003b9c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d112      	bne.n	8003be0 <ADC_Enable+0x44>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d009      	beq.n	8003bdc <ADC_Enable+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	2380      	movs	r3, #128	@ 0x80
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d101      	bne.n	8003be0 <ADC_Enable+0x44>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <ADC_Enable+0x46>
 8003be0:	2300      	movs	r3, #0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d152      	bne.n	8003c8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	4a2a      	ldr	r2, [pc, #168]	@ (8003c98 <ADC_Enable+0xfc>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d00d      	beq.n	8003c0e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf6:	2210      	movs	r2, #16
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c02:	2201      	movs	r2, #1
 8003c04:	431a      	orrs	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e03f      	b.n	8003c8e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c9c <ADC_Enable+0x100>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	491f      	ldr	r1, [pc, #124]	@ (8003ca0 <ADC_Enable+0x104>)
 8003c24:	0018      	movs	r0, r3
 8003c26:	f7fc fa6f 	bl	8000108 <__udivsi3>
 8003c2a:	0003      	movs	r3, r0
 8003c2c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c2e:	e002      	b.n	8003c36 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f9      	bne.n	8003c30 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c3c:	f7ff fc2e 	bl	800349c <HAL_GetTick>
 8003c40:	0003      	movs	r3, r0
 8003c42:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c44:	e01b      	b.n	8003c7e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003c46:	f7ff fc29 	bl	800349c <HAL_GetTick>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d914      	bls.n	8003c7e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d00d      	beq.n	8003c7e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c66:	2210      	movs	r2, #16
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c72:	2201      	movs	r2, #1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e007      	b.n	8003c8e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2201      	movs	r2, #1
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d1dc      	bne.n	8003c46 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	0018      	movs	r0, r3
 8003c90:	46bd      	mov	sp, r7
 8003c92:	b004      	add	sp, #16
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	46c0      	nop			@ (mov r8, r8)
 8003c98:	80000017 	.word	0x80000017
 8003c9c:	2000004c 	.word	0x2000004c
 8003ca0:	000f4240 	.word	0x000f4240

08003ca4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb6:	2250      	movs	r2, #80	@ 0x50
 8003cb8:	4013      	ands	r3, r2
 8003cba:	d140      	bne.n	8003d3e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc0:	2280      	movs	r2, #128	@ 0x80
 8003cc2:	0092      	lsls	r2, r2, #2
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	23c0      	movs	r3, #192	@ 0xc0
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d12d      	bne.n	8003d34 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d129      	bne.n	8003d34 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2208      	movs	r2, #8
 8003ce8:	4013      	ands	r3, r2
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d122      	bne.n	8003d34 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2204      	movs	r2, #4
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d110      	bne.n	8003d1c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	210c      	movs	r1, #12
 8003d06:	438a      	bics	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0e:	4a11      	ldr	r2, [pc, #68]	@ (8003d54 <ADC_DMAConvCplt+0xb0>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	2201      	movs	r2, #1
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	@ 0x38
 8003d1a:	e00b      	b.n	8003d34 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d20:	2220      	movs	r2, #32
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f7fe ffd0 	bl	8002cdc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8003d3c:	e005      	b.n	8003d4a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	0010      	movs	r0, r2
 8003d48:	4798      	blx	r3
}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	b004      	add	sp, #16
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	46c0      	nop			@ (mov r8, r8)
 8003d54:	fffffefe 	.word	0xfffffefe

08003d58 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d64:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7ff fdf9 	bl	8003960 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	46bd      	mov	sp, r7
 8003d72:	b004      	add	sp, #16
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d88:	2240      	movs	r2, #64	@ 0x40
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d94:	2204      	movs	r2, #4
 8003d96:	431a      	orrs	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f7ff fde6 	bl	8003970 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003da4:	46c0      	nop			@ (mov r8, r8)
 8003da6:	46bd      	mov	sp, r7
 8003da8:	b004      	add	sp, #16
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e0f0      	b.n	8003fa0 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	5c9b      	ldrb	r3, [r3, r2]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d103      	bne.n	8003dd2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f7ff f879 	bl	8002ec4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	430a      	orrs	r2, r1
 8003de0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003de2:	f7ff fb5b 	bl	800349c <HAL_GetTick>
 8003de6:	0003      	movs	r3, r0
 8003de8:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003dea:	e013      	b.n	8003e14 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003dec:	f7ff fb56 	bl	800349c <HAL_GetTick>
 8003df0:	0002      	movs	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b0a      	cmp	r3, #10
 8003df8:	d90c      	bls.n	8003e14 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfe:	2280      	movs	r2, #128	@ 0x80
 8003e00:	0292      	lsls	r2, r2, #10
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	2105      	movs	r1, #5
 8003e0e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0c5      	b.n	8003fa0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	d0e5      	beq.n	8003dec <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	438a      	bics	r2, r1
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e30:	f7ff fb34 	bl	800349c <HAL_GetTick>
 8003e34:	0003      	movs	r3, r0
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e38:	e013      	b.n	8003e62 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e3a:	f7ff fb2f 	bl	800349c <HAL_GetTick>
 8003e3e:	0002      	movs	r2, r0
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b0a      	cmp	r3, #10
 8003e46:	d90c      	bls.n	8003e62 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	2280      	movs	r2, #128	@ 0x80
 8003e4e:	0292      	lsls	r2, r2, #10
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	2105      	movs	r1, #5
 8003e5c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e09e      	b.n	8003fa0 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d1e5      	bne.n	8003e3a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	7e1b      	ldrb	r3, [r3, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d108      	bne.n	8003e88 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2180      	movs	r1, #128	@ 0x80
 8003e82:	430a      	orrs	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e007      	b.n	8003e98 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	438a      	bics	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	7e5b      	ldrb	r3, [r3, #25]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d108      	bne.n	8003eb2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2140      	movs	r1, #64	@ 0x40
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
 8003eb0:	e007      	b.n	8003ec2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2140      	movs	r1, #64	@ 0x40
 8003ebe:	438a      	bics	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	7e9b      	ldrb	r3, [r3, #26]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d108      	bne.n	8003edc <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2120      	movs	r1, #32
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e007      	b.n	8003eec <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2120      	movs	r1, #32
 8003ee8:	438a      	bics	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	7edb      	ldrb	r3, [r3, #27]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d108      	bne.n	8003f06 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2110      	movs	r1, #16
 8003f00:	438a      	bics	r2, r1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e007      	b.n	8003f16 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2110      	movs	r1, #16
 8003f12:	430a      	orrs	r2, r1
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7f1b      	ldrb	r3, [r3, #28]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d108      	bne.n	8003f30 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2108      	movs	r1, #8
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e007      	b.n	8003f40 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2108      	movs	r1, #8
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	7f5b      	ldrb	r3, [r3, #29]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d108      	bne.n	8003f5a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2104      	movs	r1, #4
 8003f54:	430a      	orrs	r2, r1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e007      	b.n	8003f6a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2104      	movs	r1, #4
 8003f66:	438a      	bics	r2, r1
 8003f68:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	0011      	movs	r1, r2
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	1e5a      	subs	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	430a      	orrs	r2, r1
 8003f8e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	b004      	add	sp, #16
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003fb8:	2013      	movs	r0, #19
 8003fba:	183b      	adds	r3, r7, r0
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	2120      	movs	r1, #32
 8003fc0:	5c52      	ldrb	r2, [r2, r1]
 8003fc2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	18bb      	adds	r3, r7, r2
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d004      	beq.n	8003fd8 <HAL_CAN_ConfigFilter+0x30>
 8003fce:	18bb      	adds	r3, r7, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d000      	beq.n	8003fd8 <HAL_CAN_ConfigFilter+0x30>
 8003fd6:	e0cd      	b.n	8004174 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	2380      	movs	r3, #128	@ 0x80
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	58d3      	ldr	r3, [r2, r3]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	0011      	movs	r1, r2
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	2380      	movs	r3, #128	@ 0x80
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	221f      	movs	r2, #31
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	409a      	lsls	r2, r3
 8003ffa:	0013      	movs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	2387      	movs	r3, #135	@ 0x87
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	58d3      	ldr	r3, [r2, r3]
 8004006:	68fa      	ldr	r2, [r7, #12]
 8004008:	43d2      	mvns	r2, r2
 800400a:	401a      	ands	r2, r3
 800400c:	0011      	movs	r1, r2
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	2387      	movs	r3, #135	@ 0x87
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d129      	bne.n	8004072 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	2383      	movs	r3, #131	@ 0x83
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	58d3      	ldr	r3, [r2, r3]
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	43d2      	mvns	r2, r2
 800402a:	401a      	ands	r2, r3
 800402c:	0011      	movs	r1, r2
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	2383      	movs	r3, #131	@ 0x83
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004048:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	3248      	adds	r2, #72	@ 0x48
 800404e:	00d2      	lsls	r2, r2, #3
 8004050:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	041b      	lsls	r3, r3, #16
 800405e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004064:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004066:	6979      	ldr	r1, [r7, #20]
 8004068:	3348      	adds	r3, #72	@ 0x48
 800406a:	00db      	lsls	r3, r3, #3
 800406c:	18cb      	adds	r3, r1, r3
 800406e:	3304      	adds	r3, #4
 8004070:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d128      	bne.n	80040cc <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	2383      	movs	r3, #131	@ 0x83
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	58d2      	ldr	r2, [r2, r3]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	431a      	orrs	r2, r3
 8004086:	0011      	movs	r1, r2
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	2383      	movs	r3, #131	@ 0x83
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80040a2:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3248      	adds	r2, #72	@ 0x48
 80040a8:	00d2      	lsls	r2, r2, #3
 80040aa:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	041b      	lsls	r3, r3, #16
 80040b8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040c0:	6979      	ldr	r1, [r7, #20]
 80040c2:	3348      	adds	r3, #72	@ 0x48
 80040c4:	00db      	lsls	r3, r3, #3
 80040c6:	18cb      	adds	r3, r1, r3
 80040c8:	3304      	adds	r3, #4
 80040ca:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10c      	bne.n	80040ee <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	2381      	movs	r3, #129	@ 0x81
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	58d3      	ldr	r3, [r2, r3]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	43d2      	mvns	r2, r2
 80040e0:	401a      	ands	r2, r3
 80040e2:	0011      	movs	r1, r2
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	2381      	movs	r3, #129	@ 0x81
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	50d1      	str	r1, [r2, r3]
 80040ec:	e00a      	b.n	8004104 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	2381      	movs	r3, #129	@ 0x81
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	58d2      	ldr	r2, [r2, r3]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	0011      	movs	r1, r2
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	2381      	movs	r3, #129	@ 0x81
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10c      	bne.n	8004126 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	2385      	movs	r3, #133	@ 0x85
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	58d3      	ldr	r3, [r2, r3]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	43d2      	mvns	r2, r2
 8004118:	401a      	ands	r2, r3
 800411a:	0011      	movs	r1, r2
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	2385      	movs	r3, #133	@ 0x85
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	50d1      	str	r1, [r2, r3]
 8004124:	e00a      	b.n	800413c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	2385      	movs	r3, #133	@ 0x85
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	58d2      	ldr	r2, [r2, r3]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	431a      	orrs	r2, r3
 8004132:	0011      	movs	r1, r2
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	2385      	movs	r3, #133	@ 0x85
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	6a1b      	ldr	r3, [r3, #32]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10a      	bne.n	800415a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	2387      	movs	r3, #135	@ 0x87
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	58d2      	ldr	r2, [r2, r3]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	431a      	orrs	r2, r3
 8004150:	0011      	movs	r1, r2
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	2387      	movs	r3, #135	@ 0x87
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	2380      	movs	r3, #128	@ 0x80
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	58d3      	ldr	r3, [r2, r3]
 8004162:	2201      	movs	r2, #1
 8004164:	4393      	bics	r3, r2
 8004166:	0019      	movs	r1, r3
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	2380      	movs	r3, #128	@ 0x80
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e007      	b.n	8004184 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	2280      	movs	r2, #128	@ 0x80
 800417a:	02d2      	lsls	r2, r2, #11
 800417c:	431a      	orrs	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
  }
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b006      	add	sp, #24
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	5c9b      	ldrb	r3, [r3, r2]
 800419a:	b2db      	uxtb	r3, r3
 800419c:	2b01      	cmp	r3, #1
 800419e:	d12f      	bne.n	8004200 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2220      	movs	r2, #32
 80041a4:	2102      	movs	r1, #2
 80041a6:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2101      	movs	r1, #1
 80041b4:	438a      	bics	r2, r1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041b8:	f7ff f970 	bl	800349c <HAL_GetTick>
 80041bc:	0003      	movs	r3, r0
 80041be:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041c0:	e013      	b.n	80041ea <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80041c2:	f7ff f96b 	bl	800349c <HAL_GetTick>
 80041c6:	0002      	movs	r2, r0
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b0a      	cmp	r3, #10
 80041ce:	d90c      	bls.n	80041ea <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	2280      	movs	r2, #128	@ 0x80
 80041d6:	0292      	lsls	r2, r2, #10
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	2105      	movs	r1, #5
 80041e4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e012      	b.n	8004210 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	d1e5      	bne.n	80041c2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e007      	b.n	8004210 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	2280      	movs	r2, #128	@ 0x80
 8004206:	0312      	lsls	r2, r2, #12
 8004208:	431a      	orrs	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
  }
}
 8004210:	0018      	movs	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	b004      	add	sp, #16
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004226:	201f      	movs	r0, #31
 8004228:	183b      	adds	r3, r7, r0
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	2120      	movs	r1, #32
 800422e:	5c52      	ldrb	r2, [r2, r1]
 8004230:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800423a:	183b      	adds	r3, r7, r0
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d004      	beq.n	800424c <HAL_CAN_AddTxMessage+0x34>
 8004242:	183b      	adds	r3, r7, r0
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d000      	beq.n	800424c <HAL_CAN_AddTxMessage+0x34>
 800424a:	e0ab      	b.n	80043a4 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	2380      	movs	r3, #128	@ 0x80
 8004250:	04db      	lsls	r3, r3, #19
 8004252:	4013      	ands	r3, r2
 8004254:	d10a      	bne.n	800426c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	2380      	movs	r3, #128	@ 0x80
 800425a:	051b      	lsls	r3, r3, #20
 800425c:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800425e:	d105      	bne.n	800426c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	2380      	movs	r3, #128	@ 0x80
 8004264:	055b      	lsls	r3, r3, #21
 8004266:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004268:	d100      	bne.n	800426c <HAL_CAN_AddTxMessage+0x54>
 800426a:	e092      	b.n	8004392 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	0e1b      	lsrs	r3, r3, #24
 8004270:	2203      	movs	r2, #3
 8004272:	4013      	ands	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004276:	2201      	movs	r2, #1
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	409a      	lsls	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10c      	bne.n	80042a2 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4311      	orrs	r1, r2
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	3218      	adds	r2, #24
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	50d1      	str	r1, [r2, r3]
 80042a0:	e00f      	b.n	80042c2 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042ac:	431a      	orrs	r2, r3
 80042ae:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80042b8:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	3218      	adds	r2, #24
 80042be:	0112      	lsls	r2, r2, #4
 80042c0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	691a      	ldr	r2, [r3, #16]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	3318      	adds	r3, #24
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	18cb      	adds	r3, r1, r3
 80042d2:	3304      	adds	r3, #4
 80042d4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	7d1b      	ldrb	r3, [r3, #20]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d112      	bne.n	8004304 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	3318      	adds	r3, #24
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	18d3      	adds	r3, r2, r3
 80042ea:	3304      	adds	r3, #4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	431a      	orrs	r2, r3
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	3318      	adds	r3, #24
 80042fc:	011b      	lsls	r3, r3, #4
 80042fe:	18cb      	adds	r3, r1, r3
 8004300:	3304      	adds	r3, #4
 8004302:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3307      	adds	r3, #7
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	061a      	lsls	r2, r3, #24
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3306      	adds	r3, #6
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	041b      	lsls	r3, r3, #16
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3305      	adds	r3, #5
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	431a      	orrs	r2, r3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	0019      	movs	r1, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	6979      	ldr	r1, [r7, #20]
 8004330:	23c6      	movs	r3, #198	@ 0xc6
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	0109      	lsls	r1, r1, #4
 8004336:	1841      	adds	r1, r0, r1
 8004338:	18cb      	adds	r3, r1, r3
 800433a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3303      	adds	r3, #3
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	061a      	lsls	r2, r3, #24
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3302      	adds	r3, #2
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	041b      	lsls	r3, r3, #16
 800434c:	431a      	orrs	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3301      	adds	r3, #1
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	021b      	lsls	r3, r3, #8
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	0019      	movs	r1, r3
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	6979      	ldr	r1, [r7, #20]
 8004366:	23c4      	movs	r3, #196	@ 0xc4
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	0109      	lsls	r1, r1, #4
 800436c:	1841      	adds	r1, r0, r1
 800436e:	18cb      	adds	r3, r1, r3
 8004370:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	3218      	adds	r2, #24
 800437a:	0112      	lsls	r2, r2, #4
 800437c:	58d2      	ldr	r2, [r2, r3]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2101      	movs	r1, #1
 8004384:	4311      	orrs	r1, r2
 8004386:	697a      	ldr	r2, [r7, #20]
 8004388:	3218      	adds	r2, #24
 800438a:	0112      	lsls	r2, r2, #4
 800438c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800438e:	2300      	movs	r3, #0
 8004390:	e010      	b.n	80043b4 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004396:	2280      	movs	r2, #128	@ 0x80
 8004398:	0392      	lsls	r2, r2, #14
 800439a:	431a      	orrs	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e007      	b.n	80043b4 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	2280      	movs	r2, #128	@ 0x80
 80043aa:	02d2      	lsls	r2, r2, #11
 80043ac:	431a      	orrs	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
  }
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b008      	add	sp, #32
 80043ba:	bd80      	pop	{r7, pc}

080043bc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80043ca:	2017      	movs	r0, #23
 80043cc:	183b      	adds	r3, r7, r0
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	2120      	movs	r1, #32
 80043d2:	5c52      	ldrb	r2, [r2, r1]
 80043d4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80043d6:	0002      	movs	r2, r0
 80043d8:	18bb      	adds	r3, r7, r2
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d004      	beq.n	80043ea <HAL_CAN_GetRxMessage+0x2e>
 80043e0:	18bb      	adds	r3, r7, r2
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d000      	beq.n	80043ea <HAL_CAN_GetRxMessage+0x2e>
 80043e8:	e107      	b.n	80045fa <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10e      	bne.n	800440e <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	2203      	movs	r2, #3
 80043f8:	4013      	ands	r3, r2
 80043fa:	d117      	bne.n	800442c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	2280      	movs	r2, #128	@ 0x80
 8004402:	0392      	lsls	r2, r2, #14
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0fd      	b.n	800460a <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2203      	movs	r2, #3
 8004416:	4013      	ands	r3, r2
 8004418:	d108      	bne.n	800442c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	2280      	movs	r2, #128	@ 0x80
 8004420:	0392      	lsls	r2, r2, #14
 8004422:	431a      	orrs	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e0ee      	b.n	800460a <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	321b      	adds	r2, #27
 8004434:	0112      	lsls	r2, r2, #4
 8004436:	58d3      	ldr	r3, [r2, r3]
 8004438:	2204      	movs	r2, #4
 800443a:	401a      	ands	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	321b      	adds	r2, #27
 8004450:	0112      	lsls	r2, r2, #4
 8004452:	58d3      	ldr	r3, [r2, r3]
 8004454:	0d5b      	lsrs	r3, r3, #21
 8004456:	055b      	lsls	r3, r3, #21
 8004458:	0d5a      	lsrs	r2, r3, #21
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e00a      	b.n	8004476 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	321b      	adds	r2, #27
 8004468:	0112      	lsls	r2, r2, #4
 800446a:	58d3      	ldr	r3, [r2, r3]
 800446c:	08db      	lsrs	r3, r3, #3
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	321b      	adds	r2, #27
 800447e:	0112      	lsls	r2, r2, #4
 8004480:	58d3      	ldr	r3, [r2, r3]
 8004482:	2202      	movs	r2, #2
 8004484:	401a      	ands	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	331b      	adds	r3, #27
 8004492:	011b      	lsls	r3, r3, #4
 8004494:	18d3      	adds	r3, r2, r3
 8004496:	3304      	adds	r3, #4
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2208      	movs	r2, #8
 800449c:	4013      	ands	r3, r2
 800449e:	d003      	beq.n	80044a8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2208      	movs	r2, #8
 80044a4:	611a      	str	r2, [r3, #16]
 80044a6:	e00b      	b.n	80044c0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	331b      	adds	r3, #27
 80044b0:	011b      	lsls	r3, r3, #4
 80044b2:	18d3      	adds	r3, r2, r3
 80044b4:	3304      	adds	r3, #4
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	220f      	movs	r2, #15
 80044ba:	401a      	ands	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	331b      	adds	r3, #27
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	18d3      	adds	r3, r2, r3
 80044cc:	3304      	adds	r3, #4
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	0a1b      	lsrs	r3, r3, #8
 80044d2:	22ff      	movs	r2, #255	@ 0xff
 80044d4:	401a      	ands	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	331b      	adds	r3, #27
 80044e2:	011b      	lsls	r3, r3, #4
 80044e4:	18d3      	adds	r3, r2, r3
 80044e6:	3304      	adds	r3, #4
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	0c1a      	lsrs	r2, r3, #16
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6819      	ldr	r1, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	23dc      	movs	r3, #220	@ 0xdc
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	0112      	lsls	r2, r2, #4
 8004500:	188a      	adds	r2, r1, r2
 8004502:	18d3      	adds	r3, r2, r3
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6819      	ldr	r1, [r3, #0]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	23dc      	movs	r3, #220	@ 0xdc
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	188a      	adds	r2, r1, r2
 800451a:	18d3      	adds	r3, r2, r3
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	0a1a      	lsrs	r2, r3, #8
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	3301      	adds	r3, #1
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6819      	ldr	r1, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	23dc      	movs	r3, #220	@ 0xdc
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	0112      	lsls	r2, r2, #4
 8004534:	188a      	adds	r2, r1, r2
 8004536:	18d3      	adds	r3, r2, r3
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	0c1a      	lsrs	r2, r3, #16
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	3302      	adds	r3, #2
 8004540:	b2d2      	uxtb	r2, r2
 8004542:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6819      	ldr	r1, [r3, #0]
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	23dc      	movs	r3, #220	@ 0xdc
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	0112      	lsls	r2, r2, #4
 8004550:	188a      	adds	r2, r1, r2
 8004552:	18d3      	adds	r3, r2, r3
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	0e1a      	lsrs	r2, r3, #24
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	3303      	adds	r3, #3
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	23de      	movs	r3, #222	@ 0xde
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	0112      	lsls	r2, r2, #4
 800456c:	188a      	adds	r2, r1, r2
 800456e:	18d3      	adds	r3, r2, r3
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	3304      	adds	r3, #4
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	23de      	movs	r3, #222	@ 0xde
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	0112      	lsls	r2, r2, #4
 8004586:	188a      	adds	r2, r1, r2
 8004588:	18d3      	adds	r3, r2, r3
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	0a1a      	lsrs	r2, r3, #8
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	3305      	adds	r3, #5
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6819      	ldr	r1, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	23de      	movs	r3, #222	@ 0xde
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	0112      	lsls	r2, r2, #4
 80045a2:	188a      	adds	r2, r1, r2
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0c1a      	lsrs	r2, r3, #16
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	3306      	adds	r3, #6
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6819      	ldr	r1, [r3, #0]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	23de      	movs	r3, #222	@ 0xde
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	0112      	lsls	r2, r2, #4
 80045be:	188a      	adds	r2, r1, r2
 80045c0:	18d3      	adds	r3, r2, r3
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	0e1a      	lsrs	r2, r3, #24
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	3307      	adds	r3, #7
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d108      	bne.n	80045e6 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2120      	movs	r1, #32
 80045e0:	430a      	orrs	r2, r1
 80045e2:	60da      	str	r2, [r3, #12]
 80045e4:	e007      	b.n	80045f6 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2120      	movs	r1, #32
 80045f2:	430a      	orrs	r2, r1
 80045f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	e007      	b.n	800460a <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	2280      	movs	r2, #128	@ 0x80
 8004600:	02d2      	lsls	r2, r2, #11
 8004602:	431a      	orrs	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
  }
}
 800460a:	0018      	movs	r0, r3
 800460c:	46bd      	mov	sp, r7
 800460e:	b006      	add	sp, #24
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800461c:	200f      	movs	r0, #15
 800461e:	183b      	adds	r3, r7, r0
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	2120      	movs	r1, #32
 8004624:	5c52      	ldrb	r2, [r2, r1]
 8004626:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004628:	0002      	movs	r2, r0
 800462a:	18bb      	adds	r3, r7, r2
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d003      	beq.n	800463a <HAL_CAN_ActivateNotification+0x28>
 8004632:	18bb      	adds	r3, r7, r2
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d109      	bne.n	800464e <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6959      	ldr	r1, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	430a      	orrs	r2, r1
 8004648:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e007      	b.n	800465e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	2280      	movs	r2, #128	@ 0x80
 8004654:	02d2      	lsls	r2, r2, #11
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
  }
}
 800465e:	0018      	movs	r0, r3
 8004660:	46bd      	mov	sp, r7
 8004662:	b004      	add	sp, #16
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004666:	b580      	push	{r7, lr}
 8004668:	b08a      	sub	sp, #40	@ 0x28
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2201      	movs	r2, #1
 80046a6:	4013      	ands	r3, r2
 80046a8:	d100      	bne.n	80046ac <HAL_CAN_IRQHandler+0x46>
 80046aa:	e084      	b.n	80047b6 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2201      	movs	r2, #1
 80046b0:	4013      	ands	r3, r2
 80046b2:	d024      	beq.n	80046fe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2201      	movs	r2, #1
 80046ba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80046bc:	69bb      	ldr	r3, [r7, #24]
 80046be:	2202      	movs	r2, #2
 80046c0:	4013      	ands	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	0018      	movs	r0, r3
 80046c8:	f000 f981 	bl	80049ce <HAL_CAN_TxMailbox0CompleteCallback>
 80046cc:	e017      	b.n	80046fe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2204      	movs	r2, #4
 80046d2:	4013      	ands	r3, r2
 80046d4:	d005      	beq.n	80046e2 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	2280      	movs	r2, #128	@ 0x80
 80046da:	0112      	lsls	r2, r2, #4
 80046dc:	4313      	orrs	r3, r2
 80046de:	627b      	str	r3, [r7, #36]	@ 0x24
 80046e0:	e00d      	b.n	80046fe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2208      	movs	r2, #8
 80046e6:	4013      	ands	r3, r2
 80046e8:	d005      	beq.n	80046f6 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	2280      	movs	r2, #128	@ 0x80
 80046ee:	0152      	lsls	r2, r2, #5
 80046f0:	4313      	orrs	r3, r2
 80046f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f4:	e003      	b.n	80046fe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 f980 	bl	80049fe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4013      	ands	r3, r2
 8004706:	d028      	beq.n	800475a <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2280      	movs	r2, #128	@ 0x80
 800470e:	0052      	lsls	r2, r2, #1
 8004710:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4013      	ands	r3, r2
 800471a:	d004      	beq.n	8004726 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f000 f95d 	bl	80049de <HAL_CAN_TxMailbox1CompleteCallback>
 8004724:	e019      	b.n	800475a <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	2380      	movs	r3, #128	@ 0x80
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4013      	ands	r3, r2
 800472e:	d005      	beq.n	800473c <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	2280      	movs	r2, #128	@ 0x80
 8004734:	0192      	lsls	r2, r2, #6
 8004736:	4313      	orrs	r3, r2
 8004738:	627b      	str	r3, [r7, #36]	@ 0x24
 800473a:	e00e      	b.n	800475a <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	2380      	movs	r3, #128	@ 0x80
 8004740:	011b      	lsls	r3, r3, #4
 8004742:	4013      	ands	r3, r2
 8004744:	d005      	beq.n	8004752 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	2280      	movs	r2, #128	@ 0x80
 800474a:	01d2      	lsls	r2, r2, #7
 800474c:	4313      	orrs	r3, r2
 800474e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004750:	e003      	b.n	800475a <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0018      	movs	r0, r3
 8004756:	f000 f95a 	bl	8004a0e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	2380      	movs	r3, #128	@ 0x80
 800475e:	025b      	lsls	r3, r3, #9
 8004760:	4013      	ands	r3, r2
 8004762:	d028      	beq.n	80047b6 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2280      	movs	r2, #128	@ 0x80
 800476a:	0252      	lsls	r2, r2, #9
 800476c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	2380      	movs	r3, #128	@ 0x80
 8004772:	029b      	lsls	r3, r3, #10
 8004774:	4013      	ands	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	0018      	movs	r0, r3
 800477c:	f000 f937 	bl	80049ee <HAL_CAN_TxMailbox2CompleteCallback>
 8004780:	e019      	b.n	80047b6 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	2380      	movs	r3, #128	@ 0x80
 8004786:	02db      	lsls	r3, r3, #11
 8004788:	4013      	ands	r3, r2
 800478a:	d005      	beq.n	8004798 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800478c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478e:	2280      	movs	r2, #128	@ 0x80
 8004790:	0212      	lsls	r2, r2, #8
 8004792:	4313      	orrs	r3, r2
 8004794:	627b      	str	r3, [r7, #36]	@ 0x24
 8004796:	e00e      	b.n	80047b6 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	2380      	movs	r3, #128	@ 0x80
 800479c:	031b      	lsls	r3, r3, #12
 800479e:	4013      	ands	r3, r2
 80047a0:	d005      	beq.n	80047ae <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	2280      	movs	r2, #128	@ 0x80
 80047a6:	0252      	lsls	r2, r2, #9
 80047a8:	4313      	orrs	r3, r2
 80047aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ac:	e003      	b.n	80047b6 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	0018      	movs	r0, r3
 80047b2:	f000 f934 	bl	8004a1e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	2208      	movs	r2, #8
 80047ba:	4013      	ands	r3, r2
 80047bc:	d00c      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2210      	movs	r2, #16
 80047c2:	4013      	ands	r3, r2
 80047c4:	d008      	beq.n	80047d8 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	2280      	movs	r2, #128	@ 0x80
 80047ca:	0092      	lsls	r2, r2, #2
 80047cc:	4313      	orrs	r3, r2
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2210      	movs	r2, #16
 80047d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	2204      	movs	r2, #4
 80047dc:	4013      	ands	r3, r2
 80047de:	d00b      	beq.n	80047f8 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2208      	movs	r2, #8
 80047e4:	4013      	ands	r3, r2
 80047e6:	d007      	beq.n	80047f8 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2208      	movs	r2, #8
 80047ee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	0018      	movs	r0, r3
 80047f4:	f000 f91b 	bl	8004a2e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	2202      	movs	r2, #2
 80047fc:	4013      	ands	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	2203      	movs	r2, #3
 8004808:	4013      	ands	r3, r2
 800480a:	d003      	beq.n	8004814 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	0018      	movs	r0, r3
 8004810:	f7fc fc7e 	bl	8001110 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	2240      	movs	r2, #64	@ 0x40
 8004818:	4013      	ands	r3, r2
 800481a:	d00c      	beq.n	8004836 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	2210      	movs	r2, #16
 8004820:	4013      	ands	r3, r2
 8004822:	d008      	beq.n	8004836 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	2280      	movs	r2, #128	@ 0x80
 8004828:	00d2      	lsls	r2, r2, #3
 800482a:	4313      	orrs	r3, r2
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2210      	movs	r2, #16
 8004834:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	2220      	movs	r2, #32
 800483a:	4013      	ands	r3, r2
 800483c:	d00b      	beq.n	8004856 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2208      	movs	r2, #8
 8004842:	4013      	ands	r3, r2
 8004844:	d007      	beq.n	8004856 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2208      	movs	r2, #8
 800484c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	0018      	movs	r0, r3
 8004852:	f000 f8fc 	bl	8004a4e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	2210      	movs	r2, #16
 800485a:	4013      	ands	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2203      	movs	r2, #3
 8004866:	4013      	ands	r3, r2
 8004868:	d003      	beq.n	8004872 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	0018      	movs	r0, r3
 800486e:	f000 f8e6 	bl	8004a3e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004872:	6a3a      	ldr	r2, [r7, #32]
 8004874:	2380      	movs	r3, #128	@ 0x80
 8004876:	029b      	lsls	r3, r3, #10
 8004878:	4013      	ands	r3, r2
 800487a:	d00b      	beq.n	8004894 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	2210      	movs	r2, #16
 8004880:	4013      	ands	r3, r2
 8004882:	d007      	beq.n	8004894 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2210      	movs	r2, #16
 800488a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	0018      	movs	r0, r3
 8004890:	f000 f8e5 	bl	8004a5e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004894:	6a3a      	ldr	r2, [r7, #32]
 8004896:	2380      	movs	r3, #128	@ 0x80
 8004898:	025b      	lsls	r3, r3, #9
 800489a:	4013      	ands	r3, r2
 800489c:	d00b      	beq.n	80048b6 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	2208      	movs	r2, #8
 80048a2:	4013      	ands	r3, r2
 80048a4:	d007      	beq.n	80048b6 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2208      	movs	r2, #8
 80048ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f000 f8dc 	bl	8004a6e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80048b6:	6a3a      	ldr	r2, [r7, #32]
 80048b8:	2380      	movs	r3, #128	@ 0x80
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	4013      	ands	r3, r2
 80048be:	d100      	bne.n	80048c2 <HAL_CAN_IRQHandler+0x25c>
 80048c0:	e074      	b.n	80049ac <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2204      	movs	r2, #4
 80048c6:	4013      	ands	r3, r2
 80048c8:	d100      	bne.n	80048cc <HAL_CAN_IRQHandler+0x266>
 80048ca:	e06b      	b.n	80049a4 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048cc:	6a3a      	ldr	r2, [r7, #32]
 80048ce:	2380      	movs	r3, #128	@ 0x80
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4013      	ands	r3, r2
 80048d4:	d007      	beq.n	80048e6 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80048dc:	d003      	beq.n	80048e6 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80048de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e0:	2201      	movs	r2, #1
 80048e2:	4313      	orrs	r3, r2
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048e6:	6a3a      	ldr	r2, [r7, #32]
 80048e8:	2380      	movs	r3, #128	@ 0x80
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4013      	ands	r3, r2
 80048ee:	d007      	beq.n	8004900 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2202      	movs	r2, #2
 80048f4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80048f6:	d003      	beq.n	8004900 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	2202      	movs	r2, #2
 80048fc:	4313      	orrs	r3, r2
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004900:	6a3a      	ldr	r2, [r7, #32]
 8004902:	2380      	movs	r3, #128	@ 0x80
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4013      	ands	r3, r2
 8004908:	d007      	beq.n	800491a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2204      	movs	r2, #4
 800490e:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004910:	d003      	beq.n	800491a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	2204      	movs	r2, #4
 8004916:	4313      	orrs	r3, r2
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800491a:	6a3a      	ldr	r2, [r7, #32]
 800491c:	2380      	movs	r3, #128	@ 0x80
 800491e:	011b      	lsls	r3, r3, #4
 8004920:	4013      	ands	r3, r2
 8004922:	d03f      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2270      	movs	r2, #112	@ 0x70
 8004928:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800492a:	d03b      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2270      	movs	r2, #112	@ 0x70
 8004930:	4013      	ands	r3, r2
 8004932:	2b60      	cmp	r3, #96	@ 0x60
 8004934:	d027      	beq.n	8004986 <HAL_CAN_IRQHandler+0x320>
 8004936:	d82c      	bhi.n	8004992 <HAL_CAN_IRQHandler+0x32c>
 8004938:	2b50      	cmp	r3, #80	@ 0x50
 800493a:	d01f      	beq.n	800497c <HAL_CAN_IRQHandler+0x316>
 800493c:	d829      	bhi.n	8004992 <HAL_CAN_IRQHandler+0x32c>
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d017      	beq.n	8004972 <HAL_CAN_IRQHandler+0x30c>
 8004942:	d826      	bhi.n	8004992 <HAL_CAN_IRQHandler+0x32c>
 8004944:	2b30      	cmp	r3, #48	@ 0x30
 8004946:	d00f      	beq.n	8004968 <HAL_CAN_IRQHandler+0x302>
 8004948:	d823      	bhi.n	8004992 <HAL_CAN_IRQHandler+0x32c>
 800494a:	2b10      	cmp	r3, #16
 800494c:	d002      	beq.n	8004954 <HAL_CAN_IRQHandler+0x2ee>
 800494e:	2b20      	cmp	r3, #32
 8004950:	d005      	beq.n	800495e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004952:	e01e      	b.n	8004992 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8004954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004956:	2208      	movs	r2, #8
 8004958:	4313      	orrs	r3, r2
 800495a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800495c:	e01a      	b.n	8004994 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 800495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004960:	2210      	movs	r2, #16
 8004962:	4313      	orrs	r3, r2
 8004964:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004966:	e015      	b.n	8004994 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	2220      	movs	r2, #32
 800496c:	4313      	orrs	r3, r2
 800496e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004970:	e010      	b.n	8004994 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8004972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004974:	2240      	movs	r2, #64	@ 0x40
 8004976:	4313      	orrs	r3, r2
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800497a:	e00b      	b.n	8004994 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 800497c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497e:	2280      	movs	r2, #128	@ 0x80
 8004980:	4313      	orrs	r3, r2
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004984:	e006      	b.n	8004994 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	2280      	movs	r2, #128	@ 0x80
 800498a:	0052      	lsls	r2, r2, #1
 800498c:	4313      	orrs	r3, r2
 800498e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004990:	e000      	b.n	8004994 <HAL_CAN_IRQHandler+0x32e>
            break;
 8004992:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2170      	movs	r1, #112	@ 0x70
 80049a0:	438a      	bics	r2, r1
 80049a2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2204      	movs	r2, #4
 80049aa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d009      	beq.n	80049c6 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b8:	431a      	orrs	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	0018      	movs	r0, r3
 80049c2:	f000 f85c 	bl	8004a7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80049c6:	46c0      	nop			@ (mov r8, r8)
 80049c8:	46bd      	mov	sp, r7
 80049ca:	b00a      	add	sp, #40	@ 0x28
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80049d6:	46c0      	nop			@ (mov r8, r8)
 80049d8:	46bd      	mov	sp, r7
 80049da:	b002      	add	sp, #8
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	46bd      	mov	sp, r7
 80049ea:	b002      	add	sp, #8
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b082      	sub	sp, #8
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80049f6:	46c0      	nop			@ (mov r8, r8)
 80049f8:	46bd      	mov	sp, r7
 80049fa:	b002      	add	sp, #8
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a06:	46c0      	nop			@ (mov r8, r8)
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b002      	add	sp, #8
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a16:	46c0      	nop			@ (mov r8, r8)
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	b002      	add	sp, #8
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b082      	sub	sp, #8
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	b002      	add	sp, #8
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b082      	sub	sp, #8
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b002      	add	sp, #8
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b082      	sub	sp, #8
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	b002      	add	sp, #8
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b002      	add	sp, #8
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004a66:	46c0      	nop			@ (mov r8, r8)
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	b002      	add	sp, #8
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004a76:	46c0      	nop			@ (mov r8, r8)
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b002      	add	sp, #8
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004a86:	46c0      	nop			@ (mov r8, r8)
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	b002      	add	sp, #8
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	0002      	movs	r2, r0
 8004a98:	1dfb      	adds	r3, r7, #7
 8004a9a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004a9c:	1dfb      	adds	r3, r7, #7
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aa2:	d809      	bhi.n	8004ab8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa4:	1dfb      	adds	r3, r7, #7
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	001a      	movs	r2, r3
 8004aaa:	231f      	movs	r3, #31
 8004aac:	401a      	ands	r2, r3
 8004aae:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <__NVIC_EnableIRQ+0x30>)
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	4091      	lsls	r1, r2
 8004ab4:	000a      	movs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
  }
}
 8004ab8:	46c0      	nop			@ (mov r8, r8)
 8004aba:	46bd      	mov	sp, r7
 8004abc:	b002      	add	sp, #8
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	e000e100 	.word	0xe000e100

08004ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ac4:	b590      	push	{r4, r7, lr}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	0002      	movs	r2, r0
 8004acc:	6039      	str	r1, [r7, #0]
 8004ace:	1dfb      	adds	r3, r7, #7
 8004ad0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ad2:	1dfb      	adds	r3, r7, #7
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ad8:	d828      	bhi.n	8004b2c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ada:	4a2f      	ldr	r2, [pc, #188]	@ (8004b98 <__NVIC_SetPriority+0xd4>)
 8004adc:	1dfb      	adds	r3, r7, #7
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	33c0      	adds	r3, #192	@ 0xc0
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	589b      	ldr	r3, [r3, r2]
 8004aea:	1dfa      	adds	r2, r7, #7
 8004aec:	7812      	ldrb	r2, [r2, #0]
 8004aee:	0011      	movs	r1, r2
 8004af0:	2203      	movs	r2, #3
 8004af2:	400a      	ands	r2, r1
 8004af4:	00d2      	lsls	r2, r2, #3
 8004af6:	21ff      	movs	r1, #255	@ 0xff
 8004af8:	4091      	lsls	r1, r2
 8004afa:	000a      	movs	r2, r1
 8004afc:	43d2      	mvns	r2, r2
 8004afe:	401a      	ands	r2, r3
 8004b00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	019b      	lsls	r3, r3, #6
 8004b06:	22ff      	movs	r2, #255	@ 0xff
 8004b08:	401a      	ands	r2, r3
 8004b0a:	1dfb      	adds	r3, r7, #7
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	0018      	movs	r0, r3
 8004b10:	2303      	movs	r3, #3
 8004b12:	4003      	ands	r3, r0
 8004b14:	00db      	lsls	r3, r3, #3
 8004b16:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b18:	481f      	ldr	r0, [pc, #124]	@ (8004b98 <__NVIC_SetPriority+0xd4>)
 8004b1a:	1dfb      	adds	r3, r7, #7
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b25b      	sxtb	r3, r3
 8004b20:	089b      	lsrs	r3, r3, #2
 8004b22:	430a      	orrs	r2, r1
 8004b24:	33c0      	adds	r3, #192	@ 0xc0
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004b2a:	e031      	b.n	8004b90 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <__NVIC_SetPriority+0xd8>)
 8004b2e:	1dfb      	adds	r3, r7, #7
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	0019      	movs	r1, r3
 8004b34:	230f      	movs	r3, #15
 8004b36:	400b      	ands	r3, r1
 8004b38:	3b08      	subs	r3, #8
 8004b3a:	089b      	lsrs	r3, r3, #2
 8004b3c:	3306      	adds	r3, #6
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	18d3      	adds	r3, r2, r3
 8004b42:	3304      	adds	r3, #4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	1dfa      	adds	r2, r7, #7
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	0011      	movs	r1, r2
 8004b4c:	2203      	movs	r2, #3
 8004b4e:	400a      	ands	r2, r1
 8004b50:	00d2      	lsls	r2, r2, #3
 8004b52:	21ff      	movs	r1, #255	@ 0xff
 8004b54:	4091      	lsls	r1, r2
 8004b56:	000a      	movs	r2, r1
 8004b58:	43d2      	mvns	r2, r2
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	019b      	lsls	r3, r3, #6
 8004b62:	22ff      	movs	r2, #255	@ 0xff
 8004b64:	401a      	ands	r2, r3
 8004b66:	1dfb      	adds	r3, r7, #7
 8004b68:	781b      	ldrb	r3, [r3, #0]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	4003      	ands	r3, r0
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b74:	4809      	ldr	r0, [pc, #36]	@ (8004b9c <__NVIC_SetPriority+0xd8>)
 8004b76:	1dfb      	adds	r3, r7, #7
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	001c      	movs	r4, r3
 8004b7c:	230f      	movs	r3, #15
 8004b7e:	4023      	ands	r3, r4
 8004b80:	3b08      	subs	r3, #8
 8004b82:	089b      	lsrs	r3, r3, #2
 8004b84:	430a      	orrs	r2, r1
 8004b86:	3306      	adds	r3, #6
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	18c3      	adds	r3, r0, r3
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b003      	add	sp, #12
 8004b96:	bd90      	pop	{r4, r7, pc}
 8004b98:	e000e100 	.word	0xe000e100
 8004b9c:	e000ed00 	.word	0xe000ed00

08004ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	1e5a      	subs	r2, r3, #1
 8004bac:	2380      	movs	r3, #128	@ 0x80
 8004bae:	045b      	lsls	r3, r3, #17
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d301      	bcc.n	8004bb8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e010      	b.n	8004bda <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <SysTick_Config+0x44>)
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	3a01      	subs	r2, #1
 8004bbe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	425b      	negs	r3, r3
 8004bc4:	2103      	movs	r1, #3
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f7ff ff7c 	bl	8004ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <SysTick_Config+0x44>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bd2:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <SysTick_Config+0x44>)
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	0018      	movs	r0, r3
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	b002      	add	sp, #8
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	46c0      	nop			@ (mov r8, r8)
 8004be4:	e000e010 	.word	0xe000e010

08004be8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60b9      	str	r1, [r7, #8]
 8004bf0:	607a      	str	r2, [r7, #4]
 8004bf2:	210f      	movs	r1, #15
 8004bf4:	187b      	adds	r3, r7, r1
 8004bf6:	1c02      	adds	r2, r0, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	187b      	adds	r3, r7, r1
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	b25b      	sxtb	r3, r3
 8004c02:	0011      	movs	r1, r2
 8004c04:	0018      	movs	r0, r3
 8004c06:	f7ff ff5d 	bl	8004ac4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8004c0a:	46c0      	nop			@ (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b004      	add	sp, #16
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	0002      	movs	r2, r0
 8004c1a:	1dfb      	adds	r3, r7, #7
 8004c1c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c1e:	1dfb      	adds	r3, r7, #7
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	b25b      	sxtb	r3, r3
 8004c24:	0018      	movs	r0, r3
 8004c26:	f7ff ff33 	bl	8004a90 <__NVIC_EnableIRQ>
}
 8004c2a:	46c0      	nop			@ (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	0018      	movs	r0, r3
 8004c3e:	f7ff ffaf 	bl	8004ba0 <SysTick_Config>
 8004c42:	0003      	movs	r3, r0
}
 8004c44:	0018      	movs	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e036      	b.n	8004cd0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2221      	movs	r2, #33	@ 0x21
 8004c66:	2102      	movs	r1, #2
 8004c68:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a18      	ldr	r2, [pc, #96]	@ (8004cd8 <HAL_DMA_Init+0x8c>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	f000 f946 	bl	8004f44 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2221      	movs	r2, #33	@ 0x21
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	2100      	movs	r1, #0
 8004ccc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	0018      	movs	r0, r3
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b004      	add	sp, #16
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	ffffc00f 	.word	0xffffc00f

08004cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cea:	2317      	movs	r3, #23
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2220      	movs	r2, #32
 8004cf6:	5c9b      	ldrb	r3, [r3, r2]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_DMA_Start_IT+0x24>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e04f      	b.n	8004da0 <HAL_DMA_Start_IT+0xc4>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	2101      	movs	r1, #1
 8004d06:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2221      	movs	r2, #33	@ 0x21
 8004d0c:	5c9b      	ldrb	r3, [r3, r2]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d13a      	bne.n	8004d8a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2221      	movs	r2, #33	@ 0x21
 8004d18:	2102      	movs	r1, #2
 8004d1a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	438a      	bics	r2, r1
 8004d30:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	68b9      	ldr	r1, [r7, #8]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f8d7 	bl	8004eec <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	210e      	movs	r1, #14
 8004d52:	430a      	orrs	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e00f      	b.n	8004d78 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	210a      	movs	r1, #10
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2104      	movs	r1, #4
 8004d74:	438a      	bics	r2, r1
 8004d76:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	2101      	movs	r1, #1
 8004d84:	430a      	orrs	r2, r1
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e007      	b.n	8004d9a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d92:	2317      	movs	r3, #23
 8004d94:	18fb      	adds	r3, r7, r3
 8004d96:	2202      	movs	r2, #2
 8004d98:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8004d9a:	2317      	movs	r3, #23
 8004d9c:	18fb      	adds	r3, r7, r3
 8004d9e:	781b      	ldrb	r3, [r3, #0]
}
 8004da0:	0018      	movs	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b006      	add	sp, #24
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	2204      	movs	r2, #4
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	0013      	movs	r3, r2
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	d024      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x72>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d020      	beq.n	8004e1a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2220      	movs	r2, #32
 8004de0:	4013      	ands	r3, r2
 8004de2:	d107      	bne.n	8004df4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2104      	movs	r1, #4
 8004df0:	438a      	bics	r2, r1
 8004df2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dfc:	2104      	movs	r1, #4
 8004dfe:	4091      	lsls	r1, r2
 8004e00:	000a      	movs	r2, r1
 8004e02:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d100      	bne.n	8004e0e <HAL_DMA_IRQHandler+0x66>
 8004e0c:	e06a      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	0010      	movs	r0, r2
 8004e16:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e18:	e064      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	2202      	movs	r2, #2
 8004e20:	409a      	lsls	r2, r3
 8004e22:	0013      	movs	r3, r2
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4013      	ands	r3, r2
 8004e28:	d02b      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xda>
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d027      	beq.n	8004e82 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d10b      	bne.n	8004e56 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	210a      	movs	r1, #10
 8004e4a:	438a      	bics	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2221      	movs	r2, #33	@ 0x21
 8004e52:	2101      	movs	r1, #1
 8004e54:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e5e:	2102      	movs	r1, #2
 8004e60:	4091      	lsls	r1, r2
 8004e62:	000a      	movs	r2, r1
 8004e64:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2220      	movs	r2, #32
 8004e6a:	2100      	movs	r1, #0
 8004e6c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d036      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	0010      	movs	r0, r2
 8004e7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e80:	e030      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e86:	2208      	movs	r2, #8
 8004e88:	409a      	lsls	r2, r3
 8004e8a:	0013      	movs	r3, r2
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	d028      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x13c>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2208      	movs	r2, #8
 8004e96:	4013      	ands	r3, r2
 8004e98:	d024      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	210e      	movs	r1, #14
 8004ea6:	438a      	bics	r2, r1
 8004ea8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	4091      	lsls	r1, r2
 8004eb6:	000a      	movs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2221      	movs	r2, #33	@ 0x21
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d005      	beq.n	8004ee4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	0010      	movs	r0, r2
 8004ee0:	4798      	blx	r3
    }
  }
}
 8004ee2:	e7ff      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x13c>
 8004ee4:	46c0      	nop			@ (mov r8, r8)
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	b004      	add	sp, #16
 8004eea:	bd80      	pop	{r7, pc}

08004eec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f02:	2101      	movs	r1, #1
 8004f04:	4091      	lsls	r1, r2
 8004f06:	000a      	movs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b10      	cmp	r3, #16
 8004f18:	d108      	bne.n	8004f2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004f2a:	e007      	b.n	8004f3c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	60da      	str	r2, [r3, #12]
}
 8004f3c:	46c0      	nop			@ (mov r8, r8)
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	b004      	add	sp, #16
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a08      	ldr	r2, [pc, #32]	@ (8004f74 <DMA_CalcBaseAndBitshift+0x30>)
 8004f52:	4694      	mov	ip, r2
 8004f54:	4463      	add	r3, ip
 8004f56:	2114      	movs	r1, #20
 8004f58:	0018      	movs	r0, r3
 8004f5a:	f7fb f8d5 	bl	8000108 <__udivsi3>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	009a      	lsls	r2, r3, #2
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a03      	ldr	r2, [pc, #12]	@ (8004f78 <DMA_CalcBaseAndBitshift+0x34>)
 8004f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004f6c:	46c0      	nop			@ (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	bffdfff8 	.word	0xbffdfff8
 8004f78:	40020000 	.word	0x40020000

08004f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f86:	2300      	movs	r3, #0
 8004f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f8a:	e149      	b.n	8005220 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2101      	movs	r1, #1
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4091      	lsls	r1, r2
 8004f96:	000a      	movs	r2, r1
 8004f98:	4013      	ands	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d100      	bne.n	8004fa4 <HAL_GPIO_Init+0x28>
 8004fa2:	e13a      	b.n	800521a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	2203      	movs	r2, #3
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d005      	beq.n	8004fbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2203      	movs	r2, #3
 8004fb6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d130      	bne.n	800501e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	409a      	lsls	r2, r3
 8004fca:	0013      	movs	r3, r2
 8004fcc:	43da      	mvns	r2, r3
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	409a      	lsls	r2, r3
 8004fde:	0013      	movs	r3, r2
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	409a      	lsls	r2, r3
 8004ff8:	0013      	movs	r3, r2
 8004ffa:	43da      	mvns	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	091b      	lsrs	r3, r3, #4
 8005008:	2201      	movs	r2, #1
 800500a:	401a      	ands	r2, r3
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	409a      	lsls	r2, r3
 8005010:	0013      	movs	r3, r2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	4313      	orrs	r3, r2
 8005016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2203      	movs	r2, #3
 8005024:	4013      	ands	r3, r2
 8005026:	2b03      	cmp	r3, #3
 8005028:	d017      	beq.n	800505a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	2203      	movs	r2, #3
 8005036:	409a      	lsls	r2, r3
 8005038:	0013      	movs	r3, r2
 800503a:	43da      	mvns	r2, r3
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4013      	ands	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	689a      	ldr	r2, [r3, #8]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	409a      	lsls	r2, r3
 800504c:	0013      	movs	r3, r2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	2203      	movs	r2, #3
 8005060:	4013      	ands	r3, r2
 8005062:	2b02      	cmp	r3, #2
 8005064:	d123      	bne.n	80050ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	08da      	lsrs	r2, r3, #3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3208      	adds	r2, #8
 800506e:	0092      	lsls	r2, r2, #2
 8005070:	58d3      	ldr	r3, [r2, r3]
 8005072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	2207      	movs	r2, #7
 8005078:	4013      	ands	r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	220f      	movs	r2, #15
 800507e:	409a      	lsls	r2, r3
 8005080:	0013      	movs	r3, r2
 8005082:	43da      	mvns	r2, r3
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	4013      	ands	r3, r2
 8005088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2107      	movs	r1, #7
 8005092:	400b      	ands	r3, r1
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	409a      	lsls	r2, r3
 8005098:	0013      	movs	r3, r2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	08da      	lsrs	r2, r3, #3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3208      	adds	r2, #8
 80050a8:	0092      	lsls	r2, r2, #2
 80050aa:	6939      	ldr	r1, [r7, #16]
 80050ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	005b      	lsls	r3, r3, #1
 80050b8:	2203      	movs	r2, #3
 80050ba:	409a      	lsls	r2, r3
 80050bc:	0013      	movs	r3, r2
 80050be:	43da      	mvns	r2, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4013      	ands	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	2203      	movs	r2, #3
 80050cc:	401a      	ands	r2, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	409a      	lsls	r2, r3
 80050d4:	0013      	movs	r3, r2
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	23c0      	movs	r3, #192	@ 0xc0
 80050e8:	029b      	lsls	r3, r3, #10
 80050ea:	4013      	ands	r3, r2
 80050ec:	d100      	bne.n	80050f0 <HAL_GPIO_Init+0x174>
 80050ee:	e094      	b.n	800521a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f0:	4b51      	ldr	r3, [pc, #324]	@ (8005238 <HAL_GPIO_Init+0x2bc>)
 80050f2:	699a      	ldr	r2, [r3, #24]
 80050f4:	4b50      	ldr	r3, [pc, #320]	@ (8005238 <HAL_GPIO_Init+0x2bc>)
 80050f6:	2101      	movs	r1, #1
 80050f8:	430a      	orrs	r2, r1
 80050fa:	619a      	str	r2, [r3, #24]
 80050fc:	4b4e      	ldr	r3, [pc, #312]	@ (8005238 <HAL_GPIO_Init+0x2bc>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2201      	movs	r2, #1
 8005102:	4013      	ands	r3, r2
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005108:	4a4c      	ldr	r2, [pc, #304]	@ (800523c <HAL_GPIO_Init+0x2c0>)
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	089b      	lsrs	r3, r3, #2
 800510e:	3302      	adds	r3, #2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	589b      	ldr	r3, [r3, r2]
 8005114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2203      	movs	r2, #3
 800511a:	4013      	ands	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	220f      	movs	r2, #15
 8005120:	409a      	lsls	r2, r3
 8005122:	0013      	movs	r3, r2
 8005124:	43da      	mvns	r2, r3
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4013      	ands	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	2390      	movs	r3, #144	@ 0x90
 8005130:	05db      	lsls	r3, r3, #23
 8005132:	429a      	cmp	r2, r3
 8005134:	d00d      	beq.n	8005152 <HAL_GPIO_Init+0x1d6>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a41      	ldr	r2, [pc, #260]	@ (8005240 <HAL_GPIO_Init+0x2c4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d007      	beq.n	800514e <HAL_GPIO_Init+0x1d2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a40      	ldr	r2, [pc, #256]	@ (8005244 <HAL_GPIO_Init+0x2c8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d101      	bne.n	800514a <HAL_GPIO_Init+0x1ce>
 8005146:	2302      	movs	r3, #2
 8005148:	e004      	b.n	8005154 <HAL_GPIO_Init+0x1d8>
 800514a:	2305      	movs	r3, #5
 800514c:	e002      	b.n	8005154 <HAL_GPIO_Init+0x1d8>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <HAL_GPIO_Init+0x1d8>
 8005152:	2300      	movs	r3, #0
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	2103      	movs	r1, #3
 8005158:	400a      	ands	r2, r1
 800515a:	0092      	lsls	r2, r2, #2
 800515c:	4093      	lsls	r3, r2
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	4313      	orrs	r3, r2
 8005162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005164:	4935      	ldr	r1, [pc, #212]	@ (800523c <HAL_GPIO_Init+0x2c0>)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	089b      	lsrs	r3, r3, #2
 800516a:	3302      	adds	r3, #2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005172:	4b35      	ldr	r3, [pc, #212]	@ (8005248 <HAL_GPIO_Init+0x2cc>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	43da      	mvns	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	2380      	movs	r3, #128	@ 0x80
 8005188:	035b      	lsls	r3, r3, #13
 800518a:	4013      	ands	r3, r2
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005196:	4b2c      	ldr	r3, [pc, #176]	@ (8005248 <HAL_GPIO_Init+0x2cc>)
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800519c:	4b2a      	ldr	r3, [pc, #168]	@ (8005248 <HAL_GPIO_Init+0x2cc>)
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	43da      	mvns	r2, r3
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685a      	ldr	r2, [r3, #4]
 80051b0:	2380      	movs	r3, #128	@ 0x80
 80051b2:	039b      	lsls	r3, r3, #14
 80051b4:	4013      	ands	r3, r2
 80051b6:	d003      	beq.n	80051c0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051c0:	4b21      	ldr	r3, [pc, #132]	@ (8005248 <HAL_GPIO_Init+0x2cc>)
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80051c6:	4b20      	ldr	r3, [pc, #128]	@ (8005248 <HAL_GPIO_Init+0x2cc>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	43da      	mvns	r2, r3
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	4013      	ands	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	2380      	movs	r3, #128	@ 0x80
 80051dc:	029b      	lsls	r3, r3, #10
 80051de:	4013      	ands	r3, r2
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80051ea:	4b17      	ldr	r3, [pc, #92]	@ (8005248 <HAL_GPIO_Init+0x2cc>)
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80051f0:	4b15      	ldr	r3, [pc, #84]	@ (8005248 <HAL_GPIO_Init+0x2cc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	43da      	mvns	r2, r3
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	4013      	ands	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685a      	ldr	r2, [r3, #4]
 8005204:	2380      	movs	r3, #128	@ 0x80
 8005206:	025b      	lsls	r3, r3, #9
 8005208:	4013      	ands	r3, r2
 800520a:	d003      	beq.n	8005214 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005214:	4b0c      	ldr	r3, [pc, #48]	@ (8005248 <HAL_GPIO_Init+0x2cc>)
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	3301      	adds	r3, #1
 800521e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	40da      	lsrs	r2, r3
 8005228:	1e13      	subs	r3, r2, #0
 800522a:	d000      	beq.n	800522e <HAL_GPIO_Init+0x2b2>
 800522c:	e6ae      	b.n	8004f8c <HAL_GPIO_Init+0x10>
  } 
}
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	46c0      	nop			@ (mov r8, r8)
 8005232:	46bd      	mov	sp, r7
 8005234:	b006      	add	sp, #24
 8005236:	bd80      	pop	{r7, pc}
 8005238:	40021000 	.word	0x40021000
 800523c:	40010000 	.word	0x40010000
 8005240:	48000400 	.word	0x48000400
 8005244:	48000800 	.word	0x48000800
 8005248:	40010400 	.word	0x40010400

0800524c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	0008      	movs	r0, r1
 8005256:	0011      	movs	r1, r2
 8005258:	1cbb      	adds	r3, r7, #2
 800525a:	1c02      	adds	r2, r0, #0
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	1c7b      	adds	r3, r7, #1
 8005260:	1c0a      	adds	r2, r1, #0
 8005262:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005264:	1c7b      	adds	r3, r7, #1
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800526c:	1cbb      	adds	r3, r7, #2
 800526e:	881a      	ldrh	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005274:	e003      	b.n	800527e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005276:	1cbb      	adds	r3, r7, #2
 8005278:	881a      	ldrh	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800527e:	46c0      	nop			@ (mov r8, r8)
 8005280:	46bd      	mov	sp, r7
 8005282:	b002      	add	sp, #8
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b088      	sub	sp, #32
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d102      	bne.n	800529c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f000 fb76 	bl	8005988 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2201      	movs	r2, #1
 80052a2:	4013      	ands	r3, r2
 80052a4:	d100      	bne.n	80052a8 <HAL_RCC_OscConfig+0x20>
 80052a6:	e08e      	b.n	80053c6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80052a8:	4bc5      	ldr	r3, [pc, #788]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	220c      	movs	r2, #12
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b04      	cmp	r3, #4
 80052b2:	d00e      	beq.n	80052d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80052b4:	4bc2      	ldr	r3, [pc, #776]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	220c      	movs	r2, #12
 80052ba:	4013      	ands	r3, r2
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d117      	bne.n	80052f0 <HAL_RCC_OscConfig+0x68>
 80052c0:	4bbf      	ldr	r3, [pc, #764]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	23c0      	movs	r3, #192	@ 0xc0
 80052c6:	025b      	lsls	r3, r3, #9
 80052c8:	401a      	ands	r2, r3
 80052ca:	2380      	movs	r3, #128	@ 0x80
 80052cc:	025b      	lsls	r3, r3, #9
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d10e      	bne.n	80052f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d2:	4bbb      	ldr	r3, [pc, #748]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	2380      	movs	r3, #128	@ 0x80
 80052d8:	029b      	lsls	r3, r3, #10
 80052da:	4013      	ands	r3, r2
 80052dc:	d100      	bne.n	80052e0 <HAL_RCC_OscConfig+0x58>
 80052de:	e071      	b.n	80053c4 <HAL_RCC_OscConfig+0x13c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d000      	beq.n	80052ea <HAL_RCC_OscConfig+0x62>
 80052e8:	e06c      	b.n	80053c4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f000 fb4c 	bl	8005988 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d107      	bne.n	8005308 <HAL_RCC_OscConfig+0x80>
 80052f8:	4bb1      	ldr	r3, [pc, #708]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	4bb0      	ldr	r3, [pc, #704]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80052fe:	2180      	movs	r1, #128	@ 0x80
 8005300:	0249      	lsls	r1, r1, #9
 8005302:	430a      	orrs	r2, r1
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e02f      	b.n	8005368 <HAL_RCC_OscConfig+0xe0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10c      	bne.n	800532a <HAL_RCC_OscConfig+0xa2>
 8005310:	4bab      	ldr	r3, [pc, #684]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	4baa      	ldr	r3, [pc, #680]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005316:	49ab      	ldr	r1, [pc, #684]	@ (80055c4 <HAL_RCC_OscConfig+0x33c>)
 8005318:	400a      	ands	r2, r1
 800531a:	601a      	str	r2, [r3, #0]
 800531c:	4ba8      	ldr	r3, [pc, #672]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4ba7      	ldr	r3, [pc, #668]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005322:	49a9      	ldr	r1, [pc, #676]	@ (80055c8 <HAL_RCC_OscConfig+0x340>)
 8005324:	400a      	ands	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	e01e      	b.n	8005368 <HAL_RCC_OscConfig+0xe0>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b05      	cmp	r3, #5
 8005330:	d10e      	bne.n	8005350 <HAL_RCC_OscConfig+0xc8>
 8005332:	4ba3      	ldr	r3, [pc, #652]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4ba2      	ldr	r3, [pc, #648]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005338:	2180      	movs	r1, #128	@ 0x80
 800533a:	02c9      	lsls	r1, r1, #11
 800533c:	430a      	orrs	r2, r1
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	4b9f      	ldr	r3, [pc, #636]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	4b9e      	ldr	r3, [pc, #632]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005346:	2180      	movs	r1, #128	@ 0x80
 8005348:	0249      	lsls	r1, r1, #9
 800534a:	430a      	orrs	r2, r1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e00b      	b.n	8005368 <HAL_RCC_OscConfig+0xe0>
 8005350:	4b9b      	ldr	r3, [pc, #620]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	4b9a      	ldr	r3, [pc, #616]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005356:	499b      	ldr	r1, [pc, #620]	@ (80055c4 <HAL_RCC_OscConfig+0x33c>)
 8005358:	400a      	ands	r2, r1
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	4b98      	ldr	r3, [pc, #608]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b97      	ldr	r3, [pc, #604]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005362:	4999      	ldr	r1, [pc, #612]	@ (80055c8 <HAL_RCC_OscConfig+0x340>)
 8005364:	400a      	ands	r2, r1
 8005366:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d014      	beq.n	800539a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7fe f894 	bl	800349c <HAL_GetTick>
 8005374:	0003      	movs	r3, r0
 8005376:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800537a:	f7fe f88f 	bl	800349c <HAL_GetTick>
 800537e:	0002      	movs	r2, r0
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b64      	cmp	r3, #100	@ 0x64
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e2fd      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800538c:	4b8c      	ldr	r3, [pc, #560]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	2380      	movs	r3, #128	@ 0x80
 8005392:	029b      	lsls	r3, r3, #10
 8005394:	4013      	ands	r3, r2
 8005396:	d0f0      	beq.n	800537a <HAL_RCC_OscConfig+0xf2>
 8005398:	e015      	b.n	80053c6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7fe f87f 	bl	800349c <HAL_GetTick>
 800539e:	0003      	movs	r3, r0
 80053a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053a4:	f7fe f87a 	bl	800349c <HAL_GetTick>
 80053a8:	0002      	movs	r2, r0
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b64      	cmp	r3, #100	@ 0x64
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e2e8      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053b6:	4b82      	ldr	r3, [pc, #520]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	2380      	movs	r3, #128	@ 0x80
 80053bc:	029b      	lsls	r3, r3, #10
 80053be:	4013      	ands	r3, r2
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x11c>
 80053c2:	e000      	b.n	80053c6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2202      	movs	r2, #2
 80053cc:	4013      	ands	r3, r2
 80053ce:	d100      	bne.n	80053d2 <HAL_RCC_OscConfig+0x14a>
 80053d0:	e06c      	b.n	80054ac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80053d2:	4b7b      	ldr	r3, [pc, #492]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	220c      	movs	r2, #12
 80053d8:	4013      	ands	r3, r2
 80053da:	d00e      	beq.n	80053fa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80053dc:	4b78      	ldr	r3, [pc, #480]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	220c      	movs	r2, #12
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d11f      	bne.n	8005428 <HAL_RCC_OscConfig+0x1a0>
 80053e8:	4b75      	ldr	r3, [pc, #468]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	23c0      	movs	r3, #192	@ 0xc0
 80053ee:	025b      	lsls	r3, r3, #9
 80053f0:	401a      	ands	r2, r3
 80053f2:	2380      	movs	r3, #128	@ 0x80
 80053f4:	021b      	lsls	r3, r3, #8
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d116      	bne.n	8005428 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053fa:	4b71      	ldr	r3, [pc, #452]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2202      	movs	r2, #2
 8005400:	4013      	ands	r3, r2
 8005402:	d005      	beq.n	8005410 <HAL_RCC_OscConfig+0x188>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	2b01      	cmp	r3, #1
 800540a:	d001      	beq.n	8005410 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e2bb      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005410:	4b6b      	ldr	r3, [pc, #428]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	22f8      	movs	r2, #248	@ 0xf8
 8005416:	4393      	bics	r3, r2
 8005418:	0019      	movs	r1, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	00da      	lsls	r2, r3, #3
 8005420:	4b67      	ldr	r3, [pc, #412]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005422:	430a      	orrs	r2, r1
 8005424:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005426:	e041      	b.n	80054ac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d024      	beq.n	800547a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005430:	4b63      	ldr	r3, [pc, #396]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b62      	ldr	r3, [pc, #392]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005436:	2101      	movs	r1, #1
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fe f82e 	bl	800349c <HAL_GetTick>
 8005440:	0003      	movs	r3, r0
 8005442:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005446:	f7fe f829 	bl	800349c <HAL_GetTick>
 800544a:	0002      	movs	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e297      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005458:	4b59      	ldr	r3, [pc, #356]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2202      	movs	r2, #2
 800545e:	4013      	ands	r3, r2
 8005460:	d0f1      	beq.n	8005446 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005462:	4b57      	ldr	r3, [pc, #348]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	22f8      	movs	r2, #248	@ 0xf8
 8005468:	4393      	bics	r3, r2
 800546a:	0019      	movs	r1, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	00da      	lsls	r2, r3, #3
 8005472:	4b53      	ldr	r3, [pc, #332]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005474:	430a      	orrs	r2, r1
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e018      	b.n	80054ac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800547a:	4b51      	ldr	r3, [pc, #324]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b50      	ldr	r3, [pc, #320]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005480:	2101      	movs	r1, #1
 8005482:	438a      	bics	r2, r1
 8005484:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005486:	f7fe f809 	bl	800349c <HAL_GetTick>
 800548a:	0003      	movs	r3, r0
 800548c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005490:	f7fe f804 	bl	800349c <HAL_GetTick>
 8005494:	0002      	movs	r2, r0
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e272      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054a2:	4b47      	ldr	r3, [pc, #284]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2202      	movs	r2, #2
 80054a8:	4013      	ands	r3, r2
 80054aa:	d1f1      	bne.n	8005490 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2208      	movs	r2, #8
 80054b2:	4013      	ands	r3, r2
 80054b4:	d036      	beq.n	8005524 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d019      	beq.n	80054f2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054be:	4b40      	ldr	r3, [pc, #256]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80054c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054c2:	4b3f      	ldr	r3, [pc, #252]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80054c4:	2101      	movs	r1, #1
 80054c6:	430a      	orrs	r2, r1
 80054c8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ca:	f7fd ffe7 	bl	800349c <HAL_GetTick>
 80054ce:	0003      	movs	r3, r0
 80054d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d4:	f7fd ffe2 	bl	800349c <HAL_GetTick>
 80054d8:	0002      	movs	r2, r0
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e250      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054e6:	4b36      	ldr	r3, [pc, #216]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80054e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ea:	2202      	movs	r2, #2
 80054ec:	4013      	ands	r3, r2
 80054ee:	d0f1      	beq.n	80054d4 <HAL_RCC_OscConfig+0x24c>
 80054f0:	e018      	b.n	8005524 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054f2:	4b33      	ldr	r3, [pc, #204]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80054f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054f6:	4b32      	ldr	r3, [pc, #200]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80054f8:	2101      	movs	r1, #1
 80054fa:	438a      	bics	r2, r1
 80054fc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054fe:	f7fd ffcd 	bl	800349c <HAL_GetTick>
 8005502:	0003      	movs	r3, r0
 8005504:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005508:	f7fd ffc8 	bl	800349c <HAL_GetTick>
 800550c:	0002      	movs	r2, r0
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e236      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800551a:	4b29      	ldr	r3, [pc, #164]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	2202      	movs	r2, #2
 8005520:	4013      	ands	r3, r2
 8005522:	d1f1      	bne.n	8005508 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2204      	movs	r2, #4
 800552a:	4013      	ands	r3, r2
 800552c:	d100      	bne.n	8005530 <HAL_RCC_OscConfig+0x2a8>
 800552e:	e0b5      	b.n	800569c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005530:	201f      	movs	r0, #31
 8005532:	183b      	adds	r3, r7, r0
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005538:	4b21      	ldr	r3, [pc, #132]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 800553a:	69da      	ldr	r2, [r3, #28]
 800553c:	2380      	movs	r3, #128	@ 0x80
 800553e:	055b      	lsls	r3, r3, #21
 8005540:	4013      	ands	r3, r2
 8005542:	d110      	bne.n	8005566 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005544:	4b1e      	ldr	r3, [pc, #120]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	4b1d      	ldr	r3, [pc, #116]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 800554a:	2180      	movs	r1, #128	@ 0x80
 800554c:	0549      	lsls	r1, r1, #21
 800554e:	430a      	orrs	r2, r1
 8005550:	61da      	str	r2, [r3, #28]
 8005552:	4b1b      	ldr	r3, [pc, #108]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	2380      	movs	r3, #128	@ 0x80
 8005558:	055b      	lsls	r3, r3, #21
 800555a:	4013      	ands	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
 800555e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005560:	183b      	adds	r3, r7, r0
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005566:	4b19      	ldr	r3, [pc, #100]	@ (80055cc <HAL_RCC_OscConfig+0x344>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	2380      	movs	r3, #128	@ 0x80
 800556c:	005b      	lsls	r3, r3, #1
 800556e:	4013      	ands	r3, r2
 8005570:	d11a      	bne.n	80055a8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005572:	4b16      	ldr	r3, [pc, #88]	@ (80055cc <HAL_RCC_OscConfig+0x344>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	4b15      	ldr	r3, [pc, #84]	@ (80055cc <HAL_RCC_OscConfig+0x344>)
 8005578:	2180      	movs	r1, #128	@ 0x80
 800557a:	0049      	lsls	r1, r1, #1
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005580:	f7fd ff8c 	bl	800349c <HAL_GetTick>
 8005584:	0003      	movs	r3, r0
 8005586:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800558a:	f7fd ff87 	bl	800349c <HAL_GetTick>
 800558e:	0002      	movs	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b64      	cmp	r3, #100	@ 0x64
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e1f5      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800559c:	4b0b      	ldr	r3, [pc, #44]	@ (80055cc <HAL_RCC_OscConfig+0x344>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	2380      	movs	r3, #128	@ 0x80
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4013      	ands	r3, r2
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d10f      	bne.n	80055d0 <HAL_RCC_OscConfig+0x348>
 80055b0:	4b03      	ldr	r3, [pc, #12]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	4b02      	ldr	r3, [pc, #8]	@ (80055c0 <HAL_RCC_OscConfig+0x338>)
 80055b6:	2101      	movs	r1, #1
 80055b8:	430a      	orrs	r2, r1
 80055ba:	621a      	str	r2, [r3, #32]
 80055bc:	e036      	b.n	800562c <HAL_RCC_OscConfig+0x3a4>
 80055be:	46c0      	nop			@ (mov r8, r8)
 80055c0:	40021000 	.word	0x40021000
 80055c4:	fffeffff 	.word	0xfffeffff
 80055c8:	fffbffff 	.word	0xfffbffff
 80055cc:	40007000 	.word	0x40007000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d10c      	bne.n	80055f2 <HAL_RCC_OscConfig+0x36a>
 80055d8:	4bca      	ldr	r3, [pc, #808]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80055da:	6a1a      	ldr	r2, [r3, #32]
 80055dc:	4bc9      	ldr	r3, [pc, #804]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80055de:	2101      	movs	r1, #1
 80055e0:	438a      	bics	r2, r1
 80055e2:	621a      	str	r2, [r3, #32]
 80055e4:	4bc7      	ldr	r3, [pc, #796]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	4bc6      	ldr	r3, [pc, #792]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80055ea:	2104      	movs	r1, #4
 80055ec:	438a      	bics	r2, r1
 80055ee:	621a      	str	r2, [r3, #32]
 80055f0:	e01c      	b.n	800562c <HAL_RCC_OscConfig+0x3a4>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d10c      	bne.n	8005614 <HAL_RCC_OscConfig+0x38c>
 80055fa:	4bc2      	ldr	r3, [pc, #776]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80055fc:	6a1a      	ldr	r2, [r3, #32]
 80055fe:	4bc1      	ldr	r3, [pc, #772]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005600:	2104      	movs	r1, #4
 8005602:	430a      	orrs	r2, r1
 8005604:	621a      	str	r2, [r3, #32]
 8005606:	4bbf      	ldr	r3, [pc, #764]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	4bbe      	ldr	r3, [pc, #760]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800560c:	2101      	movs	r1, #1
 800560e:	430a      	orrs	r2, r1
 8005610:	621a      	str	r2, [r3, #32]
 8005612:	e00b      	b.n	800562c <HAL_RCC_OscConfig+0x3a4>
 8005614:	4bbb      	ldr	r3, [pc, #748]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005616:	6a1a      	ldr	r2, [r3, #32]
 8005618:	4bba      	ldr	r3, [pc, #744]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800561a:	2101      	movs	r1, #1
 800561c:	438a      	bics	r2, r1
 800561e:	621a      	str	r2, [r3, #32]
 8005620:	4bb8      	ldr	r3, [pc, #736]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005622:	6a1a      	ldr	r2, [r3, #32]
 8005624:	4bb7      	ldr	r3, [pc, #732]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005626:	2104      	movs	r1, #4
 8005628:	438a      	bics	r2, r1
 800562a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d014      	beq.n	800565e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005634:	f7fd ff32 	bl	800349c <HAL_GetTick>
 8005638:	0003      	movs	r3, r0
 800563a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800563c:	e009      	b.n	8005652 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800563e:	f7fd ff2d 	bl	800349c <HAL_GetTick>
 8005642:	0002      	movs	r2, r0
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	4aaf      	ldr	r2, [pc, #700]	@ (8005908 <HAL_RCC_OscConfig+0x680>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e19a      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005652:	4bac      	ldr	r3, [pc, #688]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	2202      	movs	r2, #2
 8005658:	4013      	ands	r3, r2
 800565a:	d0f0      	beq.n	800563e <HAL_RCC_OscConfig+0x3b6>
 800565c:	e013      	b.n	8005686 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565e:	f7fd ff1d 	bl	800349c <HAL_GetTick>
 8005662:	0003      	movs	r3, r0
 8005664:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005666:	e009      	b.n	800567c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005668:	f7fd ff18 	bl	800349c <HAL_GetTick>
 800566c:	0002      	movs	r2, r0
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	4aa5      	ldr	r2, [pc, #660]	@ (8005908 <HAL_RCC_OscConfig+0x680>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e185      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567c:	4ba1      	ldr	r3, [pc, #644]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	2202      	movs	r2, #2
 8005682:	4013      	ands	r3, r2
 8005684:	d1f0      	bne.n	8005668 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005686:	231f      	movs	r3, #31
 8005688:	18fb      	adds	r3, r7, r3
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	2b01      	cmp	r3, #1
 800568e:	d105      	bne.n	800569c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005690:	4b9c      	ldr	r3, [pc, #624]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	4b9b      	ldr	r3, [pc, #620]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005696:	499d      	ldr	r1, [pc, #628]	@ (800590c <HAL_RCC_OscConfig+0x684>)
 8005698:	400a      	ands	r2, r1
 800569a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2210      	movs	r2, #16
 80056a2:	4013      	ands	r3, r2
 80056a4:	d063      	beq.n	800576e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d12a      	bne.n	8005704 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80056ae:	4b95      	ldr	r3, [pc, #596]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80056b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056b2:	4b94      	ldr	r3, [pc, #592]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80056b4:	2104      	movs	r1, #4
 80056b6:	430a      	orrs	r2, r1
 80056b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80056ba:	4b92      	ldr	r3, [pc, #584]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80056bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056be:	4b91      	ldr	r3, [pc, #580]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80056c0:	2101      	movs	r1, #1
 80056c2:	430a      	orrs	r2, r1
 80056c4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056c6:	f7fd fee9 	bl	800349c <HAL_GetTick>
 80056ca:	0003      	movs	r3, r0
 80056cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80056ce:	e008      	b.n	80056e2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80056d0:	f7fd fee4 	bl	800349c <HAL_GetTick>
 80056d4:	0002      	movs	r2, r0
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d901      	bls.n	80056e2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e152      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80056e2:	4b88      	ldr	r3, [pc, #544]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80056e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e6:	2202      	movs	r2, #2
 80056e8:	4013      	ands	r3, r2
 80056ea:	d0f1      	beq.n	80056d0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80056ec:	4b85      	ldr	r3, [pc, #532]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80056ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f0:	22f8      	movs	r2, #248	@ 0xf8
 80056f2:	4393      	bics	r3, r2
 80056f4:	0019      	movs	r1, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	00da      	lsls	r2, r3, #3
 80056fc:	4b81      	ldr	r3, [pc, #516]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80056fe:	430a      	orrs	r2, r1
 8005700:	635a      	str	r2, [r3, #52]	@ 0x34
 8005702:	e034      	b.n	800576e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	3305      	adds	r3, #5
 800570a:	d111      	bne.n	8005730 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800570c:	4b7d      	ldr	r3, [pc, #500]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800570e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005710:	4b7c      	ldr	r3, [pc, #496]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005712:	2104      	movs	r1, #4
 8005714:	438a      	bics	r2, r1
 8005716:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005718:	4b7a      	ldr	r3, [pc, #488]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800571a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800571c:	22f8      	movs	r2, #248	@ 0xf8
 800571e:	4393      	bics	r3, r2
 8005720:	0019      	movs	r1, r3
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	00da      	lsls	r2, r3, #3
 8005728:	4b76      	ldr	r3, [pc, #472]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800572a:	430a      	orrs	r2, r1
 800572c:	635a      	str	r2, [r3, #52]	@ 0x34
 800572e:	e01e      	b.n	800576e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005730:	4b74      	ldr	r3, [pc, #464]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005734:	4b73      	ldr	r3, [pc, #460]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005736:	2104      	movs	r1, #4
 8005738:	430a      	orrs	r2, r1
 800573a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800573c:	4b71      	ldr	r3, [pc, #452]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800573e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005740:	4b70      	ldr	r3, [pc, #448]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005742:	2101      	movs	r1, #1
 8005744:	438a      	bics	r2, r1
 8005746:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005748:	f7fd fea8 	bl	800349c <HAL_GetTick>
 800574c:	0003      	movs	r3, r0
 800574e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005752:	f7fd fea3 	bl	800349c <HAL_GetTick>
 8005756:	0002      	movs	r2, r0
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e111      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005764:	4b67      	ldr	r3, [pc, #412]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005768:	2202      	movs	r2, #2
 800576a:	4013      	ands	r3, r2
 800576c:	d1f1      	bne.n	8005752 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2220      	movs	r2, #32
 8005774:	4013      	ands	r3, r2
 8005776:	d05c      	beq.n	8005832 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005778:	4b62      	ldr	r3, [pc, #392]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	220c      	movs	r2, #12
 800577e:	4013      	ands	r3, r2
 8005780:	2b0c      	cmp	r3, #12
 8005782:	d00e      	beq.n	80057a2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005784:	4b5f      	ldr	r3, [pc, #380]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	220c      	movs	r2, #12
 800578a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800578c:	2b08      	cmp	r3, #8
 800578e:	d114      	bne.n	80057ba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005790:	4b5c      	ldr	r3, [pc, #368]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	23c0      	movs	r3, #192	@ 0xc0
 8005796:	025b      	lsls	r3, r3, #9
 8005798:	401a      	ands	r2, r3
 800579a:	23c0      	movs	r3, #192	@ 0xc0
 800579c:	025b      	lsls	r3, r3, #9
 800579e:	429a      	cmp	r2, r3
 80057a0:	d10b      	bne.n	80057ba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80057a2:	4b58      	ldr	r3, [pc, #352]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80057a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057a6:	2380      	movs	r3, #128	@ 0x80
 80057a8:	029b      	lsls	r3, r3, #10
 80057aa:	4013      	ands	r3, r2
 80057ac:	d040      	beq.n	8005830 <HAL_RCC_OscConfig+0x5a8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d03c      	beq.n	8005830 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e0e6      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01b      	beq.n	80057fa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80057c2:	4b50      	ldr	r3, [pc, #320]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80057c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057c6:	4b4f      	ldr	r3, [pc, #316]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80057c8:	2180      	movs	r1, #128	@ 0x80
 80057ca:	0249      	lsls	r1, r1, #9
 80057cc:	430a      	orrs	r2, r1
 80057ce:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d0:	f7fd fe64 	bl	800349c <HAL_GetTick>
 80057d4:	0003      	movs	r3, r0
 80057d6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057da:	f7fd fe5f 	bl	800349c <HAL_GetTick>
 80057de:	0002      	movs	r2, r0
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e0cd      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80057ec:	4b45      	ldr	r3, [pc, #276]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80057ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057f0:	2380      	movs	r3, #128	@ 0x80
 80057f2:	029b      	lsls	r3, r3, #10
 80057f4:	4013      	ands	r3, r2
 80057f6:	d0f0      	beq.n	80057da <HAL_RCC_OscConfig+0x552>
 80057f8:	e01b      	b.n	8005832 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80057fa:	4b42      	ldr	r3, [pc, #264]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80057fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057fe:	4b41      	ldr	r3, [pc, #260]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005800:	4943      	ldr	r1, [pc, #268]	@ (8005910 <HAL_RCC_OscConfig+0x688>)
 8005802:	400a      	ands	r2, r1
 8005804:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005806:	f7fd fe49 	bl	800349c <HAL_GetTick>
 800580a:	0003      	movs	r3, r0
 800580c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800580e:	e008      	b.n	8005822 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005810:	f7fd fe44 	bl	800349c <HAL_GetTick>
 8005814:	0002      	movs	r2, r0
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	2b02      	cmp	r3, #2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e0b2      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005822:	4b38      	ldr	r3, [pc, #224]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005824:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005826:	2380      	movs	r3, #128	@ 0x80
 8005828:	029b      	lsls	r3, r3, #10
 800582a:	4013      	ands	r3, r2
 800582c:	d1f0      	bne.n	8005810 <HAL_RCC_OscConfig+0x588>
 800582e:	e000      	b.n	8005832 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005830:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	2b00      	cmp	r3, #0
 8005838:	d100      	bne.n	800583c <HAL_RCC_OscConfig+0x5b4>
 800583a:	e0a4      	b.n	8005986 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800583c:	4b31      	ldr	r3, [pc, #196]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	220c      	movs	r2, #12
 8005842:	4013      	ands	r3, r2
 8005844:	2b08      	cmp	r3, #8
 8005846:	d100      	bne.n	800584a <HAL_RCC_OscConfig+0x5c2>
 8005848:	e078      	b.n	800593c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800584e:	2b02      	cmp	r3, #2
 8005850:	d14c      	bne.n	80058ec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005852:	4b2c      	ldr	r3, [pc, #176]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	4b2b      	ldr	r3, [pc, #172]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005858:	492e      	ldr	r1, [pc, #184]	@ (8005914 <HAL_RCC_OscConfig+0x68c>)
 800585a:	400a      	ands	r2, r1
 800585c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800585e:	f7fd fe1d 	bl	800349c <HAL_GetTick>
 8005862:	0003      	movs	r3, r0
 8005864:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005868:	f7fd fe18 	bl	800349c <HAL_GetTick>
 800586c:	0002      	movs	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e086      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800587a:	4b22      	ldr	r3, [pc, #136]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	2380      	movs	r3, #128	@ 0x80
 8005880:	049b      	lsls	r3, r3, #18
 8005882:	4013      	ands	r3, r2
 8005884:	d1f0      	bne.n	8005868 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005886:	4b1f      	ldr	r3, [pc, #124]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	220f      	movs	r2, #15
 800588c:	4393      	bics	r3, r2
 800588e:	0019      	movs	r1, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005894:	4b1b      	ldr	r3, [pc, #108]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 8005896:	430a      	orrs	r2, r1
 8005898:	62da      	str	r2, [r3, #44]	@ 0x2c
 800589a:	4b1a      	ldr	r3, [pc, #104]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	4a1e      	ldr	r2, [pc, #120]	@ (8005918 <HAL_RCC_OscConfig+0x690>)
 80058a0:	4013      	ands	r3, r2
 80058a2:	0019      	movs	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ac:	431a      	orrs	r2, r3
 80058ae:	4b15      	ldr	r3, [pc, #84]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80058b0:	430a      	orrs	r2, r1
 80058b2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b4:	4b13      	ldr	r3, [pc, #76]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	4b12      	ldr	r3, [pc, #72]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80058ba:	2180      	movs	r1, #128	@ 0x80
 80058bc:	0449      	lsls	r1, r1, #17
 80058be:	430a      	orrs	r2, r1
 80058c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058c2:	f7fd fdeb 	bl	800349c <HAL_GetTick>
 80058c6:	0003      	movs	r3, r0
 80058c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058cc:	f7fd fde6 	bl	800349c <HAL_GetTick>
 80058d0:	0002      	movs	r2, r0
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e054      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80058de:	4b09      	ldr	r3, [pc, #36]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	2380      	movs	r3, #128	@ 0x80
 80058e4:	049b      	lsls	r3, r3, #18
 80058e6:	4013      	ands	r3, r2
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x644>
 80058ea:	e04c      	b.n	8005986 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ec:	4b05      	ldr	r3, [pc, #20]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4b04      	ldr	r3, [pc, #16]	@ (8005904 <HAL_RCC_OscConfig+0x67c>)
 80058f2:	4908      	ldr	r1, [pc, #32]	@ (8005914 <HAL_RCC_OscConfig+0x68c>)
 80058f4:	400a      	ands	r2, r1
 80058f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f8:	f7fd fdd0 	bl	800349c <HAL_GetTick>
 80058fc:	0003      	movs	r3, r0
 80058fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005900:	e015      	b.n	800592e <HAL_RCC_OscConfig+0x6a6>
 8005902:	46c0      	nop			@ (mov r8, r8)
 8005904:	40021000 	.word	0x40021000
 8005908:	00001388 	.word	0x00001388
 800590c:	efffffff 	.word	0xefffffff
 8005910:	fffeffff 	.word	0xfffeffff
 8005914:	feffffff 	.word	0xfeffffff
 8005918:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800591c:	f7fd fdbe 	bl	800349c <HAL_GetTick>
 8005920:	0002      	movs	r2, r0
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	2b02      	cmp	r3, #2
 8005928:	d901      	bls.n	800592e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e02c      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800592e:	4b18      	ldr	r3, [pc, #96]	@ (8005990 <HAL_RCC_OscConfig+0x708>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	2380      	movs	r3, #128	@ 0x80
 8005934:	049b      	lsls	r3, r3, #18
 8005936:	4013      	ands	r3, r2
 8005938:	d1f0      	bne.n	800591c <HAL_RCC_OscConfig+0x694>
 800593a:	e024      	b.n	8005986 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e01f      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005948:	4b11      	ldr	r3, [pc, #68]	@ (8005990 <HAL_RCC_OscConfig+0x708>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800594e:	4b10      	ldr	r3, [pc, #64]	@ (8005990 <HAL_RCC_OscConfig+0x708>)
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	23c0      	movs	r3, #192	@ 0xc0
 8005958:	025b      	lsls	r3, r3, #9
 800595a:	401a      	ands	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005960:	429a      	cmp	r2, r3
 8005962:	d10e      	bne.n	8005982 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	220f      	movs	r2, #15
 8005968:	401a      	ands	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d107      	bne.n	8005982 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	23f0      	movs	r3, #240	@ 0xf0
 8005976:	039b      	lsls	r3, r3, #14
 8005978:	401a      	ands	r2, r3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d001      	beq.n	8005986 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e000      	b.n	8005988 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	0018      	movs	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	b008      	add	sp, #32
 800598e:	bd80      	pop	{r7, pc}
 8005990:	40021000 	.word	0x40021000

08005994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d101      	bne.n	80059a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e0bf      	b.n	8005b28 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059a8:	4b61      	ldr	r3, [pc, #388]	@ (8005b30 <HAL_RCC_ClockConfig+0x19c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2201      	movs	r2, #1
 80059ae:	4013      	ands	r3, r2
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d911      	bls.n	80059da <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b6:	4b5e      	ldr	r3, [pc, #376]	@ (8005b30 <HAL_RCC_ClockConfig+0x19c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2201      	movs	r2, #1
 80059bc:	4393      	bics	r3, r2
 80059be:	0019      	movs	r1, r3
 80059c0:	4b5b      	ldr	r3, [pc, #364]	@ (8005b30 <HAL_RCC_ClockConfig+0x19c>)
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	430a      	orrs	r2, r1
 80059c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c8:	4b59      	ldr	r3, [pc, #356]	@ (8005b30 <HAL_RCC_ClockConfig+0x19c>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	4013      	ands	r3, r2
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d001      	beq.n	80059da <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0a6      	b.n	8005b28 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2202      	movs	r2, #2
 80059e0:	4013      	ands	r3, r2
 80059e2:	d015      	beq.n	8005a10 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2204      	movs	r2, #4
 80059ea:	4013      	ands	r3, r2
 80059ec:	d006      	beq.n	80059fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80059ee:	4b51      	ldr	r3, [pc, #324]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	4b50      	ldr	r3, [pc, #320]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 80059f4:	21e0      	movs	r1, #224	@ 0xe0
 80059f6:	00c9      	lsls	r1, r1, #3
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	22f0      	movs	r2, #240	@ 0xf0
 8005a02:	4393      	bics	r3, r2
 8005a04:	0019      	movs	r1, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005a0c:	430a      	orrs	r2, r1
 8005a0e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	4013      	ands	r3, r2
 8005a18:	d04c      	beq.n	8005ab4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d107      	bne.n	8005a32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a22:	4b44      	ldr	r3, [pc, #272]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	2380      	movs	r3, #128	@ 0x80
 8005a28:	029b      	lsls	r3, r3, #10
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d120      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e07a      	b.n	8005b28 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	2380      	movs	r3, #128	@ 0x80
 8005a40:	049b      	lsls	r3, r3, #18
 8005a42:	4013      	ands	r3, r2
 8005a44:	d114      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e06e      	b.n	8005b28 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d107      	bne.n	8005a62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005a52:	4b38      	ldr	r3, [pc, #224]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a56:	2380      	movs	r3, #128	@ 0x80
 8005a58:	029b      	lsls	r3, r3, #10
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e062      	b.n	8005b28 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a62:	4b34      	ldr	r3, [pc, #208]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2202      	movs	r2, #2
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d101      	bne.n	8005a70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e05b      	b.n	8005b28 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a70:	4b30      	ldr	r3, [pc, #192]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	2203      	movs	r2, #3
 8005a76:	4393      	bics	r3, r2
 8005a78:	0019      	movs	r1, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685a      	ldr	r2, [r3, #4]
 8005a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a84:	f7fd fd0a 	bl	800349c <HAL_GetTick>
 8005a88:	0003      	movs	r3, r0
 8005a8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8c:	e009      	b.n	8005aa2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a8e:	f7fd fd05 	bl	800349c <HAL_GetTick>
 8005a92:	0002      	movs	r2, r0
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	4a27      	ldr	r2, [pc, #156]	@ (8005b38 <HAL_RCC_ClockConfig+0x1a4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d901      	bls.n	8005aa2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e042      	b.n	8005b28 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aa2:	4b24      	ldr	r3, [pc, #144]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	220c      	movs	r2, #12
 8005aa8:	401a      	ands	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d1ec      	bne.n	8005a8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8005b30 <HAL_RCC_ClockConfig+0x19c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	4013      	ands	r3, r2
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d211      	bcs.n	8005ae6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b30 <HAL_RCC_ClockConfig+0x19c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	4393      	bics	r3, r2
 8005aca:	0019      	movs	r1, r3
 8005acc:	4b18      	ldr	r3, [pc, #96]	@ (8005b30 <HAL_RCC_ClockConfig+0x19c>)
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad4:	4b16      	ldr	r3, [pc, #88]	@ (8005b30 <HAL_RCC_ClockConfig+0x19c>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	4013      	ands	r3, r2
 8005adc:	683a      	ldr	r2, [r7, #0]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d001      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e020      	b.n	8005b28 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2204      	movs	r2, #4
 8005aec:	4013      	ands	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005af0:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	4a11      	ldr	r2, [pc, #68]	@ (8005b3c <HAL_RCC_ClockConfig+0x1a8>)
 8005af6:	4013      	ands	r3, r2
 8005af8:	0019      	movs	r1, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005b00:	430a      	orrs	r2, r1
 8005b02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005b04:	f000 f820 	bl	8005b48 <HAL_RCC_GetSysClockFreq>
 8005b08:	0001      	movs	r1, r0
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <HAL_RCC_ClockConfig+0x1a0>)
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	091b      	lsrs	r3, r3, #4
 8005b10:	220f      	movs	r2, #15
 8005b12:	4013      	ands	r3, r2
 8005b14:	4a0a      	ldr	r2, [pc, #40]	@ (8005b40 <HAL_RCC_ClockConfig+0x1ac>)
 8005b16:	5cd3      	ldrb	r3, [r2, r3]
 8005b18:	000a      	movs	r2, r1
 8005b1a:	40da      	lsrs	r2, r3
 8005b1c:	4b09      	ldr	r3, [pc, #36]	@ (8005b44 <HAL_RCC_ClockConfig+0x1b0>)
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005b20:	2003      	movs	r0, #3
 8005b22:	f7fd fc75 	bl	8003410 <HAL_InitTick>
  
  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b004      	add	sp, #16
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	40022000 	.word	0x40022000
 8005b34:	40021000 	.word	0x40021000
 8005b38:	00001388 	.word	0x00001388
 8005b3c:	fffff8ff 	.word	0xfffff8ff
 8005b40:	08007384 	.word	0x08007384
 8005b44:	2000004c 	.word	0x2000004c

08005b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	2300      	movs	r3, #0
 8005b54:	60bb      	str	r3, [r7, #8]
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005b62:	4b2d      	ldr	r3, [pc, #180]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	220c      	movs	r2, #12
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	2b0c      	cmp	r3, #12
 8005b70:	d046      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0xb8>
 8005b72:	d848      	bhi.n	8005c06 <HAL_RCC_GetSysClockFreq+0xbe>
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d002      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0x36>
 8005b78:	2b08      	cmp	r3, #8
 8005b7a:	d003      	beq.n	8005b84 <HAL_RCC_GetSysClockFreq+0x3c>
 8005b7c:	e043      	b.n	8005c06 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005b7e:	4b27      	ldr	r3, [pc, #156]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005b80:	613b      	str	r3, [r7, #16]
      break;
 8005b82:	e043      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	0c9b      	lsrs	r3, r3, #18
 8005b88:	220f      	movs	r2, #15
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	4a24      	ldr	r2, [pc, #144]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005b8e:	5cd3      	ldrb	r3, [r2, r3]
 8005b90:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005b92:	4b21      	ldr	r3, [pc, #132]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	220f      	movs	r2, #15
 8005b98:	4013      	ands	r3, r2
 8005b9a:	4a22      	ldr	r2, [pc, #136]	@ (8005c24 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005b9c:	5cd3      	ldrb	r3, [r2, r3]
 8005b9e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	23c0      	movs	r3, #192	@ 0xc0
 8005ba4:	025b      	lsls	r3, r3, #9
 8005ba6:	401a      	ands	r2, r3
 8005ba8:	2380      	movs	r3, #128	@ 0x80
 8005baa:	025b      	lsls	r3, r3, #9
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d109      	bne.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	481a      	ldr	r0, [pc, #104]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0xd4>)
 8005bb4:	f7fa faa8 	bl	8000108 <__udivsi3>
 8005bb8:	0003      	movs	r3, r0
 8005bba:	001a      	movs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4353      	muls	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e01a      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	23c0      	movs	r3, #192	@ 0xc0
 8005bc8:	025b      	lsls	r3, r3, #9
 8005bca:	401a      	ands	r2, r3
 8005bcc:	23c0      	movs	r3, #192	@ 0xc0
 8005bce:	025b      	lsls	r3, r3, #9
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d109      	bne.n	8005be8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4814      	ldr	r0, [pc, #80]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005bd8:	f7fa fa96 	bl	8000108 <__udivsi3>
 8005bdc:	0003      	movs	r3, r0
 8005bde:	001a      	movs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4353      	muls	r3, r2
 8005be4:	617b      	str	r3, [r7, #20]
 8005be6:	e008      	b.n	8005bfa <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	4810      	ldr	r0, [pc, #64]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xe4>)
 8005bec:	f7fa fa8c 	bl	8000108 <__udivsi3>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	001a      	movs	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4353      	muls	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	613b      	str	r3, [r7, #16]
      break;
 8005bfe:	e005      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005c00:	4b09      	ldr	r3, [pc, #36]	@ (8005c28 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005c02:	613b      	str	r3, [r7, #16]
      break;
 8005c04:	e002      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005c06:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <HAL_RCC_GetSysClockFreq+0xe4>)
 8005c08:	613b      	str	r3, [r7, #16]
      break;
 8005c0a:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005c0c:	693b      	ldr	r3, [r7, #16]
}
 8005c0e:	0018      	movs	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	b006      	add	sp, #24
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	46c0      	nop			@ (mov r8, r8)
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	016e3600 	.word	0x016e3600
 8005c20:	08007394 	.word	0x08007394
 8005c24:	080073a4 	.word	0x080073a4
 8005c28:	02dc6c00 	.word	0x02dc6c00
 8005c2c:	007a1200 	.word	0x007a1200

08005c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e0a8      	b.n	8005d94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	2382      	movs	r3, #130	@ 0x82
 8005c50:	005b      	lsls	r3, r3, #1
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d009      	beq.n	8005c6a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	61da      	str	r2, [r3, #28]
 8005c5c:	e005      	b.n	8005c6a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	225d      	movs	r2, #93	@ 0x5d
 8005c74:	5c9b      	ldrb	r3, [r3, r2]
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d107      	bne.n	8005c8c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	225c      	movs	r2, #92	@ 0x5c
 8005c80:	2100      	movs	r1, #0
 8005c82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f7fd f972 	bl	8002f70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	225d      	movs	r2, #93	@ 0x5d
 8005c90:	2102      	movs	r1, #2
 8005c92:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2140      	movs	r1, #64	@ 0x40
 8005ca0:	438a      	bics	r2, r1
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	23e0      	movs	r3, #224	@ 0xe0
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d902      	bls.n	8005cb6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	e002      	b.n	8005cbc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cb6:	2380      	movs	r3, #128	@ 0x80
 8005cb8:	015b      	lsls	r3, r3, #5
 8005cba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	23f0      	movs	r3, #240	@ 0xf0
 8005cc2:	011b      	lsls	r3, r3, #4
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d008      	beq.n	8005cda <HAL_SPI_Init+0xaa>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	23e0      	movs	r3, #224	@ 0xe0
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	429a      	cmp	r2, r3
 8005cd2:	d002      	beq.n	8005cda <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	2382      	movs	r3, #130	@ 0x82
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	2384      	movs	r3, #132	@ 0x84
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	400b      	ands	r3, r1
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	400b      	ands	r3, r1
 8005cf8:	431a      	orrs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2101      	movs	r1, #1
 8005d00:	400b      	ands	r3, r1
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6999      	ldr	r1, [r3, #24]
 8005d08:	2380      	movs	r3, #128	@ 0x80
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2138      	movs	r1, #56	@ 0x38
 8005d16:	400b      	ands	r3, r1
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	2180      	movs	r1, #128	@ 0x80
 8005d20:	400b      	ands	r3, r1
 8005d22:	431a      	orrs	r2, r3
 8005d24:	0011      	movs	r1, r2
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d2a:	2380      	movs	r3, #128	@ 0x80
 8005d2c:	019b      	lsls	r3, r3, #6
 8005d2e:	401a      	ands	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	0c1b      	lsrs	r3, r3, #16
 8005d3e:	2204      	movs	r2, #4
 8005d40:	401a      	ands	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	2110      	movs	r1, #16
 8005d48:	400b      	ands	r3, r1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d50:	2108      	movs	r1, #8
 8005d52:	400b      	ands	r3, r1
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68d9      	ldr	r1, [r3, #12]
 8005d5a:	23f0      	movs	r3, #240	@ 0xf0
 8005d5c:	011b      	lsls	r3, r3, #4
 8005d5e:	400b      	ands	r3, r1
 8005d60:	431a      	orrs	r2, r3
 8005d62:	0011      	movs	r1, r2
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	2380      	movs	r3, #128	@ 0x80
 8005d68:	015b      	lsls	r3, r3, #5
 8005d6a:	401a      	ands	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69da      	ldr	r2, [r3, #28]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4907      	ldr	r1, [pc, #28]	@ (8005d9c <HAL_SPI_Init+0x16c>)
 8005d80:	400a      	ands	r2, r1
 8005d82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	225d      	movs	r2, #93	@ 0x5d
 8005d8e:	2101      	movs	r1, #1
 8005d90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	0018      	movs	r0, r3
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b004      	add	sp, #16
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	fffff7ff 	.word	0xfffff7ff

08005da0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b08a      	sub	sp, #40	@ 0x28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	001a      	movs	r2, r3
 8005dae:	1cbb      	adds	r3, r7, #2
 8005db0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005db2:	2301      	movs	r3, #1
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005db6:	2323      	movs	r3, #35	@ 0x23
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	2200      	movs	r2, #0
 8005dbc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	225c      	movs	r2, #92	@ 0x5c
 8005dc2:	5c9b      	ldrb	r3, [r3, r2]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x2c>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e1c4      	b.n	8006156 <HAL_SPI_TransmitReceive+0x3b6>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	225c      	movs	r2, #92	@ 0x5c
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dd4:	f7fd fb62 	bl	800349c <HAL_GetTick>
 8005dd8:	0003      	movs	r3, r0
 8005dda:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ddc:	201b      	movs	r0, #27
 8005dde:	183b      	adds	r3, r7, r0
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	215d      	movs	r1, #93	@ 0x5d
 8005de4:	5c52      	ldrb	r2, [r2, r1]
 8005de6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005dee:	2312      	movs	r3, #18
 8005df0:	18fb      	adds	r3, r7, r3
 8005df2:	1cba      	adds	r2, r7, #2
 8005df4:	8812      	ldrh	r2, [r2, #0]
 8005df6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005df8:	183b      	adds	r3, r7, r0
 8005dfa:	781b      	ldrb	r3, [r3, #0]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d011      	beq.n	8005e24 <HAL_SPI_TransmitReceive+0x84>
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	2382      	movs	r3, #130	@ 0x82
 8005e04:	005b      	lsls	r3, r3, #1
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d107      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d103      	bne.n	8005e1a <HAL_SPI_TransmitReceive+0x7a>
 8005e12:	183b      	adds	r3, r7, r0
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b04      	cmp	r3, #4
 8005e18:	d004      	beq.n	8005e24 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005e1a:	2323      	movs	r3, #35	@ 0x23
 8005e1c:	18fb      	adds	r3, r7, r3
 8005e1e:	2202      	movs	r2, #2
 8005e20:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e22:	e191      	b.n	8006148 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d006      	beq.n	8005e38 <HAL_SPI_TransmitReceive+0x98>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d003      	beq.n	8005e38 <HAL_SPI_TransmitReceive+0x98>
 8005e30:	1cbb      	adds	r3, r7, #2
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d104      	bne.n	8005e42 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005e38:	2323      	movs	r3, #35	@ 0x23
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005e40:	e182      	b.n	8006148 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	225d      	movs	r2, #93	@ 0x5d
 8005e46:	5c9b      	ldrb	r3, [r3, r2]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d003      	beq.n	8005e56 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	225d      	movs	r2, #93	@ 0x5d
 8005e52:	2105      	movs	r1, #5
 8005e54:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	1cba      	adds	r2, r7, #2
 8005e66:	2146      	movs	r1, #70	@ 0x46
 8005e68:	8812      	ldrh	r2, [r2, #0]
 8005e6a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	1cba      	adds	r2, r7, #2
 8005e70:	2144      	movs	r1, #68	@ 0x44
 8005e72:	8812      	ldrh	r2, [r2, #0]
 8005e74:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1cba      	adds	r2, r7, #2
 8005e80:	8812      	ldrh	r2, [r2, #0]
 8005e82:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	1cba      	adds	r2, r7, #2
 8005e88:	8812      	ldrh	r2, [r2, #0]
 8005e8a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	23e0      	movs	r3, #224	@ 0xe0
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d908      	bls.n	8005eb6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	49ac      	ldr	r1, [pc, #688]	@ (8006160 <HAL_SPI_TransmitReceive+0x3c0>)
 8005eb0:	400a      	ands	r2, r1
 8005eb2:	605a      	str	r2, [r3, #4]
 8005eb4:	e008      	b.n	8005ec8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2180      	movs	r1, #128	@ 0x80
 8005ec2:	0149      	lsls	r1, r1, #5
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2240      	movs	r2, #64	@ 0x40
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	2b40      	cmp	r3, #64	@ 0x40
 8005ed4:	d007      	beq.n	8005ee6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2140      	movs	r1, #64	@ 0x40
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	68da      	ldr	r2, [r3, #12]
 8005eea:	23e0      	movs	r3, #224	@ 0xe0
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d800      	bhi.n	8005ef4 <HAL_SPI_TransmitReceive+0x154>
 8005ef2:	e083      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d005      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x168>
 8005efc:	2312      	movs	r3, #18
 8005efe:	18fb      	adds	r3, r7, r3
 8005f00:	881b      	ldrh	r3, [r3, #0]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d000      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x168>
 8005f06:	e06d      	b.n	8005fe4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	881a      	ldrh	r2, [r3, #0]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	1c9a      	adds	r2, r3, #2
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f2c:	e05a      	b.n	8005fe4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2202      	movs	r2, #2
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d11b      	bne.n	8005f74 <HAL_SPI_TransmitReceive+0x1d4>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <HAL_SPI_TransmitReceive+0x1d4>
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d113      	bne.n	8005f74 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f50:	881a      	ldrh	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5c:	1c9a      	adds	r2, r3, #2
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d11c      	bne.n	8005fbc <HAL_SPI_TransmitReceive+0x21c>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2246      	movs	r2, #70	@ 0x46
 8005f86:	5a9b      	ldrh	r3, [r3, r2]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d016      	beq.n	8005fbc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f98:	b292      	uxth	r2, r2
 8005f9a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa0:	1c9a      	adds	r2, r3, #2
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2246      	movs	r2, #70	@ 0x46
 8005faa:	5a9b      	ldrh	r3, [r3, r2]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b299      	uxth	r1, r3
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2246      	movs	r2, #70	@ 0x46
 8005fb6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005fbc:	f7fd fa6e 	bl	800349c <HAL_GetTick>
 8005fc0:	0002      	movs	r2, r0
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d80b      	bhi.n	8005fe4 <HAL_SPI_TransmitReceive+0x244>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	3301      	adds	r3, #1
 8005fd0:	d008      	beq.n	8005fe4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8005fd2:	2323      	movs	r3, #35	@ 0x23
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	225d      	movs	r2, #93	@ 0x5d
 8005fde:	2101      	movs	r1, #1
 8005fe0:	5499      	strb	r1, [r3, r2]
        goto error;
 8005fe2:	e0b1      	b.n	8006148 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d19f      	bne.n	8005f2e <HAL_SPI_TransmitReceive+0x18e>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2246      	movs	r2, #70	@ 0x46
 8005ff2:	5a9b      	ldrh	r3, [r3, r2]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d199      	bne.n	8005f2e <HAL_SPI_TransmitReceive+0x18e>
 8005ffa:	e089      	b.n	8006110 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x270>
 8006004:	2312      	movs	r3, #18
 8006006:	18fb      	adds	r3, r7, r3
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d000      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x270>
 800600e:	e074      	b.n	80060fa <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	330c      	adds	r3, #12
 800601a:	7812      	ldrb	r2, [r2, #0]
 800601c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800602c:	b29b      	uxth	r3, r3
 800602e:	3b01      	subs	r3, #1
 8006030:	b29a      	uxth	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006036:	e060      	b.n	80060fa <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2202      	movs	r2, #2
 8006040:	4013      	ands	r3, r2
 8006042:	2b02      	cmp	r3, #2
 8006044:	d11c      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x2e0>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d017      	beq.n	8006080 <HAL_SPI_TransmitReceive+0x2e0>
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	2b01      	cmp	r3, #1
 8006054:	d114      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	7812      	ldrb	r2, [r2, #0]
 8006062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006068:	1c5a      	adds	r2, r3, #1
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006072:	b29b      	uxth	r3, r3
 8006074:	3b01      	subs	r3, #1
 8006076:	b29a      	uxth	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2201      	movs	r2, #1
 8006088:	4013      	ands	r3, r2
 800608a:	2b01      	cmp	r3, #1
 800608c:	d11e      	bne.n	80060cc <HAL_SPI_TransmitReceive+0x32c>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2246      	movs	r2, #70	@ 0x46
 8006092:	5a9b      	ldrh	r3, [r3, r2]
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	d018      	beq.n	80060cc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	330c      	adds	r3, #12
 80060a0:	001a      	movs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a6:	7812      	ldrb	r2, [r2, #0]
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2246      	movs	r2, #70	@ 0x46
 80060ba:	5a9b      	ldrh	r3, [r3, r2]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b299      	uxth	r1, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2246      	movs	r2, #70	@ 0x46
 80060c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060c8:	2301      	movs	r3, #1
 80060ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80060cc:	f7fd f9e6 	bl	800349c <HAL_GetTick>
 80060d0:	0002      	movs	r2, r0
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060d8:	429a      	cmp	r2, r3
 80060da:	d802      	bhi.n	80060e2 <HAL_SPI_TransmitReceive+0x342>
 80060dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060de:	3301      	adds	r3, #1
 80060e0:	d102      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x348>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d108      	bne.n	80060fa <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80060e8:	2323      	movs	r3, #35	@ 0x23
 80060ea:	18fb      	adds	r3, r7, r3
 80060ec:	2203      	movs	r2, #3
 80060ee:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	225d      	movs	r2, #93	@ 0x5d
 80060f4:	2101      	movs	r1, #1
 80060f6:	5499      	strb	r1, [r3, r2]
        goto error;
 80060f8:	e026      	b.n	8006148 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fe:	b29b      	uxth	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d199      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x298>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2246      	movs	r2, #70	@ 0x46
 8006108:	5a9b      	ldrh	r3, [r3, r2]
 800610a:	b29b      	uxth	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d193      	bne.n	8006038 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006110:	69fa      	ldr	r2, [r7, #28]
 8006112:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	0018      	movs	r0, r3
 8006118:	f000 f954 	bl	80063c4 <SPI_EndRxTxTransaction>
 800611c:	1e03      	subs	r3, r0, #0
 800611e:	d006      	beq.n	800612e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8006120:	2323      	movs	r3, #35	@ 0x23
 8006122:	18fb      	adds	r3, r7, r3
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2220      	movs	r2, #32
 800612c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006132:	2b00      	cmp	r3, #0
 8006134:	d004      	beq.n	8006140 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8006136:	2323      	movs	r3, #35	@ 0x23
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	2201      	movs	r2, #1
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	e003      	b.n	8006148 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	225d      	movs	r2, #93	@ 0x5d
 8006144:	2101      	movs	r1, #1
 8006146:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	225c      	movs	r2, #92	@ 0x5c
 800614c:	2100      	movs	r1, #0
 800614e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006150:	2323      	movs	r3, #35	@ 0x23
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	781b      	ldrb	r3, [r3, #0]
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b00a      	add	sp, #40	@ 0x28
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			@ (mov r8, r8)
 8006160:	ffffefff 	.word	0xffffefff

08006164 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b088      	sub	sp, #32
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	1dfb      	adds	r3, r7, #7
 8006172:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006174:	f7fd f992 	bl	800349c <HAL_GetTick>
 8006178:	0002      	movs	r2, r0
 800617a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800617c:	1a9b      	subs	r3, r3, r2
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	18d3      	adds	r3, r2, r3
 8006182:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006184:	f7fd f98a 	bl	800349c <HAL_GetTick>
 8006188:	0003      	movs	r3, r0
 800618a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800618c:	4b3a      	ldr	r3, [pc, #232]	@ (8006278 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	015b      	lsls	r3, r3, #5
 8006192:	0d1b      	lsrs	r3, r3, #20
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	4353      	muls	r3, r2
 8006198:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800619a:	e058      	b.n	800624e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	d055      	beq.n	800624e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061a2:	f7fd f97b 	bl	800349c <HAL_GetTick>
 80061a6:	0002      	movs	r2, r0
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d902      	bls.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d142      	bne.n	800623e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	21e0      	movs	r1, #224	@ 0xe0
 80061c4:	438a      	bics	r2, r1
 80061c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	2382      	movs	r3, #130	@ 0x82
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d113      	bne.n	80061fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	2380      	movs	r3, #128	@ 0x80
 80061da:	021b      	lsls	r3, r3, #8
 80061dc:	429a      	cmp	r2, r3
 80061de:	d005      	beq.n	80061ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	2380      	movs	r3, #128	@ 0x80
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d107      	bne.n	80061fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2140      	movs	r1, #64	@ 0x40
 80061f8:	438a      	bics	r2, r1
 80061fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006200:	2380      	movs	r3, #128	@ 0x80
 8006202:	019b      	lsls	r3, r3, #6
 8006204:	429a      	cmp	r2, r3
 8006206:	d110      	bne.n	800622a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	491a      	ldr	r1, [pc, #104]	@ (800627c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006214:	400a      	ands	r2, r1
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2180      	movs	r1, #128	@ 0x80
 8006224:	0189      	lsls	r1, r1, #6
 8006226:	430a      	orrs	r2, r1
 8006228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	225d      	movs	r2, #93	@ 0x5d
 800622e:	2101      	movs	r1, #1
 8006230:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	225c      	movs	r2, #92	@ 0x5c
 8006236:	2100      	movs	r1, #0
 8006238:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e017      	b.n	800626e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	3b01      	subs	r3, #1
 800624c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	4013      	ands	r3, r2
 8006258:	68ba      	ldr	r2, [r7, #8]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	425a      	negs	r2, r3
 800625e:	4153      	adcs	r3, r2
 8006260:	b2db      	uxtb	r3, r3
 8006262:	001a      	movs	r2, r3
 8006264:	1dfb      	adds	r3, r7, #7
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	429a      	cmp	r2, r3
 800626a:	d197      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	0018      	movs	r0, r3
 8006270:	46bd      	mov	sp, r7
 8006272:	b008      	add	sp, #32
 8006274:	bd80      	pop	{r7, pc}
 8006276:	46c0      	nop			@ (mov r8, r8)
 8006278:	2000004c 	.word	0x2000004c
 800627c:	ffffdfff 	.word	0xffffdfff

08006280 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b08a      	sub	sp, #40	@ 0x28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800628e:	2317      	movs	r3, #23
 8006290:	18fb      	adds	r3, r7, r3
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006296:	f7fd f901 	bl	800349c <HAL_GetTick>
 800629a:	0002      	movs	r2, r0
 800629c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80062a6:	f7fd f8f9 	bl	800349c <HAL_GetTick>
 80062aa:	0003      	movs	r3, r0
 80062ac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	330c      	adds	r3, #12
 80062b4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062b6:	4b41      	ldr	r3, [pc, #260]	@ (80063bc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	0013      	movs	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	189b      	adds	r3, r3, r2
 80062c0:	00da      	lsls	r2, r3, #3
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	0d1b      	lsrs	r3, r3, #20
 80062c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062c8:	4353      	muls	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062cc:	e068      	b.n	80063a0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	23c0      	movs	r3, #192	@ 0xc0
 80062d2:	00db      	lsls	r3, r3, #3
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d10a      	bne.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x6e>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d107      	bne.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	2117      	movs	r1, #23
 80062e6:	187b      	adds	r3, r7, r1
 80062e8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	3301      	adds	r3, #1
 80062f2:	d055      	beq.n	80063a0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f4:	f7fd f8d2 	bl	800349c <HAL_GetTick>
 80062f8:	0002      	movs	r2, r0
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006300:	429a      	cmp	r2, r3
 8006302:	d902      	bls.n	800630a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	2b00      	cmp	r3, #0
 8006308:	d142      	bne.n	8006390 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	21e0      	movs	r1, #224	@ 0xe0
 8006316:	438a      	bics	r2, r1
 8006318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	685a      	ldr	r2, [r3, #4]
 800631e:	2382      	movs	r3, #130	@ 0x82
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	429a      	cmp	r2, r3
 8006324:	d113      	bne.n	800634e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	2380      	movs	r3, #128	@ 0x80
 800632c:	021b      	lsls	r3, r3, #8
 800632e:	429a      	cmp	r2, r3
 8006330:	d005      	beq.n	800633e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	689a      	ldr	r2, [r3, #8]
 8006336:	2380      	movs	r3, #128	@ 0x80
 8006338:	00db      	lsls	r3, r3, #3
 800633a:	429a      	cmp	r2, r3
 800633c:	d107      	bne.n	800634e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	2140      	movs	r1, #64	@ 0x40
 800634a:	438a      	bics	r2, r1
 800634c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006352:	2380      	movs	r3, #128	@ 0x80
 8006354:	019b      	lsls	r3, r3, #6
 8006356:	429a      	cmp	r2, r3
 8006358:	d110      	bne.n	800637c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4916      	ldr	r1, [pc, #88]	@ (80063c0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006366:	400a      	ands	r2, r1
 8006368:	601a      	str	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2180      	movs	r1, #128	@ 0x80
 8006376:	0189      	lsls	r1, r1, #6
 8006378:	430a      	orrs	r2, r1
 800637a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	225d      	movs	r2, #93	@ 0x5d
 8006380:	2101      	movs	r1, #1
 8006382:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	225c      	movs	r2, #92	@ 0x5c
 8006388:	2100      	movs	r1, #0
 800638a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e010      	b.n	80063b2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	3b01      	subs	r3, #1
 800639e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	68ba      	ldr	r2, [r7, #8]
 80063a8:	4013      	ands	r3, r2
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d18e      	bne.n	80062ce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	0018      	movs	r0, r3
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b00a      	add	sp, #40	@ 0x28
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	2000004c 	.word	0x2000004c
 80063c0:	ffffdfff 	.word	0xffffdfff

080063c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	23c0      	movs	r3, #192	@ 0xc0
 80063d4:	0159      	lsls	r1, r3, #5
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	9300      	str	r3, [sp, #0]
 80063dc:	0013      	movs	r3, r2
 80063de:	2200      	movs	r2, #0
 80063e0:	f7ff ff4e 	bl	8006280 <SPI_WaitFifoStateUntilTimeout>
 80063e4:	1e03      	subs	r3, r0, #0
 80063e6:	d007      	beq.n	80063f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063ec:	2220      	movs	r2, #32
 80063ee:	431a      	orrs	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e027      	b.n	8006448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	68f8      	ldr	r0, [r7, #12]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	0013      	movs	r3, r2
 8006402:	2200      	movs	r2, #0
 8006404:	2180      	movs	r1, #128	@ 0x80
 8006406:	f7ff fead 	bl	8006164 <SPI_WaitFlagStateUntilTimeout>
 800640a:	1e03      	subs	r3, r0, #0
 800640c:	d007      	beq.n	800641e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006412:	2220      	movs	r2, #32
 8006414:	431a      	orrs	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e014      	b.n	8006448 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	23c0      	movs	r3, #192	@ 0xc0
 8006422:	00d9      	lsls	r1, r3, #3
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	0013      	movs	r3, r2
 800642c:	2200      	movs	r2, #0
 800642e:	f7ff ff27 	bl	8006280 <SPI_WaitFifoStateUntilTimeout>
 8006432:	1e03      	subs	r3, r0, #0
 8006434:	d007      	beq.n	8006446 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800643a:	2220      	movs	r2, #32
 800643c:	431a      	orrs	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e000      	b.n	8006448 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b004      	add	sp, #16
 800644e:	bd80      	pop	{r7, pc}

08006450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e042      	b.n	80064e8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	223d      	movs	r2, #61	@ 0x3d
 8006466:	5c9b      	ldrb	r3, [r3, r2]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d107      	bne.n	800647e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	223c      	movs	r2, #60	@ 0x3c
 8006472:	2100      	movs	r1, #0
 8006474:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	0018      	movs	r0, r3
 800647a:	f7fc fe27 	bl	80030cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	223d      	movs	r2, #61	@ 0x3d
 8006482:	2102      	movs	r1, #2
 8006484:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3304      	adds	r3, #4
 800648e:	0019      	movs	r1, r3
 8006490:	0010      	movs	r0, r2
 8006492:	f000 fbf1 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2246      	movs	r2, #70	@ 0x46
 800649a:	2101      	movs	r1, #1
 800649c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	223e      	movs	r2, #62	@ 0x3e
 80064a2:	2101      	movs	r1, #1
 80064a4:	5499      	strb	r1, [r3, r2]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	223f      	movs	r2, #63	@ 0x3f
 80064aa:	2101      	movs	r1, #1
 80064ac:	5499      	strb	r1, [r3, r2]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2240      	movs	r2, #64	@ 0x40
 80064b2:	2101      	movs	r1, #1
 80064b4:	5499      	strb	r1, [r3, r2]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2241      	movs	r2, #65	@ 0x41
 80064ba:	2101      	movs	r1, #1
 80064bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2242      	movs	r2, #66	@ 0x42
 80064c2:	2101      	movs	r1, #1
 80064c4:	5499      	strb	r1, [r3, r2]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2243      	movs	r2, #67	@ 0x43
 80064ca:	2101      	movs	r1, #1
 80064cc:	5499      	strb	r1, [r3, r2]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2244      	movs	r2, #68	@ 0x44
 80064d2:	2101      	movs	r1, #1
 80064d4:	5499      	strb	r1, [r3, r2]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2245      	movs	r2, #69	@ 0x45
 80064da:	2101      	movs	r1, #1
 80064dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	223d      	movs	r2, #61	@ 0x3d
 80064e2:	2101      	movs	r1, #1
 80064e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	0018      	movs	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	b002      	add	sp, #8
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	223d      	movs	r2, #61	@ 0x3d
 80064fc:	5c9b      	ldrb	r3, [r3, r2]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d001      	beq.n	8006508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e036      	b.n	8006576 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	223d      	movs	r2, #61	@ 0x3d
 800650c:	2102      	movs	r1, #2
 800650e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2101      	movs	r1, #1
 800651c:	430a      	orrs	r2, r1
 800651e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a16      	ldr	r2, [pc, #88]	@ (8006580 <HAL_TIM_Base_Start_IT+0x90>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00a      	beq.n	8006540 <HAL_TIM_Base_Start_IT+0x50>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	2380      	movs	r3, #128	@ 0x80
 8006530:	05db      	lsls	r3, r3, #23
 8006532:	429a      	cmp	r2, r3
 8006534:	d004      	beq.n	8006540 <HAL_TIM_Base_Start_IT+0x50>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a12      	ldr	r2, [pc, #72]	@ (8006584 <HAL_TIM_Base_Start_IT+0x94>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d111      	bne.n	8006564 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	2207      	movs	r2, #7
 8006548:	4013      	ands	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2b06      	cmp	r3, #6
 8006550:	d010      	beq.n	8006574 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2101      	movs	r1, #1
 800655e:	430a      	orrs	r2, r1
 8006560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	e007      	b.n	8006574 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2101      	movs	r1, #1
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	0018      	movs	r0, r3
 8006578:	46bd      	mov	sp, r7
 800657a:	b004      	add	sp, #16
 800657c:	bd80      	pop	{r7, pc}
 800657e:	46c0      	nop			@ (mov r8, r8)
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40000400 	.word	0x40000400

08006588 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e042      	b.n	8006620 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	223d      	movs	r2, #61	@ 0x3d
 800659e:	5c9b      	ldrb	r3, [r3, r2]
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d107      	bne.n	80065b6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	223c      	movs	r2, #60	@ 0x3c
 80065aa:	2100      	movs	r1, #0
 80065ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	0018      	movs	r0, r3
 80065b2:	f7fc fd2b 	bl	800300c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	223d      	movs	r2, #61	@ 0x3d
 80065ba:	2102      	movs	r1, #2
 80065bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	3304      	adds	r3, #4
 80065c6:	0019      	movs	r1, r3
 80065c8:	0010      	movs	r0, r2
 80065ca:	f000 fb55 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2246      	movs	r2, #70	@ 0x46
 80065d2:	2101      	movs	r1, #1
 80065d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	223e      	movs	r2, #62	@ 0x3e
 80065da:	2101      	movs	r1, #1
 80065dc:	5499      	strb	r1, [r3, r2]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	223f      	movs	r2, #63	@ 0x3f
 80065e2:	2101      	movs	r1, #1
 80065e4:	5499      	strb	r1, [r3, r2]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2240      	movs	r2, #64	@ 0x40
 80065ea:	2101      	movs	r1, #1
 80065ec:	5499      	strb	r1, [r3, r2]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2241      	movs	r2, #65	@ 0x41
 80065f2:	2101      	movs	r1, #1
 80065f4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2242      	movs	r2, #66	@ 0x42
 80065fa:	2101      	movs	r1, #1
 80065fc:	5499      	strb	r1, [r3, r2]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2243      	movs	r2, #67	@ 0x43
 8006602:	2101      	movs	r1, #1
 8006604:	5499      	strb	r1, [r3, r2]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2244      	movs	r2, #68	@ 0x44
 800660a:	2101      	movs	r1, #1
 800660c:	5499      	strb	r1, [r3, r2]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2245      	movs	r2, #69	@ 0x45
 8006612:	2101      	movs	r1, #1
 8006614:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	223d      	movs	r2, #61	@ 0x3d
 800661a:	2101      	movs	r1, #1
 800661c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	0018      	movs	r0, r3
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d101      	bne.n	800663a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e042      	b.n	80066c0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	223d      	movs	r2, #61	@ 0x3d
 800663e:	5c9b      	ldrb	r3, [r3, r2]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	d107      	bne.n	8006656 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	223c      	movs	r2, #60	@ 0x3c
 800664a:	2100      	movs	r1, #0
 800664c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	0018      	movs	r0, r3
 8006652:	f7fc fd0b 	bl	800306c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	223d      	movs	r2, #61	@ 0x3d
 800665a:	2102      	movs	r1, #2
 800665c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	3304      	adds	r3, #4
 8006666:	0019      	movs	r1, r3
 8006668:	0010      	movs	r0, r2
 800666a:	f000 fb05 	bl	8006c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2246      	movs	r2, #70	@ 0x46
 8006672:	2101      	movs	r1, #1
 8006674:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	223e      	movs	r2, #62	@ 0x3e
 800667a:	2101      	movs	r1, #1
 800667c:	5499      	strb	r1, [r3, r2]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	223f      	movs	r2, #63	@ 0x3f
 8006682:	2101      	movs	r1, #1
 8006684:	5499      	strb	r1, [r3, r2]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2240      	movs	r2, #64	@ 0x40
 800668a:	2101      	movs	r1, #1
 800668c:	5499      	strb	r1, [r3, r2]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2241      	movs	r2, #65	@ 0x41
 8006692:	2101      	movs	r1, #1
 8006694:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2242      	movs	r2, #66	@ 0x42
 800669a:	2101      	movs	r1, #1
 800669c:	5499      	strb	r1, [r3, r2]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2243      	movs	r2, #67	@ 0x43
 80066a2:	2101      	movs	r1, #1
 80066a4:	5499      	strb	r1, [r3, r2]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2244      	movs	r2, #68	@ 0x44
 80066aa:	2101      	movs	r1, #1
 80066ac:	5499      	strb	r1, [r3, r2]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2245      	movs	r2, #69	@ 0x45
 80066b2:	2101      	movs	r1, #1
 80066b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	223d      	movs	r2, #61	@ 0x3d
 80066ba:	2101      	movs	r1, #1
 80066bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	0018      	movs	r0, r3
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b002      	add	sp, #8
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d108      	bne.n	80066ea <HAL_TIM_PWM_Start+0x22>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	223e      	movs	r2, #62	@ 0x3e
 80066dc:	5c9b      	ldrb	r3, [r3, r2]
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	3b01      	subs	r3, #1
 80066e2:	1e5a      	subs	r2, r3, #1
 80066e4:	4193      	sbcs	r3, r2
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	e01f      	b.n	800672a <HAL_TIM_PWM_Start+0x62>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b04      	cmp	r3, #4
 80066ee:	d108      	bne.n	8006702 <HAL_TIM_PWM_Start+0x3a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	223f      	movs	r2, #63	@ 0x3f
 80066f4:	5c9b      	ldrb	r3, [r3, r2]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	1e5a      	subs	r2, r3, #1
 80066fc:	4193      	sbcs	r3, r2
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	e013      	b.n	800672a <HAL_TIM_PWM_Start+0x62>
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	2b08      	cmp	r3, #8
 8006706:	d108      	bne.n	800671a <HAL_TIM_PWM_Start+0x52>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2240      	movs	r2, #64	@ 0x40
 800670c:	5c9b      	ldrb	r3, [r3, r2]
 800670e:	b2db      	uxtb	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	1e5a      	subs	r2, r3, #1
 8006714:	4193      	sbcs	r3, r2
 8006716:	b2db      	uxtb	r3, r3
 8006718:	e007      	b.n	800672a <HAL_TIM_PWM_Start+0x62>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2241      	movs	r2, #65	@ 0x41
 800671e:	5c9b      	ldrb	r3, [r3, r2]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	1e5a      	subs	r2, r3, #1
 8006726:	4193      	sbcs	r3, r2
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e06a      	b.n	8006808 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d104      	bne.n	8006742 <HAL_TIM_PWM_Start+0x7a>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	223e      	movs	r2, #62	@ 0x3e
 800673c:	2102      	movs	r1, #2
 800673e:	5499      	strb	r1, [r3, r2]
 8006740:	e013      	b.n	800676a <HAL_TIM_PWM_Start+0xa2>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b04      	cmp	r3, #4
 8006746:	d104      	bne.n	8006752 <HAL_TIM_PWM_Start+0x8a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	223f      	movs	r2, #63	@ 0x3f
 800674c:	2102      	movs	r1, #2
 800674e:	5499      	strb	r1, [r3, r2]
 8006750:	e00b      	b.n	800676a <HAL_TIM_PWM_Start+0xa2>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b08      	cmp	r3, #8
 8006756:	d104      	bne.n	8006762 <HAL_TIM_PWM_Start+0x9a>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2240      	movs	r2, #64	@ 0x40
 800675c:	2102      	movs	r1, #2
 800675e:	5499      	strb	r1, [r3, r2]
 8006760:	e003      	b.n	800676a <HAL_TIM_PWM_Start+0xa2>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2241      	movs	r2, #65	@ 0x41
 8006766:	2102      	movs	r1, #2
 8006768:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	6839      	ldr	r1, [r7, #0]
 8006770:	2201      	movs	r2, #1
 8006772:	0018      	movs	r0, r3
 8006774:	f000 fce4 	bl	8007140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a24      	ldr	r2, [pc, #144]	@ (8006810 <HAL_TIM_PWM_Start+0x148>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d009      	beq.n	8006796 <HAL_TIM_PWM_Start+0xce>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a23      	ldr	r2, [pc, #140]	@ (8006814 <HAL_TIM_PWM_Start+0x14c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d004      	beq.n	8006796 <HAL_TIM_PWM_Start+0xce>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a21      	ldr	r2, [pc, #132]	@ (8006818 <HAL_TIM_PWM_Start+0x150>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d101      	bne.n	800679a <HAL_TIM_PWM_Start+0xd2>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_TIM_PWM_Start+0xd4>
 800679a:	2300      	movs	r3, #0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	2180      	movs	r1, #128	@ 0x80
 80067ac:	0209      	lsls	r1, r1, #8
 80067ae:	430a      	orrs	r2, r1
 80067b0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a16      	ldr	r2, [pc, #88]	@ (8006810 <HAL_TIM_PWM_Start+0x148>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00a      	beq.n	80067d2 <HAL_TIM_PWM_Start+0x10a>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	2380      	movs	r3, #128	@ 0x80
 80067c2:	05db      	lsls	r3, r3, #23
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d004      	beq.n	80067d2 <HAL_TIM_PWM_Start+0x10a>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a13      	ldr	r2, [pc, #76]	@ (800681c <HAL_TIM_PWM_Start+0x154>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d111      	bne.n	80067f6 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	2207      	movs	r2, #7
 80067da:	4013      	ands	r3, r2
 80067dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2b06      	cmp	r3, #6
 80067e2:	d010      	beq.n	8006806 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2101      	movs	r1, #1
 80067f0:	430a      	orrs	r2, r1
 80067f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f4:	e007      	b.n	8006806 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2101      	movs	r1, #1
 8006802:	430a      	orrs	r2, r1
 8006804:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	0018      	movs	r0, r3
 800680a:	46bd      	mov	sp, r7
 800680c:	b004      	add	sp, #16
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40012c00 	.word	0x40012c00
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800
 800681c:	40000400 	.word	0x40000400

08006820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2202      	movs	r2, #2
 800683c:	4013      	ands	r3, r2
 800683e:	d021      	beq.n	8006884 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2202      	movs	r2, #2
 8006844:	4013      	ands	r3, r2
 8006846:	d01d      	beq.n	8006884 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2203      	movs	r2, #3
 800684e:	4252      	negs	r2, r2
 8006850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	2203      	movs	r2, #3
 8006860:	4013      	ands	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	0018      	movs	r0, r3
 8006868:	f000 f9ee 	bl	8006c48 <HAL_TIM_IC_CaptureCallback>
 800686c:	e007      	b.n	800687e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	0018      	movs	r0, r3
 8006872:	f000 f9e1 	bl	8006c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	0018      	movs	r0, r3
 800687a:	f000 f9ed 	bl	8006c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	2204      	movs	r2, #4
 8006888:	4013      	ands	r3, r2
 800688a:	d022      	beq.n	80068d2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2204      	movs	r2, #4
 8006890:	4013      	ands	r3, r2
 8006892:	d01e      	beq.n	80068d2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2205      	movs	r2, #5
 800689a:	4252      	negs	r2, r2
 800689c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2202      	movs	r2, #2
 80068a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	23c0      	movs	r3, #192	@ 0xc0
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4013      	ands	r3, r2
 80068b0:	d004      	beq.n	80068bc <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	0018      	movs	r0, r3
 80068b6:	f000 f9c7 	bl	8006c48 <HAL_TIM_IC_CaptureCallback>
 80068ba:	e007      	b.n	80068cc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	0018      	movs	r0, r3
 80068c0:	f000 f9ba 	bl	8006c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	0018      	movs	r0, r3
 80068c8:	f000 f9c6 	bl	8006c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2208      	movs	r2, #8
 80068d6:	4013      	ands	r3, r2
 80068d8:	d021      	beq.n	800691e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2208      	movs	r2, #8
 80068de:	4013      	ands	r3, r2
 80068e0:	d01d      	beq.n	800691e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2209      	movs	r2, #9
 80068e8:	4252      	negs	r2, r2
 80068ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2204      	movs	r2, #4
 80068f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	2203      	movs	r2, #3
 80068fa:	4013      	ands	r3, r2
 80068fc:	d004      	beq.n	8006908 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	0018      	movs	r0, r3
 8006902:	f000 f9a1 	bl	8006c48 <HAL_TIM_IC_CaptureCallback>
 8006906:	e007      	b.n	8006918 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	0018      	movs	r0, r3
 800690c:	f000 f994 	bl	8006c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	0018      	movs	r0, r3
 8006914:	f000 f9a0 	bl	8006c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2210      	movs	r2, #16
 8006922:	4013      	ands	r3, r2
 8006924:	d022      	beq.n	800696c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2210      	movs	r2, #16
 800692a:	4013      	ands	r3, r2
 800692c:	d01e      	beq.n	800696c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2211      	movs	r2, #17
 8006934:	4252      	negs	r2, r2
 8006936:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2208      	movs	r2, #8
 800693c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	23c0      	movs	r3, #192	@ 0xc0
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4013      	ands	r3, r2
 800694a:	d004      	beq.n	8006956 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	0018      	movs	r0, r3
 8006950:	f000 f97a 	bl	8006c48 <HAL_TIM_IC_CaptureCallback>
 8006954:	e007      	b.n	8006966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	0018      	movs	r0, r3
 800695a:	f000 f96d 	bl	8006c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	0018      	movs	r0, r3
 8006962:	f000 f979 	bl	8006c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2201      	movs	r2, #1
 8006970:	4013      	ands	r3, r2
 8006972:	d00c      	beq.n	800698e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	4013      	ands	r3, r2
 800697a:	d008      	beq.n	800698e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2202      	movs	r2, #2
 8006982:	4252      	negs	r2, r2
 8006984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	0018      	movs	r0, r3
 800698a:	f7fc f97d 	bl	8002c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	2280      	movs	r2, #128	@ 0x80
 8006992:	4013      	ands	r3, r2
 8006994:	d00c      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2280      	movs	r2, #128	@ 0x80
 800699a:	4013      	ands	r3, r2
 800699c:	d008      	beq.n	80069b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2281      	movs	r2, #129	@ 0x81
 80069a4:	4252      	negs	r2, r2
 80069a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 fcaa 	bl	8007304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2240      	movs	r2, #64	@ 0x40
 80069b4:	4013      	ands	r3, r2
 80069b6:	d00c      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2240      	movs	r2, #64	@ 0x40
 80069bc:	4013      	ands	r3, r2
 80069be:	d008      	beq.n	80069d2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2241      	movs	r2, #65	@ 0x41
 80069c6:	4252      	negs	r2, r2
 80069c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	0018      	movs	r0, r3
 80069ce:	f000 f94b 	bl	8006c68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2220      	movs	r2, #32
 80069d6:	4013      	ands	r3, r2
 80069d8:	d00c      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2220      	movs	r2, #32
 80069de:	4013      	ands	r3, r2
 80069e0:	d008      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2221      	movs	r2, #33	@ 0x21
 80069e8:	4252      	negs	r2, r2
 80069ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	0018      	movs	r0, r3
 80069f0:	f000 fc80 	bl	80072f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069f4:	46c0      	nop			@ (mov r8, r8)
 80069f6:	46bd      	mov	sp, r7
 80069f8:	b004      	add	sp, #16
 80069fa:	bd80      	pop	{r7, pc}

080069fc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a08:	2317      	movs	r3, #23
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	223c      	movs	r2, #60	@ 0x3c
 8006a14:	5c9b      	ldrb	r3, [r3, r2]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_TIM_OC_ConfigChannel+0x22>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e042      	b.n	8006aa4 <HAL_TIM_OC_ConfigChannel+0xa8>
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	223c      	movs	r2, #60	@ 0x3c
 8006a22:	2101      	movs	r1, #1
 8006a24:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b0c      	cmp	r3, #12
 8006a2a:	d027      	beq.n	8006a7c <HAL_TIM_OC_ConfigChannel+0x80>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b0c      	cmp	r3, #12
 8006a30:	d82c      	bhi.n	8006a8c <HAL_TIM_OC_ConfigChannel+0x90>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2b08      	cmp	r3, #8
 8006a36:	d019      	beq.n	8006a6c <HAL_TIM_OC_ConfigChannel+0x70>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b08      	cmp	r3, #8
 8006a3c:	d826      	bhi.n	8006a8c <HAL_TIM_OC_ConfigChannel+0x90>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d003      	beq.n	8006a4c <HAL_TIM_OC_ConfigChannel+0x50>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d008      	beq.n	8006a5c <HAL_TIM_OC_ConfigChannel+0x60>
 8006a4a:	e01f      	b.n	8006a8c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	0011      	movs	r1, r2
 8006a54:	0018      	movs	r0, r3
 8006a56:	f000 f993 	bl	8006d80 <TIM_OC1_SetConfig>
      break;
 8006a5a:	e01c      	b.n	8006a96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	0011      	movs	r1, r2
 8006a64:	0018      	movs	r0, r3
 8006a66:	f000 fa09 	bl	8006e7c <TIM_OC2_SetConfig>
      break;
 8006a6a:	e014      	b.n	8006a96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	0011      	movs	r1, r2
 8006a74:	0018      	movs	r0, r3
 8006a76:	f000 fa7f 	bl	8006f78 <TIM_OC3_SetConfig>
      break;
 8006a7a:	e00c      	b.n	8006a96 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	0011      	movs	r1, r2
 8006a84:	0018      	movs	r0, r3
 8006a86:	f000 faf7 	bl	8007078 <TIM_OC4_SetConfig>
      break;
 8006a8a:	e004      	b.n	8006a96 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8006a8c:	2317      	movs	r3, #23
 8006a8e:	18fb      	adds	r3, r7, r3
 8006a90:	2201      	movs	r2, #1
 8006a92:	701a      	strb	r2, [r3, #0]
      break;
 8006a94:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	223c      	movs	r2, #60	@ 0x3c
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	5499      	strb	r1, [r3, r2]

  return status;
 8006a9e:	2317      	movs	r3, #23
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	781b      	ldrb	r3, [r3, #0]
}
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	b006      	add	sp, #24
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	60f8      	str	r0, [r7, #12]
 8006ab4:	60b9      	str	r1, [r7, #8]
 8006ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab8:	2317      	movs	r3, #23
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	2200      	movs	r2, #0
 8006abe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	223c      	movs	r2, #60	@ 0x3c
 8006ac4:	5c9b      	ldrb	r3, [r3, r2]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_TIM_PWM_ConfigChannel+0x22>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e0ad      	b.n	8006c2a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	223c      	movs	r2, #60	@ 0x3c
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b0c      	cmp	r3, #12
 8006ada:	d100      	bne.n	8006ade <HAL_TIM_PWM_ConfigChannel+0x32>
 8006adc:	e076      	b.n	8006bcc <HAL_TIM_PWM_ConfigChannel+0x120>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b0c      	cmp	r3, #12
 8006ae2:	d900      	bls.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006ae4:	e095      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b08      	cmp	r3, #8
 8006aea:	d04e      	beq.n	8006b8a <HAL_TIM_PWM_ConfigChannel+0xde>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d900      	bls.n	8006af4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006af2:	e08e      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d003      	beq.n	8006b02 <HAL_TIM_PWM_ConfigChannel+0x56>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	d021      	beq.n	8006b44 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006b00:	e087      	b.n	8006c12 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	0011      	movs	r1, r2
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f000 f938 	bl	8006d80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	699a      	ldr	r2, [r3, #24]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2108      	movs	r1, #8
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	699a      	ldr	r2, [r3, #24]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2104      	movs	r1, #4
 8006b2c:	438a      	bics	r2, r1
 8006b2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	6999      	ldr	r1, [r3, #24]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	691a      	ldr	r2, [r3, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	619a      	str	r2, [r3, #24]
      break;
 8006b42:	e06b      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	0011      	movs	r1, r2
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f000 f995 	bl	8006e7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	699a      	ldr	r2, [r3, #24]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2180      	movs	r1, #128	@ 0x80
 8006b5e:	0109      	lsls	r1, r1, #4
 8006b60:	430a      	orrs	r2, r1
 8006b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4931      	ldr	r1, [pc, #196]	@ (8006c34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006b70:	400a      	ands	r2, r1
 8006b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	619a      	str	r2, [r3, #24]
      break;
 8006b88:	e048      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	0011      	movs	r1, r2
 8006b92:	0018      	movs	r0, r3
 8006b94:	f000 f9f0 	bl	8006f78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69da      	ldr	r2, [r3, #28]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2108      	movs	r1, #8
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	69da      	ldr	r2, [r3, #28]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2104      	movs	r1, #4
 8006bb4:	438a      	bics	r2, r1
 8006bb6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	69d9      	ldr	r1, [r3, #28]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691a      	ldr	r2, [r3, #16]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	430a      	orrs	r2, r1
 8006bc8:	61da      	str	r2, [r3, #28]
      break;
 8006bca:	e027      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	0011      	movs	r1, r2
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f000 fa4f 	bl	8007078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	69da      	ldr	r2, [r3, #28]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2180      	movs	r1, #128	@ 0x80
 8006be6:	0109      	lsls	r1, r1, #4
 8006be8:	430a      	orrs	r2, r1
 8006bea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	490f      	ldr	r1, [pc, #60]	@ (8006c34 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69d9      	ldr	r1, [r3, #28]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	021a      	lsls	r2, r3, #8
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	430a      	orrs	r2, r1
 8006c0e:	61da      	str	r2, [r3, #28]
      break;
 8006c10:	e004      	b.n	8006c1c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006c12:	2317      	movs	r3, #23
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	2201      	movs	r2, #1
 8006c18:	701a      	strb	r2, [r3, #0]
      break;
 8006c1a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	223c      	movs	r2, #60	@ 0x3c
 8006c20:	2100      	movs	r1, #0
 8006c22:	5499      	strb	r1, [r3, r2]

  return status;
 8006c24:	2317      	movs	r3, #23
 8006c26:	18fb      	adds	r3, r7, r3
 8006c28:	781b      	ldrb	r3, [r3, #0]
}
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	b006      	add	sp, #24
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	46c0      	nop			@ (mov r8, r8)
 8006c34:	fffffbff 	.word	0xfffffbff

08006c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c40:	46c0      	nop			@ (mov r8, r8)
 8006c42:	46bd      	mov	sp, r7
 8006c44:	b002      	add	sp, #8
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c50:	46c0      	nop			@ (mov r8, r8)
 8006c52:	46bd      	mov	sp, r7
 8006c54:	b002      	add	sp, #8
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c60:	46c0      	nop			@ (mov r8, r8)
 8006c62:	46bd      	mov	sp, r7
 8006c64:	b002      	add	sp, #8
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c70:	46c0      	nop			@ (mov r8, r8)
 8006c72:	46bd      	mov	sp, r7
 8006c74:	b002      	add	sp, #8
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4a37      	ldr	r2, [pc, #220]	@ (8006d68 <TIM_Base_SetConfig+0xf0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d008      	beq.n	8006ca2 <TIM_Base_SetConfig+0x2a>
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	2380      	movs	r3, #128	@ 0x80
 8006c94:	05db      	lsls	r3, r3, #23
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d003      	beq.n	8006ca2 <TIM_Base_SetConfig+0x2a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a33      	ldr	r2, [pc, #204]	@ (8006d6c <TIM_Base_SetConfig+0xf4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d108      	bne.n	8006cb4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2270      	movs	r2, #112	@ 0x70
 8006ca6:	4393      	bics	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d68 <TIM_Base_SetConfig+0xf0>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d014      	beq.n	8006ce6 <TIM_Base_SetConfig+0x6e>
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	2380      	movs	r3, #128	@ 0x80
 8006cc0:	05db      	lsls	r3, r3, #23
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d00f      	beq.n	8006ce6 <TIM_Base_SetConfig+0x6e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a28      	ldr	r2, [pc, #160]	@ (8006d6c <TIM_Base_SetConfig+0xf4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00b      	beq.n	8006ce6 <TIM_Base_SetConfig+0x6e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a27      	ldr	r2, [pc, #156]	@ (8006d70 <TIM_Base_SetConfig+0xf8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d007      	beq.n	8006ce6 <TIM_Base_SetConfig+0x6e>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a26      	ldr	r2, [pc, #152]	@ (8006d74 <TIM_Base_SetConfig+0xfc>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_Base_SetConfig+0x6e>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a25      	ldr	r2, [pc, #148]	@ (8006d78 <TIM_Base_SetConfig+0x100>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d108      	bne.n	8006cf8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4a24      	ldr	r2, [pc, #144]	@ (8006d7c <TIM_Base_SetConfig+0x104>)
 8006cea:	4013      	ands	r3, r2
 8006cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2280      	movs	r2, #128	@ 0x80
 8006cfc:	4393      	bics	r3, r2
 8006cfe:	001a      	movs	r2, r3
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	695b      	ldr	r3, [r3, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	689a      	ldr	r2, [r3, #8]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a11      	ldr	r2, [pc, #68]	@ (8006d68 <TIM_Base_SetConfig+0xf0>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d007      	beq.n	8006d36 <TIM_Base_SetConfig+0xbe>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a12      	ldr	r2, [pc, #72]	@ (8006d74 <TIM_Base_SetConfig+0xfc>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d003      	beq.n	8006d36 <TIM_Base_SetConfig+0xbe>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a11      	ldr	r2, [pc, #68]	@ (8006d78 <TIM_Base_SetConfig+0x100>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d103      	bne.n	8006d3e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b01      	cmp	r3, #1
 8006d4e:	d106      	bne.n	8006d5e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	691b      	ldr	r3, [r3, #16]
 8006d54:	2201      	movs	r2, #1
 8006d56:	4393      	bics	r3, r2
 8006d58:	001a      	movs	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	611a      	str	r2, [r3, #16]
  }
}
 8006d5e:	46c0      	nop			@ (mov r8, r8)
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b004      	add	sp, #16
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	46c0      	nop			@ (mov r8, r8)
 8006d68:	40012c00 	.word	0x40012c00
 8006d6c:	40000400 	.word	0x40000400
 8006d70:	40002000 	.word	0x40002000
 8006d74:	40014400 	.word	0x40014400
 8006d78:	40014800 	.word	0x40014800
 8006d7c:	fffffcff 	.word	0xfffffcff

08006d80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
 8006d94:	2201      	movs	r2, #1
 8006d96:	4393      	bics	r3, r2
 8006d98:	001a      	movs	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2270      	movs	r2, #112	@ 0x70
 8006dae:	4393      	bics	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2203      	movs	r2, #3
 8006db6:	4393      	bics	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2202      	movs	r2, #2
 8006dc8:	4393      	bics	r3, r2
 8006dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a23      	ldr	r2, [pc, #140]	@ (8006e68 <TIM_OC1_SetConfig+0xe8>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d007      	beq.n	8006dee <TIM_OC1_SetConfig+0x6e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a22      	ldr	r2, [pc, #136]	@ (8006e6c <TIM_OC1_SetConfig+0xec>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d003      	beq.n	8006dee <TIM_OC1_SetConfig+0x6e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a21      	ldr	r2, [pc, #132]	@ (8006e70 <TIM_OC1_SetConfig+0xf0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d10c      	bne.n	8006e08 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	2208      	movs	r2, #8
 8006df2:	4393      	bics	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2204      	movs	r2, #4
 8006e04:	4393      	bics	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a17      	ldr	r2, [pc, #92]	@ (8006e68 <TIM_OC1_SetConfig+0xe8>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d007      	beq.n	8006e20 <TIM_OC1_SetConfig+0xa0>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a16      	ldr	r2, [pc, #88]	@ (8006e6c <TIM_OC1_SetConfig+0xec>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d003      	beq.n	8006e20 <TIM_OC1_SetConfig+0xa0>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a15      	ldr	r2, [pc, #84]	@ (8006e70 <TIM_OC1_SetConfig+0xf0>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d111      	bne.n	8006e44 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	4a14      	ldr	r2, [pc, #80]	@ (8006e74 <TIM_OC1_SetConfig+0xf4>)
 8006e24:	4013      	ands	r3, r2
 8006e26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4a13      	ldr	r2, [pc, #76]	@ (8006e78 <TIM_OC1_SetConfig+0xf8>)
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	695b      	ldr	r3, [r3, #20]
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	693a      	ldr	r2, [r7, #16]
 8006e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685a      	ldr	r2, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	621a      	str	r2, [r3, #32]
}
 8006e5e:	46c0      	nop			@ (mov r8, r8)
 8006e60:	46bd      	mov	sp, r7
 8006e62:	b006      	add	sp, #24
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	40012c00 	.word	0x40012c00
 8006e6c:	40014400 	.word	0x40014400
 8006e70:	40014800 	.word	0x40014800
 8006e74:	fffffeff 	.word	0xfffffeff
 8006e78:	fffffdff 	.word	0xfffffdff

08006e7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	2210      	movs	r2, #16
 8006e92:	4393      	bics	r3, r2
 8006e94:	001a      	movs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4a2c      	ldr	r2, [pc, #176]	@ (8006f5c <TIM_OC2_SetConfig+0xe0>)
 8006eaa:	4013      	ands	r3, r2
 8006eac:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8006f60 <TIM_OC2_SetConfig+0xe4>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	021b      	lsls	r3, r3, #8
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2220      	movs	r2, #32
 8006ec6:	4393      	bics	r3, r2
 8006ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a22      	ldr	r2, [pc, #136]	@ (8006f64 <TIM_OC2_SetConfig+0xe8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d10d      	bne.n	8006efa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	2280      	movs	r2, #128	@ 0x80
 8006ee2:	4393      	bics	r3, r2
 8006ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	011b      	lsls	r3, r3, #4
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2240      	movs	r2, #64	@ 0x40
 8006ef6:	4393      	bics	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a19      	ldr	r2, [pc, #100]	@ (8006f64 <TIM_OC2_SetConfig+0xe8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d007      	beq.n	8006f12 <TIM_OC2_SetConfig+0x96>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a18      	ldr	r2, [pc, #96]	@ (8006f68 <TIM_OC2_SetConfig+0xec>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_OC2_SetConfig+0x96>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a17      	ldr	r2, [pc, #92]	@ (8006f6c <TIM_OC2_SetConfig+0xf0>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d113      	bne.n	8006f3a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	4a16      	ldr	r2, [pc, #88]	@ (8006f70 <TIM_OC2_SetConfig+0xf4>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	4a15      	ldr	r2, [pc, #84]	@ (8006f74 <TIM_OC2_SetConfig+0xf8>)
 8006f1e:	4013      	ands	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	693a      	ldr	r2, [r7, #16]
 8006f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685a      	ldr	r2, [r3, #4]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	621a      	str	r2, [r3, #32]
}
 8006f54:	46c0      	nop			@ (mov r8, r8)
 8006f56:	46bd      	mov	sp, r7
 8006f58:	b006      	add	sp, #24
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	ffff8fff 	.word	0xffff8fff
 8006f60:	fffffcff 	.word	0xfffffcff
 8006f64:	40012c00 	.word	0x40012c00
 8006f68:	40014400 	.word	0x40014400
 8006f6c:	40014800 	.word	0x40014800
 8006f70:	fffffbff 	.word	0xfffffbff
 8006f74:	fffff7ff 	.word	0xfffff7ff

08006f78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a1b      	ldr	r3, [r3, #32]
 8006f8c:	4a31      	ldr	r2, [pc, #196]	@ (8007054 <TIM_OC3_SetConfig+0xdc>)
 8006f8e:	401a      	ands	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2270      	movs	r2, #112	@ 0x70
 8006fa4:	4393      	bics	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2203      	movs	r2, #3
 8006fac:	4393      	bics	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	@ (8007058 <TIM_OC3_SetConfig+0xe0>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	021b      	lsls	r3, r3, #8
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a22      	ldr	r2, [pc, #136]	@ (800705c <TIM_OC3_SetConfig+0xe4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d10d      	bne.n	8006ff2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	4a21      	ldr	r2, [pc, #132]	@ (8007060 <TIM_OC3_SetConfig+0xe8>)
 8006fda:	4013      	ands	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	021b      	lsls	r3, r3, #8
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fea:	697b      	ldr	r3, [r7, #20]
 8006fec:	4a1d      	ldr	r2, [pc, #116]	@ (8007064 <TIM_OC3_SetConfig+0xec>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a19      	ldr	r2, [pc, #100]	@ (800705c <TIM_OC3_SetConfig+0xe4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d007      	beq.n	800700a <TIM_OC3_SetConfig+0x92>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8007068 <TIM_OC3_SetConfig+0xf0>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d003      	beq.n	800700a <TIM_OC3_SetConfig+0x92>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a19      	ldr	r2, [pc, #100]	@ (800706c <TIM_OC3_SetConfig+0xf4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d113      	bne.n	8007032 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	4a18      	ldr	r2, [pc, #96]	@ (8007070 <TIM_OC3_SetConfig+0xf8>)
 800700e:	4013      	ands	r3, r2
 8007010:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	4a17      	ldr	r2, [pc, #92]	@ (8007074 <TIM_OC3_SetConfig+0xfc>)
 8007016:	4013      	ands	r3, r2
 8007018:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	695b      	ldr	r3, [r3, #20]
 800701e:	011b      	lsls	r3, r3, #4
 8007020:	693a      	ldr	r2, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	693a      	ldr	r2, [r7, #16]
 800702e:	4313      	orrs	r3, r2
 8007030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	685a      	ldr	r2, [r3, #4]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	697a      	ldr	r2, [r7, #20]
 800704a:	621a      	str	r2, [r3, #32]
}
 800704c:	46c0      	nop			@ (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b006      	add	sp, #24
 8007052:	bd80      	pop	{r7, pc}
 8007054:	fffffeff 	.word	0xfffffeff
 8007058:	fffffdff 	.word	0xfffffdff
 800705c:	40012c00 	.word	0x40012c00
 8007060:	fffff7ff 	.word	0xfffff7ff
 8007064:	fffffbff 	.word	0xfffffbff
 8007068:	40014400 	.word	0x40014400
 800706c:	40014800 	.word	0x40014800
 8007070:	ffffefff 	.word	0xffffefff
 8007074:	ffffdfff 	.word	0xffffdfff

08007078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	4a24      	ldr	r2, [pc, #144]	@ (8007120 <TIM_OC4_SetConfig+0xa8>)
 800708e:	401a      	ands	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	4a20      	ldr	r2, [pc, #128]	@ (8007124 <TIM_OC4_SetConfig+0xac>)
 80070a4:	4013      	ands	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	4a1f      	ldr	r2, [pc, #124]	@ (8007128 <TIM_OC4_SetConfig+0xb0>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	021b      	lsls	r3, r3, #8
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4a1b      	ldr	r2, [pc, #108]	@ (800712c <TIM_OC4_SetConfig+0xb4>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	031b      	lsls	r3, r3, #12
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a17      	ldr	r2, [pc, #92]	@ (8007130 <TIM_OC4_SetConfig+0xb8>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d007      	beq.n	80070e8 <TIM_OC4_SetConfig+0x70>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a16      	ldr	r2, [pc, #88]	@ (8007134 <TIM_OC4_SetConfig+0xbc>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d003      	beq.n	80070e8 <TIM_OC4_SetConfig+0x70>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a15      	ldr	r2, [pc, #84]	@ (8007138 <TIM_OC4_SetConfig+0xc0>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d109      	bne.n	80070fc <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	4a14      	ldr	r2, [pc, #80]	@ (800713c <TIM_OC4_SetConfig+0xc4>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	695b      	ldr	r3, [r3, #20]
 80070f4:	019b      	lsls	r3, r3, #6
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	621a      	str	r2, [r3, #32]
}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	46bd      	mov	sp, r7
 800711a:	b006      	add	sp, #24
 800711c:	bd80      	pop	{r7, pc}
 800711e:	46c0      	nop			@ (mov r8, r8)
 8007120:	ffffefff 	.word	0xffffefff
 8007124:	ffff8fff 	.word	0xffff8fff
 8007128:	fffffcff 	.word	0xfffffcff
 800712c:	ffffdfff 	.word	0xffffdfff
 8007130:	40012c00 	.word	0x40012c00
 8007134:	40014400 	.word	0x40014400
 8007138:	40014800 	.word	0x40014800
 800713c:	ffffbfff 	.word	0xffffbfff

08007140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	221f      	movs	r2, #31
 8007150:	4013      	ands	r3, r2
 8007152:	2201      	movs	r2, #1
 8007154:	409a      	lsls	r2, r3
 8007156:	0013      	movs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	43d2      	mvns	r2, r2
 8007162:	401a      	ands	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6a1a      	ldr	r2, [r3, #32]
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	211f      	movs	r1, #31
 8007170:	400b      	ands	r3, r1
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	4099      	lsls	r1, r3
 8007176:	000b      	movs	r3, r1
 8007178:	431a      	orrs	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	621a      	str	r2, [r3, #32]
}
 800717e:	46c0      	nop			@ (mov r8, r8)
 8007180:	46bd      	mov	sp, r7
 8007182:	b006      	add	sp, #24
 8007184:	bd80      	pop	{r7, pc}
	...

08007188 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	223c      	movs	r2, #60	@ 0x3c
 8007196:	5c9b      	ldrb	r3, [r3, r2]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d101      	bne.n	80071a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800719c:	2302      	movs	r3, #2
 800719e:	e042      	b.n	8007226 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	223c      	movs	r2, #60	@ 0x3c
 80071a4:	2101      	movs	r1, #1
 80071a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	223d      	movs	r2, #61	@ 0x3d
 80071ac:	2102      	movs	r1, #2
 80071ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2270      	movs	r2, #112	@ 0x70
 80071c4:	4393      	bics	r3, r2
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a14      	ldr	r2, [pc, #80]	@ (8007230 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d00a      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	2380      	movs	r3, #128	@ 0x80
 80071ea:	05db      	lsls	r3, r3, #23
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d004      	beq.n	80071fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a0f      	ldr	r2, [pc, #60]	@ (8007234 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d10c      	bne.n	8007214 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2280      	movs	r2, #128	@ 0x80
 80071fe:	4393      	bics	r3, r2
 8007200:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	68ba      	ldr	r2, [r7, #8]
 8007208:	4313      	orrs	r3, r2
 800720a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	68ba      	ldr	r2, [r7, #8]
 8007212:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	223d      	movs	r2, #61	@ 0x3d
 8007218:	2101      	movs	r1, #1
 800721a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	223c      	movs	r2, #60	@ 0x3c
 8007220:	2100      	movs	r1, #0
 8007222:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	0018      	movs	r0, r3
 8007228:	46bd      	mov	sp, r7
 800722a:	b004      	add	sp, #16
 800722c:	bd80      	pop	{r7, pc}
 800722e:	46c0      	nop			@ (mov r8, r8)
 8007230:	40012c00 	.word	0x40012c00
 8007234:	40000400 	.word	0x40000400

08007238 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007242:	2300      	movs	r3, #0
 8007244:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	223c      	movs	r2, #60	@ 0x3c
 800724a:	5c9b      	ldrb	r3, [r3, r2]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d101      	bne.n	8007254 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007250:	2302      	movs	r3, #2
 8007252:	e03e      	b.n	80072d2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	223c      	movs	r2, #60	@ 0x3c
 8007258:	2101      	movs	r1, #1
 800725a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	22ff      	movs	r2, #255	@ 0xff
 8007260:	4393      	bics	r3, r2
 8007262:	001a      	movs	r2, r3
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	4313      	orrs	r3, r2
 800726a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	4a1b      	ldr	r2, [pc, #108]	@ (80072dc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8007270:	401a      	ands	r2, r3
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	4a18      	ldr	r2, [pc, #96]	@ (80072e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800727e:	401a      	ands	r2, r3
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4a16      	ldr	r2, [pc, #88]	@ (80072e4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800728c:	401a      	ands	r2, r3
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4a13      	ldr	r2, [pc, #76]	@ (80072e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800729a:	401a      	ands	r2, r3
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	691b      	ldr	r3, [r3, #16]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4a11      	ldr	r2, [pc, #68]	@ (80072ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80072a8:	401a      	ands	r2, r3
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4a0e      	ldr	r2, [pc, #56]	@ (80072f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80072b6:	401a      	ands	r2, r3
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	4313      	orrs	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	223c      	movs	r2, #60	@ 0x3c
 80072cc:	2100      	movs	r1, #0
 80072ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	0018      	movs	r0, r3
 80072d4:	46bd      	mov	sp, r7
 80072d6:	b004      	add	sp, #16
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	46c0      	nop			@ (mov r8, r8)
 80072dc:	fffffcff 	.word	0xfffffcff
 80072e0:	fffffbff 	.word	0xfffffbff
 80072e4:	fffff7ff 	.word	0xfffff7ff
 80072e8:	ffffefff 	.word	0xffffefff
 80072ec:	ffffdfff 	.word	0xffffdfff
 80072f0:	ffffbfff 	.word	0xffffbfff

080072f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072fc:	46c0      	nop			@ (mov r8, r8)
 80072fe:	46bd      	mov	sp, r7
 8007300:	b002      	add	sp, #8
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800730c:	46c0      	nop			@ (mov r8, r8)
 800730e:	46bd      	mov	sp, r7
 8007310:	b002      	add	sp, #8
 8007312:	bd80      	pop	{r7, pc}

08007314 <memset>:
 8007314:	0003      	movs	r3, r0
 8007316:	1882      	adds	r2, r0, r2
 8007318:	4293      	cmp	r3, r2
 800731a:	d100      	bne.n	800731e <memset+0xa>
 800731c:	4770      	bx	lr
 800731e:	7019      	strb	r1, [r3, #0]
 8007320:	3301      	adds	r3, #1
 8007322:	e7f9      	b.n	8007318 <memset+0x4>

08007324 <__libc_init_array>:
 8007324:	b570      	push	{r4, r5, r6, lr}
 8007326:	2600      	movs	r6, #0
 8007328:	4c0c      	ldr	r4, [pc, #48]	@ (800735c <__libc_init_array+0x38>)
 800732a:	4d0d      	ldr	r5, [pc, #52]	@ (8007360 <__libc_init_array+0x3c>)
 800732c:	1b64      	subs	r4, r4, r5
 800732e:	10a4      	asrs	r4, r4, #2
 8007330:	42a6      	cmp	r6, r4
 8007332:	d109      	bne.n	8007348 <__libc_init_array+0x24>
 8007334:	2600      	movs	r6, #0
 8007336:	f000 f819 	bl	800736c <_init>
 800733a:	4c0a      	ldr	r4, [pc, #40]	@ (8007364 <__libc_init_array+0x40>)
 800733c:	4d0a      	ldr	r5, [pc, #40]	@ (8007368 <__libc_init_array+0x44>)
 800733e:	1b64      	subs	r4, r4, r5
 8007340:	10a4      	asrs	r4, r4, #2
 8007342:	42a6      	cmp	r6, r4
 8007344:	d105      	bne.n	8007352 <__libc_init_array+0x2e>
 8007346:	bd70      	pop	{r4, r5, r6, pc}
 8007348:	00b3      	lsls	r3, r6, #2
 800734a:	58eb      	ldr	r3, [r5, r3]
 800734c:	4798      	blx	r3
 800734e:	3601      	adds	r6, #1
 8007350:	e7ee      	b.n	8007330 <__libc_init_array+0xc>
 8007352:	00b3      	lsls	r3, r6, #2
 8007354:	58eb      	ldr	r3, [r5, r3]
 8007356:	4798      	blx	r3
 8007358:	3601      	adds	r6, #1
 800735a:	e7f2      	b.n	8007342 <__libc_init_array+0x1e>
 800735c:	080073b4 	.word	0x080073b4
 8007360:	080073b4 	.word	0x080073b4
 8007364:	080073b8 	.word	0x080073b8
 8007368:	080073b4 	.word	0x080073b4

0800736c <_init>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	46c0      	nop			@ (mov r8, r8)
 8007370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007372:	bc08      	pop	{r3}
 8007374:	469e      	mov	lr, r3
 8007376:	4770      	bx	lr

08007378 <_fini>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	46c0      	nop			@ (mov r8, r8)
 800737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737e:	bc08      	pop	{r3}
 8007380:	469e      	mov	lr, r3
 8007382:	4770      	bx	lr
