
pdm-05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08006474  08006474  00007474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a4  080064a4  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080064a4  080064a4  00008068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080064a4  080064a4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a4  080064a4  000074a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080064ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000068  08006514  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08006514  0000864c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000daf8  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002072  00000000  00000000  00015b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00017c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b53  00000000  00000000  00018a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bd0  00000000  00000000  000195cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010273  00000000  00000000  0003219b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009195d  00000000  00000000  0004240e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3d6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b0  00000000  00000000  000d3db0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000d7260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800645c 	.word	0x0800645c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800645c 	.word	0x0800645c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <translateDuty>:
#define CS_HIGH() HAL_GPIO_WritePin(CS_PIN_GPIO_Port, CS_PIN_Pin, GPIO_PIN_SET);
#define V12NpOff() HAL_GPIO_WritePin(V12_NP_Signal_GPIO_Port, V12_NP_Signal_Pin, RESET);
#define V12NpOn() HAL_GPIO_WritePin(V12_NP_Signal_GPIO_Port, V12_NP_Signal_Pin, SET);


void translateDuty(uint16_t *buffer, uint8_t bufferSize){
 8000220:	b590      	push	{r4, r7, lr}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	000a      	movs	r2, r1
 800022a:	1cfb      	adds	r3, r7, #3
 800022c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < bufferSize; i++) {
 800022e:	230f      	movs	r3, #15
 8000230:	18fb      	adds	r3, r7, r3
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e01d      	b.n	8000274 <translateDuty+0x54>
	        buffer[i] = 50 + ((buffer[i] / 10) * 5);
 8000238:	240f      	movs	r4, #15
 800023a:	193b      	adds	r3, r7, r4
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	005b      	lsls	r3, r3, #1
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	18d3      	adds	r3, r2, r3
 8000244:	881b      	ldrh	r3, [r3, #0]
 8000246:	210a      	movs	r1, #10
 8000248:	0018      	movs	r0, r3
 800024a:	f7ff ff5d 	bl	8000108 <__udivsi3>
 800024e:	0003      	movs	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	1c1a      	adds	r2, r3, #0
 8000254:	0092      	lsls	r2, r2, #2
 8000256:	18d3      	adds	r3, r2, r3
 8000258:	b29a      	uxth	r2, r3
 800025a:	193b      	adds	r3, r7, r4
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	005b      	lsls	r3, r3, #1
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	18cb      	adds	r3, r1, r3
 8000264:	3232      	adds	r2, #50	@ 0x32
 8000266:	b292      	uxth	r2, r2
 8000268:	801a      	strh	r2, [r3, #0]
	for (uint8_t i = 0; i < bufferSize; i++) {
 800026a:	193b      	adds	r3, r7, r4
 800026c:	781a      	ldrb	r2, [r3, #0]
 800026e:	193b      	adds	r3, r7, r4
 8000270:	3201      	adds	r2, #1
 8000272:	701a      	strb	r2, [r3, #0]
 8000274:	230f      	movs	r3, #15
 8000276:	18fa      	adds	r2, r7, r3
 8000278:	1cfb      	adds	r3, r7, #3
 800027a:	7812      	ldrb	r2, [r2, #0]
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	429a      	cmp	r2, r3
 8000280:	d3da      	bcc.n	8000238 <translateDuty+0x18>
	    }
}
 8000282:	46c0      	nop			@ (mov r8, r8)
 8000284:	46c0      	nop			@ (mov r8, r8)
 8000286:	46bd      	mov	sp, r7
 8000288:	b005      	add	sp, #20
 800028a:	bd90      	pop	{r4, r7, pc}

0800028c <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8000294:	4b5c      	ldr	r3, [pc, #368]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000296:	4a5d      	ldr	r2, [pc, #372]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	2100      	movs	r1, #0
 800029c:	f003 f906 	bl	80034ac <HAL_CAN_GetRxMessage>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d001      	beq.n	80002a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>

		Error_Handler();
 80002a4:	f001 fce2 	bl	8001c6c <Error_Handler>
	}

	if (RxHeader.StdId == 0x3A1) {
 80002a8:	4b58      	ldr	r3, [pc, #352]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a58      	ldr	r2, [pc, #352]	@ (8000410 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d13c      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
			tempDataFlag = 1;
 80002b2:	4b58      	ldr	r3, [pc, #352]	@ (8000414 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	701a      	strb	r2, [r3, #0]
			ect = (RxData[3] << 8) | RxData[2];
 80002b8:	4b53      	ldr	r3, [pc, #332]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002ba:	78db      	ldrb	r3, [r3, #3]
 80002bc:	b21b      	sxth	r3, r3
 80002be:	021b      	lsls	r3, r3, #8
 80002c0:	b21a      	sxth	r2, r3
 80002c2:	4b51      	ldr	r3, [pc, #324]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	b21b      	sxth	r3, r3
 80002c8:	4313      	orrs	r3, r2
 80002ca:	b21a      	sxth	r2, r3
 80002cc:	4b52      	ldr	r3, [pc, #328]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002ce:	801a      	strh	r2, [r3, #0]
			ect = ect - 50;
 80002d0:	4b51      	ldr	r3, [pc, #324]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	5e9b      	ldrsh	r3, [r3, r2]
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	3b32      	subs	r3, #50	@ 0x32
 80002da:	b29b      	uxth	r3, r3
 80002dc:	b21a      	sxth	r2, r3
 80002de:	4b4e      	ldr	r3, [pc, #312]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002e0:	801a      	strh	r2, [r3, #0]
			if(ect < 0){
 80002e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	5e9b      	ldrsh	r3, [r3, r2]
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	da02      	bge.n	80002f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x66>
				ect = 0;
 80002ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000418 <HAL_CAN_RxFifo0MsgPendingCallback+0x18c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	801a      	strh	r2, [r3, #0]
			}
			oilTemp = (RxData[5] << 8) | RxData[4];
 80002f2:	4b45      	ldr	r3, [pc, #276]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002f4:	795b      	ldrb	r3, [r3, #5]
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	021b      	lsls	r3, r3, #8
 80002fa:	b21a      	sxth	r2, r3
 80002fc:	4b42      	ldr	r3, [pc, #264]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80002fe:	791b      	ldrb	r3, [r3, #4]
 8000300:	b21b      	sxth	r3, r3
 8000302:	4313      	orrs	r3, r2
 8000304:	b21a      	sxth	r2, r3
 8000306:	4b45      	ldr	r3, [pc, #276]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000308:	801a      	strh	r2, [r3, #0]
			oilTemp = oilTemp - 50;
 800030a:	4b44      	ldr	r3, [pc, #272]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800030c:	2200      	movs	r2, #0
 800030e:	5e9b      	ldrsh	r3, [r3, r2]
 8000310:	b29b      	uxth	r3, r3
 8000312:	3b32      	subs	r3, #50	@ 0x32
 8000314:	b29b      	uxth	r3, r3
 8000316:	b21a      	sxth	r2, r3
 8000318:	4b40      	ldr	r3, [pc, #256]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800031a:	801a      	strh	r2, [r3, #0]
			if(oilTemp < 0){
 800031c:	4b3f      	ldr	r3, [pc, #252]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 800031e:	2200      	movs	r2, #0
 8000320:	5e9b      	ldrsh	r3, [r3, r2]
 8000322:	2b00      	cmp	r3, #0
 8000324:	da02      	bge.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>
				oilTemp = 0;
 8000326:	4b3d      	ldr	r3, [pc, #244]	@ (800041c <HAL_CAN_RxFifo0MsgPendingCallback+0x190>)
 8000328:	2200      	movs	r2, #0
 800032a:	801a      	strh	r2, [r3, #0]
			}
	}
	if (RxHeader.StdId == 0x3A2){
 800032c:	4b37      	ldr	r3, [pc, #220]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a3b      	ldr	r2, [pc, #236]	@ (8000420 <HAL_CAN_RxFifo0MsgPendingCallback+0x194>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d11a      	bne.n	800036c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>
			pressDataFlag = 1;
 8000336:	4b3b      	ldr	r3, [pc, #236]	@ (8000424 <HAL_CAN_RxFifo0MsgPendingCallback+0x198>)
 8000338:	2201      	movs	r2, #1
 800033a:	701a      	strb	r2, [r3, #0]
			fuelPress = (RxData[1] << 8) | RxData[0];
 800033c:	4b32      	ldr	r3, [pc, #200]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	b21b      	sxth	r3, r3
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	b21a      	sxth	r2, r3
 8000346:	4b30      	ldr	r3, [pc, #192]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	b21b      	sxth	r3, r3
 800034c:	4313      	orrs	r3, r2
 800034e:	b21a      	sxth	r2, r3
 8000350:	4b35      	ldr	r3, [pc, #212]	@ (8000428 <HAL_CAN_RxFifo0MsgPendingCallback+0x19c>)
 8000352:	801a      	strh	r2, [r3, #0]
			oilPress = (RxData[3] << 8) | RxData[2];
 8000354:	4b2c      	ldr	r3, [pc, #176]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000356:	78db      	ldrb	r3, [r3, #3]
 8000358:	b21b      	sxth	r3, r3
 800035a:	021b      	lsls	r3, r3, #8
 800035c:	b21a      	sxth	r2, r3
 800035e:	4b2a      	ldr	r3, [pc, #168]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000360:	789b      	ldrb	r3, [r3, #2]
 8000362:	b21b      	sxth	r3, r3
 8000364:	4313      	orrs	r3, r2
 8000366:	b21a      	sxth	r2, r3
 8000368:	4b30      	ldr	r3, [pc, #192]	@ (800042c <HAL_CAN_RxFifo0MsgPendingCallback+0x1a0>)
 800036a:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x3A3){
 800036c:	4b27      	ldr	r3, [pc, #156]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a2f      	ldr	r2, [pc, #188]	@ (8000430 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a4>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d10f      	bne.n	8000396 <HAL_CAN_RxFifo0MsgPendingCallback+0x10a>
			fuelDataFlag = 1;
 8000376:	4b2f      	ldr	r3, [pc, #188]	@ (8000434 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 8000378:	2201      	movs	r2, #1
 800037a:	701a      	strb	r2, [r3, #0]
			instFuelConsumption = (RxData[3] << 8) | RxData[2];
 800037c:	4b22      	ldr	r3, [pc, #136]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 800037e:	78db      	ldrb	r3, [r3, #3]
 8000380:	b21b      	sxth	r3, r3
 8000382:	021b      	lsls	r3, r3, #8
 8000384:	b21a      	sxth	r2, r3
 8000386:	4b20      	ldr	r3, [pc, #128]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000388:	789b      	ldrb	r3, [r3, #2]
 800038a:	b21b      	sxth	r3, r3
 800038c:	4313      	orrs	r3, r2
 800038e:	b21b      	sxth	r3, r3
 8000390:	b29a      	uxth	r2, r3
 8000392:	4b29      	ldr	r3, [pc, #164]	@ (8000438 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8000394:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A4){
 8000396:	4b1d      	ldr	r3, [pc, #116]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	23e9      	movs	r3, #233	@ 0xe9
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	429a      	cmp	r2, r3
 80003a0:	d10e      	bne.n	80003c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>
			rpmDataFlag = 1;
 80003a2:	4b26      	ldr	r3, [pc, #152]	@ (800043c <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
			rpm = (RxData[6] << 8) | RxData[5];
 80003a8:	4b17      	ldr	r3, [pc, #92]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003aa:	799b      	ldrb	r3, [r3, #6]
 80003ac:	b21b      	sxth	r3, r3
 80003ae:	021b      	lsls	r3, r3, #8
 80003b0:	b21a      	sxth	r2, r3
 80003b2:	4b15      	ldr	r3, [pc, #84]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003b4:	795b      	ldrb	r3, [r3, #5]
 80003b6:	b21b      	sxth	r3, r3
 80003b8:	4313      	orrs	r3, r2
 80003ba:	b21a      	sxth	r2, r3
 80003bc:	4b20      	ldr	r3, [pc, #128]	@ (8000440 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 80003be:	801a      	strh	r2, [r3, #0]
	}
	if (RxHeader.StdId == 0x3A5){
 80003c0:	4b12      	ldr	r3, [pc, #72]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000444 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d10e      	bne.n	80003e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x15c>
			battDataFlag = 1;
 80003ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000448 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	701a      	strb	r2, [r3, #0]
			battVolt = (RxData[1] << 8) | RxData[0];
 80003d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003d2:	785b      	ldrb	r3, [r3, #1]
 80003d4:	b21b      	sxth	r3, r3
 80003d6:	021b      	lsls	r3, r3, #8
 80003d8:	b21a      	sxth	r2, r3
 80003da:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	b21b      	sxth	r3, r3
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b21a      	sxth	r2, r3
 80003e4:	4b19      	ldr	r3, [pc, #100]	@ (800044c <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 80003e6:	801a      	strh	r2, [r3, #0]

	}
	if (RxHeader.StdId == 0x093){
 80003e8:	4b08      	ldr	r3, [pc, #32]	@ (800040c <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b93      	cmp	r3, #147	@ 0x93
 80003ee:	d106      	bne.n	80003fe <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
		if (RxData[0] == 0x02)	{
 80003f0:	4b05      	ldr	r3, [pc, #20]	@ (8000408 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b02      	cmp	r3, #2
 80003f6:	d102      	bne.n	80003fe <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
			canResetEcuFlag = 1;
 80003f8:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	46bd      	mov	sp, r7
 8000402:	b002      	add	sp, #8
 8000404:	bd80      	pop	{r7, pc}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	2000042c 	.word	0x2000042c
 800040c:	20000344 	.word	0x20000344
 8000410:	000003a1 	.word	0x000003a1
 8000414:	2000048e 	.word	0x2000048e
 8000418:	20000496 	.word	0x20000496
 800041c:	20000498 	.word	0x20000498
 8000420:	000003a2 	.word	0x000003a2
 8000424:	2000048f 	.word	0x2000048f
 8000428:	2000049c 	.word	0x2000049c
 800042c:	2000049a 	.word	0x2000049a
 8000430:	000003a3 	.word	0x000003a3
 8000434:	20000490 	.word	0x20000490
 8000438:	2000063c 	.word	0x2000063c
 800043c:	20000491 	.word	0x20000491
 8000440:	200004a0 	.word	0x200004a0
 8000444:	000003a5 	.word	0x000003a5
 8000448:	20000492 	.word	0x20000492
 800044c:	2000049e 	.word	0x2000049e
 8000450:	20000640 	.word	0x20000640

08000454 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	value_adc[0] = (uint16_t) adc_buff[0];	//Los valores pasan de 32 a 16 bits
 800045c:	4b18      	ldr	r3, [pc, #96]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	b29a      	uxth	r2, r3
 8000462:	4b18      	ldr	r3, [pc, #96]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000464:	801a      	strh	r2, [r3, #0]
	value_adc[1] = (uint16_t) adc_buff[1];
 8000466:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000468:	685b      	ldr	r3, [r3, #4]
 800046a:	b29a      	uxth	r2, r3
 800046c:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 800046e:	805a      	strh	r2, [r3, #2]
	value_adc[2] = (uint16_t) adc_buff[2];
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	b29a      	uxth	r2, r3
 8000476:	4b13      	ldr	r3, [pc, #76]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000478:	809a      	strh	r2, [r3, #4]
	value_adc[3] = (uint16_t) adc_buff[3];
 800047a:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	b29a      	uxth	r2, r3
 8000480:	4b10      	ldr	r3, [pc, #64]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000482:	80da      	strh	r2, [r3, #6]
	value_adc[4] = (uint16_t) adc_buff[4];
 8000484:	4b0e      	ldr	r3, [pc, #56]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000486:	691b      	ldr	r3, [r3, #16]
 8000488:	b29a      	uxth	r2, r3
 800048a:	4b0e      	ldr	r3, [pc, #56]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 800048c:	811a      	strh	r2, [r3, #8]
	value_adc[5] = (uint16_t) adc_buff[5];
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 8000496:	815a      	strh	r2, [r3, #10]
	value_adc[6] = (uint16_t) adc_buff[6];
 8000498:	4b09      	ldr	r3, [pc, #36]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	b29a      	uxth	r2, r3
 800049e:	4b09      	ldr	r3, [pc, #36]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 80004a0:	819a      	strh	r2, [r3, #12]
	value_adc[7] = (uint16_t) adc_buff[7];
 80004a2:	4b07      	ldr	r3, [pc, #28]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	b29a      	uxth	r2, r3
 80004a8:	4b06      	ldr	r3, [pc, #24]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 80004aa:	81da      	strh	r2, [r3, #14]
	value_adc[8] = (uint16_t) adc_buff[8];
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <HAL_ADC_ConvCpltCallback+0x6c>)
 80004ae:	6a1b      	ldr	r3, [r3, #32]
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	4b04      	ldr	r3, [pc, #16]	@ (80004c4 <HAL_ADC_ConvCpltCallback+0x70>)
 80004b4:	821a      	strh	r2, [r3, #16]
}
 80004b6:	46c0      	nop			@ (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	46c0      	nop			@ (mov r8, r8)
 80004c0:	20000434 	.word	0x20000434
 80004c4:	20000458 	.word	0x20000458

080004c8 <tempActions>:
void tempActions(){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	tempDataFlag = 0;
 80004cc:	4b6a      	ldr	r3, [pc, #424]	@ (8000678 <tempActions+0x1b0>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
	if((ect > ectTh[0])&&(escReadyFlag)){
 80004d2:	4b6a      	ldr	r3, [pc, #424]	@ (800067c <tempActions+0x1b4>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	5e9b      	ldrsh	r3, [r3, r2]
 80004d8:	001a      	movs	r2, r3
 80004da:	4b69      	ldr	r3, [pc, #420]	@ (8000680 <tempActions+0x1b8>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	429a      	cmp	r2, r3
 80004e0:	dc00      	bgt.n	80004e4 <tempActions+0x1c>
 80004e2:	e068      	b.n	80005b6 <tempActions+0xee>
 80004e4:	4b67      	ldr	r3, [pc, #412]	@ (8000684 <tempActions+0x1bc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d064      	beq.n	80005b6 <tempActions+0xee>
		//TIM2->CCR3 = dutyFanEctTh[0];// estos dos están apagados para que solo la bomba se encienda en el primer EctTh
		//TIM2->CCR4 = dutyFanEctTh[0];
		//TIM3->CCR2 = dutyFanEctTh[0];
		TIM16->CCR1 = dutyPumpEctTh[0];
 80004ec:	4b66      	ldr	r3, [pc, #408]	@ (8000688 <tempActions+0x1c0>)
 80004ee:	881a      	ldrh	r2, [r3, #0]
 80004f0:	4b66      	ldr	r3, [pc, #408]	@ (800068c <tempActions+0x1c4>)
 80004f2:	635a      	str	r2, [r3, #52]	@ 0x34

		if(ect >= ectTh[1]){
 80004f4:	4b61      	ldr	r3, [pc, #388]	@ (800067c <tempActions+0x1b4>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	5e9b      	ldrsh	r3, [r3, r2]
 80004fa:	001a      	movs	r2, r3
 80004fc:	4b60      	ldr	r3, [pc, #384]	@ (8000680 <tempActions+0x1b8>)
 80004fe:	885b      	ldrh	r3, [r3, #2]
 8000500:	429a      	cmp	r2, r3
 8000502:	db49      	blt.n	8000598 <tempActions+0xd0>
			TIM2->CCR3 = dutyFanEctTh[0];
 8000504:	4b62      	ldr	r3, [pc, #392]	@ (8000690 <tempActions+0x1c8>)
 8000506:	881a      	ldrh	r2, [r3, #0]
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = dutyFanEctTh[0];
 800050e:	4b60      	ldr	r3, [pc, #384]	@ (8000690 <tempActions+0x1c8>)
 8000510:	881a      	ldrh	r2, [r3, #0]
 8000512:	2380      	movs	r3, #128	@ 0x80
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	641a      	str	r2, [r3, #64]	@ 0x40

			TIM3->CCR2 = dutyFanEctTh[0];
 8000518:	4b5d      	ldr	r3, [pc, #372]	@ (8000690 <tempActions+0x1c8>)
 800051a:	881a      	ldrh	r2, [r3, #0]
 800051c:	4b5d      	ldr	r3, [pc, #372]	@ (8000694 <tempActions+0x1cc>)
 800051e:	639a      	str	r2, [r3, #56]	@ 0x38

			TIM16->CCR1 = dutyPumpEctTh[1];
 8000520:	4b59      	ldr	r3, [pc, #356]	@ (8000688 <tempActions+0x1c0>)
 8000522:	885a      	ldrh	r2, [r3, #2]
 8000524:	4b59      	ldr	r3, [pc, #356]	@ (800068c <tempActions+0x1c4>)
 8000526:	635a      	str	r2, [r3, #52]	@ 0x34

			if(ect > ectTh[2]){
 8000528:	4b54      	ldr	r3, [pc, #336]	@ (800067c <tempActions+0x1b4>)
 800052a:	2200      	movs	r2, #0
 800052c:	5e9b      	ldrsh	r3, [r3, r2]
 800052e:	001a      	movs	r2, r3
 8000530:	4b53      	ldr	r3, [pc, #332]	@ (8000680 <tempActions+0x1b8>)
 8000532:	889b      	ldrh	r3, [r3, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dd51      	ble.n	80005dc <tempActions+0x114>
				TIM2->CCR3 = dutyFanEctTh[1];
 8000538:	4b55      	ldr	r3, [pc, #340]	@ (8000690 <tempActions+0x1c8>)
 800053a:	885a      	ldrh	r2, [r3, #2]
 800053c:	2380      	movs	r3, #128	@ 0x80
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	63da      	str	r2, [r3, #60]	@ 0x3c
				TIM2->CCR4 = dutyFanEctTh[1];
 8000542:	4b53      	ldr	r3, [pc, #332]	@ (8000690 <tempActions+0x1c8>)
 8000544:	885a      	ldrh	r2, [r3, #2]
 8000546:	2380      	movs	r3, #128	@ 0x80
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	641a      	str	r2, [r3, #64]	@ 0x40

				TIM3->CCR2 = dutyFanEctTh[1];
 800054c:	4b50      	ldr	r3, [pc, #320]	@ (8000690 <tempActions+0x1c8>)
 800054e:	885a      	ldrh	r2, [r3, #2]
 8000550:	4b50      	ldr	r3, [pc, #320]	@ (8000694 <tempActions+0x1cc>)
 8000552:	639a      	str	r2, [r3, #56]	@ 0x38

				TIM16->CCR1 = dutyPumpEctTh[1];
 8000554:	4b4c      	ldr	r3, [pc, #304]	@ (8000688 <tempActions+0x1c0>)
 8000556:	885a      	ldrh	r2, [r3, #2]
 8000558:	4b4c      	ldr	r3, [pc, #304]	@ (800068c <tempActions+0x1c4>)
 800055a:	635a      	str	r2, [r3, #52]	@ 0x34

				if(ect > ectTh[3]){
 800055c:	4b47      	ldr	r3, [pc, #284]	@ (800067c <tempActions+0x1b4>)
 800055e:	2200      	movs	r2, #0
 8000560:	5e9b      	ldrsh	r3, [r3, r2]
 8000562:	001a      	movs	r2, r3
 8000564:	4b46      	ldr	r3, [pc, #280]	@ (8000680 <tempActions+0x1b8>)
 8000566:	88db      	ldrh	r3, [r3, #6]
 8000568:	429a      	cmp	r2, r3
 800056a:	dd37      	ble.n	80005dc <tempActions+0x114>
					ectEmergencyFlag = 1;
 800056c:	4b4a      	ldr	r3, [pc, #296]	@ (8000698 <tempActions+0x1d0>)
 800056e:	2201      	movs	r2, #1
 8000570:	701a      	strb	r2, [r3, #0]
					TIM2->CCR3 = dutyFanEctTh[2];
 8000572:	4b47      	ldr	r3, [pc, #284]	@ (8000690 <tempActions+0x1c8>)
 8000574:	889a      	ldrh	r2, [r3, #4]
 8000576:	2380      	movs	r3, #128	@ 0x80
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	63da      	str	r2, [r3, #60]	@ 0x3c
					TIM2->CCR4 = dutyFanEctTh[2];
 800057c:	4b44      	ldr	r3, [pc, #272]	@ (8000690 <tempActions+0x1c8>)
 800057e:	889a      	ldrh	r2, [r3, #4]
 8000580:	2380      	movs	r3, #128	@ 0x80
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	641a      	str	r2, [r3, #64]	@ 0x40

					TIM3->CCR2 = dutyFanEctTh[2];
 8000586:	4b42      	ldr	r3, [pc, #264]	@ (8000690 <tempActions+0x1c8>)
 8000588:	889a      	ldrh	r2, [r3, #4]
 800058a:	4b42      	ldr	r3, [pc, #264]	@ (8000694 <tempActions+0x1cc>)
 800058c:	639a      	str	r2, [r3, #56]	@ 0x38

					TIM16->CCR1 = dutyPumpEctTh[2];
 800058e:	4b3e      	ldr	r3, [pc, #248]	@ (8000688 <tempActions+0x1c0>)
 8000590:	889a      	ldrh	r2, [r3, #4]
 8000592:	4b3e      	ldr	r3, [pc, #248]	@ (800068c <tempActions+0x1c4>)
 8000594:	635a      	str	r2, [r3, #52]	@ 0x34
		if(ect >= ectTh[1]){
 8000596:	e021      	b.n	80005dc <tempActions+0x114>
				}
			}
		}else{
			TIM2->CCR3 = dutyFanNill;//para que se apaguen a 90
 8000598:	4b40      	ldr	r3, [pc, #256]	@ (800069c <tempActions+0x1d4>)
 800059a:	881a      	ldrh	r2, [r3, #0]
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	63da      	str	r2, [r3, #60]	@ 0x3c
			TIM2->CCR4 = dutyFanNill;
 80005a2:	4b3e      	ldr	r3, [pc, #248]	@ (800069c <tempActions+0x1d4>)
 80005a4:	881a      	ldrh	r2, [r3, #0]
 80005a6:	2380      	movs	r3, #128	@ 0x80
 80005a8:	05db      	lsls	r3, r3, #23
 80005aa:	641a      	str	r2, [r3, #64]	@ 0x40

			TIM3->CCR2 = dutyFanNill;
 80005ac:	4b3b      	ldr	r3, [pc, #236]	@ (800069c <tempActions+0x1d4>)
 80005ae:	881a      	ldrh	r2, [r3, #0]
 80005b0:	4b38      	ldr	r3, [pc, #224]	@ (8000694 <tempActions+0x1cc>)
 80005b2:	639a      	str	r2, [r3, #56]	@ 0x38
		if(ect >= ectTh[1]){
 80005b4:	e012      	b.n	80005dc <tempActions+0x114>
		}
	}else{
		TIM2->CCR3 = dutyFanNill;//Si no entra a esta condición que mande pwms de apagado
 80005b6:	4b39      	ldr	r3, [pc, #228]	@ (800069c <tempActions+0x1d4>)
 80005b8:	881a      	ldrh	r2, [r3, #0]
 80005ba:	2380      	movs	r3, #128	@ 0x80
 80005bc:	05db      	lsls	r3, r3, #23
 80005be:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM2->CCR4 = dutyFanNill;
 80005c0:	4b36      	ldr	r3, [pc, #216]	@ (800069c <tempActions+0x1d4>)
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	2380      	movs	r3, #128	@ 0x80
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	641a      	str	r2, [r3, #64]	@ 0x40

		TIM3->CCR2 = dutyFanNill;
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <tempActions+0x1d4>)
 80005cc:	881a      	ldrh	r2, [r3, #0]
 80005ce:	4b31      	ldr	r3, [pc, #196]	@ (8000694 <tempActions+0x1cc>)
 80005d0:	639a      	str	r2, [r3, #56]	@ 0x38

		TIM16->CCR1 = dutyPumpNill;
 80005d2:	4b33      	ldr	r3, [pc, #204]	@ (80006a0 <tempActions+0x1d8>)
 80005d4:	881a      	ldrh	r2, [r3, #0]
 80005d6:	4b2d      	ldr	r3, [pc, #180]	@ (800068c <tempActions+0x1c4>)
 80005d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005da:	e000      	b.n	80005de <tempActions+0x116>
		if(ect >= ectTh[1]){
 80005dc:	46c0      	nop			@ (mov r8, r8)
	}
	if((oilTemp > oilTh[0])&&(escReadyFlag)){
 80005de:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <tempActions+0x1dc>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	5e9b      	ldrsh	r3, [r3, r2]
 80005e4:	001a      	movs	r2, r3
 80005e6:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <tempActions+0x1e0>)
 80005e8:	881b      	ldrh	r3, [r3, #0]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	dd37      	ble.n	800065e <tempActions+0x196>
 80005ee:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <tempActions+0x1bc>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d033      	beq.n	800065e <tempActions+0x196>
		TIM3->CCR1 = dutyFanEctTh[0];
 80005f6:	4b26      	ldr	r3, [pc, #152]	@ (8000690 <tempActions+0x1c8>)
 80005f8:	881a      	ldrh	r2, [r3, #0]
 80005fa:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <tempActions+0x1cc>)
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34

		TIM17->CCR1 = dutyPumpOilTh[0];
 80005fe:	4b2b      	ldr	r3, [pc, #172]	@ (80006ac <tempActions+0x1e4>)
 8000600:	881a      	ldrh	r2, [r3, #0]
 8000602:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <tempActions+0x1e8>)
 8000604:	635a      	str	r2, [r3, #52]	@ 0x34


		if(oilTemp > oilTh[1]){
 8000606:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <tempActions+0x1dc>)
 8000608:	2200      	movs	r2, #0
 800060a:	5e9b      	ldrsh	r3, [r3, r2]
 800060c:	001a      	movs	r2, r3
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <tempActions+0x1e0>)
 8000610:	885b      	ldrh	r3, [r3, #2]
 8000612:	429a      	cmp	r2, r3
 8000614:	dd2c      	ble.n	8000670 <tempActions+0x1a8>
			TIM3->CCR1 = dutyFanEctTh[1];
 8000616:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <tempActions+0x1c8>)
 8000618:	885a      	ldrh	r2, [r3, #2]
 800061a:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <tempActions+0x1cc>)
 800061c:	635a      	str	r2, [r3, #52]	@ 0x34

			TIM17->CCR1 = dutyPumpOilTh[1];
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <tempActions+0x1e4>)
 8000620:	885a      	ldrh	r2, [r3, #2]
 8000622:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <tempActions+0x1e8>)
 8000624:	635a      	str	r2, [r3, #52]	@ 0x34

			if(oilTemp > oilTh[2]){
 8000626:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <tempActions+0x1dc>)
 8000628:	2200      	movs	r2, #0
 800062a:	5e9b      	ldrsh	r3, [r3, r2]
 800062c:	001a      	movs	r2, r3
 800062e:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <tempActions+0x1e0>)
 8000630:	889b      	ldrh	r3, [r3, #4]
 8000632:	429a      	cmp	r2, r3
 8000634:	dd1c      	ble.n	8000670 <tempActions+0x1a8>
				TIM3->CCR1 = dutyFanEctTh[2];
 8000636:	4b16      	ldr	r3, [pc, #88]	@ (8000690 <tempActions+0x1c8>)
 8000638:	889a      	ldrh	r2, [r3, #4]
 800063a:	4b16      	ldr	r3, [pc, #88]	@ (8000694 <tempActions+0x1cc>)
 800063c:	635a      	str	r2, [r3, #52]	@ 0x34

				TIM17->CCR1 = dutyPumpOilTh[2];
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <tempActions+0x1e4>)
 8000640:	889a      	ldrh	r2, [r3, #4]
 8000642:	4b1b      	ldr	r3, [pc, #108]	@ (80006b0 <tempActions+0x1e8>)
 8000644:	635a      	str	r2, [r3, #52]	@ 0x34

				if(oilTemp > oilTh[3]){
 8000646:	4b17      	ldr	r3, [pc, #92]	@ (80006a4 <tempActions+0x1dc>)
 8000648:	2200      	movs	r2, #0
 800064a:	5e9b      	ldrsh	r3, [r3, r2]
 800064c:	001a      	movs	r2, r3
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <tempActions+0x1e0>)
 8000650:	88db      	ldrh	r3, [r3, #6]
 8000652:	429a      	cmp	r2, r3
 8000654:	dd0c      	ble.n	8000670 <tempActions+0x1a8>
					oilEmergencyFlag = 1;
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <tempActions+0x1ec>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
		if(oilTemp > oilTh[1]){
 800065c:	e008      	b.n	8000670 <tempActions+0x1a8>
				}
			}
		}
	}else{
		TIM3->CCR1 = dutyFanNill;
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <tempActions+0x1d4>)
 8000660:	881a      	ldrh	r2, [r3, #0]
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <tempActions+0x1cc>)
 8000664:	635a      	str	r2, [r3, #52]	@ 0x34

		TIM17->CCR1 = dutyPumpNill;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <tempActions+0x1d8>)
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <tempActions+0x1e8>)
 800066c:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 800066e:	e000      	b.n	8000672 <tempActions+0x1aa>
		if(oilTemp > oilTh[1]){
 8000670:	46c0      	nop			@ (mov r8, r8)
}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	2000048e 	.word	0x2000048e
 800067c:	20000496 	.word	0x20000496
 8000680:	20000000 	.word	0x20000000
 8000684:	20000494 	.word	0x20000494
 8000688:	20000024 	.word	0x20000024
 800068c:	40014400 	.word	0x40014400
 8000690:	2000001c 	.word	0x2000001c
 8000694:	40000400 	.word	0x40000400
 8000698:	20000642 	.word	0x20000642
 800069c:	20000016 	.word	0x20000016
 80006a0:	20000018 	.word	0x20000018
 80006a4:	20000498 	.word	0x20000498
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000034 	.word	0x20000034
 80006b0:	40014800 	.word	0x40014800
 80006b4:	20000643 	.word	0x20000643

080006b8 <sendCan>:
void sendCan(){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	send = 0;
 80006bc:	4b4c      	ldr	r3, [pc, #304]	@ (80007f0 <sendCan+0x138>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]

	TxData_adc[0] = (adc8 >> 8) & 0xFF;
 80006c2:	4b4c      	ldr	r3, [pc, #304]	@ (80007f4 <sendCan+0x13c>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	0a1b      	lsrs	r3, r3, #8
 80006c8:	b29b      	uxth	r3, r3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b4a      	ldr	r3, [pc, #296]	@ (80007f8 <sendCan+0x140>)
 80006ce:	701a      	strb	r2, [r3, #0]
	TxData_adc[1] = adc8 & 0xFF;
 80006d0:	4b48      	ldr	r3, [pc, #288]	@ (80007f4 <sendCan+0x13c>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b48      	ldr	r3, [pc, #288]	@ (80007f8 <sendCan+0x140>)
 80006d8:	705a      	strb	r2, [r3, #1]
	TxData_adc[2] = (adc2 >> 8) & 0xFF;
 80006da:	4b48      	ldr	r3, [pc, #288]	@ (80007fc <sendCan+0x144>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b44      	ldr	r3, [pc, #272]	@ (80007f8 <sendCan+0x140>)
 80006e6:	709a      	strb	r2, [r3, #2]
	TxData_adc[3] = adc2 & 0xFF;
 80006e8:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <sendCan+0x144>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b2da      	uxtb	r2, r3
 80006ee:	4b42      	ldr	r3, [pc, #264]	@ (80007f8 <sendCan+0x140>)
 80006f0:	70da      	strb	r2, [r3, #3]
	TxData_adc[4] = (adc3 >> 8) & 0xFF;
 80006f2:	4b43      	ldr	r3, [pc, #268]	@ (8000800 <sendCan+0x148>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	0a1b      	lsrs	r3, r3, #8
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b3e      	ldr	r3, [pc, #248]	@ (80007f8 <sendCan+0x140>)
 80006fe:	711a      	strb	r2, [r3, #4]
	TxData_adc[5] = adc3 & 0xFF;
 8000700:	4b3f      	ldr	r3, [pc, #252]	@ (8000800 <sendCan+0x148>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b3c      	ldr	r3, [pc, #240]	@ (80007f8 <sendCan+0x140>)
 8000708:	715a      	strb	r2, [r3, #5]
	TxData_adc[6] = (adc4 >> 8) & 0xFF;
 800070a:	4b3e      	ldr	r3, [pc, #248]	@ (8000804 <sendCan+0x14c>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	0a1b      	lsrs	r3, r3, #8
 8000710:	b29b      	uxth	r3, r3
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b38      	ldr	r3, [pc, #224]	@ (80007f8 <sendCan+0x140>)
 8000716:	719a      	strb	r2, [r3, #6]
	TxData_adc[7] = adc4 & 0xFF;
 8000718:	4b3a      	ldr	r3, [pc, #232]	@ (8000804 <sendCan+0x14c>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	b2da      	uxtb	r2, r3
 800071e:	4b36      	ldr	r3, [pc, #216]	@ (80007f8 <sendCan+0x140>)
 8000720:	71da      	strb	r2, [r3, #7]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc, TxData_adc, &TxMailBox);
 8000722:	4b39      	ldr	r3, [pc, #228]	@ (8000808 <sendCan+0x150>)
 8000724:	4a34      	ldr	r2, [pc, #208]	@ (80007f8 <sendCan+0x140>)
 8000726:	4939      	ldr	r1, [pc, #228]	@ (800080c <sendCan+0x154>)
 8000728:	4839      	ldr	r0, [pc, #228]	@ (8000810 <sendCan+0x158>)
 800072a:	f002 fded 	bl	8003308 <HAL_CAN_AddTxMessage>

	TxData_adc1[0] = (adc5 >> 8) & 0xFF;
 800072e:	4b39      	ldr	r3, [pc, #228]	@ (8000814 <sendCan+0x15c>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	0a1b      	lsrs	r3, r3, #8
 8000734:	b29b      	uxth	r3, r3
 8000736:	b2da      	uxtb	r2, r3
 8000738:	4b37      	ldr	r3, [pc, #220]	@ (8000818 <sendCan+0x160>)
 800073a:	701a      	strb	r2, [r3, #0]
	TxData_adc1[1] = adc5 & 0xFF;
 800073c:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <sendCan+0x15c>)
 800073e:	881b      	ldrh	r3, [r3, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4b35      	ldr	r3, [pc, #212]	@ (8000818 <sendCan+0x160>)
 8000744:	705a      	strb	r2, [r3, #1]
	TxData_adc1[2] = (adc1 >> 8) & 0xFF;
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <sendCan+0x164>)
 8000748:	881b      	ldrh	r3, [r3, #0]
 800074a:	0a1b      	lsrs	r3, r3, #8
 800074c:	b29b      	uxth	r3, r3
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <sendCan+0x160>)
 8000752:	709a      	strb	r2, [r3, #2]
	TxData_adc1[3] = adc1 & 0xFF;
 8000754:	4b31      	ldr	r3, [pc, #196]	@ (800081c <sendCan+0x164>)
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b2f      	ldr	r3, [pc, #188]	@ (8000818 <sendCan+0x160>)
 800075c:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc1, TxData_adc1, &TxMailBox);
 800075e:	4b2a      	ldr	r3, [pc, #168]	@ (8000808 <sendCan+0x150>)
 8000760:	4a2d      	ldr	r2, [pc, #180]	@ (8000818 <sendCan+0x160>)
 8000762:	492f      	ldr	r1, [pc, #188]	@ (8000820 <sendCan+0x168>)
 8000764:	482a      	ldr	r0, [pc, #168]	@ (8000810 <sendCan+0x158>)
 8000766:	f002 fdcf 	bl	8003308 <HAL_CAN_AddTxMessage>

	TxData_adc2[0] = (adc6 >> 8) & 0xFF;
 800076a:	4b2e      	ldr	r3, [pc, #184]	@ (8000824 <sendCan+0x16c>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	0a1b      	lsrs	r3, r3, #8
 8000770:	b29b      	uxth	r3, r3
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b2c      	ldr	r3, [pc, #176]	@ (8000828 <sendCan+0x170>)
 8000776:	701a      	strb	r2, [r3, #0]
	TxData_adc2[1] = adc6 & 0xFF;
 8000778:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <sendCan+0x16c>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	b2da      	uxtb	r2, r3
 800077e:	4b2a      	ldr	r3, [pc, #168]	@ (8000828 <sendCan+0x170>)
 8000780:	705a      	strb	r2, [r3, #1]
	TxData_adc2[2] = (adc9 >> 8) & 0xFF;
 8000782:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <sendCan+0x174>)
 8000784:	881b      	ldrh	r3, [r3, #0]
 8000786:	0a1b      	lsrs	r3, r3, #8
 8000788:	b29b      	uxth	r3, r3
 800078a:	b2da      	uxtb	r2, r3
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <sendCan+0x170>)
 800078e:	709a      	strb	r2, [r3, #2]
	TxData_adc2[3] = adc9 & 0xFF;
 8000790:	4b26      	ldr	r3, [pc, #152]	@ (800082c <sendCan+0x174>)
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	b2da      	uxtb	r2, r3
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <sendCan+0x170>)
 8000798:	70da      	strb	r2, [r3, #3]

	HAL_CAN_AddTxMessage(&hcan, &TxHeader_adc2, TxData_adc2, &TxMailBox);
 800079a:	4b1b      	ldr	r3, [pc, #108]	@ (8000808 <sendCan+0x150>)
 800079c:	4a22      	ldr	r2, [pc, #136]	@ (8000828 <sendCan+0x170>)
 800079e:	4924      	ldr	r1, [pc, #144]	@ (8000830 <sendCan+0x178>)
 80007a0:	481b      	ldr	r0, [pc, #108]	@ (8000810 <sendCan+0x158>)
 80007a2:	f002 fdb1 	bl	8003308 <HAL_CAN_AddTxMessage>

	if(fuelPumpEmergencyFlag){
 80007a6:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <sendCan+0x17c>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d002      	beq.n	80007b4 <sendCan+0xfc>
		TxData_emergency[0] = 1;
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <sendCan+0x180>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
	}
	if(ectEmergencyFlag){
 80007b4:	4b21      	ldr	r3, [pc, #132]	@ (800083c <sendCan+0x184>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d002      	beq.n	80007c2 <sendCan+0x10a>
		TxData_emergency[1] = 1;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000838 <sendCan+0x180>)
 80007be:	2201      	movs	r2, #1
 80007c0:	705a      	strb	r2, [r3, #1]
	}
	if(oilEmergencyFlag){
 80007c2:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <sendCan+0x188>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <sendCan+0x118>
		TxData_emergency[2] = 1;
 80007ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000838 <sendCan+0x180>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	709a      	strb	r2, [r3, #2]
	}
	if(battVoltEmergencyFlag){
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <sendCan+0x18c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <sendCan+0x126>
		TxData_emergency[3] = 1;
 80007d8:	4b17      	ldr	r3, [pc, #92]	@ (8000838 <sendCan+0x180>)
 80007da:	2201      	movs	r2, #1
 80007dc:	70da      	strb	r2, [r3, #3]
	}
	HAL_CAN_AddTxMessage(&hcan, &TxHeader_emergency, TxData_emergency, &TxMailBox);
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <sendCan+0x150>)
 80007e0:	4a15      	ldr	r2, [pc, #84]	@ (8000838 <sendCan+0x180>)
 80007e2:	4919      	ldr	r1, [pc, #100]	@ (8000848 <sendCan+0x190>)
 80007e4:	480a      	ldr	r0, [pc, #40]	@ (8000810 <sendCan+0x158>)
 80007e6:	f002 fd8f 	bl	8003308 <HAL_CAN_AddTxMessage>

}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000646 	.word	0x20000646
 80007f4:	20000484 	.word	0x20000484
 80007f8:	2000040c 	.word	0x2000040c
 80007fc:	20000478 	.word	0x20000478
 8000800:	2000047a 	.word	0x2000047a
 8000804:	2000047c 	.word	0x2000047c
 8000808:	20000408 	.word	0x20000408
 800080c:	20000360 	.word	0x20000360
 8000810:	20000108 	.word	0x20000108
 8000814:	2000047e 	.word	0x2000047e
 8000818:	20000414 	.word	0x20000414
 800081c:	20000476 	.word	0x20000476
 8000820:	20000378 	.word	0x20000378
 8000824:	20000480 	.word	0x20000480
 8000828:	20000418 	.word	0x20000418
 800082c:	20000486 	.word	0x20000486
 8000830:	20000390 	.word	0x20000390
 8000834:	20000644 	.word	0x20000644
 8000838:	20000424 	.word	0x20000424
 800083c:	20000642 	.word	0x20000642
 8000840:	20000643 	.word	0x20000643
 8000844:	20000645 	.word	0x20000645
 8000848:	200003f0 	.word	0x200003f0

0800084c <heartbeat>:
void heartbeat(){
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	TxData_heartbeat[0] = 4;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <heartbeat+0x24>)
 8000852:	2204      	movs	r2, #4
 8000854:	701a      	strb	r2, [r3, #0]
	HAL_CAN_AddTxMessage(&hcan, &TxHeader_heartbeat, TxData_heartbeat,&TxMailBox);
 8000856:	4b07      	ldr	r3, [pc, #28]	@ (8000874 <heartbeat+0x28>)
 8000858:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <heartbeat+0x24>)
 800085a:	4907      	ldr	r1, [pc, #28]	@ (8000878 <heartbeat+0x2c>)
 800085c:	4807      	ldr	r0, [pc, #28]	@ (800087c <heartbeat+0x30>)
 800085e:	f002 fd53 	bl	8003308 <HAL_CAN_AddTxMessage>
	heartbeatFlag = 0;
 8000862:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <heartbeat+0x34>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]

}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	2000041c 	.word	0x2000041c
 8000874:	20000408 	.word	0x20000408
 8000878:	200003d8 	.word	0x200003d8
 800087c:	20000108 	.word	0x20000108
 8000880:	20000647 	.word	0x20000647

08000884 <mapeoADC>:
void mapeoADC(){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	adc1 = ((value_adc[0] * (3300 / 4095)) - 330) * (1 /132)*1000; // ALTERNATOR la trasnformacion ya en mv y de momento, resultado en A
 8000888:	4b13      	ldr	r3, [pc, #76]	@ (80008d8 <mapeoADC+0x54>)
 800088a:	2200      	movs	r2, #0
 800088c:	801a      	strh	r2, [r3, #0]
	adc2 = ((value_adc[1] * (3300 / 4095)) - 330) * (1 /264)*1000;; // WPL
 800088e:	4b13      	ldr	r3, [pc, #76]	@ (80008dc <mapeoADC+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	801a      	strh	r2, [r3, #0]
	adc3 = ((value_adc[2] * (3300 / 4095)) - 330) * (1 / 264)*1000;; // WPR
 8000894:	4b12      	ldr	r3, [pc, #72]	@ (80008e0 <mapeoADC+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	801a      	strh	r2, [r3, #0]
	adc4 = ((value_adc[3] * (3300 / 4095)) - 330) * (1 / 264)*1000;; // F1R
 800089a:	4b12      	ldr	r3, [pc, #72]	@ (80008e4 <mapeoADC+0x60>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
	adc5 = ((value_adc[4] * (3300 / 4095)) - 330) * (1 / 264)*1000;; // F2R
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <mapeoADC+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	801a      	strh	r2, [r3, #0]
	adc6 = ((value_adc[5] * (3300 / 4095)) - 260) * (1 / 264)*1000;; // F1L
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <mapeoADC+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	801a      	strh	r2, [r3, #0]
	adc7 = ((value_adc[6] * (3300 / 4095)) - 260) * (1 / 264)*1000;; // F2L
 80008ac:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <mapeoADC+0x6c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	801a      	strh	r2, [r3, #0]
	adc8 = ((value_adc[7] * (3300 / 4095)) - 260) * (10 / 88)*1000;; // 12VNP
 80008b2:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <mapeoADC+0x70>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	801a      	strh	r2, [r3, #0]
	adc9 = ((value_adc[8] * (3300 / 4095) - 500) * (1 / 10))*1000;; // calibración del sensor 0.01V/ºC
 80008b8:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <mapeoADC+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	801a      	strh	r2, [r3, #0]
	adc10 = ((adcSpiBuffer[0] * (3303 / 4095)) - 260) * (1 / 264); //Injection
 80008be:	4b0f      	ldr	r3, [pc, #60]	@ (80008fc <mapeoADC+0x78>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	801a      	strh	r2, [r3, #0]
	adc11 = ((adcSpiBuffer[1] * (3300 / 4095)) - 260) * (1 /264)*1000;; // Fuel Pump
 80008c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <mapeoADC+0x7c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
	adc12 = ((adcSpiBuffer[2] * (3300 / 4095)) - 270) * (1 / 264)*1000;; // Ignition
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <mapeoADC+0x80>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	801a      	strh	r2, [r3, #0]
}
 80008d0:	46c0      	nop			@ (mov r8, r8)
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	46c0      	nop			@ (mov r8, r8)
 80008d8:	20000476 	.word	0x20000476
 80008dc:	20000478 	.word	0x20000478
 80008e0:	2000047a 	.word	0x2000047a
 80008e4:	2000047c 	.word	0x2000047c
 80008e8:	2000047e 	.word	0x2000047e
 80008ec:	20000480 	.word	0x20000480
 80008f0:	20000482 	.word	0x20000482
 80008f4:	20000484 	.word	0x20000484
 80008f8:	20000486 	.word	0x20000486
 80008fc:	20000488 	.word	0x20000488
 8000900:	2000048a 	.word	0x2000048a
 8000904:	2000048c 	.word	0x2000048c

08000908 <battControl>:
void battControl(){
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
	battDataFlag = 0;
 800090e:	4b5b      	ldr	r3, [pc, #364]	@ (8000a7c <battControl+0x174>)
 8000910:	2200      	movs	r2, #0
 8000912:	701a      	strb	r2, [r3, #0]
	uint8_t arrayLength = (sizeof(dutyFanEctTh)/sizeof(dutyFanEctTh[0]));
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2203      	movs	r2, #3
 8000918:	701a      	strb	r2, [r3, #0]
	if((battVoltAverage < battTh[2])&&(battVoltFlagDone[0] == 0)){
 800091a:	4b59      	ldr	r3, [pc, #356]	@ (8000a80 <battControl+0x178>)
 800091c:	889a      	ldrh	r2, [r3, #4]
 800091e:	4b59      	ldr	r3, [pc, #356]	@ (8000a84 <battControl+0x17c>)
 8000920:	881b      	ldrh	r3, [r3, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d92d      	bls.n	8000982 <battControl+0x7a>
 8000926:	4b58      	ldr	r3, [pc, #352]	@ (8000a88 <battControl+0x180>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d129      	bne.n	8000982 <battControl+0x7a>
		battVoltFlagDone[0] = 1;
 800092e:	4b56      	ldr	r3, [pc, #344]	@ (8000a88 <battControl+0x180>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
		for(uint8_t i=0; (i<arrayLength); i++){
 8000934:	1dfb      	adds	r3, r7, #7
 8000936:	2200      	movs	r2, #0
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	e01c      	b.n	8000976 <battControl+0x6e>
			dutyFanEctTh[i] = dutyFanEctTh[i]-5;
 800093c:	1dfb      	adds	r3, r7, #7
 800093e:	781a      	ldrb	r2, [r3, #0]
 8000940:	4b52      	ldr	r3, [pc, #328]	@ (8000a8c <battControl+0x184>)
 8000942:	0052      	lsls	r2, r2, #1
 8000944:	5ad3      	ldrh	r3, [r2, r3]
 8000946:	1dfa      	adds	r2, r7, #7
 8000948:	7812      	ldrb	r2, [r2, #0]
 800094a:	3b05      	subs	r3, #5
 800094c:	b299      	uxth	r1, r3
 800094e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a8c <battControl+0x184>)
 8000950:	0052      	lsls	r2, r2, #1
 8000952:	52d1      	strh	r1, [r2, r3]
			dutyFanOilTh[i] = dutyFanOilTh[i]-5;
 8000954:	1dfb      	adds	r3, r7, #7
 8000956:	781a      	ldrb	r2, [r3, #0]
 8000958:	4b4d      	ldr	r3, [pc, #308]	@ (8000a90 <battControl+0x188>)
 800095a:	0052      	lsls	r2, r2, #1
 800095c:	5ad3      	ldrh	r3, [r2, r3]
 800095e:	1dfa      	adds	r2, r7, #7
 8000960:	7812      	ldrb	r2, [r2, #0]
 8000962:	3b05      	subs	r3, #5
 8000964:	b299      	uxth	r1, r3
 8000966:	4b4a      	ldr	r3, [pc, #296]	@ (8000a90 <battControl+0x188>)
 8000968:	0052      	lsls	r2, r2, #1
 800096a:	52d1      	strh	r1, [r2, r3]
		for(uint8_t i=0; (i<arrayLength); i++){
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	781a      	ldrb	r2, [r3, #0]
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	3201      	adds	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
 8000976:	1dfa      	adds	r2, r7, #7
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	7812      	ldrb	r2, [r2, #0]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	429a      	cmp	r2, r3
 8000980:	d3dc      	bcc.n	800093c <battControl+0x34>
		}
	}
	if((battVoltAverage < battTh[1])&&(battVoltFlagDone[1] == 0)){
 8000982:	4b3f      	ldr	r3, [pc, #252]	@ (8000a80 <battControl+0x178>)
 8000984:	885a      	ldrh	r2, [r3, #2]
 8000986:	4b3f      	ldr	r3, [pc, #252]	@ (8000a84 <battControl+0x17c>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	429a      	cmp	r2, r3
 800098c:	d92d      	bls.n	80009ea <battControl+0xe2>
 800098e:	4b3e      	ldr	r3, [pc, #248]	@ (8000a88 <battControl+0x180>)
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d129      	bne.n	80009ea <battControl+0xe2>
		battVoltFlagDone[1] = 1;
 8000996:	4b3c      	ldr	r3, [pc, #240]	@ (8000a88 <battControl+0x180>)
 8000998:	2201      	movs	r2, #1
 800099a:	705a      	strb	r2, [r3, #1]
		for(uint8_t i=0; (i<arrayLength); i++){
 800099c:	1dbb      	adds	r3, r7, #6
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
 80009a2:	e01c      	b.n	80009de <battControl+0xd6>
			dutyFanEctTh[i] = dutyFanEctTh[i]-7;
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	781a      	ldrb	r2, [r3, #0]
 80009a8:	4b38      	ldr	r3, [pc, #224]	@ (8000a8c <battControl+0x184>)
 80009aa:	0052      	lsls	r2, r2, #1
 80009ac:	5ad3      	ldrh	r3, [r2, r3]
 80009ae:	1dba      	adds	r2, r7, #6
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	3b07      	subs	r3, #7
 80009b4:	b299      	uxth	r1, r3
 80009b6:	4b35      	ldr	r3, [pc, #212]	@ (8000a8c <battControl+0x184>)
 80009b8:	0052      	lsls	r2, r2, #1
 80009ba:	52d1      	strh	r1, [r2, r3]
			dutyFanOilTh[i] = dutyFanOilTh[i]-7;
 80009bc:	1dbb      	adds	r3, r7, #6
 80009be:	781a      	ldrb	r2, [r3, #0]
 80009c0:	4b33      	ldr	r3, [pc, #204]	@ (8000a90 <battControl+0x188>)
 80009c2:	0052      	lsls	r2, r2, #1
 80009c4:	5ad3      	ldrh	r3, [r2, r3]
 80009c6:	1dba      	adds	r2, r7, #6
 80009c8:	7812      	ldrb	r2, [r2, #0]
 80009ca:	3b07      	subs	r3, #7
 80009cc:	b299      	uxth	r1, r3
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <battControl+0x188>)
 80009d0:	0052      	lsls	r2, r2, #1
 80009d2:	52d1      	strh	r1, [r2, r3]
		for(uint8_t i=0; (i<arrayLength); i++){
 80009d4:	1dbb      	adds	r3, r7, #6
 80009d6:	781a      	ldrb	r2, [r3, #0]
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	3201      	adds	r2, #1
 80009dc:	701a      	strb	r2, [r3, #0]
 80009de:	1dba      	adds	r2, r7, #6
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	7812      	ldrb	r2, [r2, #0]
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d3dc      	bcc.n	80009a4 <battControl+0x9c>

		}
	}
	if(battVoltAverage < battTh[0]){
 80009ea:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <battControl+0x178>)
 80009ec:	881a      	ldrh	r2, [r3, #0]
 80009ee:	4b25      	ldr	r3, [pc, #148]	@ (8000a84 <battControl+0x17c>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d937      	bls.n	8000a66 <battControl+0x15e>
		V12NpOff();
 80009f6:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <battControl+0x18c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	2104      	movs	r1, #4
 80009fc:	0018      	movs	r0, r3
 80009fe:	f003 fc9d 	bl	800433c <HAL_GPIO_WritePin>
		if(battVoltFlagDone[2] == 0){
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <battControl+0x180>)
 8000a04:	789b      	ldrb	r3, [r3, #2]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d133      	bne.n	8000a72 <battControl+0x16a>
			battVoltFlagDone[2] = 1;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <battControl+0x180>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	709a      	strb	r2, [r3, #2]
			battVoltEmergencyFlag = 1;
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <battControl+0x190>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=0; (i<arrayLength); i++){
 8000a16:	1d7b      	adds	r3, r7, #5
 8000a18:	2200      	movs	r2, #0
 8000a1a:	701a      	strb	r2, [r3, #0]
 8000a1c:	e01c      	b.n	8000a58 <battControl+0x150>
				dutyFanEctTh[i] = dutyFanEctTh[i]-10;
 8000a1e:	1d7b      	adds	r3, r7, #5
 8000a20:	781a      	ldrb	r2, [r3, #0]
 8000a22:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <battControl+0x184>)
 8000a24:	0052      	lsls	r2, r2, #1
 8000a26:	5ad3      	ldrh	r3, [r2, r3]
 8000a28:	1d7a      	adds	r2, r7, #5
 8000a2a:	7812      	ldrb	r2, [r2, #0]
 8000a2c:	3b0a      	subs	r3, #10
 8000a2e:	b299      	uxth	r1, r3
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <battControl+0x184>)
 8000a32:	0052      	lsls	r2, r2, #1
 8000a34:	52d1      	strh	r1, [r2, r3]
				dutyFanOilTh[i] = dutyFanOilTh[i]-10;
 8000a36:	1d7b      	adds	r3, r7, #5
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4b15      	ldr	r3, [pc, #84]	@ (8000a90 <battControl+0x188>)
 8000a3c:	0052      	lsls	r2, r2, #1
 8000a3e:	5ad3      	ldrh	r3, [r2, r3]
 8000a40:	1d7a      	adds	r2, r7, #5
 8000a42:	7812      	ldrb	r2, [r2, #0]
 8000a44:	3b0a      	subs	r3, #10
 8000a46:	b299      	uxth	r1, r3
 8000a48:	4b11      	ldr	r3, [pc, #68]	@ (8000a90 <battControl+0x188>)
 8000a4a:	0052      	lsls	r2, r2, #1
 8000a4c:	52d1      	strh	r1, [r2, r3]
			for(uint8_t i=0; (i<arrayLength); i++){
 8000a4e:	1d7b      	adds	r3, r7, #5
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	1d7b      	adds	r3, r7, #5
 8000a54:	3201      	adds	r2, #1
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	1d7a      	adds	r2, r7, #5
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	7812      	ldrb	r2, [r2, #0]
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3dc      	bcc.n	8000a1e <battControl+0x116>
			}
		}
	}else{
		V12NpOn();
	}
}
 8000a64:	e005      	b.n	8000a72 <battControl+0x16a>
		V12NpOn();
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <battControl+0x18c>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2104      	movs	r1, #4
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f003 fc65 	bl	800433c <HAL_GPIO_WritePin>
}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b002      	add	sp, #8
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	46c0      	nop			@ (mov r8, r8)
 8000a7c:	20000492 	.word	0x20000492
 8000a80:	20000010 	.word	0x20000010
 8000a84:	20000638 	.word	0x20000638
 8000a88:	200004a4 	.word	0x200004a4
 8000a8c:	2000001c 	.word	0x2000001c
 8000a90:	2000002c 	.word	0x2000002c
 8000a94:	48000400 	.word	0x48000400
 8000a98:	20000645 	.word	0x20000645

08000a9c <canResetEcu>:
void canResetEcu(){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, RESET);
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	019b      	lsls	r3, r3, #6
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <canResetEcu+0x3c>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	0019      	movs	r1, r3
 8000aaa:	f003 fc47 	bl	800433c <HAL_GPIO_WritePin>
	if(resetCounter >= 2){
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <canResetEcu+0x40>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d90c      	bls.n	8000ad0 <canResetEcu+0x34>
		canResetEcuFlag = 0;
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <canResetEcu+0x44>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
		resetCounter = 0;
 8000abc:	4b07      	ldr	r3, [pc, #28]	@ (8000adc <canResetEcu+0x40>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 8000ac2:	2380      	movs	r3, #128	@ 0x80
 8000ac4:	019b      	lsls	r3, r3, #6
 8000ac6:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <canResetEcu+0x3c>)
 8000ac8:	2201      	movs	r2, #1
 8000aca:	0019      	movs	r1, r3
 8000acc:	f003 fc36 	bl	800433c <HAL_GPIO_WritePin>
	}

}
 8000ad0:	46c0      	nop			@ (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	48000800 	.word	0x48000800
 8000adc:	20000641 	.word	0x20000641
 8000ae0:	20000640 	.word	0x20000640

08000ae4 <Read_All_ADC_Channels>:
void Read_All_ADC_Channels() {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af02      	add	r7, sp, #8
    uint8_t numChannels = 3;
 8000aea:	1d7b      	adds	r3, r7, #5
 8000aec:	2203      	movs	r2, #3
 8000aee:	701a      	strb	r2, [r3, #0]
    uint16_t dummyRead;  // Variable para la primera lectura incorrecta

    // 1ª vuelta: se configuran los canales pero los datos leídos no son válidos aún
    for (uint8_t i = 0; i < numChannels; i++) {
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	2200      	movs	r2, #0
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	e026      	b.n	8000b46 <Read_All_ADC_Channels+0x62>
        txSpiData = (i & 0x07) << 12;  // Configurar el canal en el mensaje de SPI
 8000af8:	1dfb      	adds	r3, r7, #7
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	031b      	lsls	r3, r3, #12
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	23e0      	movs	r3, #224	@ 0xe0
 8000b04:	01db      	lsls	r3, r3, #7
 8000b06:	4013      	ands	r3, r2
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4b35      	ldr	r3, [pc, #212]	@ (8000be0 <Read_All_ADC_Channels+0xfc>)
 8000b0c:	801a      	strh	r2, [r3, #0]
        CS_LOW();
 8000b0e:	2380      	movs	r3, #128	@ 0x80
 8000b10:	015b      	lsls	r3, r3, #5
 8000b12:	4834      	ldr	r0, [pc, #208]	@ (8000be4 <Read_All_ADC_Channels+0x100>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	0019      	movs	r1, r3
 8000b18:	f003 fc10 	bl	800433c <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&txSpiData, (uint8_t*)&dummyRead, 1, HAL_MAX_DELAY);
 8000b1c:	1cba      	adds	r2, r7, #2
 8000b1e:	4930      	ldr	r1, [pc, #192]	@ (8000be0 <Read_All_ADC_Channels+0xfc>)
 8000b20:	4831      	ldr	r0, [pc, #196]	@ (8000be8 <Read_All_ADC_Channels+0x104>)
 8000b22:	2301      	movs	r3, #1
 8000b24:	425b      	negs	r3, r3
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2301      	movs	r3, #1
 8000b2a:	f004 f9b1 	bl	8004e90 <HAL_SPI_TransmitReceive>
        CS_HIGH();
 8000b2e:	2380      	movs	r3, #128	@ 0x80
 8000b30:	015b      	lsls	r3, r3, #5
 8000b32:	482c      	ldr	r0, [pc, #176]	@ (8000be4 <Read_All_ADC_Channels+0x100>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	0019      	movs	r1, r3
 8000b38:	f003 fc00 	bl	800433c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < numChannels; i++) {
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	781a      	ldrb	r2, [r3, #0]
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	3201      	adds	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	1dfa      	adds	r2, r7, #7
 8000b48:	1d7b      	adds	r3, r7, #5
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3d2      	bcc.n	8000af8 <Read_All_ADC_Channels+0x14>
    }

    HAL_Delay(1);  // Breve pausa para asegurar estabilidad
 8000b52:	2001      	movs	r0, #1
 8000b54:	f001 fc78 	bl	8002448 <HAL_Delay>

    // 2ª vuelta: ahora sí obtenemos los datos correctos
    for (uint8_t i = 0; i < numChannels; i++) {
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e033      	b.n	8000bc8 <Read_All_ADC_Channels+0xe4>
        txSpiData = (i & 0x07) << 12;  // Configurar el canal en el mensaje de SPI
 8000b60:	1dbb      	adds	r3, r7, #6
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	031b      	lsls	r3, r3, #12
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	23e0      	movs	r3, #224	@ 0xe0
 8000b6c:	01db      	lsls	r3, r3, #7
 8000b6e:	4013      	ands	r3, r2
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <Read_All_ADC_Channels+0xfc>)
 8000b74:	801a      	strh	r2, [r3, #0]
        rxSpiData = 0;
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <Read_All_ADC_Channels+0x108>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	801a      	strh	r2, [r3, #0]

        CS_LOW();
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	015b      	lsls	r3, r3, #5
 8000b80:	4818      	ldr	r0, [pc, #96]	@ (8000be4 <Read_All_ADC_Channels+0x100>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	0019      	movs	r1, r3
 8000b86:	f003 fbd9 	bl	800433c <HAL_GPIO_WritePin>
        HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&txSpiData, (uint8_t*)&rxSpiData, 1, HAL_MAX_DELAY);
 8000b8a:	4a18      	ldr	r2, [pc, #96]	@ (8000bec <Read_All_ADC_Channels+0x108>)
 8000b8c:	4914      	ldr	r1, [pc, #80]	@ (8000be0 <Read_All_ADC_Channels+0xfc>)
 8000b8e:	4816      	ldr	r0, [pc, #88]	@ (8000be8 <Read_All_ADC_Channels+0x104>)
 8000b90:	2301      	movs	r3, #1
 8000b92:	425b      	negs	r3, r3
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	2301      	movs	r3, #1
 8000b98:	f004 f97a 	bl	8004e90 <HAL_SPI_TransmitReceive>
        CS_HIGH();
 8000b9c:	2380      	movs	r3, #128	@ 0x80
 8000b9e:	015b      	lsls	r3, r3, #5
 8000ba0:	4810      	ldr	r0, [pc, #64]	@ (8000be4 <Read_All_ADC_Channels+0x100>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	0019      	movs	r1, r3
 8000ba6:	f003 fbc9 	bl	800433c <HAL_GPIO_WritePin>

        adcSpiBuffer[i] = rxSpiData & 0x0FFF;  // Extraer solo los 12 bits de datos del ADC
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <Read_All_ADC_Channels+0x108>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	1dba      	adds	r2, r7, #6
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	051b      	lsls	r3, r3, #20
 8000bb4:	0d1b      	lsrs	r3, r3, #20
 8000bb6:	b299      	uxth	r1, r3
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf0 <Read_All_ADC_Channels+0x10c>)
 8000bba:	0052      	lsls	r2, r2, #1
 8000bbc:	52d1      	strh	r1, [r2, r3]
    for (uint8_t i = 0; i < numChannels; i++) {
 8000bbe:	1dbb      	adds	r3, r7, #6
 8000bc0:	781a      	ldrb	r2, [r3, #0]
 8000bc2:	1dbb      	adds	r3, r7, #6
 8000bc4:	3201      	adds	r2, #1
 8000bc6:	701a      	strb	r2, [r3, #0]
 8000bc8:	1dba      	adds	r2, r7, #6
 8000bca:	1d7b      	adds	r3, r7, #5
 8000bcc:	7812      	ldrb	r2, [r2, #0]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	d3c5      	bcc.n	8000b60 <Read_All_ADC_Channels+0x7c>
    }
}
 8000bd4:	46c0      	nop			@ (mov r8, r8)
 8000bd6:	46c0      	nop			@ (mov r8, r8)
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b002      	add	sp, #8
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	46c0      	nop			@ (mov r8, r8)
 8000be0:	20000472 	.word	0x20000472
 8000be4:	48000400 	.word	0x48000400
 8000be8:	20000130 	.word	0x20000130
 8000bec:	20000474 	.word	0x20000474
 8000bf0:	2000046c 	.word	0x2000046c

08000bf4 <getBufferAverage>:
void currentChecking(){

}
uint16_t getBufferAverage(uint16_t *buffer, uint8_t bufferSize) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	1cfb      	adds	r3, r7, #3
 8000c00:	701a      	strb	r2, [r3, #0]
    uint32_t sum = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]

    for (uint8_t i = 0; i < bufferSize; i++) {
 8000c06:	230b      	movs	r3, #11
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	701a      	strb	r2, [r3, #0]
 8000c0e:	e00f      	b.n	8000c30 <getBufferAverage+0x3c>
        sum += buffer[i];
 8000c10:	210b      	movs	r1, #11
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	687a      	ldr	r2, [r7, #4]
 8000c1a:	18d3      	adds	r3, r2, r3
 8000c1c:	881b      	ldrh	r3, [r3, #0]
 8000c1e:	001a      	movs	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	189b      	adds	r3, r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
    for (uint8_t i = 0; i < bufferSize; i++) {
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	781a      	ldrb	r2, [r3, #0]
 8000c2a:	187b      	adds	r3, r7, r1
 8000c2c:	3201      	adds	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	230b      	movs	r3, #11
 8000c32:	18fa      	adds	r2, r7, r3
 8000c34:	1cfb      	adds	r3, r7, #3
 8000c36:	7812      	ldrb	r2, [r2, #0]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d3e8      	bcc.n	8000c10 <getBufferAverage+0x1c>
    }

    return (sum + (bufferSize / 2)) / bufferSize;  // Redondeo clásico
 8000c3e:	1cfb      	adds	r3, r7, #3
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	085b      	lsrs	r3, r3, #1
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	001a      	movs	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	18d2      	adds	r2, r2, r3
 8000c4c:	1cfb      	adds	r3, r7, #3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	0019      	movs	r1, r3
 8000c52:	0010      	movs	r0, r2
 8000c54:	f7ff fa58 	bl	8000108 <__udivsi3>
 8000c58:	0003      	movs	r3, r0
 8000c5a:	b29b      	uxth	r3, r3
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b004      	add	sp, #16
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <fillBuffer>:
void fillBuffer(uint16_t *buffer, uint16_t bufferSize, uint16_t newValue) {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	0008      	movs	r0, r1
 8000c6e:	0011      	movs	r1, r2
 8000c70:	1cbb      	adds	r3, r7, #2
 8000c72:	1c02      	adds	r2, r0, #0
 8000c74:	801a      	strh	r2, [r3, #0]
 8000c76:	003b      	movs	r3, r7
 8000c78:	1c0a      	adds	r2, r1, #0
 8000c7a:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < bufferSize - 1; i++) {
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e012      	b.n	8000cac <fillBuffer+0x48>
        buffer[i] = buffer[i + 1];  // Mueve los valores a la izquierda
 8000c86:	200f      	movs	r0, #15
 8000c88:	183b      	adds	r3, r7, r0
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	687a      	ldr	r2, [r7, #4]
 8000c92:	18d2      	adds	r2, r2, r3
 8000c94:	183b      	adds	r3, r7, r0
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	6879      	ldr	r1, [r7, #4]
 8000c9c:	18cb      	adds	r3, r1, r3
 8000c9e:	8812      	ldrh	r2, [r2, #0]
 8000ca0:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 0; i < bufferSize - 1; i++) {
 8000ca2:	183b      	adds	r3, r7, r0
 8000ca4:	781a      	ldrb	r2, [r3, #0]
 8000ca6:	183b      	adds	r3, r7, r0
 8000ca8:	3201      	adds	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	781a      	ldrb	r2, [r3, #0]
 8000cb2:	1cbb      	adds	r3, r7, #2
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	dbe4      	blt.n	8000c86 <fillBuffer+0x22>
    }
    buffer[bufferSize - 1] = newValue;  // Inserta el nuevo valor al final
 8000cbc:	1cbb      	adds	r3, r7, #2
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <fillBuffer+0x78>)
 8000cc2:	4694      	mov	ip, r2
 8000cc4:	4463      	add	r3, ip
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	18d3      	adds	r3, r2, r3
 8000ccc:	003a      	movs	r2, r7
 8000cce:	8812      	ldrh	r2, [r2, #0]
 8000cd0:	801a      	strh	r2, [r3, #0]
}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b004      	add	sp, #16
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	7fffffff 	.word	0x7fffffff

08000ce0 <fuelPumpProtection>:
void fuelPumpProtection(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	fillBuffer(fuelPumpCurrentBuffer, 100, adc11);
 8000ce4:	4b21      	ldr	r3, [pc, #132]	@ (8000d6c <fuelPumpProtection+0x8c>)
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <fuelPumpProtection+0x90>)
 8000cea:	2164      	movs	r1, #100	@ 0x64
 8000cec:	0018      	movs	r0, r3
 8000cee:	f7ff ffb9 	bl	8000c64 <fillBuffer>
	fuelPumpCurrentAverage = getBufferAverage(fuelPumpCurrentBuffer, 100);
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <fuelPumpProtection+0x90>)
 8000cf4:	2164      	movs	r1, #100	@ 0x64
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f7ff ff7c 	bl	8000bf4 <getBufferAverage>
 8000cfc:	0003      	movs	r3, r0
 8000cfe:	001a      	movs	r2, r3
 8000d00:	4b1c      	ldr	r3, [pc, #112]	@ (8000d74 <fuelPumpProtection+0x94>)
 8000d02:	801a      	strh	r2, [r3, #0]
	fillBuffer(fuelPressBuffer, 100, fuelPress);
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <fuelPumpProtection+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	5e9b      	ldrsh	r3, [r3, r2]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <fuelPumpProtection+0x9c>)
 8000d0e:	2164      	movs	r1, #100	@ 0x64
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff ffa7 	bl	8000c64 <fillBuffer>
	fuelPressAverage = getBufferAverage(fuelPressBuffer, 100);
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <fuelPumpProtection+0x9c>)
 8000d18:	2164      	movs	r1, #100	@ 0x64
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff ff6a 	bl	8000bf4 <getBufferAverage>
 8000d20:	0003      	movs	r3, r0
 8000d22:	001a      	movs	r2, r3
 8000d24:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <fuelPumpProtection+0xa0>)
 8000d26:	801a      	strh	r2, [r3, #0]
	if((fuelPumpCurrentAverage > 65000)&&(fuelPumpEmergencyFlag == 0)){
 8000d28:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <fuelPumpProtection+0x94>)
 8000d2a:	881b      	ldrh	r3, [r3, #0]
 8000d2c:	4a15      	ldr	r2, [pc, #84]	@ (8000d84 <fuelPumpProtection+0xa4>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d906      	bls.n	8000d40 <fuelPumpProtection+0x60>
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <fuelPumpProtection+0xa8>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d102      	bne.n	8000d40 <fuelPumpProtection+0x60>
		fuelPumpEmergencyFlag = 1;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <fuelPumpProtection+0xa8>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
	}
	if((fuelPressAverage < 200)&&(rpm > 1000)&&(fuelPumpEmergencyFlag == 0)){
 8000d40:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <fuelPumpProtection+0xa0>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	2bc7      	cmp	r3, #199	@ 0xc7
 8000d46:	d80d      	bhi.n	8000d64 <fuelPumpProtection+0x84>
 8000d48:	4b10      	ldr	r3, [pc, #64]	@ (8000d8c <fuelPumpProtection+0xac>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	5e9a      	ldrsh	r2, [r3, r2]
 8000d4e:	23fa      	movs	r3, #250	@ 0xfa
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	429a      	cmp	r2, r3
 8000d54:	dd06      	ble.n	8000d64 <fuelPumpProtection+0x84>
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <fuelPumpProtection+0xa8>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <fuelPumpProtection+0x84>
		fuelPumpEmergencyFlag = 1;
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <fuelPumpProtection+0xa8>)
 8000d60:	2201      	movs	r2, #1
 8000d62:	701a      	strb	r2, [r3, #0]
	}
}
 8000d64:	46c0      	nop			@ (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			@ (mov r8, r8)
 8000d6c:	2000048a 	.word	0x2000048a
 8000d70:	200004a8 	.word	0x200004a8
 8000d74:	2000063a 	.word	0x2000063a
 8000d78:	2000049c 	.word	0x2000049c
 8000d7c:	20000570 	.word	0x20000570
 8000d80:	2000063e 	.word	0x2000063e
 8000d84:	0000fde8 	.word	0x0000fde8
 8000d88:	20000644 	.word	0x20000644
 8000d8c:	200004a0 	.word	0x200004a0

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f001 faf4 	bl	8002380 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f9ea 	bl	8001170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 fe8c 	bl	8001ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da0:	f000 fe6c 	bl	8001a7c <MX_DMA_Init>
  MX_ADC_Init();
 8000da4:	f000 fa32 	bl	800120c <MX_ADC_Init>
  MX_CAN_Init();
 8000da8:	f000 fb00 	bl	80013ac <MX_CAN_Init>
  MX_SPI2_Init();
 8000dac:	f000 fb62 	bl	8001474 <MX_SPI2_Init>
  MX_TIM3_Init();
 8000db0:	f000 fc9e 	bl	80016f0 <MX_TIM3_Init>
  MX_TIM17_Init();
 8000db4:	f000 fddc 	bl	8001970 <MX_TIM17_Init>
  MX_TIM16_Init();
 8000db8:	f000 fd54 	bl	8001864 <MX_TIM16_Init>
  MX_TIM2_Init();
 8000dbc:	f000 fc2c 	bl	8001618 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000dc0:	f000 fb96 	bl	80014f0 <MX_TIM1_Init>
  MX_TIM14_Init();
 8000dc4:	f000 fd00 	bl	80017c8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc, adc_buff, 9); //Inicia el DMA se le pasa el ADC, la variable donde guardar los datos y el numero de canales
 8000dc8:	49c2      	ldr	r1, [pc, #776]	@ (80010d4 <main+0x344>)
 8000dca:	4bc3      	ldr	r3, [pc, #780]	@ (80010d8 <main+0x348>)
 8000dcc:	2209      	movs	r2, #9
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f001 fd10 	bl	80027f4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc); //Se inicia la interrupcion de fin de conversion del ADC en el "Set-up"
 8000dd4:	4bc0      	ldr	r3, [pc, #768]	@ (80010d8 <main+0x348>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f001 fc9a 	bl	8002710 <HAL_ADC_Start_IT>
  HAL_CAN_Start(&hcan);
 8000ddc:	4bbf      	ldr	r3, [pc, #764]	@ (80010dc <main+0x34c>)
 8000dde:	0018      	movs	r0, r3
 8000de0:	f002 fa4c 	bl	800327c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000de4:	4bbd      	ldr	r3, [pc, #756]	@ (80010dc <main+0x34c>)
 8000de6:	2102      	movs	r1, #2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f002 fc8a 	bl	8003702 <HAL_CAN_ActivateNotification>
  HAL_TIM_Base_Start_IT(&htim1);
 8000dee:	4bbc      	ldr	r3, [pc, #752]	@ (80010e0 <main+0x350>)
 8000df0:	0018      	movs	r0, r3
 8000df2:	f004 fbf5 	bl	80055e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8000df6:	4bbb      	ldr	r3, [pc, #748]	@ (80010e4 <main+0x354>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f004 fbf1 	bl	80055e0 <HAL_TIM_Base_Start_IT>
  TIM2->CCR3 = dutyFanNill;
 8000dfe:	4bba      	ldr	r3, [pc, #744]	@ (80010e8 <main+0x358>)
 8000e00:	881a      	ldrh	r2, [r3, #0]
 8000e02:	2380      	movs	r3, #128	@ 0x80
 8000e04:	05db      	lsls	r3, r3, #23
 8000e06:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4 = dutyFanNill;
 8000e08:	4bb7      	ldr	r3, [pc, #732]	@ (80010e8 <main+0x358>)
 8000e0a:	881a      	ldrh	r2, [r3, #0]
 8000e0c:	2380      	movs	r3, #128	@ 0x80
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3->CCR1 = dutyFanNill;
 8000e12:	4bb5      	ldr	r3, [pc, #724]	@ (80010e8 <main+0x358>)
 8000e14:	881a      	ldrh	r2, [r3, #0]
 8000e16:	4bb5      	ldr	r3, [pc, #724]	@ (80010ec <main+0x35c>)
 8000e18:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2 = dutyFanNill;
 8000e1a:	4bb3      	ldr	r3, [pc, #716]	@ (80010e8 <main+0x358>)
 8000e1c:	881a      	ldrh	r2, [r3, #0]
 8000e1e:	4bb3      	ldr	r3, [pc, #716]	@ (80010ec <main+0x35c>)
 8000e20:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM16->CCR1 = dutyPumpNill;
 8000e22:	4bb3      	ldr	r3, [pc, #716]	@ (80010f0 <main+0x360>)
 8000e24:	881a      	ldrh	r2, [r3, #0]
 8000e26:	4bb3      	ldr	r3, [pc, #716]	@ (80010f4 <main+0x364>)
 8000e28:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM17->CCR1 = dutyPumpNill;
 8000e2a:	4bb1      	ldr	r3, [pc, #708]	@ (80010f0 <main+0x360>)
 8000e2c:	881a      	ldrh	r2, [r3, #0]
 8000e2e:	4bb2      	ldr	r3, [pc, #712]	@ (80010f8 <main+0x368>)
 8000e30:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000e32:	4bb2      	ldr	r3, [pc, #712]	@ (80010fc <main+0x36c>)
 8000e34:	2100      	movs	r1, #0
 8000e36:	0018      	movs	r0, r3
 8000e38:	f004 fcbe 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000e3c:	4baf      	ldr	r3, [pc, #700]	@ (80010fc <main+0x36c>)
 8000e3e:	2104      	movs	r1, #4
 8000e40:	0018      	movs	r0, r3
 8000e42:	f004 fcb9 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000e46:	4bae      	ldr	r3, [pc, #696]	@ (8001100 <main+0x370>)
 8000e48:	2108      	movs	r1, #8
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f004 fcb4 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e50:	4bab      	ldr	r3, [pc, #684]	@ (8001100 <main+0x370>)
 8000e52:	210c      	movs	r1, #12
 8000e54:	0018      	movs	r0, r3
 8000e56:	f004 fcaf 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000e5a:	4baa      	ldr	r3, [pc, #680]	@ (8001104 <main+0x374>)
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f004 fcaa 	bl	80057b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000e64:	4ba8      	ldr	r3, [pc, #672]	@ (8001108 <main+0x378>)
 8000e66:	2100      	movs	r1, #0
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f004 fca5 	bl	80057b8 <HAL_TIM_PWM_Start>


	TxHeader_adc.DLC = 8;
 8000e6e:	4ba7      	ldr	r3, [pc, #668]	@ (800110c <main+0x37c>)
 8000e70:	2208      	movs	r2, #8
 8000e72:	611a      	str	r2, [r3, #16]
	TxHeader_adc.ExtId = 0;
 8000e74:	4ba5      	ldr	r3, [pc, #660]	@ (800110c <main+0x37c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
	TxHeader_adc.IDE = CAN_ID_STD;
 8000e7a:	4ba4      	ldr	r3, [pc, #656]	@ (800110c <main+0x37c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
	TxHeader_adc.RTR = CAN_RTR_DATA;
 8000e80:	4ba2      	ldr	r3, [pc, #648]	@ (800110c <main+0x37c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
	TxHeader_adc.StdId = ADC_ID;
 8000e86:	4ba1      	ldr	r3, [pc, #644]	@ (800110c <main+0x37c>)
 8000e88:	4aa1      	ldr	r2, [pc, #644]	@ (8001110 <main+0x380>)
 8000e8a:	601a      	str	r2, [r3, #0]
	TxHeader_adc.TransmitGlobalTime = DISABLE;
 8000e8c:	4b9f      	ldr	r3, [pc, #636]	@ (800110c <main+0x37c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	751a      	strb	r2, [r3, #20]

	TxHeader_adc1.DLC = 4;
 8000e92:	4ba0      	ldr	r3, [pc, #640]	@ (8001114 <main+0x384>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	611a      	str	r2, [r3, #16]
	TxHeader_adc1.ExtId = 0;
 8000e98:	4b9e      	ldr	r3, [pc, #632]	@ (8001114 <main+0x384>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	605a      	str	r2, [r3, #4]
	TxHeader_adc1.IDE = CAN_ID_STD;
 8000e9e:	4b9d      	ldr	r3, [pc, #628]	@ (8001114 <main+0x384>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
	TxHeader_adc1.RTR = CAN_RTR_DATA;
 8000ea4:	4b9b      	ldr	r3, [pc, #620]	@ (8001114 <main+0x384>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
	TxHeader_adc1.StdId = ADC_ID1;
 8000eaa:	4b9a      	ldr	r3, [pc, #616]	@ (8001114 <main+0x384>)
 8000eac:	4a9a      	ldr	r2, [pc, #616]	@ (8001118 <main+0x388>)
 8000eae:	601a      	str	r2, [r3, #0]
	TxHeader_adc1.TransmitGlobalTime = DISABLE;
 8000eb0:	4b98      	ldr	r3, [pc, #608]	@ (8001114 <main+0x384>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	751a      	strb	r2, [r3, #20]

	TxHeader_adc2.DLC = 4;
 8000eb6:	4b99      	ldr	r3, [pc, #612]	@ (800111c <main+0x38c>)
 8000eb8:	2204      	movs	r2, #4
 8000eba:	611a      	str	r2, [r3, #16]
	TxHeader_adc2.ExtId = 0;
 8000ebc:	4b97      	ldr	r3, [pc, #604]	@ (800111c <main+0x38c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
	TxHeader_adc2.IDE = CAN_ID_STD;
 8000ec2:	4b96      	ldr	r3, [pc, #600]	@ (800111c <main+0x38c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
	TxHeader_adc2.RTR = CAN_RTR_DATA;
 8000ec8:	4b94      	ldr	r3, [pc, #592]	@ (800111c <main+0x38c>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	60da      	str	r2, [r3, #12]
	TxHeader_adc2.StdId = ADC_ID2;
 8000ece:	4b93      	ldr	r3, [pc, #588]	@ (800111c <main+0x38c>)
 8000ed0:	4a93      	ldr	r2, [pc, #588]	@ (8001120 <main+0x390>)
 8000ed2:	601a      	str	r2, [r3, #0]
	TxHeader_adc2.TransmitGlobalTime = DISABLE;
 8000ed4:	4b91      	ldr	r3, [pc, #580]	@ (800111c <main+0x38c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	751a      	strb	r2, [r3, #20]

	TxHeader_adc3.DLC = 2; //AQUI ESTABA EL ERROR; ESO ESTABA COMO TxHeader_adc2
 8000eda:	4b92      	ldr	r3, [pc, #584]	@ (8001124 <main+0x394>)
 8000edc:	2202      	movs	r2, #2
 8000ede:	611a      	str	r2, [r3, #16]
	TxHeader_adc3.ExtId = 0;
 8000ee0:	4b90      	ldr	r3, [pc, #576]	@ (8001124 <main+0x394>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	605a      	str	r2, [r3, #4]
	TxHeader_adc3.IDE = CAN_ID_STD;
 8000ee6:	4b8f      	ldr	r3, [pc, #572]	@ (8001124 <main+0x394>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
	TxHeader_adc3.RTR = CAN_RTR_DATA;
 8000eec:	4b8d      	ldr	r3, [pc, #564]	@ (8001124 <main+0x394>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
	TxHeader_adc3.StdId = ADC_ID3;
 8000ef2:	4b8c      	ldr	r3, [pc, #560]	@ (8001124 <main+0x394>)
 8000ef4:	22ed      	movs	r2, #237	@ 0xed
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	601a      	str	r2, [r3, #0]
	TxHeader_adc3.TransmitGlobalTime = DISABLE;
 8000efa:	4b8a      	ldr	r3, [pc, #552]	@ (8001124 <main+0x394>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	751a      	strb	r2, [r3, #20]

	TxHeader_anw.DLC = 2;
 8000f00:	4b89      	ldr	r3, [pc, #548]	@ (8001128 <main+0x398>)
 8000f02:	2202      	movs	r2, #2
 8000f04:	611a      	str	r2, [r3, #16]
	TxHeader_anw.ExtId = 0;
 8000f06:	4b88      	ldr	r3, [pc, #544]	@ (8001128 <main+0x398>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	605a      	str	r2, [r3, #4]
	TxHeader_anw.IDE = CAN_ID_STD;
 8000f0c:	4b86      	ldr	r3, [pc, #536]	@ (8001128 <main+0x398>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
	TxHeader_anw.RTR = CAN_RTR_DATA;
 8000f12:	4b85      	ldr	r3, [pc, #532]	@ (8001128 <main+0x398>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
	TxHeader_anw.StdId = ANW_ID;
 8000f18:	4b83      	ldr	r3, [pc, #524]	@ (8001128 <main+0x398>)
 8000f1a:	4a84      	ldr	r2, [pc, #528]	@ (800112c <main+0x39c>)
 8000f1c:	601a      	str	r2, [r3, #0]
	TxHeader_anw.TransmitGlobalTime = DISABLE;
 8000f1e:	4b82      	ldr	r3, [pc, #520]	@ (8001128 <main+0x398>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	751a      	strb	r2, [r3, #20]

	TxHeader_heartbeat.DLC = 1;
 8000f24:	4b82      	ldr	r3, [pc, #520]	@ (8001130 <main+0x3a0>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	611a      	str	r2, [r3, #16]
	TxHeader_heartbeat.ExtId = 0;
 8000f2a:	4b81      	ldr	r3, [pc, #516]	@ (8001130 <main+0x3a0>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
	TxHeader_heartbeat.IDE = CAN_ID_STD;
 8000f30:	4b7f      	ldr	r3, [pc, #508]	@ (8001130 <main+0x3a0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
	TxHeader_heartbeat.RTR = CAN_RTR_DATA;
 8000f36:	4b7e      	ldr	r3, [pc, #504]	@ (8001130 <main+0x3a0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
	TxHeader_heartbeat.StdId = HEARTBEAT_ID;
 8000f3c:	4b7c      	ldr	r3, [pc, #496]	@ (8001130 <main+0x3a0>)
 8000f3e:	22ec      	movs	r2, #236	@ 0xec
 8000f40:	0092      	lsls	r2, r2, #2
 8000f42:	601a      	str	r2, [r3, #0]
	TxHeader_heartbeat.TransmitGlobalTime = DISABLE;
 8000f44:	4b7a      	ldr	r3, [pc, #488]	@ (8001130 <main+0x3a0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	751a      	strb	r2, [r3, #20]

	TxHeader_emergency.DLC = 8;
 8000f4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001134 <main+0x3a4>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	611a      	str	r2, [r3, #16]
	TxHeader_emergency.ExtId = 0;
 8000f50:	4b78      	ldr	r3, [pc, #480]	@ (8001134 <main+0x3a4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	605a      	str	r2, [r3, #4]
	TxHeader_emergency.IDE = CAN_ID_STD;
 8000f56:	4b77      	ldr	r3, [pc, #476]	@ (8001134 <main+0x3a4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
	TxHeader_emergency.RTR = CAN_RTR_DATA;
 8000f5c:	4b75      	ldr	r3, [pc, #468]	@ (8001134 <main+0x3a4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
	TxHeader_emergency.StdId = EMERGENCY_ID;
 8000f62:	4b74      	ldr	r3, [pc, #464]	@ (8001134 <main+0x3a4>)
 8000f64:	4a74      	ldr	r2, [pc, #464]	@ (8001138 <main+0x3a8>)
 8000f66:	601a      	str	r2, [r3, #0]
	TxHeader_emergency.TransmitGlobalTime = DISABLE;
 8000f68:	4b72      	ldr	r3, [pc, #456]	@ (8001134 <main+0x3a4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	751a      	strb	r2, [r3, #20]

	if (HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING)
 8000f6e:	4b5b      	ldr	r3, [pc, #364]	@ (80010dc <main+0x34c>)
 8000f70:	2102      	movs	r1, #2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f002 fbc5 	bl	8003702 <HAL_CAN_ActivateNotification>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <main+0x1f0>
			!= HAL_OK) {
		Error_Handler();
 8000f7c:	f000 fe76 	bl	8001c6c <Error_Handler>

	}


	translateDuty(dutyFanEctTh, 3);
 8000f80:	4b6e      	ldr	r3, [pc, #440]	@ (800113c <main+0x3ac>)
 8000f82:	2103      	movs	r1, #3
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff f94b 	bl	8000220 <translateDuty>
	translateDuty(dutyFanOilTh, 3);
 8000f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8001140 <main+0x3b0>)
 8000f8c:	2103      	movs	r1, #3
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f7ff f946 	bl	8000220 <translateDuty>
	V12NpOn();
 8000f94:	4b6b      	ldr	r3, [pc, #428]	@ (8001144 <main+0x3b4>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	2104      	movs	r1, #4
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f003 f9ce 	bl	800433c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fa0:	200a      	movs	r0, #10
 8000fa2:	f001 fa51 	bl	8002448 <HAL_Delay>
	HAL_GPIO_WritePin(WPL_Signal_GPIO_Port, WPL_Signal_Pin, SET);
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	0099      	lsls	r1, r3, #2
 8000faa:	2390      	movs	r3, #144	@ 0x90
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	2201      	movs	r2, #1
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	f003 f9c3 	bl	800433c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f001 fa46 	bl	8002448 <HAL_Delay>
	HAL_GPIO_WritePin(F1L_Signal_GPIO_Port, F1L_Signal_Pin, SET);
 8000fbc:	4b61      	ldr	r3, [pc, #388]	@ (8001144 <main+0x3b4>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2180      	movs	r1, #128	@ 0x80
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	f003 f9ba 	bl	800433c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f001 fa3d 	bl	8002448 <HAL_Delay>
	HAL_GPIO_WritePin(F2L_Signal_GPIO_Port, F2L_Signal_Pin, SET);
 8000fce:	4b5d      	ldr	r3, [pc, #372]	@ (8001144 <main+0x3b4>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2140      	movs	r1, #64	@ 0x40
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f003 f9b1 	bl	800433c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f001 fa34 	bl	8002448 <HAL_Delay>
	HAL_GPIO_WritePin(WPR_Signal_GPIO_Port, WPR_Signal_Pin, SET);
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	0059      	lsls	r1, r3, #1
 8000fe4:	2390      	movs	r3, #144	@ 0x90
 8000fe6:	05db      	lsls	r3, r3, #23
 8000fe8:	2201      	movs	r2, #1
 8000fea:	0018      	movs	r0, r3
 8000fec:	f003 f9a6 	bl	800433c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ff0:	200a      	movs	r0, #10
 8000ff2:	f001 fa29 	bl	8002448 <HAL_Delay>
	HAL_GPIO_WritePin(F1R_Signal_GPIO_Port, F1R_Signal_Pin, SET);
 8000ff6:	4b53      	ldr	r3, [pc, #332]	@ (8001144 <main+0x3b4>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2108      	movs	r1, #8
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f003 f99d 	bl	800433c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001002:	200a      	movs	r0, #10
 8001004:	f001 fa20 	bl	8002448 <HAL_Delay>
	HAL_GPIO_WritePin(F2R_Signal_GPIO_Port, F2R_Signal_Pin, SET);
 8001008:	2380      	movs	r3, #128	@ 0x80
 800100a:	0219      	lsls	r1, r3, #8
 800100c:	2390      	movs	r3, #144	@ 0x90
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	2201      	movs	r2, #1
 8001012:	0018      	movs	r0, r3
 8001014:	f003 f992 	bl	800433c <HAL_GPIO_WritePin>
	TIM2->CCR3 = dutyFanNill;
 8001018:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <main+0x358>)
 800101a:	881a      	ldrh	r2, [r3, #0]
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	05db      	lsls	r3, r3, #23
 8001020:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM2->CCR4 = dutyFanNill;
 8001022:	4b31      	ldr	r3, [pc, #196]	@ (80010e8 <main+0x358>)
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	2380      	movs	r3, #128	@ 0x80
 8001028:	05db      	lsls	r3, r3, #23
 800102a:	641a      	str	r2, [r3, #64]	@ 0x40
	TIM16->CCR1 = dutyPumpNill;
 800102c:	4b30      	ldr	r3, [pc, #192]	@ (80010f0 <main+0x360>)
 800102e:	881a      	ldrh	r2, [r3, #0]
 8001030:	4b30      	ldr	r3, [pc, #192]	@ (80010f4 <main+0x364>)
 8001032:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR1 = dutyFanNill;
 8001034:	4b2c      	ldr	r3, [pc, #176]	@ (80010e8 <main+0x358>)
 8001036:	881a      	ldrh	r2, [r3, #0]
 8001038:	4b2c      	ldr	r3, [pc, #176]	@ (80010ec <main+0x35c>)
 800103a:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = dutyFanNill;
 800103c:	4b2a      	ldr	r3, [pc, #168]	@ (80010e8 <main+0x358>)
 800103e:	881a      	ldrh	r2, [r3, #0]
 8001040:	4b2a      	ldr	r3, [pc, #168]	@ (80010ec <main+0x35c>)
 8001042:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM17->CCR1 = dutyPumpNill;
 8001044:	4b2a      	ldr	r3, [pc, #168]	@ (80010f0 <main+0x360>)
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <main+0x368>)
 800104a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  mapeoADC();
 800104c:	f7ff fc1a 	bl	8000884 <mapeoADC>
	  if(tempDataFlag){
 8001050:	4b3d      	ldr	r3, [pc, #244]	@ (8001148 <main+0x3b8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <main+0x2cc>
		  tempActions();
 8001058:	f7ff fa36 	bl	80004c8 <tempActions>
	  }
	  if(send){
 800105c:	4b3b      	ldr	r3, [pc, #236]	@ (800114c <main+0x3bc>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <main+0x2dc>
		  sendCan();
 8001064:	f7ff fb28 	bl	80006b8 <sendCan>
		  Read_All_ADC_Channels();
 8001068:	f7ff fd3c 	bl	8000ae4 <Read_All_ADC_Channels>
	  }
	  if(heartbeatFlag > 5 ){
 800106c:	4b38      	ldr	r3, [pc, #224]	@ (8001150 <main+0x3c0>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b05      	cmp	r3, #5
 8001072:	d901      	bls.n	8001078 <main+0x2e8>
		  heartbeat();
 8001074:	f7ff fbea 	bl	800084c <heartbeat>
	  }
	  if(battDataFlag){
 8001078:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <main+0x3c4>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d013      	beq.n	80010a8 <main+0x318>
		  fillBuffer(battVoltBuffer, 10, battVolt);
 8001080:	4b35      	ldr	r3, [pc, #212]	@ (8001158 <main+0x3c8>)
 8001082:	2200      	movs	r2, #0
 8001084:	5e9b      	ldrsh	r3, [r3, r2]
 8001086:	b29a      	uxth	r2, r3
 8001088:	4b34      	ldr	r3, [pc, #208]	@ (800115c <main+0x3cc>)
 800108a:	210a      	movs	r1, #10
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff fde9 	bl	8000c64 <fillBuffer>
		  battVoltAverage= getBufferAverage(battVoltBuffer, 10);
 8001092:	4b32      	ldr	r3, [pc, #200]	@ (800115c <main+0x3cc>)
 8001094:	210a      	movs	r1, #10
 8001096:	0018      	movs	r0, r3
 8001098:	f7ff fdac 	bl	8000bf4 <getBufferAverage>
 800109c:	0003      	movs	r3, r0
 800109e:	001a      	movs	r2, r3
 80010a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001160 <main+0x3d0>)
 80010a2:	801a      	strh	r2, [r3, #0]
		  battControl();
 80010a4:	f7ff fc30 	bl	8000908 <battControl>
	  }
	  if(canResetEcuFlag){
 80010a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001164 <main+0x3d4>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d002      	beq.n	80010b6 <main+0x326>
		  canResetEcu();
 80010b0:	f7ff fcf4 	bl	8000a9c <canResetEcu>
 80010b4:	e006      	b.n	80010c4 <main+0x334>
	  }else{
		  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, SET);
 80010b6:	2380      	movs	r3, #128	@ 0x80
 80010b8:	019b      	lsls	r3, r3, #6
 80010ba:	482b      	ldr	r0, [pc, #172]	@ (8001168 <main+0x3d8>)
 80010bc:	2201      	movs	r2, #1
 80010be:	0019      	movs	r1, r3
 80010c0:	f003 f93c 	bl	800433c <HAL_GPIO_WritePin>
	  }
	  if(pressDataFlag){
 80010c4:	4b29      	ldr	r3, [pc, #164]	@ (800116c <main+0x3dc>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d0bf      	beq.n	800104c <main+0x2bc>
		  fuelPumpProtection();
 80010cc:	f7ff fe08 	bl	8000ce0 <fuelPumpProtection>
	  mapeoADC();
 80010d0:	e7bc      	b.n	800104c <main+0x2bc>
 80010d2:	46c0      	nop			@ (mov r8, r8)
 80010d4:	20000434 	.word	0x20000434
 80010d8:	20000084 	.word	0x20000084
 80010dc:	20000108 	.word	0x20000108
 80010e0:	20000194 	.word	0x20000194
 80010e4:	2000026c 	.word	0x2000026c
 80010e8:	20000016 	.word	0x20000016
 80010ec:	40000400 	.word	0x40000400
 80010f0:	20000018 	.word	0x20000018
 80010f4:	40014400 	.word	0x40014400
 80010f8:	40014800 	.word	0x40014800
 80010fc:	20000224 	.word	0x20000224
 8001100:	200001dc 	.word	0x200001dc
 8001104:	200002b4 	.word	0x200002b4
 8001108:	200002fc 	.word	0x200002fc
 800110c:	20000360 	.word	0x20000360
 8001110:	000003b1 	.word	0x000003b1
 8001114:	20000378 	.word	0x20000378
 8001118:	000003b2 	.word	0x000003b2
 800111c:	20000390 	.word	0x20000390
 8001120:	000003b3 	.word	0x000003b3
 8001124:	200003a8 	.word	0x200003a8
 8001128:	200003c0 	.word	0x200003c0
 800112c:	000002b1 	.word	0x000002b1
 8001130:	200003d8 	.word	0x200003d8
 8001134:	200003f0 	.word	0x200003f0
 8001138:	000003b5 	.word	0x000003b5
 800113c:	2000001c 	.word	0x2000001c
 8001140:	2000002c 	.word	0x2000002c
 8001144:	48000400 	.word	0x48000400
 8001148:	2000048e 	.word	0x2000048e
 800114c:	20000646 	.word	0x20000646
 8001150:	20000647 	.word	0x20000647
 8001154:	20000492 	.word	0x20000492
 8001158:	2000049e 	.word	0x2000049e
 800115c:	2000003c 	.word	0x2000003c
 8001160:	20000638 	.word	0x20000638
 8001164:	20000640 	.word	0x20000640
 8001168:	48000800 	.word	0x48000800
 800116c:	2000048f 	.word	0x2000048f

08001170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b093      	sub	sp, #76	@ 0x4c
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	2414      	movs	r4, #20
 8001178:	193b      	adds	r3, r7, r4
 800117a:	0018      	movs	r0, r3
 800117c:	2334      	movs	r3, #52	@ 0x34
 800117e:	001a      	movs	r2, r3
 8001180:	2100      	movs	r1, #0
 8001182:	f005 f93f 	bl	8006404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	0018      	movs	r0, r3
 800118a:	2310      	movs	r3, #16
 800118c:	001a      	movs	r2, r3
 800118e:	2100      	movs	r1, #0
 8001190:	f005 f938 	bl	8006404 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001194:	0021      	movs	r1, r4
 8001196:	187b      	adds	r3, r7, r1
 8001198:	2211      	movs	r2, #17
 800119a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800119c:	187b      	adds	r3, r7, r1
 800119e:	2201      	movs	r2, #1
 80011a0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	2201      	movs	r2, #1
 80011a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2210      	movs	r2, #16
 80011ac:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2202      	movs	r2, #2
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2280      	movs	r2, #128	@ 0x80
 80011b8:	0252      	lsls	r2, r2, #9
 80011ba:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80011bc:	187b      	adds	r3, r7, r1
 80011be:	2200      	movs	r2, #0
 80011c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80011c2:	187b      	adds	r3, r7, r1
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	0018      	movs	r0, r3
 80011cc:	f003 f8d4 	bl	8004378 <HAL_RCC_OscConfig>
 80011d0:	1e03      	subs	r3, r0, #0
 80011d2:	d001      	beq.n	80011d8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80011d4:	f000 fd4a 	bl	8001c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d8:	1d3b      	adds	r3, r7, #4
 80011da:	2207      	movs	r2, #7
 80011dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	1d3b      	adds	r3, r7, #4
 80011e0:	2202      	movs	r2, #2
 80011e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2200      	movs	r2, #0
 80011ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011f0:	1d3b      	adds	r3, r7, #4
 80011f2:	2101      	movs	r1, #1
 80011f4:	0018      	movs	r0, r3
 80011f6:	f003 fc45 	bl	8004a84 <HAL_RCC_ClockConfig>
 80011fa:	1e03      	subs	r3, r0, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011fe:	f000 fd35 	bl	8001c6c <Error_Handler>
  }
}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	46bd      	mov	sp, r7
 8001206:	b013      	add	sp, #76	@ 0x4c
 8001208:	bd90      	pop	{r4, r7, pc}
	...

0800120c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	0018      	movs	r0, r3
 8001216:	230c      	movs	r3, #12
 8001218:	001a      	movs	r2, r3
 800121a:	2100      	movs	r1, #0
 800121c:	f005 f8f2 	bl	8006404 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001220:	4b60      	ldr	r3, [pc, #384]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001222:	4a61      	ldr	r2, [pc, #388]	@ (80013a8 <MX_ADC_Init+0x19c>)
 8001224:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001226:	4b5f      	ldr	r3, [pc, #380]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001228:	2200      	movs	r2, #0
 800122a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b5d      	ldr	r3, [pc, #372]	@ (80013a4 <MX_ADC_Init+0x198>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001232:	4b5c      	ldr	r3, [pc, #368]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001238:	4b5a      	ldr	r3, [pc, #360]	@ (80013a4 <MX_ADC_Init+0x198>)
 800123a:	2201      	movs	r2, #1
 800123c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123e:	4b59      	ldr	r3, [pc, #356]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001240:	2204      	movs	r2, #4
 8001242:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001244:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001246:	2200      	movs	r2, #0
 8001248:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800124a:	4b56      	ldr	r3, [pc, #344]	@ (80013a4 <MX_ADC_Init+0x198>)
 800124c:	2200      	movs	r2, #0
 800124e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8001250:	4b54      	ldr	r3, [pc, #336]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001252:	2201      	movs	r2, #1
 8001254:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001256:	4b53      	ldr	r3, [pc, #332]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001258:	2200      	movs	r2, #0
 800125a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800125c:	4b51      	ldr	r3, [pc, #324]	@ (80013a4 <MX_ADC_Init+0x198>)
 800125e:	22c2      	movs	r2, #194	@ 0xc2
 8001260:	32ff      	adds	r2, #255	@ 0xff
 8001262:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001264:	4b4f      	ldr	r3, [pc, #316]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 800126a:	4b4e      	ldr	r3, [pc, #312]	@ (80013a4 <MX_ADC_Init+0x198>)
 800126c:	2224      	movs	r2, #36	@ 0x24
 800126e:	2101      	movs	r1, #1
 8001270:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001272:	4b4c      	ldr	r3, [pc, #304]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001274:	2201      	movs	r2, #1
 8001276:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001278:	4b4a      	ldr	r3, [pc, #296]	@ (80013a4 <MX_ADC_Init+0x198>)
 800127a:	0018      	movs	r0, r3
 800127c:	f001 f908 	bl	8002490 <HAL_ADC_Init>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8001284:	f000 fcf2 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001288:	1d3b      	adds	r3, r7, #4
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2280      	movs	r2, #128	@ 0x80
 8001292:	0152      	lsls	r2, r2, #5
 8001294:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2207      	movs	r2, #7
 800129a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800129c:	1d3a      	adds	r2, r7, #4
 800129e:	4b41      	ldr	r3, [pc, #260]	@ (80013a4 <MX_ADC_Init+0x198>)
 80012a0:	0011      	movs	r1, r2
 80012a2:	0018      	movs	r0, r3
 80012a4:	f001 fbe4 	bl	8002a70 <HAL_ADC_ConfigChannel>
 80012a8:	1e03      	subs	r3, r0, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80012ac:	f000 fcde 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012b0:	1d3b      	adds	r3, r7, #4
 80012b2:	2201      	movs	r2, #1
 80012b4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012b6:	1d3a      	adds	r2, r7, #4
 80012b8:	4b3a      	ldr	r3, [pc, #232]	@ (80013a4 <MX_ADC_Init+0x198>)
 80012ba:	0011      	movs	r1, r2
 80012bc:	0018      	movs	r0, r3
 80012be:	f001 fbd7 	bl	8002a70 <HAL_ADC_ConfigChannel>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80012c6:	f000 fcd1 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	2202      	movs	r2, #2
 80012ce:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012d0:	1d3a      	adds	r2, r7, #4
 80012d2:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <MX_ADC_Init+0x198>)
 80012d4:	0011      	movs	r1, r2
 80012d6:	0018      	movs	r0, r3
 80012d8:	f001 fbca 	bl	8002a70 <HAL_ADC_ConfigChannel>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d001      	beq.n	80012e4 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 80012e0:	f000 fcc4 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	2203      	movs	r2, #3
 80012e8:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012ea:	1d3a      	adds	r2, r7, #4
 80012ec:	4b2d      	ldr	r3, [pc, #180]	@ (80013a4 <MX_ADC_Init+0x198>)
 80012ee:	0011      	movs	r1, r2
 80012f0:	0018      	movs	r0, r3
 80012f2:	f001 fbbd 	bl	8002a70 <HAL_ADC_ConfigChannel>
 80012f6:	1e03      	subs	r3, r0, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 80012fa:	f000 fcb7 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2204      	movs	r2, #4
 8001302:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001304:	1d3a      	adds	r2, r7, #4
 8001306:	4b27      	ldr	r3, [pc, #156]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001308:	0011      	movs	r1, r2
 800130a:	0018      	movs	r0, r3
 800130c:	f001 fbb0 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8001310:	1e03      	subs	r3, r0, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8001314:	f000 fcaa 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2205      	movs	r2, #5
 800131c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800131e:	1d3a      	adds	r2, r7, #4
 8001320:	4b20      	ldr	r3, [pc, #128]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001322:	0011      	movs	r1, r2
 8001324:	0018      	movs	r0, r3
 8001326:	f001 fba3 	bl	8002a70 <HAL_ADC_ConfigChannel>
 800132a:	1e03      	subs	r3, r0, #0
 800132c:	d001      	beq.n	8001332 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800132e:	f000 fc9d 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2206      	movs	r2, #6
 8001336:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001338:	1d3a      	adds	r2, r7, #4
 800133a:	4b1a      	ldr	r3, [pc, #104]	@ (80013a4 <MX_ADC_Init+0x198>)
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f001 fb96 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8001344:	1e03      	subs	r3, r0, #0
 8001346:	d001      	beq.n	800134c <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8001348:	f000 fc90 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2207      	movs	r2, #7
 8001350:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001352:	1d3a      	adds	r2, r7, #4
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001356:	0011      	movs	r1, r2
 8001358:	0018      	movs	r0, r3
 800135a:	f001 fb89 	bl	8002a70 <HAL_ADC_ConfigChannel>
 800135e:	1e03      	subs	r3, r0, #0
 8001360:	d001      	beq.n	8001366 <MX_ADC_Init+0x15a>
  {
    Error_Handler();
 8001362:	f000 fc83 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	2208      	movs	r2, #8
 800136a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800136c:	1d3a      	adds	r2, r7, #4
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <MX_ADC_Init+0x198>)
 8001370:	0011      	movs	r1, r2
 8001372:	0018      	movs	r0, r3
 8001374:	f001 fb7c 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8001378:	1e03      	subs	r3, r0, #0
 800137a:	d001      	beq.n	8001380 <MX_ADC_Init+0x174>
  {
    Error_Handler();
 800137c:	f000 fc76 	bl	8001c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2209      	movs	r2, #9
 8001384:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001386:	1d3a      	adds	r2, r7, #4
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_ADC_Init+0x198>)
 800138a:	0011      	movs	r1, r2
 800138c:	0018      	movs	r0, r3
 800138e:	f001 fb6f 	bl	8002a70 <HAL_ADC_ConfigChannel>
 8001392:	1e03      	subs	r3, r0, #0
 8001394:	d001      	beq.n	800139a <MX_ADC_Init+0x18e>
  {
    Error_Handler();
 8001396:	f000 fc69 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	20000084 	.word	0x20000084
 80013a8:	40012400 	.word	0x40012400

080013ac <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	@ 0x28
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80013b2:	4b2e      	ldr	r3, [pc, #184]	@ (800146c <MX_CAN_Init+0xc0>)
 80013b4:	4a2e      	ldr	r2, [pc, #184]	@ (8001470 <MX_CAN_Init+0xc4>)
 80013b6:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 3;
 80013b8:	4b2c      	ldr	r3, [pc, #176]	@ (800146c <MX_CAN_Init+0xc0>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80013be:	4b2b      	ldr	r3, [pc, #172]	@ (800146c <MX_CAN_Init+0xc0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <MX_CAN_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 80013ca:	4b28      	ldr	r3, [pc, #160]	@ (800146c <MX_CAN_Init+0xc0>)
 80013cc:	22c0      	movs	r2, #192	@ 0xc0
 80013ce:	0312      	lsls	r2, r2, #12
 80013d0:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <MX_CAN_Init+0xc0>)
 80013d4:	2280      	movs	r2, #128	@ 0x80
 80013d6:	0352      	lsls	r2, r2, #13
 80013d8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80013da:	4b24      	ldr	r3, [pc, #144]	@ (800146c <MX_CAN_Init+0xc0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80013e0:	4b22      	ldr	r3, [pc, #136]	@ (800146c <MX_CAN_Init+0xc0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80013e6:	4b21      	ldr	r3, [pc, #132]	@ (800146c <MX_CAN_Init+0xc0>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80013ec:	4b1f      	ldr	r3, [pc, #124]	@ (800146c <MX_CAN_Init+0xc0>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <MX_CAN_Init+0xc0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80013f8:	4b1c      	ldr	r3, [pc, #112]	@ (800146c <MX_CAN_Init+0xc0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80013fe:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <MX_CAN_Init+0xc0>)
 8001400:	0018      	movs	r0, r3
 8001402:	f001 fd4b 	bl	8002e9c <HAL_CAN_Init>
 8001406:	1e03      	subs	r3, r0, #0
 8001408:	d001      	beq.n	800140e <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800140a:	f000 fc2f 	bl	8001c6c <Error_Handler>
//	canfilterconfig.FilterMode = CAN_FILTERMODE_IDLIST;
//	canfilterconfig.FilterScale = CAN_FILTERSCALE_16BIT;
//	canfilterconfig.FilterIdHigh = 0x1B1 << 5;
//	canfilterconfig.FilterIdLow = 0x3A1 << 5;
//	canfilterconfig.SlaveStartFilterBank = 0;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800140e:	003b      	movs	r3, r7
 8001410:	2201      	movs	r2, #1
 8001412:	621a      	str	r2, [r3, #32]
	canfilterconfig.FilterBank = 10;
 8001414:	003b      	movs	r3, r7
 8001416:	220a      	movs	r2, #10
 8001418:	615a      	str	r2, [r3, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800141a:	003b      	movs	r3, r7
 800141c:	2200      	movs	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;  // Modo enmascarado
 8001420:	003b      	movs	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT; // Filtro de 32 bits
 8001426:	003b      	movs	r3, r7
 8001428:	2201      	movs	r2, #1
 800142a:	61da      	str	r2, [r3, #28]

	// Aceptar todos los IDs: ID = 0x00000000, Máscara = 0x00000000
	canfilterconfig.FilterIdHigh = 0x0000;
 800142c:	003b      	movs	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8001432:	003b      	movs	r3, r7
 8001434:	2200      	movs	r2, #0
 8001436:	605a      	str	r2, [r3, #4]
	canfilterconfig.FilterMaskIdHigh = 0x0000;
 8001438:	003b      	movs	r3, r7
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 800143e:	003b      	movs	r3, r7
 8001440:	2200      	movs	r2, #0
 8001442:	60da      	str	r2, [r3, #12]

	canfilterconfig.SlaveStartFilterBank = 0;
 8001444:	003b      	movs	r3, r7
 8001446:	2200      	movs	r2, #0
 8001448:	625a      	str	r2, [r3, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800144a:	003a      	movs	r2, r7
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <MX_CAN_Init+0xc0>)
 800144e:	0011      	movs	r1, r2
 8001450:	0018      	movs	r0, r3
 8001452:	f001 fe21 	bl	8003098 <HAL_CAN_ConfigFilter>
	HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8001456:	003a      	movs	r2, r7
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <MX_CAN_Init+0xc0>)
 800145a:	0011      	movs	r1, r2
 800145c:	0018      	movs	r0, r3
 800145e:	f001 fe1b 	bl	8003098 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN_Init 2 */

}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b00a      	add	sp, #40	@ 0x28
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	20000108 	.word	0x20000108
 8001470:	40006400 	.word	0x40006400

08001474 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001478:	4b1b      	ldr	r3, [pc, #108]	@ (80014e8 <MX_SPI2_Init+0x74>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	@ (80014ec <MX_SPI2_Init+0x78>)
 800147c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <MX_SPI2_Init+0x74>)
 8001480:	2282      	movs	r2, #130	@ 0x82
 8001482:	0052      	lsls	r2, r2, #1
 8001484:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <MX_SPI2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <MX_SPI2_Init+0x74>)
 800148e:	22f0      	movs	r2, #240	@ 0xf0
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001494:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_SPI2_Init+0x74>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800149a:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <MX_SPI2_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014a0:	4b11      	ldr	r3, [pc, #68]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	0092      	lsls	r2, r2, #2
 80014a6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014aa:	2220      	movs	r2, #32
 80014ac:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ae:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014b4:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ba:	4b0b      	ldr	r3, [pc, #44]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014c0:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014c2:	2207      	movs	r2, #7
 80014c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014c6:	4b08      	ldr	r3, [pc, #32]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014cc:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014ce:	2208      	movs	r2, #8
 80014d0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014d2:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <MX_SPI2_Init+0x74>)
 80014d4:	0018      	movs	r0, r3
 80014d6:	f003 fc23 	bl	8004d20 <HAL_SPI_Init>
 80014da:	1e03      	subs	r3, r0, #0
 80014dc:	d001      	beq.n	80014e2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014de:	f000 fbc5 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000130 	.word	0x20000130
 80014ec:	40003800 	.word	0x40003800

080014f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b092      	sub	sp, #72	@ 0x48
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f6:	2340      	movs	r3, #64	@ 0x40
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	0018      	movs	r0, r3
 80014fc:	2308      	movs	r3, #8
 80014fe:	001a      	movs	r2, r3
 8001500:	2100      	movs	r1, #0
 8001502:	f004 ff7f 	bl	8006404 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001506:	2324      	movs	r3, #36	@ 0x24
 8001508:	18fb      	adds	r3, r7, r3
 800150a:	0018      	movs	r0, r3
 800150c:	231c      	movs	r3, #28
 800150e:	001a      	movs	r2, r3
 8001510:	2100      	movs	r1, #0
 8001512:	f004 ff77 	bl	8006404 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	0018      	movs	r0, r3
 800151a:	2320      	movs	r3, #32
 800151c:	001a      	movs	r2, r3
 800151e:	2100      	movs	r1, #0
 8001520:	f004 ff70 	bl	8006404 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001524:	4b38      	ldr	r3, [pc, #224]	@ (8001608 <MX_TIM1_Init+0x118>)
 8001526:	4a39      	ldr	r2, [pc, #228]	@ (800160c <MX_TIM1_Init+0x11c>)
 8001528:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 800152a:	4b37      	ldr	r3, [pc, #220]	@ (8001608 <MX_TIM1_Init+0x118>)
 800152c:	4a38      	ldr	r2, [pc, #224]	@ (8001610 <MX_TIM1_Init+0x120>)
 800152e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b35      	ldr	r3, [pc, #212]	@ (8001608 <MX_TIM1_Init+0x118>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 48000;
 8001536:	4b34      	ldr	r3, [pc, #208]	@ (8001608 <MX_TIM1_Init+0x118>)
 8001538:	4a36      	ldr	r2, [pc, #216]	@ (8001614 <MX_TIM1_Init+0x124>)
 800153a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b32      	ldr	r3, [pc, #200]	@ (8001608 <MX_TIM1_Init+0x118>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001542:	4b31      	ldr	r3, [pc, #196]	@ (8001608 <MX_TIM1_Init+0x118>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001548:	4b2f      	ldr	r3, [pc, #188]	@ (8001608 <MX_TIM1_Init+0x118>)
 800154a:	2200      	movs	r2, #0
 800154c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800154e:	4b2e      	ldr	r3, [pc, #184]	@ (8001608 <MX_TIM1_Init+0x118>)
 8001550:	0018      	movs	r0, r3
 8001552:	f004 f891 	bl	8005678 <HAL_TIM_OC_Init>
 8001556:	1e03      	subs	r3, r0, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800155a:	f000 fb87 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800155e:	2140      	movs	r1, #64	@ 0x40
 8001560:	187b      	adds	r3, r7, r1
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001566:	187b      	adds	r3, r7, r1
 8001568:	2200      	movs	r2, #0
 800156a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800156c:	187a      	adds	r2, r7, r1
 800156e:	4b26      	ldr	r3, [pc, #152]	@ (8001608 <MX_TIM1_Init+0x118>)
 8001570:	0011      	movs	r1, r2
 8001572:	0018      	movs	r0, r3
 8001574:	f004 fe80 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8001578:	1e03      	subs	r3, r0, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800157c:	f000 fb76 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001580:	2124      	movs	r1, #36	@ 0x24
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001588:	187b      	adds	r3, r7, r1
 800158a:	2200      	movs	r2, #0
 800158c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800158e:	187b      	adds	r3, r7, r1
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001594:	187b      	adds	r3, r7, r1
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159a:	187b      	adds	r3, r7, r1
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	1879      	adds	r1, r7, r1
 80015ae:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <MX_TIM1_Init+0x118>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f004 fa9a 	bl	8005aec <HAL_TIM_OC_ConfigChannel>
 80015b8:	1e03      	subs	r3, r0, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80015bc:	f000 fb56 	bl	8001c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2280      	movs	r2, #128	@ 0x80
 80015e2:	0192      	lsls	r2, r2, #6
 80015e4:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	2200      	movs	r2, #0
 80015ea:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ec:	1d3a      	adds	r2, r7, #4
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <MX_TIM1_Init+0x118>)
 80015f0:	0011      	movs	r1, r2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f004 fe98 	bl	8006328 <HAL_TIMEx_ConfigBreakDeadTime>
 80015f8:	1e03      	subs	r3, r0, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80015fc:	f000 fb36 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001600:	46c0      	nop			@ (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b012      	add	sp, #72	@ 0x48
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000194 	.word	0x20000194
 800160c:	40012c00 	.word	0x40012c00
 8001610:	000003e7 	.word	0x000003e7
 8001614:	0000bb80 	.word	0x0000bb80

08001618 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	@ 0x28
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161e:	2320      	movs	r3, #32
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	0018      	movs	r0, r3
 8001624:	2308      	movs	r3, #8
 8001626:	001a      	movs	r2, r3
 8001628:	2100      	movs	r1, #0
 800162a:	f004 feeb 	bl	8006404 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	0018      	movs	r0, r3
 8001632:	231c      	movs	r3, #28
 8001634:	001a      	movs	r2, r3
 8001636:	2100      	movs	r1, #0
 8001638:	f004 fee4 	bl	8006404 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800163c:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 800163e:	2280      	movs	r2, #128	@ 0x80
 8001640:	05d2      	lsls	r2, r2, #23
 8001642:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 959;
 8001644:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 8001646:	4a29      	ldr	r2, [pc, #164]	@ (80016ec <MX_TIM2_Init+0xd4>)
 8001648:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001650:	4b25      	ldr	r3, [pc, #148]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 8001652:	22fa      	movs	r2, #250	@ 0xfa
 8001654:	0092      	lsls	r2, r2, #2
 8001656:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001658:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b22      	ldr	r3, [pc, #136]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001664:	4b20      	ldr	r3, [pc, #128]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 8001666:	0018      	movs	r0, r3
 8001668:	f004 f856 	bl	8005718 <HAL_TIM_PWM_Init>
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001670:	f000 fafc 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001674:	2120      	movs	r1, #32
 8001676:	187b      	adds	r3, r7, r1
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	187b      	adds	r3, r7, r1
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001682:	187a      	adds	r2, r7, r1
 8001684:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 8001686:	0011      	movs	r1, r2
 8001688:	0018      	movs	r0, r3
 800168a:	f004 fdf5 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001692:	f000 faeb 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2260      	movs	r2, #96	@ 0x60
 800169a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016ae:	1d39      	adds	r1, r7, #4
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 80016b2:	2208      	movs	r2, #8
 80016b4:	0018      	movs	r0, r3
 80016b6:	f004 fa71 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 80016ba:	1e03      	subs	r3, r0, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80016be:	f000 fad5 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016c2:	1d39      	adds	r1, r7, #4
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	0018      	movs	r0, r3
 80016ca:	f004 fa67 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 80016d2:	f000 facb 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016d6:	4b04      	ldr	r3, [pc, #16]	@ (80016e8 <MX_TIM2_Init+0xd0>)
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 fce1 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b00a      	add	sp, #40	@ 0x28
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			@ (mov r8, r8)
 80016e8:	200001dc 	.word	0x200001dc
 80016ec:	000003bf 	.word	0x000003bf

080016f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08a      	sub	sp, #40	@ 0x28
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016f6:	2320      	movs	r3, #32
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	0018      	movs	r0, r3
 80016fc:	2308      	movs	r3, #8
 80016fe:	001a      	movs	r2, r3
 8001700:	2100      	movs	r1, #0
 8001702:	f004 fe7f 	bl	8006404 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	0018      	movs	r0, r3
 800170a:	231c      	movs	r3, #28
 800170c:	001a      	movs	r2, r3
 800170e:	2100      	movs	r1, #0
 8001710:	f004 fe78 	bl	8006404 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001714:	4b29      	ldr	r3, [pc, #164]	@ (80017bc <MX_TIM3_Init+0xcc>)
 8001716:	4a2a      	ldr	r2, [pc, #168]	@ (80017c0 <MX_TIM3_Init+0xd0>)
 8001718:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 959;
 800171a:	4b28      	ldr	r3, [pc, #160]	@ (80017bc <MX_TIM3_Init+0xcc>)
 800171c:	4a29      	ldr	r2, [pc, #164]	@ (80017c4 <MX_TIM3_Init+0xd4>)
 800171e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b26      	ldr	r3, [pc, #152]	@ (80017bc <MX_TIM3_Init+0xcc>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001726:	4b25      	ldr	r3, [pc, #148]	@ (80017bc <MX_TIM3_Init+0xcc>)
 8001728:	22fa      	movs	r2, #250	@ 0xfa
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172e:	4b23      	ldr	r3, [pc, #140]	@ (80017bc <MX_TIM3_Init+0xcc>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b21      	ldr	r3, [pc, #132]	@ (80017bc <MX_TIM3_Init+0xcc>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800173a:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <MX_TIM3_Init+0xcc>)
 800173c:	0018      	movs	r0, r3
 800173e:	f003 ffeb 	bl	8005718 <HAL_TIM_PWM_Init>
 8001742:	1e03      	subs	r3, r0, #0
 8001744:	d001      	beq.n	800174a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8001746:	f000 fa91 	bl	8001c6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174a:	2120      	movs	r1, #32
 800174c:	187b      	adds	r3, r7, r1
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	187b      	adds	r3, r7, r1
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001758:	187a      	adds	r2, r7, r1
 800175a:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <MX_TIM3_Init+0xcc>)
 800175c:	0011      	movs	r1, r2
 800175e:	0018      	movs	r0, r3
 8001760:	f004 fd8a 	bl	8006278 <HAL_TIMEx_MasterConfigSynchronization>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d001      	beq.n	800176c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001768:	f000 fa80 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	2260      	movs	r2, #96	@ 0x60
 8001770:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001784:	1d39      	adds	r1, r7, #4
 8001786:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <MX_TIM3_Init+0xcc>)
 8001788:	2200      	movs	r2, #0
 800178a:	0018      	movs	r0, r3
 800178c:	f004 fa06 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8001794:	f000 fa6a 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001798:	1d39      	adds	r1, r7, #4
 800179a:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <MX_TIM3_Init+0xcc>)
 800179c:	2204      	movs	r2, #4
 800179e:	0018      	movs	r0, r3
 80017a0:	f004 f9fc 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 80017a4:	1e03      	subs	r3, r0, #0
 80017a6:	d001      	beq.n	80017ac <MX_TIM3_Init+0xbc>
  {
    Error_Handler();
 80017a8:	f000 fa60 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <MX_TIM3_Init+0xcc>)
 80017ae:	0018      	movs	r0, r3
 80017b0:	f000 fc76 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 80017b4:	46c0      	nop			@ (mov r8, r8)
 80017b6:	46bd      	mov	sp, r7
 80017b8:	b00a      	add	sp, #40	@ 0x28
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000224 	.word	0x20000224
 80017c0:	40000400 	.word	0x40000400
 80017c4:	000003bf 	.word	0x000003bf

080017c8 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	0018      	movs	r0, r3
 80017d2:	231c      	movs	r3, #28
 80017d4:	001a      	movs	r2, r3
 80017d6:	2100      	movs	r1, #0
 80017d8:	f004 fe14 	bl	8006404 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80017dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001858 <MX_TIM14_Init+0x90>)
 80017de:	4a1f      	ldr	r2, [pc, #124]	@ (800185c <MX_TIM14_Init+0x94>)
 80017e0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 4000; // ponerlo para 2/4 segundos
 80017e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001858 <MX_TIM14_Init+0x90>)
 80017e4:	22fa      	movs	r2, #250	@ 0xfa
 80017e6:	0112      	lsls	r2, r2, #4
 80017e8:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001858 <MX_TIM14_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 48000;
 80017f0:	4b19      	ldr	r3, [pc, #100]	@ (8001858 <MX_TIM14_Init+0x90>)
 80017f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001860 <MX_TIM14_Init+0x98>)
 80017f4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f6:	4b18      	ldr	r3, [pc, #96]	@ (8001858 <MX_TIM14_Init+0x90>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fc:	4b16      	ldr	r3, [pc, #88]	@ (8001858 <MX_TIM14_Init+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <MX_TIM14_Init+0x90>)
 8001804:	0018      	movs	r0, r3
 8001806:	f003 fe9b 	bl	8005540 <HAL_TIM_Base_Init>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800180e:	f000 fa2d 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim14) != HAL_OK)
 8001812:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_TIM14_Init+0x90>)
 8001814:	0018      	movs	r0, r3
 8001816:	f003 ff2f 	bl	8005678 <HAL_TIM_OC_Init>
 800181a:	1e03      	subs	r3, r0, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM14_Init+0x5a>
  {
    Error_Handler();
 800181e:	f000 fa25 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001834:	1d3b      	adds	r3, r7, #4
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183a:	1d39      	adds	r1, r7, #4
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <MX_TIM14_Init+0x90>)
 800183e:	2200      	movs	r2, #0
 8001840:	0018      	movs	r0, r3
 8001842:	f004 f953 	bl	8005aec <HAL_TIM_OC_ConfigChannel>
 8001846:	1e03      	subs	r3, r0, #0
 8001848:	d001      	beq.n	800184e <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 800184a:	f000 fa0f 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800184e:	46c0      	nop			@ (mov r8, r8)
 8001850:	46bd      	mov	sp, r7
 8001852:	b008      	add	sp, #32
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			@ (mov r8, r8)
 8001858:	2000026c 	.word	0x2000026c
 800185c:	40002000 	.word	0x40002000
 8001860:	0000bb80 	.word	0x0000bb80

08001864 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b090      	sub	sp, #64	@ 0x40
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800186a:	2324      	movs	r3, #36	@ 0x24
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	0018      	movs	r0, r3
 8001870:	231c      	movs	r3, #28
 8001872:	001a      	movs	r2, r3
 8001874:	2100      	movs	r1, #0
 8001876:	f004 fdc5 	bl	8006404 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	0018      	movs	r0, r3
 800187e:	2320      	movs	r3, #32
 8001880:	001a      	movs	r2, r3
 8001882:	2100      	movs	r1, #0
 8001884:	f004 fdbe 	bl	8006404 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001888:	4b36      	ldr	r3, [pc, #216]	@ (8001964 <MX_TIM16_Init+0x100>)
 800188a:	4a37      	ldr	r2, [pc, #220]	@ (8001968 <MX_TIM16_Init+0x104>)
 800188c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3170;
 800188e:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <MX_TIM16_Init+0x100>)
 8001890:	4a36      	ldr	r2, [pc, #216]	@ (800196c <MX_TIM16_Init+0x108>)
 8001892:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001894:	4b33      	ldr	r3, [pc, #204]	@ (8001964 <MX_TIM16_Init+0x100>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800189a:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <MX_TIM16_Init+0x100>)
 800189c:	2264      	movs	r2, #100	@ 0x64
 800189e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b30      	ldr	r3, [pc, #192]	@ (8001964 <MX_TIM16_Init+0x100>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <MX_TIM16_Init+0x100>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001964 <MX_TIM16_Init+0x100>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <MX_TIM16_Init+0x100>)
 80018b4:	0018      	movs	r0, r3
 80018b6:	f003 fe43 	bl	8005540 <HAL_TIM_Base_Init>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80018be:	f000 f9d5 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80018c2:	4b28      	ldr	r3, [pc, #160]	@ (8001964 <MX_TIM16_Init+0x100>)
 80018c4:	0018      	movs	r0, r3
 80018c6:	f003 ff27 	bl	8005718 <HAL_TIM_PWM_Init>
 80018ca:	1e03      	subs	r3, r0, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f000 f9cd 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018d2:	2124      	movs	r1, #36	@ 0x24
 80018d4:	187b      	adds	r3, r7, r1
 80018d6:	2260      	movs	r2, #96	@ 0x60
 80018d8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2200      	movs	r2, #0
 80018f6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2200      	movs	r2, #0
 80018fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018fe:	1879      	adds	r1, r7, r1
 8001900:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <MX_TIM16_Init+0x100>)
 8001902:	2200      	movs	r2, #0
 8001904:	0018      	movs	r0, r3
 8001906:	f004 f949 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 800190a:	1e03      	subs	r3, r0, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800190e:	f000 f9ad 	bl	8001c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	2200      	movs	r2, #0
 800191c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001924:	1d3b      	adds	r3, r7, #4
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800192a:	1d3b      	adds	r3, r7, #4
 800192c:	2200      	movs	r2, #0
 800192e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	0192      	lsls	r2, r2, #6
 8001936:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800193e:	1d3a      	adds	r2, r7, #4
 8001940:	4b08      	ldr	r3, [pc, #32]	@ (8001964 <MX_TIM16_Init+0x100>)
 8001942:	0011      	movs	r1, r2
 8001944:	0018      	movs	r0, r3
 8001946:	f004 fcef 	bl	8006328 <HAL_TIMEx_ConfigBreakDeadTime>
 800194a:	1e03      	subs	r3, r0, #0
 800194c:	d001      	beq.n	8001952 <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 800194e:	f000 f98d 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001952:	4b04      	ldr	r3, [pc, #16]	@ (8001964 <MX_TIM16_Init+0x100>)
 8001954:	0018      	movs	r0, r3
 8001956:	f000 fba3 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b010      	add	sp, #64	@ 0x40
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	200002b4 	.word	0x200002b4
 8001968:	40014400 	.word	0x40014400
 800196c:	00000c62 	.word	0x00000c62

08001970 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b090      	sub	sp, #64	@ 0x40
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001976:	2324      	movs	r3, #36	@ 0x24
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	0018      	movs	r0, r3
 800197c:	231c      	movs	r3, #28
 800197e:	001a      	movs	r2, r3
 8001980:	2100      	movs	r1, #0
 8001982:	f004 fd3f 	bl	8006404 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	0018      	movs	r0, r3
 800198a:	2320      	movs	r3, #32
 800198c:	001a      	movs	r2, r3
 800198e:	2100      	movs	r1, #0
 8001990:	f004 fd38 	bl	8006404 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001994:	4b36      	ldr	r3, [pc, #216]	@ (8001a70 <MX_TIM17_Init+0x100>)
 8001996:	4a37      	ldr	r2, [pc, #220]	@ (8001a74 <MX_TIM17_Init+0x104>)
 8001998:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 3170;
 800199a:	4b35      	ldr	r3, [pc, #212]	@ (8001a70 <MX_TIM17_Init+0x100>)
 800199c:	4a36      	ldr	r2, [pc, #216]	@ (8001a78 <MX_TIM17_Init+0x108>)
 800199e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a0:	4b33      	ldr	r3, [pc, #204]	@ (8001a70 <MX_TIM17_Init+0x100>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 80019a6:	4b32      	ldr	r3, [pc, #200]	@ (8001a70 <MX_TIM17_Init+0x100>)
 80019a8:	2264      	movs	r2, #100	@ 0x64
 80019aa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ac:	4b30      	ldr	r3, [pc, #192]	@ (8001a70 <MX_TIM17_Init+0x100>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80019b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a70 <MX_TIM17_Init+0x100>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <MX_TIM17_Init+0x100>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80019be:	4b2c      	ldr	r3, [pc, #176]	@ (8001a70 <MX_TIM17_Init+0x100>)
 80019c0:	0018      	movs	r0, r3
 80019c2:	f003 fdbd 	bl	8005540 <HAL_TIM_Base_Init>
 80019c6:	1e03      	subs	r3, r0, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80019ca:	f000 f94f 	bl	8001c6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80019ce:	4b28      	ldr	r3, [pc, #160]	@ (8001a70 <MX_TIM17_Init+0x100>)
 80019d0:	0018      	movs	r0, r3
 80019d2:	f003 fea1 	bl	8005718 <HAL_TIM_PWM_Init>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80019da:	f000 f947 	bl	8001c6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019de:	2124      	movs	r1, #36	@ 0x24
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	2260      	movs	r2, #96	@ 0x60
 80019e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80019e6:	187b      	adds	r3, r7, r1
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ec:	187b      	adds	r3, r7, r1
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019f2:	187b      	adds	r3, r7, r1
 80019f4:	2200      	movs	r2, #0
 80019f6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f8:	187b      	adds	r3, r7, r1
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019fe:	187b      	adds	r3, r7, r1
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a04:	187b      	adds	r3, r7, r1
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0a:	1879      	adds	r1, r7, r1
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_TIM17_Init+0x100>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	0018      	movs	r0, r3
 8001a12:	f004 f8c3 	bl	8005b9c <HAL_TIM_PWM_ConfigChannel>
 8001a16:	1e03      	subs	r3, r0, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001a1a:	f000 f927 	bl	8001c6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2200      	movs	r2, #0
 8001a34:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	0192      	lsls	r2, r2, #6
 8001a42:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001a4a:	1d3a      	adds	r2, r7, #4
 8001a4c:	4b08      	ldr	r3, [pc, #32]	@ (8001a70 <MX_TIM17_Init+0x100>)
 8001a4e:	0011      	movs	r1, r2
 8001a50:	0018      	movs	r0, r3
 8001a52:	f004 fc69 	bl	8006328 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a56:	1e03      	subs	r3, r0, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 8001a5a:	f000 f907 	bl	8001c6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001a5e:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <MX_TIM17_Init+0x100>)
 8001a60:	0018      	movs	r0, r3
 8001a62:	f000 fb1d 	bl	80020a0 <HAL_TIM_MspPostInit>

}
 8001a66:	46c0      	nop			@ (mov r8, r8)
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	b010      	add	sp, #64	@ 0x40
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	46c0      	nop			@ (mov r8, r8)
 8001a70:	200002fc 	.word	0x200002fc
 8001a74:	40014800 	.word	0x40014800
 8001a78:	00000c62 	.word	0x00000c62

08001a7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a82:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <MX_DMA_Init+0x38>)
 8001a84:	695a      	ldr	r2, [r3, #20]
 8001a86:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab4 <MX_DMA_Init+0x38>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <MX_DMA_Init+0x38>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4013      	ands	r3, r2
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2009      	movs	r0, #9
 8001aa0:	f002 f91a 	bl	8003cd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001aa4:	2009      	movs	r0, #9
 8001aa6:	f002 f92c 	bl	8003d02 <HAL_NVIC_EnableIRQ>

}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b002      	add	sp, #8
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	40021000 	.word	0x40021000

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b590      	push	{r4, r7, lr}
 8001aba:	b08b      	sub	sp, #44	@ 0x2c
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	2414      	movs	r4, #20
 8001ac0:	193b      	adds	r3, r7, r4
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	2314      	movs	r3, #20
 8001ac6:	001a      	movs	r2, r3
 8001ac8:	2100      	movs	r1, #0
 8001aca:	f004 fc9b 	bl	8006404 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	4b44      	ldr	r3, [pc, #272]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001ad4:	2180      	movs	r1, #128	@ 0x80
 8001ad6:	0309      	lsls	r1, r1, #12
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	615a      	str	r2, [r3, #20]
 8001adc:	4b41      	ldr	r3, [pc, #260]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	2380      	movs	r3, #128	@ 0x80
 8001ae2:	031b      	lsls	r3, r3, #12
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aea:	4b3e      	ldr	r3, [pc, #248]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001aec:	695a      	ldr	r2, [r3, #20]
 8001aee:	4b3d      	ldr	r3, [pc, #244]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001af0:	2180      	movs	r1, #128	@ 0x80
 8001af2:	03c9      	lsls	r1, r1, #15
 8001af4:	430a      	orrs	r2, r1
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	2380      	movs	r3, #128	@ 0x80
 8001afe:	03db      	lsls	r3, r3, #15
 8001b00:	4013      	ands	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	4b36      	ldr	r3, [pc, #216]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001b0c:	2180      	movs	r1, #128	@ 0x80
 8001b0e:	0289      	lsls	r1, r1, #10
 8001b10:	430a      	orrs	r2, r1
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4b33      	ldr	r3, [pc, #204]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001b16:	695a      	ldr	r2, [r3, #20]
 8001b18:	2380      	movs	r3, #128	@ 0x80
 8001b1a:	029b      	lsls	r3, r3, #10
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	4b30      	ldr	r3, [pc, #192]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	4b2f      	ldr	r3, [pc, #188]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001b28:	2180      	movs	r1, #128	@ 0x80
 8001b2a:	02c9      	lsls	r1, r1, #11
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	615a      	str	r2, [r3, #20]
 8001b30:	4b2c      	ldr	r3, [pc, #176]	@ (8001be4 <MX_GPIO_Init+0x12c>)
 8001b32:	695a      	ldr	r2, [r3, #20]
 8001b34:	2380      	movs	r3, #128	@ 0x80
 8001b36:	02db      	lsls	r3, r3, #11
 8001b38:	4013      	ands	r3, r2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Ecu_Signal_GPIO_Port, Ecu_Signal_Pin, GPIO_PIN_RESET);
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	019b      	lsls	r3, r3, #6
 8001b42:	4829      	ldr	r0, [pc, #164]	@ (8001be8 <MX_GPIO_Init+0x130>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	0019      	movs	r1, r3
 8001b48:	f002 fbf8 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, V12_NP_Signal_Pin|CS_PIN_Pin|F1R_Signal_Pin|F2L_Signal_Pin
 8001b4c:	4927      	ldr	r1, [pc, #156]	@ (8001bec <MX_GPIO_Init+0x134>)
 8001b4e:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <MX_GPIO_Init+0x138>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	0018      	movs	r0, r3
 8001b54:	f002 fbf2 	bl	800433c <HAL_GPIO_WritePin>
                          |F1L_Signal_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin, GPIO_PIN_RESET);
 8001b58:	2387      	movs	r3, #135	@ 0x87
 8001b5a:	0219      	lsls	r1, r3, #8
 8001b5c:	2390      	movs	r3, #144	@ 0x90
 8001b5e:	05db      	lsls	r3, r3, #23
 8001b60:	2200      	movs	r2, #0
 8001b62:	0018      	movs	r0, r3
 8001b64:	f002 fbea 	bl	800433c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Ecu_Signal_Pin */
  GPIO_InitStruct.Pin = Ecu_Signal_Pin;
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	2280      	movs	r2, #128	@ 0x80
 8001b6c:	0192      	lsls	r2, r2, #6
 8001b6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b70:	193b      	adds	r3, r7, r4
 8001b72:	2201      	movs	r2, #1
 8001b74:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	193b      	adds	r3, r7, r4
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	193b      	adds	r3, r7, r4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Ecu_Signal_GPIO_Port, &GPIO_InitStruct);
 8001b82:	193b      	adds	r3, r7, r4
 8001b84:	4a18      	ldr	r2, [pc, #96]	@ (8001be8 <MX_GPIO_Init+0x130>)
 8001b86:	0019      	movs	r1, r3
 8001b88:	0010      	movs	r0, r2
 8001b8a:	f002 fa6f 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pins : V12_NP_Signal_Pin CS_PIN_Pin F1R_Signal_Pin F2L_Signal_Pin
                           F1L_Signal_Pin */
  GPIO_InitStruct.Pin = V12_NP_Signal_Pin|CS_PIN_Pin|F1R_Signal_Pin|F2L_Signal_Pin
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	4a16      	ldr	r2, [pc, #88]	@ (8001bec <MX_GPIO_Init+0x134>)
 8001b92:	601a      	str	r2, [r3, #0]
                          |F1L_Signal_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	193b      	adds	r3, r7, r4
 8001b96:	2201      	movs	r2, #1
 8001b98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	193b      	adds	r3, r7, r4
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	193b      	adds	r3, r7, r4
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	193b      	adds	r3, r7, r4
 8001ba8:	4a11      	ldr	r2, [pc, #68]	@ (8001bf0 <MX_GPIO_Init+0x138>)
 8001baa:	0019      	movs	r1, r3
 8001bac:	0010      	movs	r0, r2
 8001bae:	f002 fa5d 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pins : WPR_Signal_Pin WPL_Signal_Pin Reset_Pin F2R_Signal_Pin */
  GPIO_InitStruct.Pin = WPR_Signal_Pin|WPL_Signal_Pin|Reset_Pin|F2R_Signal_Pin;
 8001bb2:	0021      	movs	r1, r4
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2287      	movs	r2, #135	@ 0x87
 8001bb8:	0212      	lsls	r2, r2, #8
 8001bba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbc:	187b      	adds	r3, r7, r1
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bce:	187a      	adds	r2, r7, r1
 8001bd0:	2390      	movs	r3, #144	@ 0x90
 8001bd2:	05db      	lsls	r3, r3, #23
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f002 fa48 	bl	800406c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bdc:	46c0      	nop			@ (mov r8, r8)
 8001bde:	46bd      	mov	sp, r7
 8001be0:	b00b      	add	sp, #44	@ 0x2c
 8001be2:	bd90      	pop	{r4, r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48000800 	.word	0x48000800
 8001bec:	000010cc 	.word	0x000010cc
 8001bf0:	48000400 	.word	0x48000400

08001bf4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d112      	bne.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x38>
		send = 1;
 8001c06:	4b12      	ldr	r3, [pc, #72]	@ (8001c50 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]
		heartbeatFlag = heartbeatFlag+1;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	3301      	adds	r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b0f      	ldr	r3, [pc, #60]	@ (8001c54 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001c16:	701a      	strb	r2, [r3, #0]
		if(canResetEcuFlag == 1){
 8001c18:	4b0f      	ldr	r3, [pc, #60]	@ (8001c58 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x38>
			resetCounter = resetCounter+1;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	b2da      	uxtb	r2, r3
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001c2a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (htim->Instance == TIM14) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0b      	ldr	r2, [pc, #44]	@ (8001c60 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d105      	bne.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x4e>
			pwmStartFlag = 1;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
			escReadyFlag = 1;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
		}
}
 8001c42:	46c0      	nop			@ (mov r8, r8)
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b002      	add	sp, #8
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	20000646 	.word	0x20000646
 8001c54:	20000647 	.word	0x20000647
 8001c58:	20000640 	.word	0x20000640
 8001c5c:	20000641 	.word	0x20000641
 8001c60:	40002000 	.word	0x40002000
 8001c64:	20000493 	.word	0x20000493
 8001c68:	20000494 	.word	0x20000494

08001c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c70:	b672      	cpsid	i
}
 8001c72:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	e7fd      	b.n	8001c74 <Error_Handler+0x8>

08001c78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <HAL_MspInit+0x44>)
 8001c80:	699a      	ldr	r2, [r3, #24]
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <HAL_MspInit+0x44>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	430a      	orrs	r2, r1
 8001c88:	619a      	str	r2, [r3, #24]
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <HAL_MspInit+0x44>)
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	607b      	str	r3, [r7, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <HAL_MspInit+0x44>)
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	4b08      	ldr	r3, [pc, #32]	@ (8001cbc <HAL_MspInit+0x44>)
 8001c9c:	2180      	movs	r1, #128	@ 0x80
 8001c9e:	0549      	lsls	r1, r1, #21
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	61da      	str	r2, [r3, #28]
 8001ca4:	4b05      	ldr	r3, [pc, #20]	@ (8001cbc <HAL_MspInit+0x44>)
 8001ca6:	69da      	ldr	r2, [r3, #28]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	055b      	lsls	r3, r3, #21
 8001cac:	4013      	ands	r3, r2
 8001cae:	603b      	str	r3, [r7, #0]
 8001cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb2:	46c0      	nop			@ (mov r8, r8)
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	b002      	add	sp, #8
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	46c0      	nop			@ (mov r8, r8)
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b08b      	sub	sp, #44	@ 0x2c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	2414      	movs	r4, #20
 8001cca:	193b      	adds	r3, r7, r4
 8001ccc:	0018      	movs	r0, r3
 8001cce:	2314      	movs	r3, #20
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	f004 fb96 	bl	8006404 <memset>
  if(hadc->Instance==ADC1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8001ddc <HAL_ADC_MspInit+0x11c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d178      	bne.n	8001dd4 <HAL_ADC_MspInit+0x114>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001ce4:	699a      	ldr	r2, [r3, #24]
 8001ce6:	4b3e      	ldr	r3, [pc, #248]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0089      	lsls	r1, r1, #2
 8001cec:	430a      	orrs	r2, r1
 8001cee:	619a      	str	r2, [r3, #24]
 8001cf0:	4b3b      	ldr	r3, [pc, #236]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001cf2:	699a      	ldr	r2, [r3, #24]
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	4b38      	ldr	r3, [pc, #224]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	4b37      	ldr	r3, [pc, #220]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001d04:	2180      	movs	r1, #128	@ 0x80
 8001d06:	0289      	lsls	r1, r1, #10
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	615a      	str	r2, [r3, #20]
 8001d0c:	4b34      	ldr	r3, [pc, #208]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	2380      	movs	r3, #128	@ 0x80
 8001d12:	029b      	lsls	r3, r3, #10
 8001d14:	4013      	ands	r3, r2
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	4b30      	ldr	r3, [pc, #192]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001d20:	2180      	movs	r1, #128	@ 0x80
 8001d22:	02c9      	lsls	r1, r1, #11
 8001d24:	430a      	orrs	r2, r1
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	4b2d      	ldr	r3, [pc, #180]	@ (8001de0 <HAL_ADC_MspInit+0x120>)
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	02db      	lsls	r3, r3, #11
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = Altrnator_Sens_Pin|WPL_Sens_Pin|WPR_Sens_Pin|F1R_Sens_Pin
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	22ff      	movs	r2, #255	@ 0xff
 8001d3a:	601a      	str	r2, [r3, #0]
                          |F2R_Sens_Pin|F1L_Sens_Pin|F2L_Sens_Pin|V12_NP_Sens_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	2203      	movs	r2, #3
 8001d40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	193a      	adds	r2, r7, r4
 8001d4a:	2390      	movs	r3, #144	@ 0x90
 8001d4c:	05db      	lsls	r3, r3, #23
 8001d4e:	0011      	movs	r1, r2
 8001d50:	0018      	movs	r0, r3
 8001d52:	f002 f98b 	bl	800406c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V12_P_Sens_Pin|Temp_Sens_Pin;
 8001d56:	193b      	adds	r3, r7, r4
 8001d58:	2203      	movs	r2, #3
 8001d5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d5c:	193b      	adds	r3, r7, r4
 8001d5e:	2203      	movs	r2, #3
 8001d60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	193b      	adds	r3, r7, r4
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	193b      	adds	r3, r7, r4
 8001d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8001de4 <HAL_ADC_MspInit+0x124>)
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	0010      	movs	r0, r2
 8001d70:	f002 f97c 	bl	800406c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001d74:	4b1c      	ldr	r3, [pc, #112]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001d76:	4a1d      	ldr	r2, [pc, #116]	@ (8001dec <HAL_ADC_MspInit+0x12c>)
 8001d78:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d80:	4b19      	ldr	r3, [pc, #100]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001d86:	4b18      	ldr	r3, [pc, #96]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001d88:	2280      	movs	r2, #128	@ 0x80
 8001d8a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d8c:	4b16      	ldr	r3, [pc, #88]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001d8e:	2280      	movs	r2, #128	@ 0x80
 8001d90:	0092      	lsls	r2, r2, #2
 8001d92:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d94:	4b14      	ldr	r3, [pc, #80]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001d9e:	2220      	movs	r2, #32
 8001da0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001daa:	0018      	movs	r0, r3
 8001dac:	f001 ffc6 	bl	8003d3c <HAL_DMA_Init>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001db4:	f7ff ff5a 	bl	8001c6c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a0b      	ldr	r2, [pc, #44]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001dbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <HAL_ADC_MspInit+0x128>)
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	200c      	movs	r0, #12
 8001dca:	f001 ff85 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001dce:	200c      	movs	r0, #12
 8001dd0:	f001 ff97 	bl	8003d02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001dd4:	46c0      	nop			@ (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b00b      	add	sp, #44	@ 0x2c
 8001dda:	bd90      	pop	{r4, r7, pc}
 8001ddc:	40012400 	.word	0x40012400
 8001de0:	40021000 	.word	0x40021000
 8001de4:	48000400 	.word	0x48000400
 8001de8:	200000c4 	.word	0x200000c4
 8001dec:	40020008 	.word	0x40020008

08001df0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b08b      	sub	sp, #44	@ 0x2c
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	2414      	movs	r4, #20
 8001dfa:	193b      	adds	r3, r7, r4
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	2314      	movs	r3, #20
 8001e00:	001a      	movs	r2, r3
 8001e02:	2100      	movs	r1, #0
 8001e04:	f004 fafe 	bl	8006404 <memset>
  if(hcan->Instance==CAN)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a21      	ldr	r2, [pc, #132]	@ (8001e94 <HAL_CAN_MspInit+0xa4>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d13b      	bne.n	8001e8a <HAL_CAN_MspInit+0x9a>
  {
    /* USER CODE BEGIN CAN_MspInit 0 */

    /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e12:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <HAL_CAN_MspInit+0xa8>)
 8001e14:	69da      	ldr	r2, [r3, #28]
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <HAL_CAN_MspInit+0xa8>)
 8001e18:	2180      	movs	r1, #128	@ 0x80
 8001e1a:	0489      	lsls	r1, r1, #18
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	61da      	str	r2, [r3, #28]
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <HAL_CAN_MspInit+0xa8>)
 8001e22:	69da      	ldr	r2, [r3, #28]
 8001e24:	2380      	movs	r3, #128	@ 0x80
 8001e26:	049b      	lsls	r3, r3, #18
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <HAL_CAN_MspInit+0xa8>)
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	4b19      	ldr	r3, [pc, #100]	@ (8001e98 <HAL_CAN_MspInit+0xa8>)
 8001e34:	2180      	movs	r1, #128	@ 0x80
 8001e36:	0289      	lsls	r1, r1, #10
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	615a      	str	r2, [r3, #20]
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <HAL_CAN_MspInit+0xa8>)
 8001e3e:	695a      	ldr	r2, [r3, #20]
 8001e40:	2380      	movs	r3, #128	@ 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	4013      	ands	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001e4a:	193b      	adds	r3, r7, r4
 8001e4c:	22c0      	movs	r2, #192	@ 0xc0
 8001e4e:	0152      	lsls	r2, r2, #5
 8001e50:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	0021      	movs	r1, r4
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	2202      	movs	r2, #2
 8001e58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e60:	187b      	adds	r3, r7, r1
 8001e62:	2203      	movs	r2, #3
 8001e64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8001e66:	187b      	adds	r3, r7, r1
 8001e68:	2204      	movs	r2, #4
 8001e6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	187a      	adds	r2, r7, r1
 8001e6e:	2390      	movs	r3, #144	@ 0x90
 8001e70:	05db      	lsls	r3, r3, #23
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f002 f8f9 	bl	800406c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	201e      	movs	r0, #30
 8001e80:	f001 ff2a 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 8001e84:	201e      	movs	r0, #30
 8001e86:	f001 ff3c 	bl	8003d02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN_MspInit 1 */

  }

}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b00b      	add	sp, #44	@ 0x2c
 8001e90:	bd90      	pop	{r4, r7, pc}
 8001e92:	46c0      	nop			@ (mov r8, r8)
 8001e94:	40006400 	.word	0x40006400
 8001e98:	40021000 	.word	0x40021000

08001e9c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	2414      	movs	r4, #20
 8001ea6:	193b      	adds	r3, r7, r4
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	2314      	movs	r3, #20
 8001eac:	001a      	movs	r2, r3
 8001eae:	2100      	movs	r1, #0
 8001eb0:	f004 faa8 	bl	8006404 <memset>
  if(hspi->Instance==SPI2)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <HAL_SPI_MspInit+0x90>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d132      	bne.n	8001f24 <HAL_SPI_MspInit+0x88>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8001f30 <HAL_SPI_MspInit+0x94>)
 8001ec0:	69da      	ldr	r2, [r3, #28]
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <HAL_SPI_MspInit+0x94>)
 8001ec4:	2180      	movs	r1, #128	@ 0x80
 8001ec6:	01c9      	lsls	r1, r1, #7
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	61da      	str	r2, [r3, #28]
 8001ecc:	4b18      	ldr	r3, [pc, #96]	@ (8001f30 <HAL_SPI_MspInit+0x94>)
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	2380      	movs	r3, #128	@ 0x80
 8001ed2:	01db      	lsls	r3, r3, #7
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eda:	4b15      	ldr	r3, [pc, #84]	@ (8001f30 <HAL_SPI_MspInit+0x94>)
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	4b14      	ldr	r3, [pc, #80]	@ (8001f30 <HAL_SPI_MspInit+0x94>)
 8001ee0:	2180      	movs	r1, #128	@ 0x80
 8001ee2:	02c9      	lsls	r1, r1, #11
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	615a      	str	r2, [r3, #20]
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_SPI_MspInit+0x94>)
 8001eea:	695a      	ldr	r2, [r3, #20]
 8001eec:	2380      	movs	r3, #128	@ 0x80
 8001eee:	02db      	lsls	r3, r3, #11
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001ef6:	193b      	adds	r3, r7, r4
 8001ef8:	22e0      	movs	r2, #224	@ 0xe0
 8001efa:	0212      	lsls	r2, r2, #8
 8001efc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	0021      	movs	r1, r4
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2202      	movs	r2, #2
 8001f04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	187b      	adds	r3, r7, r1
 8001f1a:	4a06      	ldr	r2, [pc, #24]	@ (8001f34 <HAL_SPI_MspInit+0x98>)
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	0010      	movs	r0, r2
 8001f20:	f002 f8a4 	bl	800406c <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b00b      	add	sp, #44	@ 0x2c
 8001f2a:	bd90      	pop	{r4, r7, pc}
 8001f2c:	40003800 	.word	0x40003800
 8001f30:	40021000 	.word	0x40021000
 8001f34:	48000400 	.word	0x48000400

08001f38 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a12      	ldr	r2, [pc, #72]	@ (8001f90 <HAL_TIM_OC_MspInit+0x58>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d11d      	bne.n	8001f86 <HAL_TIM_OC_MspInit+0x4e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4a:	4b12      	ldr	r3, [pc, #72]	@ (8001f94 <HAL_TIM_OC_MspInit+0x5c>)
 8001f4c:	699a      	ldr	r2, [r3, #24]
 8001f4e:	4b11      	ldr	r3, [pc, #68]	@ (8001f94 <HAL_TIM_OC_MspInit+0x5c>)
 8001f50:	2180      	movs	r1, #128	@ 0x80
 8001f52:	0109      	lsls	r1, r1, #4
 8001f54:	430a      	orrs	r2, r1
 8001f56:	619a      	str	r2, [r3, #24]
 8001f58:	4b0e      	ldr	r3, [pc, #56]	@ (8001f94 <HAL_TIM_OC_MspInit+0x5c>)
 8001f5a:	699a      	ldr	r2, [r3, #24]
 8001f5c:	2380      	movs	r3, #128	@ 0x80
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4013      	ands	r3, r2
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2100      	movs	r1, #0
 8001f6a:	200d      	movs	r0, #13
 8001f6c:	f001 feb4 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001f70:	200d      	movs	r0, #13
 8001f72:	f001 fec6 	bl	8003d02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	200e      	movs	r0, #14
 8001f7c:	f001 feac 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f80:	200e      	movs	r0, #14
 8001f82:	f001 febe 	bl	8003d02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001f86:	46c0      	nop			@ (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40021000 	.word	0x40021000

08001f98 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2380      	movs	r3, #128	@ 0x80
 8001fa6:	05db      	lsls	r3, r3, #23
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d10c      	bne.n	8001fc6 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fac:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_TIM_PWM_MspInit+0x58>)
 8001fae:	69da      	ldr	r2, [r3, #28]
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <HAL_TIM_PWM_MspInit+0x58>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	61da      	str	r2, [r3, #28]
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <HAL_TIM_PWM_MspInit+0x58>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fc4:	e010      	b.n	8001fe8 <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <HAL_TIM_PWM_MspInit+0x5c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d10b      	bne.n	8001fe8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fd0:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_TIM_PWM_MspInit+0x58>)
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	4b06      	ldr	r3, [pc, #24]	@ (8001ff0 <HAL_TIM_PWM_MspInit+0x58>)
 8001fd6:	2102      	movs	r1, #2
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	61da      	str	r2, [r3, #28]
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <HAL_TIM_PWM_MspInit+0x58>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
}
 8001fe8:	46c0      	nop			@ (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b004      	add	sp, #16
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40000400 	.word	0x40000400

08001ff8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a22      	ldr	r2, [pc, #136]	@ (8002090 <HAL_TIM_Base_MspInit+0x98>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d116      	bne.n	8002038 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM14_MspInit 0 */

    /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 800200a:	4b22      	ldr	r3, [pc, #136]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 800200c:	69da      	ldr	r2, [r3, #28]
 800200e:	4b21      	ldr	r3, [pc, #132]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 8002010:	2180      	movs	r1, #128	@ 0x80
 8002012:	0049      	lsls	r1, r1, #1
 8002014:	430a      	orrs	r2, r1
 8002016:	61da      	str	r2, [r3, #28]
 8002018:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	4013      	ands	r3, r2
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	2013      	movs	r0, #19
 800202c:	f001 fe54 	bl	8003cd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002030:	2013      	movs	r0, #19
 8002032:	f001 fe66 	bl	8003d02 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM17_MspInit 1 */

    /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002036:	e026      	b.n	8002086 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM16)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a16      	ldr	r2, [pc, #88]	@ (8002098 <HAL_TIM_Base_MspInit+0xa0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10e      	bne.n	8002060 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002042:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 8002044:	699a      	ldr	r2, [r3, #24]
 8002046:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 8002048:	2180      	movs	r1, #128	@ 0x80
 800204a:	0289      	lsls	r1, r1, #10
 800204c:	430a      	orrs	r2, r1
 800204e:	619a      	str	r2, [r3, #24]
 8002050:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	029b      	lsls	r3, r3, #10
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
}
 800205e:	e012      	b.n	8002086 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM17)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	@ (800209c <HAL_TIM_Base_MspInit+0xa4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10d      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800206a:	4b0a      	ldr	r3, [pc, #40]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 800206c:	699a      	ldr	r2, [r3, #24]
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 8002070:	2180      	movs	r1, #128	@ 0x80
 8002072:	02c9      	lsls	r1, r1, #11
 8002074:	430a      	orrs	r2, r1
 8002076:	619a      	str	r2, [r3, #24]
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <HAL_TIM_Base_MspInit+0x9c>)
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	2380      	movs	r3, #128	@ 0x80
 800207e:	02db      	lsls	r3, r3, #11
 8002080:	4013      	ands	r3, r2
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]
}
 8002086:	46c0      	nop			@ (mov r8, r8)
 8002088:	46bd      	mov	sp, r7
 800208a:	b006      	add	sp, #24
 800208c:	bd80      	pop	{r7, pc}
 800208e:	46c0      	nop			@ (mov r8, r8)
 8002090:	40002000 	.word	0x40002000
 8002094:	40021000 	.word	0x40021000
 8002098:	40014400 	.word	0x40014400
 800209c:	40014800 	.word	0x40014800

080020a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b08d      	sub	sp, #52	@ 0x34
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	241c      	movs	r4, #28
 80020aa:	193b      	adds	r3, r7, r4
 80020ac:	0018      	movs	r0, r3
 80020ae:	2314      	movs	r3, #20
 80020b0:	001a      	movs	r2, r3
 80020b2:	2100      	movs	r1, #0
 80020b4:	f004 f9a6 	bl	8006404 <memset>
  if(htim->Instance==TIM2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	@ 0x80
 80020be:	05db      	lsls	r3, r3, #23
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d125      	bne.n	8002110 <HAL_TIM_MspPostInit+0x70>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	4b53      	ldr	r3, [pc, #332]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 80020ca:	2180      	movs	r1, #128	@ 0x80
 80020cc:	02c9      	lsls	r1, r1, #11
 80020ce:	430a      	orrs	r2, r1
 80020d0:	615a      	str	r2, [r3, #20]
 80020d2:	4b51      	ldr	r3, [pc, #324]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	02db      	lsls	r3, r3, #11
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = F1L_pwm_Pin|F2L_pwm_Pin;
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	22c0      	movs	r2, #192	@ 0xc0
 80020e4:	0112      	lsls	r2, r2, #4
 80020e6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	0021      	movs	r1, r4
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2202      	movs	r2, #2
 80020ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	2200      	movs	r2, #0
 80020f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80020fc:	187b      	adds	r3, r7, r1
 80020fe:	2202      	movs	r2, #2
 8002100:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002102:	187b      	adds	r3, r7, r1
 8002104:	4a45      	ldr	r2, [pc, #276]	@ (800221c <HAL_TIM_MspPostInit+0x17c>)
 8002106:	0019      	movs	r1, r3
 8002108:	0010      	movs	r0, r2
 800210a:	f001 ffaf 	bl	800406c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800210e:	e07e      	b.n	800220e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a42      	ldr	r2, [pc, #264]	@ (8002220 <HAL_TIM_MspPostInit+0x180>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d124      	bne.n	8002164 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800211a:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 800211c:	695a      	ldr	r2, [r3, #20]
 800211e:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 8002120:	2180      	movs	r1, #128	@ 0x80
 8002122:	02c9      	lsls	r1, r1, #11
 8002124:	430a      	orrs	r2, r1
 8002126:	615a      	str	r2, [r3, #20]
 8002128:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	02db      	lsls	r3, r3, #11
 8002130:	4013      	ands	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = F1R_pwm_Pin|F2R_pwm_Pin;
 8002136:	211c      	movs	r1, #28
 8002138:	187b      	adds	r3, r7, r1
 800213a:	2230      	movs	r2, #48	@ 0x30
 800213c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213e:	187b      	adds	r3, r7, r1
 8002140:	2202      	movs	r2, #2
 8002142:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	187b      	adds	r3, r7, r1
 8002146:	2200      	movs	r2, #0
 8002148:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214a:	187b      	adds	r3, r7, r1
 800214c:	2200      	movs	r2, #0
 800214e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002150:	187b      	adds	r3, r7, r1
 8002152:	2201      	movs	r2, #1
 8002154:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	187b      	adds	r3, r7, r1
 8002158:	4a30      	ldr	r2, [pc, #192]	@ (800221c <HAL_TIM_MspPostInit+0x17c>)
 800215a:	0019      	movs	r1, r3
 800215c:	0010      	movs	r0, r2
 800215e:	f001 ff85 	bl	800406c <HAL_GPIO_Init>
}
 8002162:	e054      	b.n	800220e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM16)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a2e      	ldr	r2, [pc, #184]	@ (8002224 <HAL_TIM_MspPostInit+0x184>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d125      	bne.n	80021ba <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 8002170:	695a      	ldr	r2, [r3, #20]
 8002172:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	02c9      	lsls	r1, r1, #11
 8002178:	430a      	orrs	r2, r1
 800217a:	615a      	str	r2, [r3, #20]
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 800217e:	695a      	ldr	r2, [r3, #20]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	02db      	lsls	r3, r3, #11
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = WPL_pwm_Pin;
 800218a:	211c      	movs	r1, #28
 800218c:	187b      	adds	r3, r7, r1
 800218e:	2280      	movs	r2, #128	@ 0x80
 8002190:	0052      	lsls	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	187b      	adds	r3, r7, r1
 8002196:	2202      	movs	r2, #2
 8002198:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219a:	187b      	adds	r3, r7, r1
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a0:	187b      	adds	r3, r7, r1
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80021a6:	187b      	adds	r3, r7, r1
 80021a8:	2202      	movs	r2, #2
 80021aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPL_pwm_GPIO_Port, &GPIO_InitStruct);
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <HAL_TIM_MspPostInit+0x17c>)
 80021b0:	0019      	movs	r1, r3
 80021b2:	0010      	movs	r0, r2
 80021b4:	f001 ff5a 	bl	800406c <HAL_GPIO_Init>
}
 80021b8:	e029      	b.n	800220e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM17)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1a      	ldr	r2, [pc, #104]	@ (8002228 <HAL_TIM_MspPostInit+0x188>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d124      	bne.n	800220e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c4:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 80021c6:	695a      	ldr	r2, [r3, #20]
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 80021ca:	2180      	movs	r1, #128	@ 0x80
 80021cc:	02c9      	lsls	r1, r1, #11
 80021ce:	430a      	orrs	r2, r1
 80021d0:	615a      	str	r2, [r3, #20]
 80021d2:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_TIM_MspPostInit+0x178>)
 80021d4:	695a      	ldr	r2, [r3, #20]
 80021d6:	2380      	movs	r3, #128	@ 0x80
 80021d8:	02db      	lsls	r3, r3, #11
 80021da:	4013      	ands	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WPR_pwm_Pin;
 80021e0:	211c      	movs	r1, #28
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	2280      	movs	r2, #128	@ 0x80
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	187b      	adds	r3, r7, r1
 80021ec:	2202      	movs	r2, #2
 80021ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	2200      	movs	r2, #0
 80021fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	2202      	movs	r2, #2
 8002200:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(WPR_pwm_GPIO_Port, &GPIO_InitStruct);
 8002202:	187b      	adds	r3, r7, r1
 8002204:	4a05      	ldr	r2, [pc, #20]	@ (800221c <HAL_TIM_MspPostInit+0x17c>)
 8002206:	0019      	movs	r1, r3
 8002208:	0010      	movs	r0, r2
 800220a:	f001 ff2f 	bl	800406c <HAL_GPIO_Init>
}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b00d      	add	sp, #52	@ 0x34
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	40021000 	.word	0x40021000
 800221c:	48000400 	.word	0x48000400
 8002220:	40000400 	.word	0x40000400
 8002224:	40014400 	.word	0x40014400
 8002228:	40014800 	.word	0x40014800

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002230:	46c0      	nop			@ (mov r8, r8)
 8002232:	e7fd      	b.n	8002230 <NMI_Handler+0x4>

08002234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	e7fd      	b.n	8002238 <HardFault_Handler+0x4>

0800223c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}

08002246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800224a:	46c0      	nop			@ (mov r8, r8)
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002254:	f000 f8dc 	bl	8002410 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002258:	46c0      	nop			@ (mov r8, r8)
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8002264:	4b03      	ldr	r3, [pc, #12]	@ (8002274 <DMA1_Channel1_IRQHandler+0x14>)
 8002266:	0018      	movs	r0, r3
 8002268:	f001 fe16 	bl	8003e98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800226c:	46c0      	nop			@ (mov r8, r8)
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	200000c4 	.word	0x200000c4

08002278 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 800227c:	4b03      	ldr	r3, [pc, #12]	@ (800228c <ADC1_IRQHandler+0x14>)
 800227e:	0018      	movs	r0, r3
 8002280:	f000 fb3a 	bl	80028f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002284:	46c0      	nop			@ (mov r8, r8)
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	20000084 	.word	0x20000084

08002290 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002294:	4b03      	ldr	r3, [pc, #12]	@ (80022a4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002296:	0018      	movs	r0, r3
 8002298:	f003 fb3a 	bl	8005910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 800229c:	46c0      	nop			@ (mov r8, r8)
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	46c0      	nop			@ (mov r8, r8)
 80022a4:	20000194 	.word	0x20000194

080022a8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022ac:	4b03      	ldr	r3, [pc, #12]	@ (80022bc <TIM1_CC_IRQHandler+0x14>)
 80022ae:	0018      	movs	r0, r3
 80022b0:	f003 fb2e 	bl	8005910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80022b4:	46c0      	nop			@ (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	20000194 	.word	0x20000194

080022c0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80022c4:	4b03      	ldr	r3, [pc, #12]	@ (80022d4 <TIM14_IRQHandler+0x14>)
 80022c6:	0018      	movs	r0, r3
 80022c8:	f003 fb22 	bl	8005910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80022cc:	46c0      	nop			@ (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	2000026c 	.word	0x2000026c

080022d8 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN global interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80022dc:	4b03      	ldr	r3, [pc, #12]	@ (80022ec <CEC_CAN_IRQHandler+0x14>)
 80022de:	0018      	movs	r0, r3
 80022e0:	f001 fa39 	bl	8003756 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	20000108 	.word	0x20000108

080022f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80022f4:	46c0      	nop			@ (mov r8, r8)
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80022fc:	4813      	ldr	r0, [pc, #76]	@ (800234c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80022fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002300:	f7ff fff6 	bl	80022f0 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8002304:	4812      	ldr	r0, [pc, #72]	@ (8002350 <LoopForever+0x6>)
    LDR R1, [R0]
 8002306:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8002308:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 800230a:	4a12      	ldr	r2, [pc, #72]	@ (8002354 <LoopForever+0xa>)
    CMP R1, R2
 800230c:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800230e:	d105      	bne.n	800231c <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8002310:	4811      	ldr	r0, [pc, #68]	@ (8002358 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8002312:	4912      	ldr	r1, [pc, #72]	@ (800235c <LoopForever+0x12>)
    STR R1, [R0]
 8002314:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8002316:	4812      	ldr	r0, [pc, #72]	@ (8002360 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002318:	4912      	ldr	r1, [pc, #72]	@ (8002364 <LoopForever+0x1a>)
    STR R1, [R0]
 800231a:	6001      	str	r1, [r0, #0]

0800231c <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800231c:	4812      	ldr	r0, [pc, #72]	@ (8002368 <LoopForever+0x1e>)
  ldr r1, =_edata
 800231e:	4913      	ldr	r1, [pc, #76]	@ (800236c <LoopForever+0x22>)
  ldr r2, =_sidata
 8002320:	4a13      	ldr	r2, [pc, #76]	@ (8002370 <LoopForever+0x26>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a10      	ldr	r2, [pc, #64]	@ (8002374 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002334:	4c10      	ldr	r4, [pc, #64]	@ (8002378 <LoopForever+0x2e>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002342:	f004 f867 	bl	8006414 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002346:	f7fe fd23 	bl	8000d90 <main>

0800234a <LoopForever>:

LoopForever:
    b LoopForever
 800234a:	e7fe      	b.n	800234a <LoopForever>
  ldr   r0, =_estack
 800234c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002350:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8002354:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002358:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800235c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002360:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8002364:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800236c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002370:	080064ac 	.word	0x080064ac
  ldr r2, =_sbss
 8002374:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002378:	2000064c 	.word	0x2000064c

0800237c <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800237c:	e7fe      	b.n	800237c <DMA1_Channel2_3_IRQHandler>
	...

08002380 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002384:	4b07      	ldr	r3, [pc, #28]	@ (80023a4 <HAL_Init+0x24>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_Init+0x24>)
 800238a:	2110      	movs	r1, #16
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002390:	2003      	movs	r0, #3
 8002392:	f000 f809 	bl	80023a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002396:	f7ff fc6f 	bl	8001c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	40022000 	.word	0x40022000

080023a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b0:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_InitTick+0x5c>)
 80023b2:	681c      	ldr	r4, [r3, #0]
 80023b4:	4b14      	ldr	r3, [pc, #80]	@ (8002408 <HAL_InitTick+0x60>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	0019      	movs	r1, r3
 80023ba:	23fa      	movs	r3, #250	@ 0xfa
 80023bc:	0098      	lsls	r0, r3, #2
 80023be:	f7fd fea3 	bl	8000108 <__udivsi3>
 80023c2:	0003      	movs	r3, r0
 80023c4:	0019      	movs	r1, r3
 80023c6:	0020      	movs	r0, r4
 80023c8:	f7fd fe9e 	bl	8000108 <__udivsi3>
 80023cc:	0003      	movs	r3, r0
 80023ce:	0018      	movs	r0, r3
 80023d0:	f001 fca7 	bl	8003d22 <HAL_SYSTICK_Config>
 80023d4:	1e03      	subs	r3, r0, #0
 80023d6:	d001      	beq.n	80023dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e00f      	b.n	80023fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d80b      	bhi.n	80023fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	2301      	movs	r3, #1
 80023e6:	425b      	negs	r3, r3
 80023e8:	2200      	movs	r2, #0
 80023ea:	0018      	movs	r0, r3
 80023ec:	f001 fc74 	bl	8003cd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f0:	4b06      	ldr	r3, [pc, #24]	@ (800240c <HAL_InitTick+0x64>)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b003      	add	sp, #12
 8002402:	bd90      	pop	{r4, r7, pc}
 8002404:	2000005c 	.word	0x2000005c
 8002408:	20000064 	.word	0x20000064
 800240c:	20000060 	.word	0x20000060

08002410 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <HAL_IncTick+0x1c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	001a      	movs	r2, r3
 800241a:	4b05      	ldr	r3, [pc, #20]	@ (8002430 <HAL_IncTick+0x20>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	18d2      	adds	r2, r2, r3
 8002420:	4b03      	ldr	r3, [pc, #12]	@ (8002430 <HAL_IncTick+0x20>)
 8002422:	601a      	str	r2, [r3, #0]
}
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			@ (mov r8, r8)
 800242c:	20000064 	.word	0x20000064
 8002430:	20000648 	.word	0x20000648

08002434 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b02      	ldr	r3, [pc, #8]	@ (8002444 <HAL_GetTick+0x10>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	20000648 	.word	0x20000648

08002448 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff fff0 	bl	8002434 <HAL_GetTick>
 8002454:	0003      	movs	r3, r0
 8002456:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_Delay+0x44>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	001a      	movs	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	189b      	adds	r3, r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800246e:	46c0      	nop			@ (mov r8, r8)
 8002470:	f7ff ffe0 	bl	8002434 <HAL_GetTick>
 8002474:	0002      	movs	r2, r0
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	429a      	cmp	r2, r3
 800247e:	d8f7      	bhi.n	8002470 <HAL_Delay+0x28>
  {
  }
}
 8002480:	46c0      	nop			@ (mov r8, r8)
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b004      	add	sp, #16
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	20000064 	.word	0x20000064

08002490 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	230f      	movs	r3, #15
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e125      	b.n	80026fa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2234      	movs	r2, #52	@ 0x34
 80024c0:	2100      	movs	r1, #0
 80024c2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	0018      	movs	r0, r3
 80024c8:	f7ff fbfa 	bl	8001cc0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d0:	2210      	movs	r2, #16
 80024d2:	4013      	ands	r3, r2
 80024d4:	d000      	beq.n	80024d8 <HAL_ADC_Init+0x48>
 80024d6:	e103      	b.n	80026e0 <HAL_ADC_Init+0x250>
 80024d8:	230f      	movs	r3, #15
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d000      	beq.n	80024e4 <HAL_ADC_Init+0x54>
 80024e2:	e0fd      	b.n	80026e0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2204      	movs	r2, #4
 80024ec:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80024ee:	d000      	beq.n	80024f2 <HAL_ADC_Init+0x62>
 80024f0:	e0f6      	b.n	80026e0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f6:	4a83      	ldr	r2, [pc, #524]	@ (8002704 <HAL_ADC_Init+0x274>)
 80024f8:	4013      	ands	r3, r2
 80024fa:	2202      	movs	r2, #2
 80024fc:	431a      	orrs	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	2203      	movs	r2, #3
 800250a:	4013      	ands	r3, r2
 800250c:	2b01      	cmp	r3, #1
 800250e:	d112      	bne.n	8002536 <HAL_ADC_Init+0xa6>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2201      	movs	r2, #1
 8002518:	4013      	ands	r3, r2
 800251a:	2b01      	cmp	r3, #1
 800251c:	d009      	beq.n	8002532 <HAL_ADC_Init+0xa2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	401a      	ands	r2, r3
 800252a:	2380      	movs	r3, #128	@ 0x80
 800252c:	021b      	lsls	r3, r3, #8
 800252e:	429a      	cmp	r2, r3
 8002530:	d101      	bne.n	8002536 <HAL_ADC_Init+0xa6>
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_ADC_Init+0xa8>
 8002536:	2300      	movs	r3, #0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d116      	bne.n	800256a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2218      	movs	r2, #24
 8002544:	4393      	bics	r3, r2
 8002546:	0019      	movs	r1, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	0899      	lsrs	r1, r3, #2
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4964      	ldr	r1, [pc, #400]	@ (8002708 <HAL_ADC_Init+0x278>)
 8002576:	400a      	ands	r2, r1
 8002578:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7e1b      	ldrb	r3, [r3, #24]
 800257e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e5b      	ldrb	r3, [r3, #25]
 8002584:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002586:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	7e9b      	ldrb	r3, [r3, #26]
 800258c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800258e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	2b01      	cmp	r3, #1
 8002596:	d002      	beq.n	800259e <HAL_ADC_Init+0x10e>
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	015b      	lsls	r3, r3, #5
 800259c:	e000      	b.n	80025a0 <HAL_ADC_Init+0x110>
 800259e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80025a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80025a6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d101      	bne.n	80025b4 <HAL_ADC_Init+0x124>
 80025b0:	2304      	movs	r3, #4
 80025b2:	e000      	b.n	80025b6 <HAL_ADC_Init+0x126>
 80025b4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80025b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2124      	movs	r1, #36	@ 0x24
 80025bc:	5c5b      	ldrb	r3, [r3, r1]
 80025be:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80025c0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	7edb      	ldrb	r3, [r3, #27]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d115      	bne.n	80025fc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e9b      	ldrb	r3, [r3, #26]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2280      	movs	r2, #128	@ 0x80
 80025dc:	0252      	lsls	r2, r2, #9
 80025de:	4313      	orrs	r3, r2
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	e00b      	b.n	80025fc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e8:	2220      	movs	r2, #32
 80025ea:	431a      	orrs	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	2201      	movs	r2, #1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	23c2      	movs	r3, #194	@ 0xc2
 8002602:	33ff      	adds	r3, #255	@ 0xff
 8002604:	429a      	cmp	r2, r3
 8002606:	d007      	beq.n	8002618 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002610:	4313      	orrs	r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	4313      	orrs	r3, r2
 8002616:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68d9      	ldr	r1, [r3, #12]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	430a      	orrs	r2, r1
 8002626:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	055b      	lsls	r3, r3, #21
 8002630:	429a      	cmp	r2, r3
 8002632:	d01b      	beq.n	800266c <HAL_ADC_Init+0x1dc>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d017      	beq.n	800266c <HAL_ADC_Init+0x1dc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	2b02      	cmp	r3, #2
 8002642:	d013      	beq.n	800266c <HAL_ADC_Init+0x1dc>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002648:	2b03      	cmp	r3, #3
 800264a:	d00f      	beq.n	800266c <HAL_ADC_Init+0x1dc>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	2b04      	cmp	r3, #4
 8002652:	d00b      	beq.n	800266c <HAL_ADC_Init+0x1dc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002658:	2b05      	cmp	r3, #5
 800265a:	d007      	beq.n	800266c <HAL_ADC_Init+0x1dc>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	2b06      	cmp	r3, #6
 8002662:	d003      	beq.n	800266c <HAL_ADC_Init+0x1dc>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	2b07      	cmp	r3, #7
 800266a:	d112      	bne.n	8002692 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2107      	movs	r1, #7
 8002678:	438a      	bics	r2, r1
 800267a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6959      	ldr	r1, [r3, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002686:	2207      	movs	r2, #7
 8002688:	401a      	ands	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a1c      	ldr	r2, [pc, #112]	@ (800270c <HAL_ADC_Init+0x27c>)
 800269a:	4013      	ands	r3, r2
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d10b      	bne.n	80026ba <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ac:	2203      	movs	r2, #3
 80026ae:	4393      	bics	r3, r2
 80026b0:	2201      	movs	r2, #1
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80026b8:	e01c      	b.n	80026f4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026be:	2212      	movs	r2, #18
 80026c0:	4393      	bics	r3, r2
 80026c2:	2210      	movs	r2, #16
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ce:	2201      	movs	r2, #1
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80026d6:	230f      	movs	r3, #15
 80026d8:	18fb      	adds	r3, r7, r3
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80026de:	e009      	b.n	80026f4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e4:	2210      	movs	r2, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80026ec:	230f      	movs	r3, #15
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026f4:	230f      	movs	r3, #15
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	781b      	ldrb	r3, [r3, #0]
}
 80026fa:	0018      	movs	r0, r3
 80026fc:	46bd      	mov	sp, r7
 80026fe:	b004      	add	sp, #16
 8002700:	bd80      	pop	{r7, pc}
 8002702:	46c0      	nop			@ (mov r8, r8)
 8002704:	fffffefd 	.word	0xfffffefd
 8002708:	fffe0219 	.word	0xfffe0219
 800270c:	833fffe7 	.word	0x833fffe7

08002710 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002718:	230f      	movs	r3, #15
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	2204      	movs	r2, #4
 8002728:	4013      	ands	r3, r2
 800272a:	d156      	bne.n	80027da <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2234      	movs	r2, #52	@ 0x34
 8002730:	5c9b      	ldrb	r3, [r3, r2]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d101      	bne.n	800273a <HAL_ADC_Start_IT+0x2a>
 8002736:	2302      	movs	r3, #2
 8002738:	e056      	b.n	80027e8 <HAL_ADC_Start_IT+0xd8>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2234      	movs	r2, #52	@ 0x34
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	7e5b      	ldrb	r3, [r3, #25]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d007      	beq.n	800275a <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800274a:	230f      	movs	r3, #15
 800274c:	18fc      	adds	r4, r7, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	0018      	movs	r0, r3
 8002752:	f000 fa9b 	bl	8002c8c <ADC_Enable>
 8002756:	0003      	movs	r3, r0
 8002758:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800275a:	230f      	movs	r3, #15
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d13e      	bne.n	80027e2 <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002768:	4a21      	ldr	r2, [pc, #132]	@ (80027f0 <HAL_ADC_Start_IT+0xe0>)
 800276a:	4013      	ands	r3, r2
 800276c:	2280      	movs	r2, #128	@ 0x80
 800276e:	0052      	lsls	r2, r2, #1
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2234      	movs	r2, #52	@ 0x34
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	221c      	movs	r2, #28
 800278a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d110      	bne.n	80027b6 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2104      	movs	r1, #4
 80027a0:	438a      	bics	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2118      	movs	r1, #24
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]
          break;
 80027b4:	e008      	b.n	80027c8 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	211c      	movs	r1, #28
 80027c2:	430a      	orrs	r2, r1
 80027c4:	605a      	str	r2, [r3, #4]
          break;
 80027c6:	46c0      	nop			@ (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2104      	movs	r1, #4
 80027d4:	430a      	orrs	r2, r1
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	e003      	b.n	80027e2 <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027da:	230f      	movs	r3, #15
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	2202      	movs	r2, #2
 80027e0:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 80027e2:	230f      	movs	r3, #15
 80027e4:	18fb      	adds	r3, r7, r3
 80027e6:	781b      	ldrb	r3, [r3, #0]
}
 80027e8:	0018      	movs	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	b005      	add	sp, #20
 80027ee:	bd90      	pop	{r4, r7, pc}
 80027f0:	fffff0fe 	.word	0xfffff0fe

080027f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027f4:	b590      	push	{r4, r7, lr}
 80027f6:	b087      	sub	sp, #28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002800:	2317      	movs	r3, #23
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2204      	movs	r2, #4
 8002810:	4013      	ands	r3, r2
 8002812:	d15e      	bne.n	80028d2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2234      	movs	r2, #52	@ 0x34
 8002818:	5c9b      	ldrb	r3, [r3, r2]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_ADC_Start_DMA+0x2e>
 800281e:	2302      	movs	r3, #2
 8002820:	e05e      	b.n	80028e0 <HAL_ADC_Start_DMA+0xec>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2234      	movs	r2, #52	@ 0x34
 8002826:	2101      	movs	r1, #1
 8002828:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	7e5b      	ldrb	r3, [r3, #25]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d007      	beq.n	8002842 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002832:	2317      	movs	r3, #23
 8002834:	18fc      	adds	r4, r7, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fa27 	bl	8002c8c <ADC_Enable>
 800283e:	0003      	movs	r3, r0
 8002840:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002842:	2317      	movs	r3, #23
 8002844:	18fb      	adds	r3, r7, r3
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d146      	bne.n	80028da <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002850:	4a25      	ldr	r2, [pc, #148]	@ (80028e8 <HAL_ADC_Start_DMA+0xf4>)
 8002852:	4013      	ands	r3, r2
 8002854:	2280      	movs	r2, #128	@ 0x80
 8002856:	0052      	lsls	r2, r2, #1
 8002858:	431a      	orrs	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2234      	movs	r2, #52	@ 0x34
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002870:	4a1e      	ldr	r2, [pc, #120]	@ (80028ec <HAL_ADC_Start_DMA+0xf8>)
 8002872:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002878:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_ADC_Start_DMA+0xfc>)
 800287a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	4a1c      	ldr	r2, [pc, #112]	@ (80028f4 <HAL_ADC_Start_DMA+0x100>)
 8002882:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	221c      	movs	r2, #28
 800288a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2110      	movs	r1, #16
 8002898:	430a      	orrs	r2, r1
 800289a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2101      	movs	r1, #1
 80028a8:	430a      	orrs	r2, r1
 80028aa:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	3340      	adds	r3, #64	@ 0x40
 80028b6:	0019      	movs	r1, r3
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f001 fa86 	bl	8003dcc <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2104      	movs	r1, #4
 80028cc:	430a      	orrs	r2, r1
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	e003      	b.n	80028da <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028d2:	2317      	movs	r3, #23
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80028da:	2317      	movs	r3, #23
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	781b      	ldrb	r3, [r3, #0]
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b007      	add	sp, #28
 80028e6:	bd90      	pop	{r4, r7, pc}
 80028e8:	fffff0fe 	.word	0xfffff0fe
 80028ec:	08002d95 	.word	0x08002d95
 80028f0:	08002e49 	.word	0x08002e49
 80028f4:	08002e67 	.word	0x08002e67

080028f8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2204      	movs	r2, #4
 8002914:	4013      	ands	r3, r2
 8002916:	d003      	beq.n	8002920 <HAL_ADC_IRQHandler+0x28>
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2204      	movs	r2, #4
 800291c:	4013      	ands	r3, r2
 800291e:	d107      	bne.n	8002930 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2208      	movs	r2, #8
 8002924:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002926:	d049      	beq.n	80029bc <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2208      	movs	r2, #8
 800292c:	4013      	ands	r3, r2
 800292e:	d045      	beq.n	80029bc <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002934:	2210      	movs	r2, #16
 8002936:	4013      	ands	r3, r2
 8002938:	d106      	bne.n	8002948 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	23c0      	movs	r3, #192	@ 0xc0
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	4013      	ands	r3, r2
 8002954:	d12a      	bne.n	80029ac <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800295a:	2b00      	cmp	r3, #0
 800295c:	d126      	bne.n	80029ac <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2208      	movs	r2, #8
 8002962:	4013      	ands	r3, r2
 8002964:	d022      	beq.n	80029ac <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	2204      	movs	r2, #4
 800296e:	4013      	ands	r3, r2
 8002970:	d110      	bne.n	8002994 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	210c      	movs	r1, #12
 800297e:	438a      	bics	r2, r1
 8002980:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002986:	4a2d      	ldr	r2, [pc, #180]	@ (8002a3c <HAL_ADC_IRQHandler+0x144>)
 8002988:	4013      	ands	r3, r2
 800298a:	2201      	movs	r2, #1
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	639a      	str	r2, [r3, #56]	@ 0x38
 8002992:	e00b      	b.n	80029ac <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002998:	2220      	movs	r2, #32
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a4:	2201      	movs	r2, #1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0018      	movs	r0, r3
 80029b0:	f7fd fd50 	bl	8000454 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	220c      	movs	r2, #12
 80029ba:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2280      	movs	r2, #128	@ 0x80
 80029c0:	4013      	ands	r3, r2
 80029c2:	d012      	beq.n	80029ea <HAL_ADC_IRQHandler+0xf2>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2280      	movs	r2, #128	@ 0x80
 80029c8:	4013      	ands	r3, r2
 80029ca:	d00e      	beq.n	80029ea <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d0:	2280      	movs	r2, #128	@ 0x80
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	639a      	str	r2, [r3, #56]	@ 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0018      	movs	r0, r3
 80029de:	f000 f837 	bl	8002a50 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2280      	movs	r2, #128	@ 0x80
 80029e8:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2210      	movs	r2, #16
 80029ee:	4013      	ands	r3, r2
 80029f0:	d020      	beq.n	8002a34 <HAL_ADC_IRQHandler+0x13c>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2210      	movs	r2, #16
 80029f6:	4013      	ands	r3, r2
 80029f8:	d01c      	beq.n	8002a34 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d006      	beq.n	8002a10 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d10d      	bne.n	8002a2c <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a14:	2202      	movs	r2, #2
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2210      	movs	r2, #16
 8002a22:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 f81a 	bl	8002a60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2210      	movs	r2, #16
 8002a32:	601a      	str	r2, [r3, #0]
  }

}
 8002a34:	46c0      	nop			@ (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b004      	add	sp, #16
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	fffffefe 	.word	0xfffffefe

08002a40 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002a48:	46c0      	nop			@ (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	b002      	add	sp, #8
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a68:	46c0      	nop			@ (mov r8, r8)
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b002      	add	sp, #8
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a7a:	230f      	movs	r3, #15
 8002a7c:	18fb      	adds	r3, r7, r3
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8a:	2380      	movs	r3, #128	@ 0x80
 8002a8c:	055b      	lsls	r3, r3, #21
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d011      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x46>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d00d      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x46>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d009      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x46>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d005      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x46>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	d001      	beq.n	8002ab6 <HAL_ADC_ConfigChannel+0x46>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2234      	movs	r2, #52	@ 0x34
 8002aba:	5c9b      	ldrb	r3, [r3, r2]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_ConfigChannel+0x54>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e0d0      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x1f6>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2234      	movs	r2, #52	@ 0x34
 8002ac8:	2101      	movs	r1, #1
 8002aca:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d000      	beq.n	8002ada <HAL_ADC_ConfigChannel+0x6a>
 8002ad8:	e0b4      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4a64      	ldr	r2, [pc, #400]	@ (8002c70 <HAL_ADC_ConfigChannel+0x200>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d100      	bne.n	8002ae6 <HAL_ADC_ConfigChannel+0x76>
 8002ae4:	e082      	b.n	8002bec <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2201      	movs	r2, #1
 8002af2:	409a      	lsls	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b00:	2380      	movs	r3, #128	@ 0x80
 8002b02:	055b      	lsls	r3, r3, #21
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d037      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d033      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d02f      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d02b      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d027      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d023      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	2b06      	cmp	r3, #6
 8002b36:	d01f      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	2b07      	cmp	r3, #7
 8002b3e:	d01b      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	689a      	ldr	r2, [r3, #8]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	2107      	movs	r1, #7
 8002b4c:	400b      	ands	r3, r1
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d012      	beq.n	8002b78 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2107      	movs	r1, #7
 8002b5e:	438a      	bics	r2, r1
 8002b60:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6959      	ldr	r1, [r3, #20]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	401a      	ands	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b10      	cmp	r3, #16
 8002b7e:	d007      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x120>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b11      	cmp	r3, #17
 8002b86:	d003      	beq.n	8002b90 <HAL_ADC_ConfigChannel+0x120>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b12      	cmp	r3, #18
 8002b8e:	d163      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002b90:	4b38      	ldr	r3, [pc, #224]	@ (8002c74 <HAL_ADC_ConfigChannel+0x204>)
 8002b92:	6819      	ldr	r1, [r3, #0]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b10      	cmp	r3, #16
 8002b9a:	d009      	beq.n	8002bb0 <HAL_ADC_ConfigChannel+0x140>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b11      	cmp	r3, #17
 8002ba2:	d102      	bne.n	8002baa <HAL_ADC_ConfigChannel+0x13a>
 8002ba4:	2380      	movs	r3, #128	@ 0x80
 8002ba6:	03db      	lsls	r3, r3, #15
 8002ba8:	e004      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x144>
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	045b      	lsls	r3, r3, #17
 8002bae:	e001      	b.n	8002bb4 <HAL_ADC_ConfigChannel+0x144>
 8002bb0:	2380      	movs	r3, #128	@ 0x80
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8002c74 <HAL_ADC_ConfigChannel+0x204>)
 8002bb6:	430b      	orrs	r3, r1
 8002bb8:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d14a      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <HAL_ADC_ConfigChannel+0x208>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	492d      	ldr	r1, [pc, #180]	@ (8002c7c <HAL_ADC_ConfigChannel+0x20c>)
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7fd fa9d 	bl	8000108 <__udivsi3>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	0013      	movs	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	189b      	adds	r3, r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bdc:	e002      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f9      	bne.n	8002bde <HAL_ADC_ConfigChannel+0x16e>
 8002bea:	e035      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4099      	lsls	r1, r3
 8002bfa:	000b      	movs	r3, r1
 8002bfc:	43d9      	mvns	r1, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	400a      	ands	r2, r1
 8002c04:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b10      	cmp	r3, #16
 8002c0c:	d007      	beq.n	8002c1e <HAL_ADC_ConfigChannel+0x1ae>
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b11      	cmp	r3, #17
 8002c14:	d003      	beq.n	8002c1e <HAL_ADC_ConfigChannel+0x1ae>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b12      	cmp	r3, #18
 8002c1c:	d11c      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_ADC_ConfigChannel+0x204>)
 8002c20:	6819      	ldr	r1, [r3, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d007      	beq.n	8002c3a <HAL_ADC_ConfigChannel+0x1ca>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2b11      	cmp	r3, #17
 8002c30:	d101      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x1c6>
 8002c32:	4b13      	ldr	r3, [pc, #76]	@ (8002c80 <HAL_ADC_ConfigChannel+0x210>)
 8002c34:	e002      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1cc>
 8002c36:	4b13      	ldr	r3, [pc, #76]	@ (8002c84 <HAL_ADC_ConfigChannel+0x214>)
 8002c38:	e000      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1cc>
 8002c3a:	4b13      	ldr	r3, [pc, #76]	@ (8002c88 <HAL_ADC_ConfigChannel+0x218>)
 8002c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c74 <HAL_ADC_ConfigChannel+0x204>)
 8002c3e:	400b      	ands	r3, r1
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e009      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c48:	2220      	movs	r2, #32
 8002c4a:	431a      	orrs	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002c50:	230f      	movs	r3, #15
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2234      	movs	r2, #52	@ 0x34
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002c60:	230f      	movs	r3, #15
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
}
 8002c66:	0018      	movs	r0, r3
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	b004      	add	sp, #16
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			@ (mov r8, r8)
 8002c70:	00001001 	.word	0x00001001
 8002c74:	40012708 	.word	0x40012708
 8002c78:	2000005c 	.word	0x2000005c
 8002c7c:	000f4240 	.word	0x000f4240
 8002c80:	ffbfffff 	.word	0xffbfffff
 8002c84:	feffffff 	.word	0xfeffffff
 8002c88:	ff7fffff 	.word	0xff7fffff

08002c8c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d112      	bne.n	8002cd0 <ADC_Enable+0x44>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d009      	beq.n	8002ccc <ADC_Enable+0x40>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	021b      	lsls	r3, r3, #8
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	2380      	movs	r3, #128	@ 0x80
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d101      	bne.n	8002cd0 <ADC_Enable+0x44>
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e000      	b.n	8002cd2 <ADC_Enable+0x46>
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d152      	bne.n	8002d7c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	4a2a      	ldr	r2, [pc, #168]	@ (8002d88 <ADC_Enable+0xfc>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce6:	2210      	movs	r2, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e03f      	b.n	8002d7e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2101      	movs	r1, #1
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d0e:	4b1f      	ldr	r3, [pc, #124]	@ (8002d8c <ADC_Enable+0x100>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	491f      	ldr	r1, [pc, #124]	@ (8002d90 <ADC_Enable+0x104>)
 8002d14:	0018      	movs	r0, r3
 8002d16:	f7fd f9f7 	bl	8000108 <__udivsi3>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d1e:	e002      	b.n	8002d26 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1f9      	bne.n	8002d20 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d2c:	f7ff fb82 	bl	8002434 <HAL_GetTick>
 8002d30:	0003      	movs	r3, r0
 8002d32:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d34:	e01b      	b.n	8002d6e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d36:	f7ff fb7d 	bl	8002434 <HAL_GetTick>
 8002d3a:	0002      	movs	r2, r0
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d914      	bls.n	8002d6e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d00d      	beq.n	8002d6e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d56:	2210      	movs	r2, #16
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d62:	2201      	movs	r2, #1
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e007      	b.n	8002d7e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d1dc      	bne.n	8002d36 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	80000017 	.word	0x80000017
 8002d8c:	2000005c 	.word	0x2000005c
 8002d90:	000f4240 	.word	0x000f4240

08002d94 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da6:	2250      	movs	r2, #80	@ 0x50
 8002da8:	4013      	ands	r3, r2
 8002daa:	d140      	bne.n	8002e2e <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	2280      	movs	r2, #128	@ 0x80
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	431a      	orrs	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	23c0      	movs	r3, #192	@ 0xc0
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d12d      	bne.n	8002e24 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d129      	bne.n	8002e24 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2208      	movs	r2, #8
 8002dd8:	4013      	ands	r3, r2
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d122      	bne.n	8002e24 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2204      	movs	r2, #4
 8002de6:	4013      	ands	r3, r2
 8002de8:	d110      	bne.n	8002e0c <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	210c      	movs	r1, #12
 8002df6:	438a      	bics	r2, r1
 8002df8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dfe:	4a11      	ldr	r2, [pc, #68]	@ (8002e44 <ADC_DMAConvCplt+0xb0>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	2201      	movs	r2, #1
 8002e04:	431a      	orrs	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e0a:	e00b      	b.n	8002e24 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	2220      	movs	r2, #32
 8002e12:	431a      	orrs	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	639a      	str	r2, [r3, #56]	@ 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	0018      	movs	r0, r3
 8002e28:	f7fd fb14 	bl	8000454 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8002e2c:	e005      	b.n	8002e3a <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	0010      	movs	r0, r2
 8002e38:	4798      	blx	r3
}
 8002e3a:	46c0      	nop			@ (mov r8, r8)
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	fffffefe 	.word	0xfffffefe

08002e48 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	0018      	movs	r0, r3
 8002e5a:	f7ff fdf1 	bl	8002a40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	46bd      	mov	sp, r7
 8002e62:	b004      	add	sp, #16
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e72:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	2240      	movs	r2, #64	@ 0x40
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e84:	2204      	movs	r2, #4
 8002e86:	431a      	orrs	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f7ff fde6 	bl	8002a60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e94:	46c0      	nop			@ (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b004      	add	sp, #16
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0f0      	b.n	8003090 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fe ff97 	bl	8001df0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed2:	f7ff faaf 	bl	8002434 <HAL_GetTick>
 8002ed6:	0003      	movs	r3, r0
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eda:	e013      	b.n	8002f04 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002edc:	f7ff faaa 	bl	8002434 <HAL_GetTick>
 8002ee0:	0002      	movs	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b0a      	cmp	r3, #10
 8002ee8:	d90c      	bls.n	8002f04 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	2280      	movs	r2, #128	@ 0x80
 8002ef0:	0292      	lsls	r2, r2, #10
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2220      	movs	r2, #32
 8002efc:	2105      	movs	r1, #5
 8002efe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0c5      	b.n	8003090 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d0e5      	beq.n	8002edc <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2102      	movs	r1, #2
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f20:	f7ff fa88 	bl	8002434 <HAL_GetTick>
 8002f24:	0003      	movs	r3, r0
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f28:	e013      	b.n	8002f52 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f2a:	f7ff fa83 	bl	8002434 <HAL_GetTick>
 8002f2e:	0002      	movs	r2, r0
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	2b0a      	cmp	r3, #10
 8002f36:	d90c      	bls.n	8002f52 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3c:	2280      	movs	r2, #128	@ 0x80
 8002f3e:	0292      	lsls	r2, r2, #10
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	2105      	movs	r1, #5
 8002f4c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e09e      	b.n	8003090 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d1e5      	bne.n	8002f2a <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	7e1b      	ldrb	r3, [r3, #24]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d108      	bne.n	8002f78 <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2180      	movs	r1, #128	@ 0x80
 8002f72:	430a      	orrs	r2, r1
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e007      	b.n	8002f88 <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2180      	movs	r1, #128	@ 0x80
 8002f84:	438a      	bics	r2, r1
 8002f86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	7e5b      	ldrb	r3, [r3, #25]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d108      	bne.n	8002fa2 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2140      	movs	r1, #64	@ 0x40
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e007      	b.n	8002fb2 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2140      	movs	r1, #64	@ 0x40
 8002fae:	438a      	bics	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	7e9b      	ldrb	r3, [r3, #26]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d108      	bne.n	8002fcc <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2120      	movs	r1, #32
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e007      	b.n	8002fdc <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2120      	movs	r1, #32
 8002fd8:	438a      	bics	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7edb      	ldrb	r3, [r3, #27]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d108      	bne.n	8002ff6 <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2110      	movs	r1, #16
 8002ff0:	438a      	bics	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e007      	b.n	8003006 <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2110      	movs	r1, #16
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7f1b      	ldrb	r3, [r3, #28]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d108      	bne.n	8003020 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2108      	movs	r1, #8
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	e007      	b.n	8003030 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2108      	movs	r1, #8
 800302c:	438a      	bics	r2, r1
 800302e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	7f5b      	ldrb	r3, [r3, #29]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d108      	bne.n	800304a <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2104      	movs	r1, #4
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	e007      	b.n	800305a <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2104      	movs	r1, #4
 8003056:	438a      	bics	r2, r1
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	431a      	orrs	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	431a      	orrs	r2, r3
 8003070:	0011      	movs	r1, r2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	1e5a      	subs	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	2101      	movs	r1, #1
 800308c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b004      	add	sp, #16
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030a8:	2013      	movs	r0, #19
 80030aa:	183b      	adds	r3, r7, r0
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	2120      	movs	r1, #32
 80030b0:	5c52      	ldrb	r2, [r2, r1]
 80030b2:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80030b4:	0002      	movs	r2, r0
 80030b6:	18bb      	adds	r3, r7, r2
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d004      	beq.n	80030c8 <HAL_CAN_ConfigFilter+0x30>
 80030be:	18bb      	adds	r3, r7, r2
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d000      	beq.n	80030c8 <HAL_CAN_ConfigFilter+0x30>
 80030c6:	e0cd      	b.n	8003264 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	58d3      	ldr	r3, [r2, r3]
 80030d0:	2201      	movs	r2, #1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	0011      	movs	r1, r2
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	221f      	movs	r2, #31
 80030e4:	4013      	ands	r3, r2
 80030e6:	2201      	movs	r2, #1
 80030e8:	409a      	lsls	r2, r3
 80030ea:	0013      	movs	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	2387      	movs	r3, #135	@ 0x87
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	58d3      	ldr	r3, [r2, r3]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	43d2      	mvns	r2, r2
 80030fa:	401a      	ands	r2, r3
 80030fc:	0011      	movs	r1, r2
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	2387      	movs	r3, #135	@ 0x87
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d129      	bne.n	8003162 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	2383      	movs	r3, #131	@ 0x83
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	58d3      	ldr	r3, [r2, r3]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	43d2      	mvns	r2, r2
 800311a:	401a      	ands	r2, r3
 800311c:	0011      	movs	r1, r2
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	2383      	movs	r3, #131	@ 0x83
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003138:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	3248      	adds	r2, #72	@ 0x48
 800313e:	00d2      	lsls	r2, r2, #3
 8003140:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003154:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	3348      	adds	r3, #72	@ 0x48
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	18cb      	adds	r3, r1, r3
 800315e:	3304      	adds	r3, #4
 8003160:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d128      	bne.n	80031bc <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800316a:	697a      	ldr	r2, [r7, #20]
 800316c:	2383      	movs	r3, #131	@ 0x83
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	58d2      	ldr	r2, [r2, r3]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	431a      	orrs	r2, r3
 8003176:	0011      	movs	r1, r2
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	2383      	movs	r3, #131	@ 0x83
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	041b      	lsls	r3, r3, #16
 800318c:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003192:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3248      	adds	r2, #72	@ 0x48
 8003198:	00d2      	lsls	r2, r2, #3
 800319a:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80031ae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80031b0:	6979      	ldr	r1, [r7, #20]
 80031b2:	3348      	adds	r3, #72	@ 0x48
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	18cb      	adds	r3, r1, r3
 80031b8:	3304      	adds	r3, #4
 80031ba:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10c      	bne.n	80031de <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	2381      	movs	r3, #129	@ 0x81
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	58d3      	ldr	r3, [r2, r3]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	43d2      	mvns	r2, r2
 80031d0:	401a      	ands	r2, r3
 80031d2:	0011      	movs	r1, r2
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	2381      	movs	r3, #129	@ 0x81
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	50d1      	str	r1, [r2, r3]
 80031dc:	e00a      	b.n	80031f4 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	2381      	movs	r3, #129	@ 0x81
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	58d2      	ldr	r2, [r2, r3]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	431a      	orrs	r2, r3
 80031ea:	0011      	movs	r1, r2
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	2381      	movs	r3, #129	@ 0x81
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10c      	bne.n	8003216 <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	2385      	movs	r3, #133	@ 0x85
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	58d3      	ldr	r3, [r2, r3]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	43d2      	mvns	r2, r2
 8003208:	401a      	ands	r2, r3
 800320a:	0011      	movs	r1, r2
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	2385      	movs	r3, #133	@ 0x85
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	50d1      	str	r1, [r2, r3]
 8003214:	e00a      	b.n	800322c <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	2385      	movs	r3, #133	@ 0x85
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	58d2      	ldr	r2, [r2, r3]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	431a      	orrs	r2, r3
 8003222:	0011      	movs	r1, r2
 8003224:	697a      	ldr	r2, [r7, #20]
 8003226:	2385      	movs	r3, #133	@ 0x85
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10a      	bne.n	800324a <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	2387      	movs	r3, #135	@ 0x87
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	58d2      	ldr	r2, [r2, r3]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	431a      	orrs	r2, r3
 8003240:	0011      	movs	r1, r2
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	2387      	movs	r3, #135	@ 0x87
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	2380      	movs	r3, #128	@ 0x80
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	58d3      	ldr	r3, [r2, r3]
 8003252:	2201      	movs	r2, #1
 8003254:	4393      	bics	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	2380      	movs	r3, #128	@ 0x80
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e007      	b.n	8003274 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	2280      	movs	r2, #128	@ 0x80
 800326a:	02d2      	lsls	r2, r2, #11
 800326c:	431a      	orrs	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
  }
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b006      	add	sp, #24
 800327a:	bd80      	pop	{r7, pc}

0800327c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2220      	movs	r2, #32
 8003288:	5c9b      	ldrb	r3, [r3, r2]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d12f      	bne.n	80032f0 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2220      	movs	r2, #32
 8003294:	2102      	movs	r1, #2
 8003296:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	438a      	bics	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032a8:	f7ff f8c4 	bl	8002434 <HAL_GetTick>
 80032ac:	0003      	movs	r3, r0
 80032ae:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032b0:	e013      	b.n	80032da <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032b2:	f7ff f8bf 	bl	8002434 <HAL_GetTick>
 80032b6:	0002      	movs	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b0a      	cmp	r3, #10
 80032be:	d90c      	bls.n	80032da <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c4:	2280      	movs	r2, #128	@ 0x80
 80032c6:	0292      	lsls	r2, r2, #10
 80032c8:	431a      	orrs	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2220      	movs	r2, #32
 80032d2:	2105      	movs	r1, #5
 80032d4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e012      	b.n	8003300 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2201      	movs	r2, #1
 80032e2:	4013      	ands	r3, r2
 80032e4:	d1e5      	bne.n	80032b2 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e007      	b.n	8003300 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f4:	2280      	movs	r2, #128	@ 0x80
 80032f6:	0312      	lsls	r2, r2, #12
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
  }
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b004      	add	sp, #16
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003316:	201f      	movs	r0, #31
 8003318:	183b      	adds	r3, r7, r0
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	2120      	movs	r1, #32
 800331e:	5c52      	ldrb	r2, [r2, r1]
 8003320:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800332a:	183b      	adds	r3, r7, r0
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d004      	beq.n	800333c <HAL_CAN_AddTxMessage+0x34>
 8003332:	183b      	adds	r3, r7, r0
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d000      	beq.n	800333c <HAL_CAN_AddTxMessage+0x34>
 800333a:	e0ab      	b.n	8003494 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	2380      	movs	r3, #128	@ 0x80
 8003340:	04db      	lsls	r3, r3, #19
 8003342:	4013      	ands	r3, r2
 8003344:	d10a      	bne.n	800335c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	2380      	movs	r3, #128	@ 0x80
 800334a:	051b      	lsls	r3, r3, #20
 800334c:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800334e:	d105      	bne.n	800335c <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	2380      	movs	r3, #128	@ 0x80
 8003354:	055b      	lsls	r3, r3, #21
 8003356:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003358:	d100      	bne.n	800335c <HAL_CAN_AddTxMessage+0x54>
 800335a:	e092      	b.n	8003482 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	0e1b      	lsrs	r3, r3, #24
 8003360:	2203      	movs	r2, #3
 8003362:	4013      	ands	r3, r2
 8003364:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003366:	2201      	movs	r2, #1
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	409a      	lsls	r2, r3
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10c      	bne.n	8003392 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4311      	orrs	r1, r2
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	3218      	adds	r2, #24
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	50d1      	str	r1, [r2, r3]
 8003390:	e00f      	b.n	80033b2 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800339c:	431a      	orrs	r2, r3
 800339e:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 80033a8:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	3218      	adds	r2, #24
 80033ae:	0112      	lsls	r2, r2, #4
 80033b0:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	6819      	ldr	r1, [r3, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	3318      	adds	r3, #24
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	18cb      	adds	r3, r1, r3
 80033c2:	3304      	adds	r3, #4
 80033c4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	7d1b      	ldrb	r3, [r3, #20]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d112      	bne.n	80033f4 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3318      	adds	r3, #24
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	18d3      	adds	r3, r2, r3
 80033da:	3304      	adds	r3, #4
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	2380      	movs	r3, #128	@ 0x80
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	431a      	orrs	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	3318      	adds	r3, #24
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	18cb      	adds	r3, r1, r3
 80033f0:	3304      	adds	r3, #4
 80033f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3307      	adds	r3, #7
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	061a      	lsls	r2, r3, #24
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3306      	adds	r3, #6
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	041b      	lsls	r3, r3, #16
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	3305      	adds	r3, #5
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3304      	adds	r3, #4
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	0019      	movs	r1, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6818      	ldr	r0, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	6979      	ldr	r1, [r7, #20]
 8003420:	23c6      	movs	r3, #198	@ 0xc6
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	0109      	lsls	r1, r1, #4
 8003426:	1841      	adds	r1, r0, r1
 8003428:	18cb      	adds	r3, r1, r3
 800342a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3303      	adds	r3, #3
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	061a      	lsls	r2, r3, #24
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	3302      	adds	r3, #2
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	041b      	lsls	r3, r3, #16
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3301      	adds	r3, #1
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	0019      	movs	r1, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	6979      	ldr	r1, [r7, #20]
 8003456:	23c4      	movs	r3, #196	@ 0xc4
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	0109      	lsls	r1, r1, #4
 800345c:	1841      	adds	r1, r0, r1
 800345e:	18cb      	adds	r3, r1, r3
 8003460:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	3218      	adds	r2, #24
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	58d2      	ldr	r2, [r2, r3]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2101      	movs	r1, #1
 8003474:	4311      	orrs	r1, r2
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	3218      	adds	r2, #24
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	e010      	b.n	80034a4 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	2280      	movs	r2, #128	@ 0x80
 8003488:	0392      	lsls	r2, r2, #14
 800348a:	431a      	orrs	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e007      	b.n	80034a4 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003498:	2280      	movs	r2, #128	@ 0x80
 800349a:	02d2      	lsls	r2, r2, #11
 800349c:	431a      	orrs	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
  }
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b008      	add	sp, #32
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
 80034b8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ba:	2017      	movs	r0, #23
 80034bc:	183b      	adds	r3, r7, r0
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	2120      	movs	r1, #32
 80034c2:	5c52      	ldrb	r2, [r2, r1]
 80034c4:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80034c6:	0002      	movs	r2, r0
 80034c8:	18bb      	adds	r3, r7, r2
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d004      	beq.n	80034da <HAL_CAN_GetRxMessage+0x2e>
 80034d0:	18bb      	adds	r3, r7, r2
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d000      	beq.n	80034da <HAL_CAN_GetRxMessage+0x2e>
 80034d8:	e107      	b.n	80036ea <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10e      	bne.n	80034fe <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	2203      	movs	r2, #3
 80034e8:	4013      	ands	r3, r2
 80034ea:	d117      	bne.n	800351c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f0:	2280      	movs	r2, #128	@ 0x80
 80034f2:	0392      	lsls	r2, r2, #14
 80034f4:	431a      	orrs	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0fd      	b.n	80036fa <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2203      	movs	r2, #3
 8003506:	4013      	ands	r3, r2
 8003508:	d108      	bne.n	800351c <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	2280      	movs	r2, #128	@ 0x80
 8003510:	0392      	lsls	r2, r2, #14
 8003512:	431a      	orrs	r2, r3
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0ee      	b.n	80036fa <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	321b      	adds	r2, #27
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	58d3      	ldr	r3, [r2, r3]
 8003528:	2204      	movs	r2, #4
 800352a:	401a      	ands	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10b      	bne.n	8003550 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	321b      	adds	r2, #27
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	58d3      	ldr	r3, [r2, r3]
 8003544:	0d5b      	lsrs	r3, r3, #21
 8003546:	055b      	lsls	r3, r3, #21
 8003548:	0d5a      	lsrs	r2, r3, #21
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	601a      	str	r2, [r3, #0]
 800354e:	e00a      	b.n	8003566 <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	321b      	adds	r2, #27
 8003558:	0112      	lsls	r2, r2, #4
 800355a:	58d3      	ldr	r3, [r2, r3]
 800355c:	08db      	lsrs	r3, r3, #3
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	321b      	adds	r2, #27
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	58d3      	ldr	r3, [r2, r3]
 8003572:	2202      	movs	r2, #2
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	331b      	adds	r3, #27
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	18d3      	adds	r3, r2, r3
 8003586:	3304      	adds	r3, #4
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2208      	movs	r2, #8
 800358c:	4013      	ands	r3, r2
 800358e:	d003      	beq.n	8003598 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2208      	movs	r2, #8
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	e00b      	b.n	80035b0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	331b      	adds	r3, #27
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	18d3      	adds	r3, r2, r3
 80035a4:	3304      	adds	r3, #4
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	220f      	movs	r2, #15
 80035aa:	401a      	ands	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	331b      	adds	r3, #27
 80035b8:	011b      	lsls	r3, r3, #4
 80035ba:	18d3      	adds	r3, r2, r3
 80035bc:	3304      	adds	r3, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0a1b      	lsrs	r3, r3, #8
 80035c2:	22ff      	movs	r2, #255	@ 0xff
 80035c4:	401a      	ands	r2, r3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	331b      	adds	r3, #27
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	18d3      	adds	r3, r2, r3
 80035d6:	3304      	adds	r3, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	0c1b      	lsrs	r3, r3, #16
 80035dc:	041b      	lsls	r3, r3, #16
 80035de:	0c1a      	lsrs	r2, r3, #16
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	23dc      	movs	r3, #220	@ 0xdc
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	0112      	lsls	r2, r2, #4
 80035f0:	188a      	adds	r2, r1, r2
 80035f2:	18d3      	adds	r3, r2, r3
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6819      	ldr	r1, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	23dc      	movs	r3, #220	@ 0xdc
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	188a      	adds	r2, r1, r2
 800360a:	18d3      	adds	r3, r2, r3
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	0a1a      	lsrs	r2, r3, #8
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	3301      	adds	r3, #1
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	68ba      	ldr	r2, [r7, #8]
 800361e:	23dc      	movs	r3, #220	@ 0xdc
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	0112      	lsls	r2, r2, #4
 8003624:	188a      	adds	r2, r1, r2
 8003626:	18d3      	adds	r3, r2, r3
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	0c1a      	lsrs	r2, r3, #16
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	3302      	adds	r3, #2
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6819      	ldr	r1, [r3, #0]
 8003638:	68ba      	ldr	r2, [r7, #8]
 800363a:	23dc      	movs	r3, #220	@ 0xdc
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	0112      	lsls	r2, r2, #4
 8003640:	188a      	adds	r2, r1, r2
 8003642:	18d3      	adds	r3, r2, r3
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	0e1a      	lsrs	r2, r3, #24
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	3303      	adds	r3, #3
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6819      	ldr	r1, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	23de      	movs	r3, #222	@ 0xde
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	0112      	lsls	r2, r2, #4
 800365c:	188a      	adds	r2, r1, r2
 800365e:	18d3      	adds	r3, r2, r3
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	3304      	adds	r3, #4
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6819      	ldr	r1, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	23de      	movs	r3, #222	@ 0xde
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	0112      	lsls	r2, r2, #4
 8003676:	188a      	adds	r2, r1, r2
 8003678:	18d3      	adds	r3, r2, r3
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0a1a      	lsrs	r2, r3, #8
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	3305      	adds	r3, #5
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6819      	ldr	r1, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	23de      	movs	r3, #222	@ 0xde
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	0112      	lsls	r2, r2, #4
 8003692:	188a      	adds	r2, r1, r2
 8003694:	18d3      	adds	r3, r2, r3
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	0c1a      	lsrs	r2, r3, #16
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	3306      	adds	r3, #6
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	23de      	movs	r3, #222	@ 0xde
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	0112      	lsls	r2, r2, #4
 80036ae:	188a      	adds	r2, r1, r2
 80036b0:	18d3      	adds	r3, r2, r3
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	0e1a      	lsrs	r2, r3, #24
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	3307      	adds	r3, #7
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d108      	bne.n	80036d6 <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2120      	movs	r1, #32
 80036d0:	430a      	orrs	r2, r1
 80036d2:	60da      	str	r2, [r3, #12]
 80036d4:	e007      	b.n	80036e6 <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2120      	movs	r1, #32
 80036e2:	430a      	orrs	r2, r1
 80036e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e007      	b.n	80036fa <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	2280      	movs	r2, #128	@ 0x80
 80036f0:	02d2      	lsls	r2, r2, #11
 80036f2:	431a      	orrs	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
  }
}
 80036fa:	0018      	movs	r0, r3
 80036fc:	46bd      	mov	sp, r7
 80036fe:	b006      	add	sp, #24
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800370c:	200f      	movs	r0, #15
 800370e:	183b      	adds	r3, r7, r0
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	2120      	movs	r1, #32
 8003714:	5c52      	ldrb	r2, [r2, r1]
 8003716:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003718:	0002      	movs	r2, r0
 800371a:	18bb      	adds	r3, r7, r2
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d003      	beq.n	800372a <HAL_CAN_ActivateNotification+0x28>
 8003722:	18bb      	adds	r3, r7, r2
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d109      	bne.n	800373e <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6959      	ldr	r1, [r3, #20]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e007      	b.n	800374e <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	2280      	movs	r2, #128	@ 0x80
 8003744:	02d2      	lsls	r2, r2, #11
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
  }
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b004      	add	sp, #16
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b08a      	sub	sp, #40	@ 0x28
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003792:	6a3b      	ldr	r3, [r7, #32]
 8003794:	2201      	movs	r2, #1
 8003796:	4013      	ands	r3, r2
 8003798:	d100      	bne.n	800379c <HAL_CAN_IRQHandler+0x46>
 800379a:	e084      	b.n	80038a6 <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	2201      	movs	r2, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	d024      	beq.n	80037ee <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2202      	movs	r2, #2
 80037b0:	4013      	ands	r3, r2
 80037b2:	d004      	beq.n	80037be <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	0018      	movs	r0, r3
 80037b8:	f000 f981 	bl	8003abe <HAL_CAN_TxMailbox0CompleteCallback>
 80037bc:	e017      	b.n	80037ee <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2204      	movs	r2, #4
 80037c2:	4013      	ands	r3, r2
 80037c4:	d005      	beq.n	80037d2 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	0112      	lsls	r2, r2, #4
 80037cc:	4313      	orrs	r3, r2
 80037ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80037d0:	e00d      	b.n	80037ee <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2208      	movs	r2, #8
 80037d6:	4013      	ands	r3, r2
 80037d8:	d005      	beq.n	80037e6 <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80037da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	0152      	lsls	r2, r2, #5
 80037e0:	4313      	orrs	r3, r2
 80037e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e4:	e003      	b.n	80037ee <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f000 f980 	bl	8003aee <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	2380      	movs	r3, #128	@ 0x80
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4013      	ands	r3, r2
 80037f6:	d028      	beq.n	800384a <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2280      	movs	r2, #128	@ 0x80
 80037fe:	0052      	lsls	r2, r2, #1
 8003800:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	2380      	movs	r3, #128	@ 0x80
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4013      	ands	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0018      	movs	r0, r3
 8003810:	f000 f95d 	bl	8003ace <HAL_CAN_TxMailbox1CompleteCallback>
 8003814:	e019      	b.n	800384a <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	2380      	movs	r3, #128	@ 0x80
 800381a:	00db      	lsls	r3, r3, #3
 800381c:	4013      	ands	r3, r2
 800381e:	d005      	beq.n	800382c <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	2280      	movs	r2, #128	@ 0x80
 8003824:	0192      	lsls	r2, r2, #6
 8003826:	4313      	orrs	r3, r2
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
 800382a:	e00e      	b.n	800384a <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	2380      	movs	r3, #128	@ 0x80
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	4013      	ands	r3, r2
 8003834:	d005      	beq.n	8003842 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	2280      	movs	r2, #128	@ 0x80
 800383a:	01d2      	lsls	r2, r2, #7
 800383c:	4313      	orrs	r3, r2
 800383e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003840:	e003      	b.n	800384a <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	0018      	movs	r0, r3
 8003846:	f000 f95a 	bl	8003afe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	025b      	lsls	r3, r3, #9
 8003850:	4013      	ands	r3, r2
 8003852:	d028      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2280      	movs	r2, #128	@ 0x80
 800385a:	0252      	lsls	r2, r2, #9
 800385c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	2380      	movs	r3, #128	@ 0x80
 8003862:	029b      	lsls	r3, r3, #10
 8003864:	4013      	ands	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 f937 	bl	8003ade <HAL_CAN_TxMailbox2CompleteCallback>
 8003870:	e019      	b.n	80038a6 <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	02db      	lsls	r3, r3, #11
 8003878:	4013      	ands	r3, r2
 800387a:	d005      	beq.n	8003888 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	2280      	movs	r2, #128	@ 0x80
 8003880:	0212      	lsls	r2, r2, #8
 8003882:	4313      	orrs	r3, r2
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
 8003886:	e00e      	b.n	80038a6 <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	031b      	lsls	r3, r3, #12
 800388e:	4013      	ands	r3, r2
 8003890:	d005      	beq.n	800389e <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	2280      	movs	r2, #128	@ 0x80
 8003896:	0252      	lsls	r2, r2, #9
 8003898:	4313      	orrs	r3, r2
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24
 800389c:	e003      	b.n	80038a6 <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 f934 	bl	8003b0e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	2208      	movs	r2, #8
 80038aa:	4013      	ands	r3, r2
 80038ac:	d00c      	beq.n	80038c8 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2210      	movs	r2, #16
 80038b2:	4013      	ands	r3, r2
 80038b4:	d008      	beq.n	80038c8 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80038b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b8:	2280      	movs	r2, #128	@ 0x80
 80038ba:	0092      	lsls	r2, r2, #2
 80038bc:	4313      	orrs	r3, r2
 80038be:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2210      	movs	r2, #16
 80038c6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80038c8:	6a3b      	ldr	r3, [r7, #32]
 80038ca:	2204      	movs	r2, #4
 80038cc:	4013      	ands	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2208      	movs	r2, #8
 80038d4:	4013      	ands	r3, r2
 80038d6:	d007      	beq.n	80038e8 <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2208      	movs	r2, #8
 80038de:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f91b 	bl	8003b1e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	2202      	movs	r2, #2
 80038ec:	4013      	ands	r3, r2
 80038ee:	d009      	beq.n	8003904 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	2203      	movs	r2, #3
 80038f8:	4013      	ands	r3, r2
 80038fa:	d003      	beq.n	8003904 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	0018      	movs	r0, r3
 8003900:	f7fc fcc4 	bl	800028c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	2240      	movs	r2, #64	@ 0x40
 8003908:	4013      	ands	r3, r2
 800390a:	d00c      	beq.n	8003926 <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	2210      	movs	r2, #16
 8003910:	4013      	ands	r3, r2
 8003912:	d008      	beq.n	8003926 <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003916:	2280      	movs	r2, #128	@ 0x80
 8003918:	00d2      	lsls	r2, r2, #3
 800391a:	4313      	orrs	r3, r2
 800391c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2210      	movs	r2, #16
 8003924:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	2220      	movs	r2, #32
 800392a:	4013      	ands	r3, r2
 800392c:	d00b      	beq.n	8003946 <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	2208      	movs	r2, #8
 8003932:	4013      	ands	r3, r2
 8003934:	d007      	beq.n	8003946 <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2208      	movs	r2, #8
 800393c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	0018      	movs	r0, r3
 8003942:	f000 f8fc 	bl	8003b3e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	2210      	movs	r2, #16
 800394a:	4013      	ands	r3, r2
 800394c:	d009      	beq.n	8003962 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	2203      	movs	r2, #3
 8003956:	4013      	ands	r3, r2
 8003958:	d003      	beq.n	8003962 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	0018      	movs	r0, r3
 800395e:	f000 f8e6 	bl	8003b2e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003962:	6a3a      	ldr	r2, [r7, #32]
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	029b      	lsls	r3, r3, #10
 8003968:	4013      	ands	r3, r2
 800396a:	d00b      	beq.n	8003984 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	2210      	movs	r2, #16
 8003970:	4013      	ands	r3, r2
 8003972:	d007      	beq.n	8003984 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2210      	movs	r2, #16
 800397a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	0018      	movs	r0, r3
 8003980:	f000 f8e5 	bl	8003b4e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	2380      	movs	r3, #128	@ 0x80
 8003988:	025b      	lsls	r3, r3, #9
 800398a:	4013      	ands	r3, r2
 800398c:	d00b      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	2208      	movs	r2, #8
 8003992:	4013      	ands	r3, r2
 8003994:	d007      	beq.n	80039a6 <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2208      	movs	r2, #8
 800399c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 f8dc 	bl	8003b5e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80039a6:	6a3a      	ldr	r2, [r7, #32]
 80039a8:	2380      	movs	r3, #128	@ 0x80
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	4013      	ands	r3, r2
 80039ae:	d100      	bne.n	80039b2 <HAL_CAN_IRQHandler+0x25c>
 80039b0:	e074      	b.n	8003a9c <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2204      	movs	r2, #4
 80039b6:	4013      	ands	r3, r2
 80039b8:	d100      	bne.n	80039bc <HAL_CAN_IRQHandler+0x266>
 80039ba:	e06b      	b.n	8003a94 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039bc:	6a3a      	ldr	r2, [r7, #32]
 80039be:	2380      	movs	r3, #128	@ 0x80
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4013      	ands	r3, r2
 80039c4:	d007      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2201      	movs	r2, #1
 80039ca:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80039cc:	d003      	beq.n	80039d6 <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80039ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d0:	2201      	movs	r2, #1
 80039d2:	4313      	orrs	r3, r2
 80039d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039d6:	6a3a      	ldr	r2, [r7, #32]
 80039d8:	2380      	movs	r3, #128	@ 0x80
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4013      	ands	r3, r2
 80039de:	d007      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2202      	movs	r2, #2
 80039e4:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80039e6:	d003      	beq.n	80039f0 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80039e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ea:	2202      	movs	r2, #2
 80039ec:	4313      	orrs	r3, r2
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	2380      	movs	r3, #128	@ 0x80
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4013      	ands	r3, r2
 80039f8:	d007      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2204      	movs	r2, #4
 80039fe:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003a00:	d003      	beq.n	8003a0a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	2204      	movs	r2, #4
 8003a06:	4313      	orrs	r3, r2
 8003a08:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a0a:	6a3a      	ldr	r2, [r7, #32]
 8003a0c:	2380      	movs	r3, #128	@ 0x80
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	4013      	ands	r3, r2
 8003a12:	d03f      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2270      	movs	r2, #112	@ 0x70
 8003a18:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003a1a:	d03b      	beq.n	8003a94 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2270      	movs	r2, #112	@ 0x70
 8003a20:	4013      	ands	r3, r2
 8003a22:	2b60      	cmp	r3, #96	@ 0x60
 8003a24:	d027      	beq.n	8003a76 <HAL_CAN_IRQHandler+0x320>
 8003a26:	d82c      	bhi.n	8003a82 <HAL_CAN_IRQHandler+0x32c>
 8003a28:	2b50      	cmp	r3, #80	@ 0x50
 8003a2a:	d01f      	beq.n	8003a6c <HAL_CAN_IRQHandler+0x316>
 8003a2c:	d829      	bhi.n	8003a82 <HAL_CAN_IRQHandler+0x32c>
 8003a2e:	2b40      	cmp	r3, #64	@ 0x40
 8003a30:	d017      	beq.n	8003a62 <HAL_CAN_IRQHandler+0x30c>
 8003a32:	d826      	bhi.n	8003a82 <HAL_CAN_IRQHandler+0x32c>
 8003a34:	2b30      	cmp	r3, #48	@ 0x30
 8003a36:	d00f      	beq.n	8003a58 <HAL_CAN_IRQHandler+0x302>
 8003a38:	d823      	bhi.n	8003a82 <HAL_CAN_IRQHandler+0x32c>
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d002      	beq.n	8003a44 <HAL_CAN_IRQHandler+0x2ee>
 8003a3e:	2b20      	cmp	r3, #32
 8003a40:	d005      	beq.n	8003a4e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003a42:	e01e      	b.n	8003a82 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	2208      	movs	r2, #8
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a4c:	e01a      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	2210      	movs	r2, #16
 8003a52:	4313      	orrs	r3, r2
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a56:	e015      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a60:	e010      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	2240      	movs	r2, #64	@ 0x40
 8003a66:	4313      	orrs	r3, r2
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a6a:	e00b      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	2280      	movs	r2, #128	@ 0x80
 8003a70:	4313      	orrs	r3, r2
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a74:	e006      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a78:	2280      	movs	r2, #128	@ 0x80
 8003a7a:	0052      	lsls	r2, r2, #1
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003a80:	e000      	b.n	8003a84 <HAL_CAN_IRQHandler+0x32e>
            break;
 8003a82:	46c0      	nop			@ (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	699a      	ldr	r2, [r3, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2170      	movs	r1, #112	@ 0x70
 8003a90:	438a      	bics	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f000 f85c 	bl	8003b6e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003ab6:	46c0      	nop			@ (mov r8, r8)
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	b00a      	add	sp, #40	@ 0x28
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003ac6:	46c0      	nop			@ (mov r8, r8)
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	b002      	add	sp, #8
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b082      	sub	sp, #8
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	b002      	add	sp, #8
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b002      	add	sp, #8
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003af6:	46c0      	nop			@ (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}

08003afe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	b002      	add	sp, #8
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b082      	sub	sp, #8
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003b16:	46c0      	nop			@ (mov r8, r8)
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	b002      	add	sp, #8
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003b36:	46c0      	nop			@ (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	b002      	add	sp, #8
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b082      	sub	sp, #8
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	b002      	add	sp, #8
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003b66:	46c0      	nop			@ (mov r8, r8)
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	b002      	add	sp, #8
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b002      	add	sp, #8
 8003b7c:	bd80      	pop	{r7, pc}
	...

08003b80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	0002      	movs	r2, r0
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003b8c:	1dfb      	adds	r3, r7, #7
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b92:	d809      	bhi.n	8003ba8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b94:	1dfb      	adds	r3, r7, #7
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	001a      	movs	r2, r3
 8003b9a:	231f      	movs	r3, #31
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	4b04      	ldr	r3, [pc, #16]	@ (8003bb0 <__NVIC_EnableIRQ+0x30>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	4091      	lsls	r1, r2
 8003ba4:	000a      	movs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
  }
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	e000e100 	.word	0xe000e100

08003bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	0002      	movs	r2, r0
 8003bbc:	6039      	str	r1, [r7, #0]
 8003bbe:	1dfb      	adds	r3, r7, #7
 8003bc0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003bc2:	1dfb      	adds	r3, r7, #7
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bc8:	d828      	bhi.n	8003c1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003bca:	4a2f      	ldr	r2, [pc, #188]	@ (8003c88 <__NVIC_SetPriority+0xd4>)
 8003bcc:	1dfb      	adds	r3, r7, #7
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	b25b      	sxtb	r3, r3
 8003bd2:	089b      	lsrs	r3, r3, #2
 8003bd4:	33c0      	adds	r3, #192	@ 0xc0
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	589b      	ldr	r3, [r3, r2]
 8003bda:	1dfa      	adds	r2, r7, #7
 8003bdc:	7812      	ldrb	r2, [r2, #0]
 8003bde:	0011      	movs	r1, r2
 8003be0:	2203      	movs	r2, #3
 8003be2:	400a      	ands	r2, r1
 8003be4:	00d2      	lsls	r2, r2, #3
 8003be6:	21ff      	movs	r1, #255	@ 0xff
 8003be8:	4091      	lsls	r1, r2
 8003bea:	000a      	movs	r2, r1
 8003bec:	43d2      	mvns	r2, r2
 8003bee:	401a      	ands	r2, r3
 8003bf0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	22ff      	movs	r2, #255	@ 0xff
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	1dfb      	adds	r3, r7, #7
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	0018      	movs	r0, r3
 8003c00:	2303      	movs	r3, #3
 8003c02:	4003      	ands	r3, r0
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c08:	481f      	ldr	r0, [pc, #124]	@ (8003c88 <__NVIC_SetPriority+0xd4>)
 8003c0a:	1dfb      	adds	r3, r7, #7
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b25b      	sxtb	r3, r3
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	430a      	orrs	r2, r1
 8003c14:	33c0      	adds	r3, #192	@ 0xc0
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003c1a:	e031      	b.n	8003c80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <__NVIC_SetPriority+0xd8>)
 8003c1e:	1dfb      	adds	r3, r7, #7
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	0019      	movs	r1, r3
 8003c24:	230f      	movs	r3, #15
 8003c26:	400b      	ands	r3, r1
 8003c28:	3b08      	subs	r3, #8
 8003c2a:	089b      	lsrs	r3, r3, #2
 8003c2c:	3306      	adds	r3, #6
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	18d3      	adds	r3, r2, r3
 8003c32:	3304      	adds	r3, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	1dfa      	adds	r2, r7, #7
 8003c38:	7812      	ldrb	r2, [r2, #0]
 8003c3a:	0011      	movs	r1, r2
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	400a      	ands	r2, r1
 8003c40:	00d2      	lsls	r2, r2, #3
 8003c42:	21ff      	movs	r1, #255	@ 0xff
 8003c44:	4091      	lsls	r1, r2
 8003c46:	000a      	movs	r2, r1
 8003c48:	43d2      	mvns	r2, r2
 8003c4a:	401a      	ands	r2, r3
 8003c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	22ff      	movs	r2, #255	@ 0xff
 8003c54:	401a      	ands	r2, r3
 8003c56:	1dfb      	adds	r3, r7, #7
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	4003      	ands	r3, r0
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c64:	4809      	ldr	r0, [pc, #36]	@ (8003c8c <__NVIC_SetPriority+0xd8>)
 8003c66:	1dfb      	adds	r3, r7, #7
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	001c      	movs	r4, r3
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	4023      	ands	r3, r4
 8003c70:	3b08      	subs	r3, #8
 8003c72:	089b      	lsrs	r3, r3, #2
 8003c74:	430a      	orrs	r2, r1
 8003c76:	3306      	adds	r3, #6
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	18c3      	adds	r3, r0, r3
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	601a      	str	r2, [r3, #0]
}
 8003c80:	46c0      	nop			@ (mov r8, r8)
 8003c82:	46bd      	mov	sp, r7
 8003c84:	b003      	add	sp, #12
 8003c86:	bd90      	pop	{r4, r7, pc}
 8003c88:	e000e100 	.word	0xe000e100
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1e5a      	subs	r2, r3, #1
 8003c9c:	2380      	movs	r3, #128	@ 0x80
 8003c9e:	045b      	lsls	r3, r3, #17
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d301      	bcc.n	8003ca8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e010      	b.n	8003cca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd4 <SysTick_Config+0x44>)
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	3a01      	subs	r2, #1
 8003cae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	425b      	negs	r3, r3
 8003cb4:	2103      	movs	r1, #3
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff ff7c 	bl	8003bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cbc:	4b05      	ldr	r3, [pc, #20]	@ (8003cd4 <SysTick_Config+0x44>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cc2:	4b04      	ldr	r3, [pc, #16]	@ (8003cd4 <SysTick_Config+0x44>)
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	0018      	movs	r0, r3
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	e000e010 	.word	0xe000e010

08003cd8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60b9      	str	r1, [r7, #8]
 8003ce0:	607a      	str	r2, [r7, #4]
 8003ce2:	210f      	movs	r1, #15
 8003ce4:	187b      	adds	r3, r7, r1
 8003ce6:	1c02      	adds	r2, r0, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	b25b      	sxtb	r3, r3
 8003cf2:	0011      	movs	r1, r2
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7ff ff5d 	bl	8003bb4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b004      	add	sp, #16
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b082      	sub	sp, #8
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	0002      	movs	r2, r0
 8003d0a:	1dfb      	adds	r3, r7, #7
 8003d0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d0e:	1dfb      	adds	r3, r7, #7
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	b25b      	sxtb	r3, r3
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff ff33 	bl	8003b80 <__NVIC_EnableIRQ>
}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b002      	add	sp, #8
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b082      	sub	sp, #8
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7ff ffaf 	bl	8003c90 <SysTick_Config>
 8003d32:	0003      	movs	r3, r0
}
 8003d34:	0018      	movs	r0, r3
 8003d36:	46bd      	mov	sp, r7
 8003d38:	b002      	add	sp, #8
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e036      	b.n	8003dc0 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2221      	movs	r2, #33	@ 0x21
 8003d56:	2102      	movs	r1, #2
 8003d58:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <HAL_DMA_Init+0x8c>)
 8003d66:	4013      	ands	r3, r2
 8003d68:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 f946 	bl	8004034 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2221      	movs	r2, #33	@ 0x21
 8003db2:	2101      	movs	r1, #1
 8003db4:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	2100      	movs	r1, #0
 8003dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	0018      	movs	r0, r3
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	b004      	add	sp, #16
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	ffffc00f 	.word	0xffffc00f

08003dcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2317      	movs	r3, #23
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	2200      	movs	r2, #0
 8003de0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2220      	movs	r2, #32
 8003de6:	5c9b      	ldrb	r3, [r3, r2]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d101      	bne.n	8003df0 <HAL_DMA_Start_IT+0x24>
 8003dec:	2302      	movs	r3, #2
 8003dee:	e04f      	b.n	8003e90 <HAL_DMA_Start_IT+0xc4>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	2101      	movs	r1, #1
 8003df6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2221      	movs	r2, #33	@ 0x21
 8003dfc:	5c9b      	ldrb	r3, [r3, r2]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d13a      	bne.n	8003e7a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2221      	movs	r2, #33	@ 0x21
 8003e08:	2102      	movs	r1, #2
 8003e0a:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	438a      	bics	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f8d7 	bl	8003fdc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	210e      	movs	r1, #14
 8003e42:	430a      	orrs	r2, r1
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e00f      	b.n	8003e68 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	210a      	movs	r1, #10
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2104      	movs	r1, #4
 8003e64:	438a      	bics	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2101      	movs	r1, #1
 8003e74:	430a      	orrs	r2, r1
 8003e76:	601a      	str	r2, [r3, #0]
 8003e78:	e007      	b.n	8003e8a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	2100      	movs	r1, #0
 8003e80:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e82:	2317      	movs	r3, #23
 8003e84:	18fb      	adds	r3, r7, r3
 8003e86:	2202      	movs	r2, #2
 8003e88:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003e8a:	2317      	movs	r3, #23
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	781b      	ldrb	r3, [r3, #0]
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b006      	add	sp, #24
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	409a      	lsls	r2, r3
 8003eb8:	0013      	movs	r3, r2
 8003eba:	68fa      	ldr	r2, [r7, #12]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	d024      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x72>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2204      	movs	r2, #4
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d020      	beq.n	8003f0a <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d107      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2104      	movs	r1, #4
 8003ee0:	438a      	bics	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eec:	2104      	movs	r1, #4
 8003eee:	4091      	lsls	r1, r2
 8003ef0:	000a      	movs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d100      	bne.n	8003efe <HAL_DMA_IRQHandler+0x66>
 8003efc:	e06a      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	0010      	movs	r0, r2
 8003f06:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003f08:	e064      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2202      	movs	r2, #2
 8003f10:	409a      	lsls	r2, r3
 8003f12:	0013      	movs	r3, r2
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4013      	ands	r3, r2
 8003f18:	d02b      	beq.n	8003f72 <HAL_DMA_IRQHandler+0xda>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	4013      	ands	r3, r2
 8003f20:	d027      	beq.n	8003f72 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d10b      	bne.n	8003f46 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	210a      	movs	r1, #10
 8003f3a:	438a      	bics	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2221      	movs	r2, #33	@ 0x21
 8003f42:	2101      	movs	r1, #1
 8003f44:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f4e:	2102      	movs	r1, #2
 8003f50:	4091      	lsls	r1, r2
 8003f52:	000a      	movs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2220      	movs	r2, #32
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d036      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	0010      	movs	r0, r2
 8003f6e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003f70:	e030      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f76:	2208      	movs	r2, #8
 8003f78:	409a      	lsls	r2, r3
 8003f7a:	0013      	movs	r3, r2
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d028      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x13c>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2208      	movs	r2, #8
 8003f86:	4013      	ands	r3, r2
 8003f88:	d024      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	210e      	movs	r1, #14
 8003f96:	438a      	bics	r2, r1
 8003f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4091      	lsls	r1, r2
 8003fa6:	000a      	movs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2221      	movs	r2, #33	@ 0x21
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d005      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	0010      	movs	r0, r2
 8003fd0:	4798      	blx	r3
    }
  }
}
 8003fd2:	e7ff      	b.n	8003fd4 <HAL_DMA_IRQHandler+0x13c>
 8003fd4:	46c0      	nop			@ (mov r8, r8)
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	b004      	add	sp, #16
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4091      	lsls	r1, r2
 8003ff6:	000a      	movs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b10      	cmp	r3, #16
 8004008:	d108      	bne.n	800401c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800401a:	e007      	b.n	800402c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68ba      	ldr	r2, [r7, #8]
 8004022:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	60da      	str	r2, [r3, #12]
}
 800402c:	46c0      	nop			@ (mov r8, r8)
 800402e:	46bd      	mov	sp, r7
 8004030:	b004      	add	sp, #16
 8004032:	bd80      	pop	{r7, pc}

08004034 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a08      	ldr	r2, [pc, #32]	@ (8004064 <DMA_CalcBaseAndBitshift+0x30>)
 8004042:	4694      	mov	ip, r2
 8004044:	4463      	add	r3, ip
 8004046:	2114      	movs	r1, #20
 8004048:	0018      	movs	r0, r3
 800404a:	f7fc f85d 	bl	8000108 <__udivsi3>
 800404e:	0003      	movs	r3, r0
 8004050:	009a      	lsls	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a03      	ldr	r2, [pc, #12]	@ (8004068 <DMA_CalcBaseAndBitshift+0x34>)
 800405a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}
 8004064:	bffdfff8 	.word	0xbffdfff8
 8004068:	40020000 	.word	0x40020000

0800406c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b086      	sub	sp, #24
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800407a:	e149      	b.n	8004310 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2101      	movs	r1, #1
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4091      	lsls	r1, r2
 8004086:	000a      	movs	r2, r1
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d100      	bne.n	8004094 <HAL_GPIO_Init+0x28>
 8004092:	e13a      	b.n	800430a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2203      	movs	r2, #3
 800409a:	4013      	ands	r3, r2
 800409c:	2b01      	cmp	r3, #1
 800409e:	d005      	beq.n	80040ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2203      	movs	r2, #3
 80040a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80040a8:	2b02      	cmp	r3, #2
 80040aa:	d130      	bne.n	800410e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	2203      	movs	r2, #3
 80040b8:	409a      	lsls	r2, r3
 80040ba:	0013      	movs	r3, r2
 80040bc:	43da      	mvns	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	409a      	lsls	r2, r3
 80040ce:	0013      	movs	r3, r2
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040e2:	2201      	movs	r2, #1
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	409a      	lsls	r2, r3
 80040e8:	0013      	movs	r3, r2
 80040ea:	43da      	mvns	r2, r3
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4013      	ands	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	2201      	movs	r2, #1
 80040fa:	401a      	ands	r2, r3
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	409a      	lsls	r2, r3
 8004100:	0013      	movs	r3, r2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	2203      	movs	r2, #3
 8004114:	4013      	ands	r3, r2
 8004116:	2b03      	cmp	r3, #3
 8004118:	d017      	beq.n	800414a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	2203      	movs	r2, #3
 8004126:	409a      	lsls	r2, r3
 8004128:	0013      	movs	r3, r2
 800412a:	43da      	mvns	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	409a      	lsls	r2, r3
 800413c:	0013      	movs	r3, r2
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2203      	movs	r2, #3
 8004150:	4013      	ands	r3, r2
 8004152:	2b02      	cmp	r3, #2
 8004154:	d123      	bne.n	800419e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	08da      	lsrs	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3208      	adds	r2, #8
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	58d3      	ldr	r3, [r2, r3]
 8004162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	2207      	movs	r2, #7
 8004168:	4013      	ands	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	409a      	lsls	r2, r3
 8004170:	0013      	movs	r3, r2
 8004172:	43da      	mvns	r2, r3
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	2107      	movs	r1, #7
 8004182:	400b      	ands	r3, r1
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	409a      	lsls	r2, r3
 8004188:	0013      	movs	r3, r2
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	08da      	lsrs	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3208      	adds	r2, #8
 8004198:	0092      	lsls	r2, r2, #2
 800419a:	6939      	ldr	r1, [r7, #16]
 800419c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	409a      	lsls	r2, r3
 80041ac:	0013      	movs	r3, r2
 80041ae:	43da      	mvns	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2203      	movs	r2, #3
 80041bc:	401a      	ands	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	409a      	lsls	r2, r3
 80041c4:	0013      	movs	r3, r2
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	23c0      	movs	r3, #192	@ 0xc0
 80041d8:	029b      	lsls	r3, r3, #10
 80041da:	4013      	ands	r3, r2
 80041dc:	d100      	bne.n	80041e0 <HAL_GPIO_Init+0x174>
 80041de:	e094      	b.n	800430a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e0:	4b51      	ldr	r3, [pc, #324]	@ (8004328 <HAL_GPIO_Init+0x2bc>)
 80041e2:	699a      	ldr	r2, [r3, #24]
 80041e4:	4b50      	ldr	r3, [pc, #320]	@ (8004328 <HAL_GPIO_Init+0x2bc>)
 80041e6:	2101      	movs	r1, #1
 80041e8:	430a      	orrs	r2, r1
 80041ea:	619a      	str	r2, [r3, #24]
 80041ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004328 <HAL_GPIO_Init+0x2bc>)
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2201      	movs	r2, #1
 80041f2:	4013      	ands	r3, r2
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041f8:	4a4c      	ldr	r2, [pc, #304]	@ (800432c <HAL_GPIO_Init+0x2c0>)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	3302      	adds	r3, #2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	589b      	ldr	r3, [r3, r2]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2203      	movs	r2, #3
 800420a:	4013      	ands	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	220f      	movs	r2, #15
 8004210:	409a      	lsls	r2, r3
 8004212:	0013      	movs	r3, r2
 8004214:	43da      	mvns	r2, r3
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	2390      	movs	r3, #144	@ 0x90
 8004220:	05db      	lsls	r3, r3, #23
 8004222:	429a      	cmp	r2, r3
 8004224:	d00d      	beq.n	8004242 <HAL_GPIO_Init+0x1d6>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a41      	ldr	r2, [pc, #260]	@ (8004330 <HAL_GPIO_Init+0x2c4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d007      	beq.n	800423e <HAL_GPIO_Init+0x1d2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a40      	ldr	r2, [pc, #256]	@ (8004334 <HAL_GPIO_Init+0x2c8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_GPIO_Init+0x1ce>
 8004236:	2302      	movs	r3, #2
 8004238:	e004      	b.n	8004244 <HAL_GPIO_Init+0x1d8>
 800423a:	2305      	movs	r3, #5
 800423c:	e002      	b.n	8004244 <HAL_GPIO_Init+0x1d8>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_GPIO_Init+0x1d8>
 8004242:	2300      	movs	r3, #0
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	2103      	movs	r1, #3
 8004248:	400a      	ands	r2, r1
 800424a:	0092      	lsls	r2, r2, #2
 800424c:	4093      	lsls	r3, r2
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4313      	orrs	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004254:	4935      	ldr	r1, [pc, #212]	@ (800432c <HAL_GPIO_Init+0x2c0>)
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	089b      	lsrs	r3, r3, #2
 800425a:	3302      	adds	r3, #2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	693a      	ldr	r2, [r7, #16]
 8004260:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004262:	4b35      	ldr	r3, [pc, #212]	@ (8004338 <HAL_GPIO_Init+0x2cc>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	43da      	mvns	r2, r3
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	4013      	ands	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	2380      	movs	r3, #128	@ 0x80
 8004278:	035b      	lsls	r3, r3, #13
 800427a:	4013      	ands	r3, r2
 800427c:	d003      	beq.n	8004286 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004286:	4b2c      	ldr	r3, [pc, #176]	@ (8004338 <HAL_GPIO_Init+0x2cc>)
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800428c:	4b2a      	ldr	r3, [pc, #168]	@ (8004338 <HAL_GPIO_Init+0x2cc>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	43da      	mvns	r2, r3
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4013      	ands	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	039b      	lsls	r3, r3, #14
 80042a4:	4013      	ands	r3, r2
 80042a6:	d003      	beq.n	80042b0 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80042b0:	4b21      	ldr	r3, [pc, #132]	@ (8004338 <HAL_GPIO_Init+0x2cc>)
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80042b6:	4b20      	ldr	r3, [pc, #128]	@ (8004338 <HAL_GPIO_Init+0x2cc>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	43da      	mvns	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	4013      	ands	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	2380      	movs	r3, #128	@ 0x80
 80042cc:	029b      	lsls	r3, r3, #10
 80042ce:	4013      	ands	r3, r2
 80042d0:	d003      	beq.n	80042da <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80042da:	4b17      	ldr	r3, [pc, #92]	@ (8004338 <HAL_GPIO_Init+0x2cc>)
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80042e0:	4b15      	ldr	r3, [pc, #84]	@ (8004338 <HAL_GPIO_Init+0x2cc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	43da      	mvns	r2, r3
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	4013      	ands	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	025b      	lsls	r3, r3, #9
 80042f8:	4013      	ands	r3, r2
 80042fa:	d003      	beq.n	8004304 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004304:	4b0c      	ldr	r3, [pc, #48]	@ (8004338 <HAL_GPIO_Init+0x2cc>)
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	3301      	adds	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	40da      	lsrs	r2, r3
 8004318:	1e13      	subs	r3, r2, #0
 800431a:	d000      	beq.n	800431e <HAL_GPIO_Init+0x2b2>
 800431c:	e6ae      	b.n	800407c <HAL_GPIO_Init+0x10>
  } 
}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	46c0      	nop			@ (mov r8, r8)
 8004322:	46bd      	mov	sp, r7
 8004324:	b006      	add	sp, #24
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021000 	.word	0x40021000
 800432c:	40010000 	.word	0x40010000
 8004330:	48000400 	.word	0x48000400
 8004334:	48000800 	.word	0x48000800
 8004338:	40010400 	.word	0x40010400

0800433c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	0008      	movs	r0, r1
 8004346:	0011      	movs	r1, r2
 8004348:	1cbb      	adds	r3, r7, #2
 800434a:	1c02      	adds	r2, r0, #0
 800434c:	801a      	strh	r2, [r3, #0]
 800434e:	1c7b      	adds	r3, r7, #1
 8004350:	1c0a      	adds	r2, r1, #0
 8004352:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004354:	1c7b      	adds	r3, r7, #1
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d004      	beq.n	8004366 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800435c:	1cbb      	adds	r3, r7, #2
 800435e:	881a      	ldrh	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004364:	e003      	b.n	800436e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004366:	1cbb      	adds	r3, r7, #2
 8004368:	881a      	ldrh	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	b002      	add	sp, #8
 8004374:	bd80      	pop	{r7, pc}
	...

08004378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b088      	sub	sp, #32
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d102      	bne.n	800438c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	f000 fb76 	bl	8004a78 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2201      	movs	r2, #1
 8004392:	4013      	ands	r3, r2
 8004394:	d100      	bne.n	8004398 <HAL_RCC_OscConfig+0x20>
 8004396:	e08e      	b.n	80044b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004398:	4bc5      	ldr	r3, [pc, #788]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	220c      	movs	r2, #12
 800439e:	4013      	ands	r3, r2
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d00e      	beq.n	80043c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043a4:	4bc2      	ldr	r3, [pc, #776]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	220c      	movs	r2, #12
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b08      	cmp	r3, #8
 80043ae:	d117      	bne.n	80043e0 <HAL_RCC_OscConfig+0x68>
 80043b0:	4bbf      	ldr	r3, [pc, #764]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	23c0      	movs	r3, #192	@ 0xc0
 80043b6:	025b      	lsls	r3, r3, #9
 80043b8:	401a      	ands	r2, r3
 80043ba:	2380      	movs	r3, #128	@ 0x80
 80043bc:	025b      	lsls	r3, r3, #9
 80043be:	429a      	cmp	r2, r3
 80043c0:	d10e      	bne.n	80043e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c2:	4bbb      	ldr	r3, [pc, #748]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	2380      	movs	r3, #128	@ 0x80
 80043c8:	029b      	lsls	r3, r3, #10
 80043ca:	4013      	ands	r3, r2
 80043cc:	d100      	bne.n	80043d0 <HAL_RCC_OscConfig+0x58>
 80043ce:	e071      	b.n	80044b4 <HAL_RCC_OscConfig+0x13c>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d000      	beq.n	80043da <HAL_RCC_OscConfig+0x62>
 80043d8:	e06c      	b.n	80044b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f000 fb4c 	bl	8004a78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d107      	bne.n	80043f8 <HAL_RCC_OscConfig+0x80>
 80043e8:	4bb1      	ldr	r3, [pc, #708]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4bb0      	ldr	r3, [pc, #704]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80043ee:	2180      	movs	r1, #128	@ 0x80
 80043f0:	0249      	lsls	r1, r1, #9
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	e02f      	b.n	8004458 <HAL_RCC_OscConfig+0xe0>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10c      	bne.n	800441a <HAL_RCC_OscConfig+0xa2>
 8004400:	4bab      	ldr	r3, [pc, #684]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4baa      	ldr	r3, [pc, #680]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004406:	49ab      	ldr	r1, [pc, #684]	@ (80046b4 <HAL_RCC_OscConfig+0x33c>)
 8004408:	400a      	ands	r2, r1
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	4ba8      	ldr	r3, [pc, #672]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4ba7      	ldr	r3, [pc, #668]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004412:	49a9      	ldr	r1, [pc, #676]	@ (80046b8 <HAL_RCC_OscConfig+0x340>)
 8004414:	400a      	ands	r2, r1
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e01e      	b.n	8004458 <HAL_RCC_OscConfig+0xe0>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b05      	cmp	r3, #5
 8004420:	d10e      	bne.n	8004440 <HAL_RCC_OscConfig+0xc8>
 8004422:	4ba3      	ldr	r3, [pc, #652]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4ba2      	ldr	r3, [pc, #648]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004428:	2180      	movs	r1, #128	@ 0x80
 800442a:	02c9      	lsls	r1, r1, #11
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	4b9f      	ldr	r3, [pc, #636]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	4b9e      	ldr	r3, [pc, #632]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004436:	2180      	movs	r1, #128	@ 0x80
 8004438:	0249      	lsls	r1, r1, #9
 800443a:	430a      	orrs	r2, r1
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	e00b      	b.n	8004458 <HAL_RCC_OscConfig+0xe0>
 8004440:	4b9b      	ldr	r3, [pc, #620]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b9a      	ldr	r3, [pc, #616]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004446:	499b      	ldr	r1, [pc, #620]	@ (80046b4 <HAL_RCC_OscConfig+0x33c>)
 8004448:	400a      	ands	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	4b98      	ldr	r3, [pc, #608]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b97      	ldr	r3, [pc, #604]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004452:	4999      	ldr	r1, [pc, #612]	@ (80046b8 <HAL_RCC_OscConfig+0x340>)
 8004454:	400a      	ands	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d014      	beq.n	800448a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fd ffe8 	bl	8002434 <HAL_GetTick>
 8004464:	0003      	movs	r3, r0
 8004466:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800446a:	f7fd ffe3 	bl	8002434 <HAL_GetTick>
 800446e:	0002      	movs	r2, r0
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b64      	cmp	r3, #100	@ 0x64
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e2fd      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447c:	4b8c      	ldr	r3, [pc, #560]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	2380      	movs	r3, #128	@ 0x80
 8004482:	029b      	lsls	r3, r3, #10
 8004484:	4013      	ands	r3, r2
 8004486:	d0f0      	beq.n	800446a <HAL_RCC_OscConfig+0xf2>
 8004488:	e015      	b.n	80044b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448a:	f7fd ffd3 	bl	8002434 <HAL_GetTick>
 800448e:	0003      	movs	r3, r0
 8004490:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004494:	f7fd ffce 	bl	8002434 <HAL_GetTick>
 8004498:	0002      	movs	r2, r0
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b64      	cmp	r3, #100	@ 0x64
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e2e8      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044a6:	4b82      	ldr	r3, [pc, #520]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	2380      	movs	r3, #128	@ 0x80
 80044ac:	029b      	lsls	r3, r3, #10
 80044ae:	4013      	ands	r3, r2
 80044b0:	d1f0      	bne.n	8004494 <HAL_RCC_OscConfig+0x11c>
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2202      	movs	r2, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	d100      	bne.n	80044c2 <HAL_RCC_OscConfig+0x14a>
 80044c0:	e06c      	b.n	800459c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80044c2:	4b7b      	ldr	r3, [pc, #492]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	220c      	movs	r2, #12
 80044c8:	4013      	ands	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80044cc:	4b78      	ldr	r3, [pc, #480]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	220c      	movs	r2, #12
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d11f      	bne.n	8004518 <HAL_RCC_OscConfig+0x1a0>
 80044d8:	4b75      	ldr	r3, [pc, #468]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	23c0      	movs	r3, #192	@ 0xc0
 80044de:	025b      	lsls	r3, r3, #9
 80044e0:	401a      	ands	r2, r3
 80044e2:	2380      	movs	r3, #128	@ 0x80
 80044e4:	021b      	lsls	r3, r3, #8
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d116      	bne.n	8004518 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044ea:	4b71      	ldr	r3, [pc, #452]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2202      	movs	r2, #2
 80044f0:	4013      	ands	r3, r2
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_OscConfig+0x188>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d001      	beq.n	8004500 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e2bb      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004500:	4b6b      	ldr	r3, [pc, #428]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	22f8      	movs	r2, #248	@ 0xf8
 8004506:	4393      	bics	r3, r2
 8004508:	0019      	movs	r1, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	00da      	lsls	r2, r3, #3
 8004510:	4b67      	ldr	r3, [pc, #412]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004512:	430a      	orrs	r2, r1
 8004514:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004516:	e041      	b.n	800459c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d024      	beq.n	800456a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004520:	4b63      	ldr	r3, [pc, #396]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4b62      	ldr	r3, [pc, #392]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004526:	2101      	movs	r1, #1
 8004528:	430a      	orrs	r2, r1
 800452a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fd ff82 	bl	8002434 <HAL_GetTick>
 8004530:	0003      	movs	r3, r0
 8004532:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004534:	e008      	b.n	8004548 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004536:	f7fd ff7d 	bl	8002434 <HAL_GetTick>
 800453a:	0002      	movs	r2, r0
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e297      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004548:	4b59      	ldr	r3, [pc, #356]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2202      	movs	r2, #2
 800454e:	4013      	ands	r3, r2
 8004550:	d0f1      	beq.n	8004536 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004552:	4b57      	ldr	r3, [pc, #348]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	22f8      	movs	r2, #248	@ 0xf8
 8004558:	4393      	bics	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	00da      	lsls	r2, r3, #3
 8004562:	4b53      	ldr	r3, [pc, #332]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004564:	430a      	orrs	r2, r1
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	e018      	b.n	800459c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800456a:	4b51      	ldr	r3, [pc, #324]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b50      	ldr	r3, [pc, #320]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004570:	2101      	movs	r1, #1
 8004572:	438a      	bics	r2, r1
 8004574:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fd ff5d 	bl	8002434 <HAL_GetTick>
 800457a:	0003      	movs	r3, r0
 800457c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004580:	f7fd ff58 	bl	8002434 <HAL_GetTick>
 8004584:	0002      	movs	r2, r0
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e272      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004592:	4b47      	ldr	r3, [pc, #284]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2202      	movs	r2, #2
 8004598:	4013      	ands	r3, r2
 800459a:	d1f1      	bne.n	8004580 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2208      	movs	r2, #8
 80045a2:	4013      	ands	r3, r2
 80045a4:	d036      	beq.n	8004614 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d019      	beq.n	80045e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045ae:	4b40      	ldr	r3, [pc, #256]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80045b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045b2:	4b3f      	ldr	r3, [pc, #252]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80045b4:	2101      	movs	r1, #1
 80045b6:	430a      	orrs	r2, r1
 80045b8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ba:	f7fd ff3b 	bl	8002434 <HAL_GetTick>
 80045be:	0003      	movs	r3, r0
 80045c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c4:	f7fd ff36 	bl	8002434 <HAL_GetTick>
 80045c8:	0002      	movs	r2, r0
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e250      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045d6:	4b36      	ldr	r3, [pc, #216]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80045d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045da:	2202      	movs	r2, #2
 80045dc:	4013      	ands	r3, r2
 80045de:	d0f1      	beq.n	80045c4 <HAL_RCC_OscConfig+0x24c>
 80045e0:	e018      	b.n	8004614 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045e2:	4b33      	ldr	r3, [pc, #204]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80045e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045e6:	4b32      	ldr	r3, [pc, #200]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80045e8:	2101      	movs	r1, #1
 80045ea:	438a      	bics	r2, r1
 80045ec:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ee:	f7fd ff21 	bl	8002434 <HAL_GetTick>
 80045f2:	0003      	movs	r3, r0
 80045f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f6:	e008      	b.n	800460a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f8:	f7fd ff1c 	bl	8002434 <HAL_GetTick>
 80045fc:	0002      	movs	r2, r0
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d901      	bls.n	800460a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e236      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800460a:	4b29      	ldr	r3, [pc, #164]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	2202      	movs	r2, #2
 8004610:	4013      	ands	r3, r2
 8004612:	d1f1      	bne.n	80045f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2204      	movs	r2, #4
 800461a:	4013      	ands	r3, r2
 800461c:	d100      	bne.n	8004620 <HAL_RCC_OscConfig+0x2a8>
 800461e:	e0b5      	b.n	800478c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004620:	201f      	movs	r0, #31
 8004622:	183b      	adds	r3, r7, r0
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004628:	4b21      	ldr	r3, [pc, #132]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800462a:	69da      	ldr	r2, [r3, #28]
 800462c:	2380      	movs	r3, #128	@ 0x80
 800462e:	055b      	lsls	r3, r3, #21
 8004630:	4013      	ands	r3, r2
 8004632:	d110      	bne.n	8004656 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004634:	4b1e      	ldr	r3, [pc, #120]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	4b1d      	ldr	r3, [pc, #116]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 800463a:	2180      	movs	r1, #128	@ 0x80
 800463c:	0549      	lsls	r1, r1, #21
 800463e:	430a      	orrs	r2, r1
 8004640:	61da      	str	r2, [r3, #28]
 8004642:	4b1b      	ldr	r3, [pc, #108]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	2380      	movs	r3, #128	@ 0x80
 8004648:	055b      	lsls	r3, r3, #21
 800464a:	4013      	ands	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]
 800464e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004650:	183b      	adds	r3, r7, r0
 8004652:	2201      	movs	r2, #1
 8004654:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004656:	4b19      	ldr	r3, [pc, #100]	@ (80046bc <HAL_RCC_OscConfig+0x344>)
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	2380      	movs	r3, #128	@ 0x80
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	4013      	ands	r3, r2
 8004660:	d11a      	bne.n	8004698 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004662:	4b16      	ldr	r3, [pc, #88]	@ (80046bc <HAL_RCC_OscConfig+0x344>)
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	4b15      	ldr	r3, [pc, #84]	@ (80046bc <HAL_RCC_OscConfig+0x344>)
 8004668:	2180      	movs	r1, #128	@ 0x80
 800466a:	0049      	lsls	r1, r1, #1
 800466c:	430a      	orrs	r2, r1
 800466e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004670:	f7fd fee0 	bl	8002434 <HAL_GetTick>
 8004674:	0003      	movs	r3, r0
 8004676:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467a:	f7fd fedb 	bl	8002434 <HAL_GetTick>
 800467e:	0002      	movs	r2, r0
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b64      	cmp	r3, #100	@ 0x64
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e1f5      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468c:	4b0b      	ldr	r3, [pc, #44]	@ (80046bc <HAL_RCC_OscConfig+0x344>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	2380      	movs	r3, #128	@ 0x80
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4013      	ands	r3, r2
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d10f      	bne.n	80046c0 <HAL_RCC_OscConfig+0x348>
 80046a0:	4b03      	ldr	r3, [pc, #12]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	4b02      	ldr	r3, [pc, #8]	@ (80046b0 <HAL_RCC_OscConfig+0x338>)
 80046a6:	2101      	movs	r1, #1
 80046a8:	430a      	orrs	r2, r1
 80046aa:	621a      	str	r2, [r3, #32]
 80046ac:	e036      	b.n	800471c <HAL_RCC_OscConfig+0x3a4>
 80046ae:	46c0      	nop			@ (mov r8, r8)
 80046b0:	40021000 	.word	0x40021000
 80046b4:	fffeffff 	.word	0xfffeffff
 80046b8:	fffbffff 	.word	0xfffbffff
 80046bc:	40007000 	.word	0x40007000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10c      	bne.n	80046e2 <HAL_RCC_OscConfig+0x36a>
 80046c8:	4bca      	ldr	r3, [pc, #808]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80046ca:	6a1a      	ldr	r2, [r3, #32]
 80046cc:	4bc9      	ldr	r3, [pc, #804]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80046ce:	2101      	movs	r1, #1
 80046d0:	438a      	bics	r2, r1
 80046d2:	621a      	str	r2, [r3, #32]
 80046d4:	4bc7      	ldr	r3, [pc, #796]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80046d6:	6a1a      	ldr	r2, [r3, #32]
 80046d8:	4bc6      	ldr	r3, [pc, #792]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80046da:	2104      	movs	r1, #4
 80046dc:	438a      	bics	r2, r1
 80046de:	621a      	str	r2, [r3, #32]
 80046e0:	e01c      	b.n	800471c <HAL_RCC_OscConfig+0x3a4>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d10c      	bne.n	8004704 <HAL_RCC_OscConfig+0x38c>
 80046ea:	4bc2      	ldr	r3, [pc, #776]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80046ec:	6a1a      	ldr	r2, [r3, #32]
 80046ee:	4bc1      	ldr	r3, [pc, #772]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80046f0:	2104      	movs	r1, #4
 80046f2:	430a      	orrs	r2, r1
 80046f4:	621a      	str	r2, [r3, #32]
 80046f6:	4bbf      	ldr	r3, [pc, #764]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	4bbe      	ldr	r3, [pc, #760]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80046fc:	2101      	movs	r1, #1
 80046fe:	430a      	orrs	r2, r1
 8004700:	621a      	str	r2, [r3, #32]
 8004702:	e00b      	b.n	800471c <HAL_RCC_OscConfig+0x3a4>
 8004704:	4bbb      	ldr	r3, [pc, #748]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	4bba      	ldr	r3, [pc, #744]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800470a:	2101      	movs	r1, #1
 800470c:	438a      	bics	r2, r1
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	4bb8      	ldr	r3, [pc, #736]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004712:	6a1a      	ldr	r2, [r3, #32]
 8004714:	4bb7      	ldr	r3, [pc, #732]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004716:	2104      	movs	r1, #4
 8004718:	438a      	bics	r2, r1
 800471a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d014      	beq.n	800474e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004724:	f7fd fe86 	bl	8002434 <HAL_GetTick>
 8004728:	0003      	movs	r3, r0
 800472a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472c:	e009      	b.n	8004742 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800472e:	f7fd fe81 	bl	8002434 <HAL_GetTick>
 8004732:	0002      	movs	r2, r0
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	4aaf      	ldr	r2, [pc, #700]	@ (80049f8 <HAL_RCC_OscConfig+0x680>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e19a      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004742:	4bac      	ldr	r3, [pc, #688]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	2202      	movs	r2, #2
 8004748:	4013      	ands	r3, r2
 800474a:	d0f0      	beq.n	800472e <HAL_RCC_OscConfig+0x3b6>
 800474c:	e013      	b.n	8004776 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fd fe71 	bl	8002434 <HAL_GetTick>
 8004752:	0003      	movs	r3, r0
 8004754:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004756:	e009      	b.n	800476c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004758:	f7fd fe6c 	bl	8002434 <HAL_GetTick>
 800475c:	0002      	movs	r2, r0
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	4aa5      	ldr	r2, [pc, #660]	@ (80049f8 <HAL_RCC_OscConfig+0x680>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e185      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476c:	4ba1      	ldr	r3, [pc, #644]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	2202      	movs	r2, #2
 8004772:	4013      	ands	r3, r2
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004776:	231f      	movs	r3, #31
 8004778:	18fb      	adds	r3, r7, r3
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d105      	bne.n	800478c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004780:	4b9c      	ldr	r3, [pc, #624]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	4b9b      	ldr	r3, [pc, #620]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004786:	499d      	ldr	r1, [pc, #628]	@ (80049fc <HAL_RCC_OscConfig+0x684>)
 8004788:	400a      	ands	r2, r1
 800478a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2210      	movs	r2, #16
 8004792:	4013      	ands	r3, r2
 8004794:	d063      	beq.n	800485e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d12a      	bne.n	80047f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800479e:	4b95      	ldr	r3, [pc, #596]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80047a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047a2:	4b94      	ldr	r3, [pc, #592]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80047a4:	2104      	movs	r1, #4
 80047a6:	430a      	orrs	r2, r1
 80047a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80047aa:	4b92      	ldr	r3, [pc, #584]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80047ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ae:	4b91      	ldr	r3, [pc, #580]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80047b0:	2101      	movs	r1, #1
 80047b2:	430a      	orrs	r2, r1
 80047b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047b6:	f7fd fe3d 	bl	8002434 <HAL_GetTick>
 80047ba:	0003      	movs	r3, r0
 80047bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80047c0:	f7fd fe38 	bl	8002434 <HAL_GetTick>
 80047c4:	0002      	movs	r2, r0
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e152      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80047d2:	4b88      	ldr	r3, [pc, #544]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80047d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047d6:	2202      	movs	r2, #2
 80047d8:	4013      	ands	r3, r2
 80047da:	d0f1      	beq.n	80047c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80047dc:	4b85      	ldr	r3, [pc, #532]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80047de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e0:	22f8      	movs	r2, #248	@ 0xf8
 80047e2:	4393      	bics	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	00da      	lsls	r2, r3, #3
 80047ec:	4b81      	ldr	r3, [pc, #516]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80047ee:	430a      	orrs	r2, r1
 80047f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80047f2:	e034      	b.n	800485e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	3305      	adds	r3, #5
 80047fa:	d111      	bne.n	8004820 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80047fc:	4b7d      	ldr	r3, [pc, #500]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80047fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004800:	4b7c      	ldr	r3, [pc, #496]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004802:	2104      	movs	r1, #4
 8004804:	438a      	bics	r2, r1
 8004806:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004808:	4b7a      	ldr	r3, [pc, #488]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800480a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800480c:	22f8      	movs	r2, #248	@ 0xf8
 800480e:	4393      	bics	r3, r2
 8004810:	0019      	movs	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	00da      	lsls	r2, r3, #3
 8004818:	4b76      	ldr	r3, [pc, #472]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800481a:	430a      	orrs	r2, r1
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34
 800481e:	e01e      	b.n	800485e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004820:	4b74      	ldr	r3, [pc, #464]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004822:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004824:	4b73      	ldr	r3, [pc, #460]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004826:	2104      	movs	r1, #4
 8004828:	430a      	orrs	r2, r1
 800482a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800482c:	4b71      	ldr	r3, [pc, #452]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800482e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004830:	4b70      	ldr	r3, [pc, #448]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004832:	2101      	movs	r1, #1
 8004834:	438a      	bics	r2, r1
 8004836:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004838:	f7fd fdfc 	bl	8002434 <HAL_GetTick>
 800483c:	0003      	movs	r3, r0
 800483e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004842:	f7fd fdf7 	bl	8002434 <HAL_GetTick>
 8004846:	0002      	movs	r2, r0
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e111      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004854:	4b67      	ldr	r3, [pc, #412]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004856:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004858:	2202      	movs	r2, #2
 800485a:	4013      	ands	r3, r2
 800485c:	d1f1      	bne.n	8004842 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2220      	movs	r2, #32
 8004864:	4013      	ands	r3, r2
 8004866:	d05c      	beq.n	8004922 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004868:	4b62      	ldr	r3, [pc, #392]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	220c      	movs	r2, #12
 800486e:	4013      	ands	r3, r2
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d00e      	beq.n	8004892 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004874:	4b5f      	ldr	r3, [pc, #380]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	220c      	movs	r2, #12
 800487a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800487c:	2b08      	cmp	r3, #8
 800487e:	d114      	bne.n	80048aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004880:	4b5c      	ldr	r3, [pc, #368]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	23c0      	movs	r3, #192	@ 0xc0
 8004886:	025b      	lsls	r3, r3, #9
 8004888:	401a      	ands	r2, r3
 800488a:	23c0      	movs	r3, #192	@ 0xc0
 800488c:	025b      	lsls	r3, r3, #9
 800488e:	429a      	cmp	r2, r3
 8004890:	d10b      	bne.n	80048aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004892:	4b58      	ldr	r3, [pc, #352]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004894:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004896:	2380      	movs	r3, #128	@ 0x80
 8004898:	029b      	lsls	r3, r3, #10
 800489a:	4013      	ands	r3, r2
 800489c:	d040      	beq.n	8004920 <HAL_RCC_OscConfig+0x5a8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d03c      	beq.n	8004920 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e0e6      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d01b      	beq.n	80048ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80048b2:	4b50      	ldr	r3, [pc, #320]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80048b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048b6:	4b4f      	ldr	r3, [pc, #316]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80048b8:	2180      	movs	r1, #128	@ 0x80
 80048ba:	0249      	lsls	r1, r1, #9
 80048bc:	430a      	orrs	r2, r1
 80048be:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c0:	f7fd fdb8 	bl	8002434 <HAL_GetTick>
 80048c4:	0003      	movs	r3, r0
 80048c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048ca:	f7fd fdb3 	bl	8002434 <HAL_GetTick>
 80048ce:	0002      	movs	r2, r0
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e0cd      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80048dc:	4b45      	ldr	r3, [pc, #276]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80048de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048e0:	2380      	movs	r3, #128	@ 0x80
 80048e2:	029b      	lsls	r3, r3, #10
 80048e4:	4013      	ands	r3, r2
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x552>
 80048e8:	e01b      	b.n	8004922 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80048ea:	4b42      	ldr	r3, [pc, #264]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80048ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ee:	4b41      	ldr	r3, [pc, #260]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80048f0:	4943      	ldr	r1, [pc, #268]	@ (8004a00 <HAL_RCC_OscConfig+0x688>)
 80048f2:	400a      	ands	r2, r1
 80048f4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f6:	f7fd fd9d 	bl	8002434 <HAL_GetTick>
 80048fa:	0003      	movs	r3, r0
 80048fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004900:	f7fd fd98 	bl	8002434 <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e0b2      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004912:	4b38      	ldr	r3, [pc, #224]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004914:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004916:	2380      	movs	r3, #128	@ 0x80
 8004918:	029b      	lsls	r3, r3, #10
 800491a:	4013      	ands	r3, r2
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x588>
 800491e:	e000      	b.n	8004922 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004920:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	2b00      	cmp	r3, #0
 8004928:	d100      	bne.n	800492c <HAL_RCC_OscConfig+0x5b4>
 800492a:	e0a4      	b.n	8004a76 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800492c:	4b31      	ldr	r3, [pc, #196]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	220c      	movs	r2, #12
 8004932:	4013      	ands	r3, r2
 8004934:	2b08      	cmp	r3, #8
 8004936:	d100      	bne.n	800493a <HAL_RCC_OscConfig+0x5c2>
 8004938:	e078      	b.n	8004a2c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493e:	2b02      	cmp	r3, #2
 8004940:	d14c      	bne.n	80049dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004942:	4b2c      	ldr	r3, [pc, #176]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b2b      	ldr	r3, [pc, #172]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004948:	492e      	ldr	r1, [pc, #184]	@ (8004a04 <HAL_RCC_OscConfig+0x68c>)
 800494a:	400a      	ands	r2, r1
 800494c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494e:	f7fd fd71 	bl	8002434 <HAL_GetTick>
 8004952:	0003      	movs	r3, r0
 8004954:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd fd6c 	bl	8002434 <HAL_GetTick>
 800495c:	0002      	movs	r2, r0
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e086      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496a:	4b22      	ldr	r3, [pc, #136]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	049b      	lsls	r3, r3, #18
 8004972:	4013      	ands	r3, r2
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004976:	4b1f      	ldr	r3, [pc, #124]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	220f      	movs	r2, #15
 800497c:	4393      	bics	r3, r2
 800497e:	0019      	movs	r1, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004984:	4b1b      	ldr	r3, [pc, #108]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 8004986:	430a      	orrs	r2, r1
 8004988:	62da      	str	r2, [r3, #44]	@ 0x2c
 800498a:	4b1a      	ldr	r3, [pc, #104]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4a1e      	ldr	r2, [pc, #120]	@ (8004a08 <HAL_RCC_OscConfig+0x690>)
 8004990:	4013      	ands	r3, r2
 8004992:	0019      	movs	r1, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	431a      	orrs	r2, r3
 800499e:	4b15      	ldr	r3, [pc, #84]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80049a0:	430a      	orrs	r2, r1
 80049a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049a4:	4b13      	ldr	r3, [pc, #76]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b12      	ldr	r3, [pc, #72]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80049aa:	2180      	movs	r1, #128	@ 0x80
 80049ac:	0449      	lsls	r1, r1, #17
 80049ae:	430a      	orrs	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fd fd3f 	bl	8002434 <HAL_GetTick>
 80049b6:	0003      	movs	r3, r0
 80049b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049bc:	f7fd fd3a 	bl	8002434 <HAL_GetTick>
 80049c0:	0002      	movs	r2, r0
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e054      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049ce:	4b09      	ldr	r3, [pc, #36]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	2380      	movs	r3, #128	@ 0x80
 80049d4:	049b      	lsls	r3, r3, #18
 80049d6:	4013      	ands	r3, r2
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0x644>
 80049da:	e04c      	b.n	8004a76 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049dc:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <HAL_RCC_OscConfig+0x67c>)
 80049e2:	4908      	ldr	r1, [pc, #32]	@ (8004a04 <HAL_RCC_OscConfig+0x68c>)
 80049e4:	400a      	ands	r2, r1
 80049e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e8:	f7fd fd24 	bl	8002434 <HAL_GetTick>
 80049ec:	0003      	movs	r3, r0
 80049ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f0:	e015      	b.n	8004a1e <HAL_RCC_OscConfig+0x6a6>
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	40021000 	.word	0x40021000
 80049f8:	00001388 	.word	0x00001388
 80049fc:	efffffff 	.word	0xefffffff
 8004a00:	fffeffff 	.word	0xfffeffff
 8004a04:	feffffff 	.word	0xfeffffff
 8004a08:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fd fd12 	bl	8002434 <HAL_GetTick>
 8004a10:	0002      	movs	r2, r0
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e02c      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1e:	4b18      	ldr	r3, [pc, #96]	@ (8004a80 <HAL_RCC_OscConfig+0x708>)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	2380      	movs	r3, #128	@ 0x80
 8004a24:	049b      	lsls	r3, r3, #18
 8004a26:	4013      	ands	r3, r2
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x694>
 8004a2a:	e024      	b.n	8004a76 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e01f      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCC_OscConfig+0x708>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004a3e:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <HAL_RCC_OscConfig+0x708>)
 8004a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a42:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	23c0      	movs	r3, #192	@ 0xc0
 8004a48:	025b      	lsls	r3, r3, #9
 8004a4a:	401a      	ands	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d10e      	bne.n	8004a72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	220f      	movs	r2, #15
 8004a58:	401a      	ands	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	23f0      	movs	r3, #240	@ 0xf0
 8004a66:	039b      	lsls	r3, r3, #14
 8004a68:	401a      	ands	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	0018      	movs	r0, r3
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b008      	add	sp, #32
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	40021000 	.word	0x40021000

08004a84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0bf      	b.n	8004c18 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a98:	4b61      	ldr	r3, [pc, #388]	@ (8004c20 <HAL_RCC_ClockConfig+0x19c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d911      	bls.n	8004aca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa6:	4b5e      	ldr	r3, [pc, #376]	@ (8004c20 <HAL_RCC_ClockConfig+0x19c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	4393      	bics	r3, r2
 8004aae:	0019      	movs	r1, r3
 8004ab0:	4b5b      	ldr	r3, [pc, #364]	@ (8004c20 <HAL_RCC_ClockConfig+0x19c>)
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab8:	4b59      	ldr	r3, [pc, #356]	@ (8004c20 <HAL_RCC_ClockConfig+0x19c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	4013      	ands	r3, r2
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e0a6      	b.n	8004c18 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	d015      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2204      	movs	r2, #4
 8004ada:	4013      	ands	r3, r2
 8004adc:	d006      	beq.n	8004aec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ade:	4b51      	ldr	r3, [pc, #324]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	4b50      	ldr	r3, [pc, #320]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004ae4:	21e0      	movs	r1, #224	@ 0xe0
 8004ae6:	00c9      	lsls	r1, r1, #3
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b4d      	ldr	r3, [pc, #308]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	22f0      	movs	r2, #240	@ 0xf0
 8004af2:	4393      	bics	r3, r2
 8004af4:	0019      	movs	r1, r3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689a      	ldr	r2, [r3, #8]
 8004afa:	4b4a      	ldr	r3, [pc, #296]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004afc:	430a      	orrs	r2, r1
 8004afe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4013      	ands	r3, r2
 8004b08:	d04c      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b44      	ldr	r3, [pc, #272]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	2380      	movs	r3, #128	@ 0x80
 8004b18:	029b      	lsls	r3, r3, #10
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d120      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e07a      	b.n	8004c18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d107      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b2a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	2380      	movs	r3, #128	@ 0x80
 8004b30:	049b      	lsls	r3, r3, #18
 8004b32:	4013      	ands	r3, r2
 8004b34:	d114      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e06e      	b.n	8004c18 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d107      	bne.n	8004b52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004b42:	4b38      	ldr	r3, [pc, #224]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004b44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b46:	2380      	movs	r3, #128	@ 0x80
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d108      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e062      	b.n	8004c18 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b52:	4b34      	ldr	r3, [pc, #208]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2202      	movs	r2, #2
 8004b58:	4013      	ands	r3, r2
 8004b5a:	d101      	bne.n	8004b60 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e05b      	b.n	8004c18 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b60:	4b30      	ldr	r3, [pc, #192]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	2203      	movs	r2, #3
 8004b66:	4393      	bics	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b74:	f7fd fc5e 	bl	8002434 <HAL_GetTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7c:	e009      	b.n	8004b92 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b7e:	f7fd fc59 	bl	8002434 <HAL_GetTick>
 8004b82:	0002      	movs	r2, r0
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	4a27      	ldr	r2, [pc, #156]	@ (8004c28 <HAL_RCC_ClockConfig+0x1a4>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e042      	b.n	8004c18 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b92:	4b24      	ldr	r3, [pc, #144]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	220c      	movs	r2, #12
 8004b98:	401a      	ands	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d1ec      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8004c20 <HAL_RCC_ClockConfig+0x19c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4013      	ands	r3, r2
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d211      	bcs.n	8004bd6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004c20 <HAL_RCC_ClockConfig+0x19c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	4393      	bics	r3, r2
 8004bba:	0019      	movs	r1, r3
 8004bbc:	4b18      	ldr	r3, [pc, #96]	@ (8004c20 <HAL_RCC_ClockConfig+0x19c>)
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc4:	4b16      	ldr	r3, [pc, #88]	@ (8004c20 <HAL_RCC_ClockConfig+0x19c>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	4013      	ands	r3, r2
 8004bcc:	683a      	ldr	r2, [r7, #0]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e020      	b.n	8004c18 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2204      	movs	r2, #4
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d009      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004be0:	4b10      	ldr	r3, [pc, #64]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4a11      	ldr	r2, [pc, #68]	@ (8004c2c <HAL_RCC_ClockConfig+0x1a8>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	0019      	movs	r1, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bf4:	f000 f820 	bl	8004c38 <HAL_RCC_GetSysClockFreq>
 8004bf8:	0001      	movs	r1, r0
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <HAL_RCC_ClockConfig+0x1a0>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	091b      	lsrs	r3, r3, #4
 8004c00:	220f      	movs	r2, #15
 8004c02:	4013      	ands	r3, r2
 8004c04:	4a0a      	ldr	r2, [pc, #40]	@ (8004c30 <HAL_RCC_ClockConfig+0x1ac>)
 8004c06:	5cd3      	ldrb	r3, [r2, r3]
 8004c08:	000a      	movs	r2, r1
 8004c0a:	40da      	lsrs	r2, r3
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <HAL_RCC_ClockConfig+0x1b0>)
 8004c0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004c10:	2003      	movs	r0, #3
 8004c12:	f7fd fbc9 	bl	80023a8 <HAL_InitTick>
  
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	0018      	movs	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b004      	add	sp, #16
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40022000 	.word	0x40022000
 8004c24:	40021000 	.word	0x40021000
 8004c28:	00001388 	.word	0x00001388
 8004c2c:	fffff8ff 	.word	0xfffff8ff
 8004c30:	08006474 	.word	0x08006474
 8004c34:	2000005c 	.word	0x2000005c

08004c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	2300      	movs	r3, #0
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	2300      	movs	r3, #0
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c52:	4b2d      	ldr	r3, [pc, #180]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	220c      	movs	r2, #12
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	2b0c      	cmp	r3, #12
 8004c60:	d046      	beq.n	8004cf0 <HAL_RCC_GetSysClockFreq+0xb8>
 8004c62:	d848      	bhi.n	8004cf6 <HAL_RCC_GetSysClockFreq+0xbe>
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d002      	beq.n	8004c6e <HAL_RCC_GetSysClockFreq+0x36>
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d003      	beq.n	8004c74 <HAL_RCC_GetSysClockFreq+0x3c>
 8004c6c:	e043      	b.n	8004cf6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c6e:	4b27      	ldr	r3, [pc, #156]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c70:	613b      	str	r3, [r7, #16]
      break;
 8004c72:	e043      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	0c9b      	lsrs	r3, r3, #18
 8004c78:	220f      	movs	r2, #15
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	4a24      	ldr	r2, [pc, #144]	@ (8004d10 <HAL_RCC_GetSysClockFreq+0xd8>)
 8004c7e:	5cd3      	ldrb	r3, [r2, r3]
 8004c80:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004c82:	4b21      	ldr	r3, [pc, #132]	@ (8004d08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c86:	220f      	movs	r2, #15
 8004c88:	4013      	ands	r3, r2
 8004c8a:	4a22      	ldr	r2, [pc, #136]	@ (8004d14 <HAL_RCC_GetSysClockFreq+0xdc>)
 8004c8c:	5cd3      	ldrb	r3, [r2, r3]
 8004c8e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	23c0      	movs	r3, #192	@ 0xc0
 8004c94:	025b      	lsls	r3, r3, #9
 8004c96:	401a      	ands	r2, r3
 8004c98:	2380      	movs	r3, #128	@ 0x80
 8004c9a:	025b      	lsls	r3, r3, #9
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d109      	bne.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	481a      	ldr	r0, [pc, #104]	@ (8004d0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ca4:	f7fb fa30 	bl	8000108 <__udivsi3>
 8004ca8:	0003      	movs	r3, r0
 8004caa:	001a      	movs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4353      	muls	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	e01a      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	23c0      	movs	r3, #192	@ 0xc0
 8004cb8:	025b      	lsls	r3, r3, #9
 8004cba:	401a      	ands	r2, r3
 8004cbc:	23c0      	movs	r3, #192	@ 0xc0
 8004cbe:	025b      	lsls	r3, r3, #9
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d109      	bne.n	8004cd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cc4:	68b9      	ldr	r1, [r7, #8]
 8004cc6:	4814      	ldr	r0, [pc, #80]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004cc8:	f7fb fa1e 	bl	8000108 <__udivsi3>
 8004ccc:	0003      	movs	r3, r0
 8004cce:	001a      	movs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4353      	muls	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004cd8:	68b9      	ldr	r1, [r7, #8]
 8004cda:	4810      	ldr	r0, [pc, #64]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xe4>)
 8004cdc:	f7fb fa14 	bl	8000108 <__udivsi3>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	001a      	movs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4353      	muls	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	613b      	str	r3, [r7, #16]
      break;
 8004cee:	e005      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004cf0:	4b09      	ldr	r3, [pc, #36]	@ (8004d18 <HAL_RCC_GetSysClockFreq+0xe0>)
 8004cf2:	613b      	str	r3, [r7, #16]
      break;
 8004cf4:	e002      	b.n	8004cfc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cf6:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xe4>)
 8004cf8:	613b      	str	r3, [r7, #16]
      break;
 8004cfa:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004cfc:	693b      	ldr	r3, [r7, #16]
}
 8004cfe:	0018      	movs	r0, r3
 8004d00:	46bd      	mov	sp, r7
 8004d02:	b006      	add	sp, #24
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	016e3600 	.word	0x016e3600
 8004d10:	08006484 	.word	0x08006484
 8004d14:	08006494 	.word	0x08006494
 8004d18:	02dc6c00 	.word	0x02dc6c00
 8004d1c:	007a1200 	.word	0x007a1200

08004d20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0a8      	b.n	8004e84 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	2382      	movs	r3, #130	@ 0x82
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d009      	beq.n	8004d5a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	61da      	str	r2, [r3, #28]
 8004d4c:	e005      	b.n	8004d5a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	225d      	movs	r2, #93	@ 0x5d
 8004d64:	5c9b      	ldrb	r3, [r3, r2]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d107      	bne.n	8004d7c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	225c      	movs	r2, #92	@ 0x5c
 8004d70:	2100      	movs	r1, #0
 8004d72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	0018      	movs	r0, r3
 8004d78:	f7fd f890 	bl	8001e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	225d      	movs	r2, #93	@ 0x5d
 8004d80:	2102      	movs	r1, #2
 8004d82:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2140      	movs	r1, #64	@ 0x40
 8004d90:	438a      	bics	r2, r1
 8004d92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	23e0      	movs	r3, #224	@ 0xe0
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d902      	bls.n	8004da6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	e002      	b.n	8004dac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004da6:	2380      	movs	r3, #128	@ 0x80
 8004da8:	015b      	lsls	r3, r3, #5
 8004daa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	23f0      	movs	r3, #240	@ 0xf0
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d008      	beq.n	8004dca <HAL_SPI_Init+0xaa>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	23e0      	movs	r3, #224	@ 0xe0
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	2382      	movs	r3, #130	@ 0x82
 8004dd0:	005b      	lsls	r3, r3, #1
 8004dd2:	401a      	ands	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6899      	ldr	r1, [r3, #8]
 8004dd8:	2384      	movs	r3, #132	@ 0x84
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	400b      	ands	r3, r1
 8004dde:	431a      	orrs	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	2102      	movs	r1, #2
 8004de6:	400b      	ands	r3, r1
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	2101      	movs	r1, #1
 8004df0:	400b      	ands	r3, r1
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6999      	ldr	r1, [r3, #24]
 8004df8:	2380      	movs	r3, #128	@ 0x80
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	400b      	ands	r3, r1
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2138      	movs	r1, #56	@ 0x38
 8004e06:	400b      	ands	r3, r1
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	2180      	movs	r1, #128	@ 0x80
 8004e10:	400b      	ands	r3, r1
 8004e12:	431a      	orrs	r2, r3
 8004e14:	0011      	movs	r1, r2
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	019b      	lsls	r3, r3, #6
 8004e1e:	401a      	ands	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	699b      	ldr	r3, [r3, #24]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	2204      	movs	r2, #4
 8004e30:	401a      	ands	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	2110      	movs	r1, #16
 8004e38:	400b      	ands	r3, r1
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e40:	2108      	movs	r1, #8
 8004e42:	400b      	ands	r3, r1
 8004e44:	431a      	orrs	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68d9      	ldr	r1, [r3, #12]
 8004e4a:	23f0      	movs	r3, #240	@ 0xf0
 8004e4c:	011b      	lsls	r3, r3, #4
 8004e4e:	400b      	ands	r3, r1
 8004e50:	431a      	orrs	r2, r3
 8004e52:	0011      	movs	r1, r2
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	2380      	movs	r3, #128	@ 0x80
 8004e58:	015b      	lsls	r3, r3, #5
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69da      	ldr	r2, [r3, #28]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4907      	ldr	r1, [pc, #28]	@ (8004e8c <HAL_SPI_Init+0x16c>)
 8004e70:	400a      	ands	r2, r1
 8004e72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	225d      	movs	r2, #93	@ 0x5d
 8004e7e:	2101      	movs	r1, #1
 8004e80:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	0018      	movs	r0, r3
 8004e86:	46bd      	mov	sp, r7
 8004e88:	b004      	add	sp, #16
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	fffff7ff 	.word	0xfffff7ff

08004e90 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	@ 0x28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	001a      	movs	r2, r3
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ea6:	2323      	movs	r3, #35	@ 0x23
 8004ea8:	18fb      	adds	r3, r7, r3
 8004eaa:	2200      	movs	r2, #0
 8004eac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	225c      	movs	r2, #92	@ 0x5c
 8004eb2:	5c9b      	ldrb	r3, [r3, r2]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x2c>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e1c4      	b.n	8005246 <HAL_SPI_TransmitReceive+0x3b6>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	225c      	movs	r2, #92	@ 0x5c
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ec4:	f7fd fab6 	bl	8002434 <HAL_GetTick>
 8004ec8:	0003      	movs	r3, r0
 8004eca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ecc:	201b      	movs	r0, #27
 8004ece:	183b      	adds	r3, r7, r0
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	215d      	movs	r1, #93	@ 0x5d
 8004ed4:	5c52      	ldrb	r2, [r2, r1]
 8004ed6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004ede:	2312      	movs	r3, #18
 8004ee0:	18fb      	adds	r3, r7, r3
 8004ee2:	1cba      	adds	r2, r7, #2
 8004ee4:	8812      	ldrh	r2, [r2, #0]
 8004ee6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004ee8:	183b      	adds	r3, r7, r0
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d011      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x84>
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	2382      	movs	r3, #130	@ 0x82
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d107      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d103      	bne.n	8004f0a <HAL_SPI_TransmitReceive+0x7a>
 8004f02:	183b      	adds	r3, r7, r0
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d004      	beq.n	8004f14 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004f0a:	2323      	movs	r3, #35	@ 0x23
 8004f0c:	18fb      	adds	r3, r7, r3
 8004f0e:	2202      	movs	r2, #2
 8004f10:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f12:	e191      	b.n	8005238 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d006      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x98>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_SPI_TransmitReceive+0x98>
 8004f20:	1cbb      	adds	r3, r7, #2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004f28:	2323      	movs	r3, #35	@ 0x23
 8004f2a:	18fb      	adds	r3, r7, r3
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004f30:	e182      	b.n	8005238 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	225d      	movs	r2, #93	@ 0x5d
 8004f36:	5c9b      	ldrb	r3, [r3, r2]
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b04      	cmp	r3, #4
 8004f3c:	d003      	beq.n	8004f46 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	225d      	movs	r2, #93	@ 0x5d
 8004f42:	2105      	movs	r1, #5
 8004f44:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	1cba      	adds	r2, r7, #2
 8004f56:	2146      	movs	r1, #70	@ 0x46
 8004f58:	8812      	ldrh	r2, [r2, #0]
 8004f5a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1cba      	adds	r2, r7, #2
 8004f60:	2144      	movs	r1, #68	@ 0x44
 8004f62:	8812      	ldrh	r2, [r2, #0]
 8004f64:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1cba      	adds	r2, r7, #2
 8004f70:	8812      	ldrh	r2, [r2, #0]
 8004f72:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1cba      	adds	r2, r7, #2
 8004f78:	8812      	ldrh	r2, [r2, #0]
 8004f7a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	23e0      	movs	r3, #224	@ 0xe0
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d908      	bls.n	8004fa6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	49ac      	ldr	r1, [pc, #688]	@ (8005250 <HAL_SPI_TransmitReceive+0x3c0>)
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	605a      	str	r2, [r3, #4]
 8004fa4:	e008      	b.n	8004fb8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2180      	movs	r1, #128	@ 0x80
 8004fb2:	0149      	lsls	r1, r1, #5
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2240      	movs	r2, #64	@ 0x40
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b40      	cmp	r3, #64	@ 0x40
 8004fc4:	d007      	beq.n	8004fd6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2140      	movs	r1, #64	@ 0x40
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	23e0      	movs	r3, #224	@ 0xe0
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d800      	bhi.n	8004fe4 <HAL_SPI_TransmitReceive+0x154>
 8004fe2:	e083      	b.n	80050ec <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x168>
 8004fec:	2312      	movs	r3, #18
 8004fee:	18fb      	adds	r3, r7, r3
 8004ff0:	881b      	ldrh	r3, [r3, #0]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d000      	beq.n	8004ff8 <HAL_SPI_TransmitReceive+0x168>
 8004ff6:	e06d      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ffc:	881a      	ldrh	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005008:	1c9a      	adds	r2, r3, #2
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800501c:	e05a      	b.n	80050d4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2202      	movs	r2, #2
 8005026:	4013      	ands	r3, r2
 8005028:	2b02      	cmp	r3, #2
 800502a:	d11b      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x1d4>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005030:	b29b      	uxth	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d016      	beq.n	8005064 <HAL_SPI_TransmitReceive+0x1d4>
 8005036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005038:	2b01      	cmp	r3, #1
 800503a:	d113      	bne.n	8005064 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	881a      	ldrh	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	1c9a      	adds	r2, r3, #2
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2201      	movs	r2, #1
 800506c:	4013      	ands	r3, r2
 800506e:	2b01      	cmp	r3, #1
 8005070:	d11c      	bne.n	80050ac <HAL_SPI_TransmitReceive+0x21c>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2246      	movs	r2, #70	@ 0x46
 8005076:	5a9b      	ldrh	r3, [r3, r2]
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d016      	beq.n	80050ac <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005088:	b292      	uxth	r2, r2
 800508a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	1c9a      	adds	r2, r3, #2
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2246      	movs	r2, #70	@ 0x46
 800509a:	5a9b      	ldrh	r3, [r3, r2]
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b299      	uxth	r1, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2246      	movs	r2, #70	@ 0x46
 80050a6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80050ac:	f7fd f9c2 	bl	8002434 <HAL_GetTick>
 80050b0:	0002      	movs	r2, r0
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d80b      	bhi.n	80050d4 <HAL_SPI_TransmitReceive+0x244>
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	3301      	adds	r3, #1
 80050c0:	d008      	beq.n	80050d4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80050c2:	2323      	movs	r3, #35	@ 0x23
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	2203      	movs	r2, #3
 80050c8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	225d      	movs	r2, #93	@ 0x5d
 80050ce:	2101      	movs	r1, #1
 80050d0:	5499      	strb	r1, [r3, r2]
        goto error;
 80050d2:	e0b1      	b.n	8005238 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80050d8:	b29b      	uxth	r3, r3
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d19f      	bne.n	800501e <HAL_SPI_TransmitReceive+0x18e>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2246      	movs	r2, #70	@ 0x46
 80050e2:	5a9b      	ldrh	r3, [r3, r2]
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d199      	bne.n	800501e <HAL_SPI_TransmitReceive+0x18e>
 80050ea:	e089      	b.n	8005200 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x270>
 80050f4:	2312      	movs	r3, #18
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d000      	beq.n	8005100 <HAL_SPI_TransmitReceive+0x270>
 80050fe:	e074      	b.n	80051ea <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	330c      	adds	r3, #12
 800510a:	7812      	ldrb	r2, [r2, #0]
 800510c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005126:	e060      	b.n	80051ea <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2202      	movs	r2, #2
 8005130:	4013      	ands	r3, r2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d11c      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x2e0>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	2b00      	cmp	r3, #0
 800513e:	d017      	beq.n	8005170 <HAL_SPI_TransmitReceive+0x2e0>
 8005140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005142:	2b01      	cmp	r3, #1
 8005144:	d114      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	330c      	adds	r3, #12
 8005150:	7812      	ldrb	r2, [r2, #0]
 8005152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800516c:	2300      	movs	r3, #0
 800516e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2201      	movs	r2, #1
 8005178:	4013      	ands	r3, r2
 800517a:	2b01      	cmp	r3, #1
 800517c:	d11e      	bne.n	80051bc <HAL_SPI_TransmitReceive+0x32c>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2246      	movs	r2, #70	@ 0x46
 8005182:	5a9b      	ldrh	r3, [r3, r2]
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d018      	beq.n	80051bc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	001a      	movs	r2, r3
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005196:	7812      	ldrb	r2, [r2, #0]
 8005198:	b2d2      	uxtb	r2, r2
 800519a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a0:	1c5a      	adds	r2, r3, #1
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2246      	movs	r2, #70	@ 0x46
 80051aa:	5a9b      	ldrh	r3, [r3, r2]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	3b01      	subs	r3, #1
 80051b0:	b299      	uxth	r1, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2246      	movs	r2, #70	@ 0x46
 80051b6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051b8:	2301      	movs	r3, #1
 80051ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80051bc:	f7fd f93a 	bl	8002434 <HAL_GetTick>
 80051c0:	0002      	movs	r2, r0
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d802      	bhi.n	80051d2 <HAL_SPI_TransmitReceive+0x342>
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	3301      	adds	r3, #1
 80051d0:	d102      	bne.n	80051d8 <HAL_SPI_TransmitReceive+0x348>
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d108      	bne.n	80051ea <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 80051d8:	2323      	movs	r3, #35	@ 0x23
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	2203      	movs	r2, #3
 80051de:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	225d      	movs	r2, #93	@ 0x5d
 80051e4:	2101      	movs	r1, #1
 80051e6:	5499      	strb	r1, [r3, r2]
        goto error;
 80051e8:	e026      	b.n	8005238 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d199      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x298>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2246      	movs	r2, #70	@ 0x46
 80051f8:	5a9b      	ldrh	r3, [r3, r2]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d193      	bne.n	8005128 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005200:	69fa      	ldr	r2, [r7, #28]
 8005202:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	0018      	movs	r0, r3
 8005208:	f000 f954 	bl	80054b4 <SPI_EndRxTxTransaction>
 800520c:	1e03      	subs	r3, r0, #0
 800520e:	d006      	beq.n	800521e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8005210:	2323      	movs	r3, #35	@ 0x23
 8005212:	18fb      	adds	r3, r7, r3
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2220      	movs	r2, #32
 800521c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005222:	2b00      	cmp	r3, #0
 8005224:	d004      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8005226:	2323      	movs	r3, #35	@ 0x23
 8005228:	18fb      	adds	r3, r7, r3
 800522a:	2201      	movs	r2, #1
 800522c:	701a      	strb	r2, [r3, #0]
 800522e:	e003      	b.n	8005238 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	225d      	movs	r2, #93	@ 0x5d
 8005234:	2101      	movs	r1, #1
 8005236:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	225c      	movs	r2, #92	@ 0x5c
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005240:	2323      	movs	r3, #35	@ 0x23
 8005242:	18fb      	adds	r3, r7, r3
 8005244:	781b      	ldrb	r3, [r3, #0]
}
 8005246:	0018      	movs	r0, r3
 8005248:	46bd      	mov	sp, r7
 800524a:	b00a      	add	sp, #40	@ 0x28
 800524c:	bd80      	pop	{r7, pc}
 800524e:	46c0      	nop			@ (mov r8, r8)
 8005250:	ffffefff 	.word	0xffffefff

08005254 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b088      	sub	sp, #32
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	603b      	str	r3, [r7, #0]
 8005260:	1dfb      	adds	r3, r7, #7
 8005262:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005264:	f7fd f8e6 	bl	8002434 <HAL_GetTick>
 8005268:	0002      	movs	r2, r0
 800526a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526c:	1a9b      	subs	r3, r3, r2
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	18d3      	adds	r3, r2, r3
 8005272:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005274:	f7fd f8de 	bl	8002434 <HAL_GetTick>
 8005278:	0003      	movs	r3, r0
 800527a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800527c:	4b3a      	ldr	r3, [pc, #232]	@ (8005368 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	015b      	lsls	r3, r3, #5
 8005282:	0d1b      	lsrs	r3, r3, #20
 8005284:	69fa      	ldr	r2, [r7, #28]
 8005286:	4353      	muls	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800528a:	e058      	b.n	800533e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	3301      	adds	r3, #1
 8005290:	d055      	beq.n	800533e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005292:	f7fd f8cf 	bl	8002434 <HAL_GetTick>
 8005296:	0002      	movs	r2, r0
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	69fa      	ldr	r2, [r7, #28]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d902      	bls.n	80052a8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d142      	bne.n	800532e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	21e0      	movs	r1, #224	@ 0xe0
 80052b4:	438a      	bics	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	2382      	movs	r3, #130	@ 0x82
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d113      	bne.n	80052ec <SPI_WaitFlagStateUntilTimeout+0x98>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	2380      	movs	r3, #128	@ 0x80
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d005      	beq.n	80052dc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	2380      	movs	r3, #128	@ 0x80
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	429a      	cmp	r2, r3
 80052da:	d107      	bne.n	80052ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2140      	movs	r1, #64	@ 0x40
 80052e8:	438a      	bics	r2, r1
 80052ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052f0:	2380      	movs	r3, #128	@ 0x80
 80052f2:	019b      	lsls	r3, r3, #6
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d110      	bne.n	800531a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	491a      	ldr	r1, [pc, #104]	@ (800536c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005304:	400a      	ands	r2, r1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2180      	movs	r1, #128	@ 0x80
 8005314:	0189      	lsls	r1, r1, #6
 8005316:	430a      	orrs	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	225d      	movs	r2, #93	@ 0x5d
 800531e:	2101      	movs	r1, #1
 8005320:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	225c      	movs	r2, #92	@ 0x5c
 8005326:	2100      	movs	r1, #0
 8005328:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e017      	b.n	800535e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	3b01      	subs	r3, #1
 800533c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	68ba      	ldr	r2, [r7, #8]
 8005346:	4013      	ands	r3, r2
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	425a      	negs	r2, r3
 800534e:	4153      	adcs	r3, r2
 8005350:	b2db      	uxtb	r3, r3
 8005352:	001a      	movs	r2, r3
 8005354:	1dfb      	adds	r3, r7, #7
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	429a      	cmp	r2, r3
 800535a:	d197      	bne.n	800528c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	0018      	movs	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	b008      	add	sp, #32
 8005364:	bd80      	pop	{r7, pc}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	2000005c 	.word	0x2000005c
 800536c:	ffffdfff 	.word	0xffffdfff

08005370 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	@ 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800537e:	2317      	movs	r3, #23
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005386:	f7fd f855 	bl	8002434 <HAL_GetTick>
 800538a:	0002      	movs	r2, r0
 800538c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538e:	1a9b      	subs	r3, r3, r2
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	18d3      	adds	r3, r2, r3
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8005396:	f7fd f84d 	bl	8002434 <HAL_GetTick>
 800539a:	0003      	movs	r3, r0
 800539c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80053a6:	4b41      	ldr	r3, [pc, #260]	@ (80054ac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	0013      	movs	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	189b      	adds	r3, r3, r2
 80053b0:	00da      	lsls	r2, r3, #3
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	0d1b      	lsrs	r3, r3, #20
 80053b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b8:	4353      	muls	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80053bc:	e068      	b.n	8005490 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80053be:	68ba      	ldr	r2, [r7, #8]
 80053c0:	23c0      	movs	r3, #192	@ 0xc0
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d10a      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0x6e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d107      	bne.n	80053de <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	2117      	movs	r1, #23
 80053d6:	187b      	adds	r3, r7, r1
 80053d8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80053da:	187b      	adds	r3, r7, r1
 80053dc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	3301      	adds	r3, #1
 80053e2:	d055      	beq.n	8005490 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053e4:	f7fd f826 	bl	8002434 <HAL_GetTick>
 80053e8:	0002      	movs	r2, r0
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d902      	bls.n	80053fa <SPI_WaitFifoStateUntilTimeout+0x8a>
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d142      	bne.n	8005480 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	21e0      	movs	r1, #224	@ 0xe0
 8005406:	438a      	bics	r2, r1
 8005408:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	2382      	movs	r3, #130	@ 0x82
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	429a      	cmp	r2, r3
 8005414:	d113      	bne.n	800543e <SPI_WaitFifoStateUntilTimeout+0xce>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	2380      	movs	r3, #128	@ 0x80
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	429a      	cmp	r2, r3
 8005420:	d005      	beq.n	800542e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	2380      	movs	r3, #128	@ 0x80
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	429a      	cmp	r2, r3
 800542c:	d107      	bne.n	800543e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2140      	movs	r1, #64	@ 0x40
 800543a:	438a      	bics	r2, r1
 800543c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005442:	2380      	movs	r3, #128	@ 0x80
 8005444:	019b      	lsls	r3, r3, #6
 8005446:	429a      	cmp	r2, r3
 8005448:	d110      	bne.n	800546c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4916      	ldr	r1, [pc, #88]	@ (80054b0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005456:	400a      	ands	r2, r1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2180      	movs	r1, #128	@ 0x80
 8005466:	0189      	lsls	r1, r1, #6
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	225d      	movs	r2, #93	@ 0x5d
 8005470:	2101      	movs	r1, #1
 8005472:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	225c      	movs	r2, #92	@ 0x5c
 8005478:	2100      	movs	r1, #0
 800547a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e010      	b.n	80054a2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	3b01      	subs	r3, #1
 800548e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	68ba      	ldr	r2, [r7, #8]
 8005498:	4013      	ands	r3, r2
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	429a      	cmp	r2, r3
 800549e:	d18e      	bne.n	80053be <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	0018      	movs	r0, r3
 80054a4:	46bd      	mov	sp, r7
 80054a6:	b00a      	add	sp, #40	@ 0x28
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	2000005c 	.word	0x2000005c
 80054b0:	ffffdfff 	.word	0xffffdfff

080054b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af02      	add	r7, sp, #8
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	23c0      	movs	r3, #192	@ 0xc0
 80054c4:	0159      	lsls	r1, r3, #5
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	0013      	movs	r3, r2
 80054ce:	2200      	movs	r2, #0
 80054d0:	f7ff ff4e 	bl	8005370 <SPI_WaitFifoStateUntilTimeout>
 80054d4:	1e03      	subs	r3, r0, #0
 80054d6:	d007      	beq.n	80054e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054dc:	2220      	movs	r2, #32
 80054de:	431a      	orrs	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e027      	b.n	8005538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	9300      	str	r3, [sp, #0]
 80054f0:	0013      	movs	r3, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	2180      	movs	r1, #128	@ 0x80
 80054f6:	f7ff fead 	bl	8005254 <SPI_WaitFlagStateUntilTimeout>
 80054fa:	1e03      	subs	r3, r0, #0
 80054fc:	d007      	beq.n	800550e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005502:	2220      	movs	r2, #32
 8005504:	431a      	orrs	r2, r3
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e014      	b.n	8005538 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	23c0      	movs	r3, #192	@ 0xc0
 8005512:	00d9      	lsls	r1, r3, #3
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	0013      	movs	r3, r2
 800551c:	2200      	movs	r2, #0
 800551e:	f7ff ff27 	bl	8005370 <SPI_WaitFifoStateUntilTimeout>
 8005522:	1e03      	subs	r3, r0, #0
 8005524:	d007      	beq.n	8005536 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800552a:	2220      	movs	r2, #32
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e000      	b.n	8005538 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bd80      	pop	{r7, pc}

08005540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e042      	b.n	80055d8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	223d      	movs	r2, #61	@ 0x3d
 8005556:	5c9b      	ldrb	r3, [r3, r2]
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d107      	bne.n	800556e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	223c      	movs	r2, #60	@ 0x3c
 8005562:	2100      	movs	r1, #0
 8005564:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	0018      	movs	r0, r3
 800556a:	f7fc fd45 	bl	8001ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	223d      	movs	r2, #61	@ 0x3d
 8005572:	2102      	movs	r1, #2
 8005574:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3304      	adds	r3, #4
 800557e:	0019      	movs	r1, r3
 8005580:	0010      	movs	r0, r2
 8005582:	f000 fbf1 	bl	8005d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2246      	movs	r2, #70	@ 0x46
 800558a:	2101      	movs	r1, #1
 800558c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	223e      	movs	r2, #62	@ 0x3e
 8005592:	2101      	movs	r1, #1
 8005594:	5499      	strb	r1, [r3, r2]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	223f      	movs	r2, #63	@ 0x3f
 800559a:	2101      	movs	r1, #1
 800559c:	5499      	strb	r1, [r3, r2]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2240      	movs	r2, #64	@ 0x40
 80055a2:	2101      	movs	r1, #1
 80055a4:	5499      	strb	r1, [r3, r2]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2241      	movs	r2, #65	@ 0x41
 80055aa:	2101      	movs	r1, #1
 80055ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2242      	movs	r2, #66	@ 0x42
 80055b2:	2101      	movs	r1, #1
 80055b4:	5499      	strb	r1, [r3, r2]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2243      	movs	r2, #67	@ 0x43
 80055ba:	2101      	movs	r1, #1
 80055bc:	5499      	strb	r1, [r3, r2]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2244      	movs	r2, #68	@ 0x44
 80055c2:	2101      	movs	r1, #1
 80055c4:	5499      	strb	r1, [r3, r2]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2245      	movs	r2, #69	@ 0x45
 80055ca:	2101      	movs	r1, #1
 80055cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	223d      	movs	r2, #61	@ 0x3d
 80055d2:	2101      	movs	r1, #1
 80055d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	0018      	movs	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	b002      	add	sp, #8
 80055de:	bd80      	pop	{r7, pc}

080055e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	223d      	movs	r2, #61	@ 0x3d
 80055ec:	5c9b      	ldrb	r3, [r3, r2]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d001      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e036      	b.n	8005666 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	223d      	movs	r2, #61	@ 0x3d
 80055fc:	2102      	movs	r1, #2
 80055fe:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2101      	movs	r1, #1
 800560c:	430a      	orrs	r2, r1
 800560e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a16      	ldr	r2, [pc, #88]	@ (8005670 <HAL_TIM_Base_Start_IT+0x90>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00a      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x50>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	2380      	movs	r3, #128	@ 0x80
 8005620:	05db      	lsls	r3, r3, #23
 8005622:	429a      	cmp	r2, r3
 8005624:	d004      	beq.n	8005630 <HAL_TIM_Base_Start_IT+0x50>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a12      	ldr	r2, [pc, #72]	@ (8005674 <HAL_TIM_Base_Start_IT+0x94>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d111      	bne.n	8005654 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2207      	movs	r2, #7
 8005638:	4013      	ands	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b06      	cmp	r3, #6
 8005640:	d010      	beq.n	8005664 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2101      	movs	r1, #1
 800564e:	430a      	orrs	r2, r1
 8005650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	e007      	b.n	8005664 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2101      	movs	r1, #1
 8005660:	430a      	orrs	r2, r1
 8005662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	0018      	movs	r0, r3
 8005668:	46bd      	mov	sp, r7
 800566a:	b004      	add	sp, #16
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			@ (mov r8, r8)
 8005670:	40012c00 	.word	0x40012c00
 8005674:	40000400 	.word	0x40000400

08005678 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e042      	b.n	8005710 <HAL_TIM_OC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	223d      	movs	r2, #61	@ 0x3d
 800568e:	5c9b      	ldrb	r3, [r3, r2]
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d107      	bne.n	80056a6 <HAL_TIM_OC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	223c      	movs	r2, #60	@ 0x3c
 800569a:	2100      	movs	r1, #0
 800569c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	0018      	movs	r0, r3
 80056a2:	f7fc fc49 	bl	8001f38 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	223d      	movs	r2, #61	@ 0x3d
 80056aa:	2102      	movs	r1, #2
 80056ac:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3304      	adds	r3, #4
 80056b6:	0019      	movs	r1, r3
 80056b8:	0010      	movs	r0, r2
 80056ba:	f000 fb55 	bl	8005d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2246      	movs	r2, #70	@ 0x46
 80056c2:	2101      	movs	r1, #1
 80056c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	223e      	movs	r2, #62	@ 0x3e
 80056ca:	2101      	movs	r1, #1
 80056cc:	5499      	strb	r1, [r3, r2]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	223f      	movs	r2, #63	@ 0x3f
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2240      	movs	r2, #64	@ 0x40
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2241      	movs	r2, #65	@ 0x41
 80056e2:	2101      	movs	r1, #1
 80056e4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2242      	movs	r2, #66	@ 0x42
 80056ea:	2101      	movs	r1, #1
 80056ec:	5499      	strb	r1, [r3, r2]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2243      	movs	r2, #67	@ 0x43
 80056f2:	2101      	movs	r1, #1
 80056f4:	5499      	strb	r1, [r3, r2]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2244      	movs	r2, #68	@ 0x44
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2245      	movs	r2, #69	@ 0x45
 8005702:	2101      	movs	r1, #1
 8005704:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	223d      	movs	r2, #61	@ 0x3d
 800570a:	2101      	movs	r1, #1
 800570c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	0018      	movs	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}

08005718 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e042      	b.n	80057b0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	223d      	movs	r2, #61	@ 0x3d
 800572e:	5c9b      	ldrb	r3, [r3, r2]
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d107      	bne.n	8005746 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	223c      	movs	r2, #60	@ 0x3c
 800573a:	2100      	movs	r1, #0
 800573c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	0018      	movs	r0, r3
 8005742:	f7fc fc29 	bl	8001f98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	223d      	movs	r2, #61	@ 0x3d
 800574a:	2102      	movs	r1, #2
 800574c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3304      	adds	r3, #4
 8005756:	0019      	movs	r1, r3
 8005758:	0010      	movs	r0, r2
 800575a:	f000 fb05 	bl	8005d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2246      	movs	r2, #70	@ 0x46
 8005762:	2101      	movs	r1, #1
 8005764:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	223e      	movs	r2, #62	@ 0x3e
 800576a:	2101      	movs	r1, #1
 800576c:	5499      	strb	r1, [r3, r2]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	223f      	movs	r2, #63	@ 0x3f
 8005772:	2101      	movs	r1, #1
 8005774:	5499      	strb	r1, [r3, r2]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2240      	movs	r2, #64	@ 0x40
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2241      	movs	r2, #65	@ 0x41
 8005782:	2101      	movs	r1, #1
 8005784:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2242      	movs	r2, #66	@ 0x42
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2243      	movs	r2, #67	@ 0x43
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2244      	movs	r2, #68	@ 0x44
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2245      	movs	r2, #69	@ 0x45
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	223d      	movs	r2, #61	@ 0x3d
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	0018      	movs	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	b002      	add	sp, #8
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d108      	bne.n	80057da <HAL_TIM_PWM_Start+0x22>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	223e      	movs	r2, #62	@ 0x3e
 80057cc:	5c9b      	ldrb	r3, [r3, r2]
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	3b01      	subs	r3, #1
 80057d2:	1e5a      	subs	r2, r3, #1
 80057d4:	4193      	sbcs	r3, r2
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	e01f      	b.n	800581a <HAL_TIM_PWM_Start+0x62>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d108      	bne.n	80057f2 <HAL_TIM_PWM_Start+0x3a>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	223f      	movs	r2, #63	@ 0x3f
 80057e4:	5c9b      	ldrb	r3, [r3, r2]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	1e5a      	subs	r2, r3, #1
 80057ec:	4193      	sbcs	r3, r2
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	e013      	b.n	800581a <HAL_TIM_PWM_Start+0x62>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d108      	bne.n	800580a <HAL_TIM_PWM_Start+0x52>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2240      	movs	r2, #64	@ 0x40
 80057fc:	5c9b      	ldrb	r3, [r3, r2]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	1e5a      	subs	r2, r3, #1
 8005804:	4193      	sbcs	r3, r2
 8005806:	b2db      	uxtb	r3, r3
 8005808:	e007      	b.n	800581a <HAL_TIM_PWM_Start+0x62>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2241      	movs	r2, #65	@ 0x41
 800580e:	5c9b      	ldrb	r3, [r3, r2]
 8005810:	b2db      	uxtb	r3, r3
 8005812:	3b01      	subs	r3, #1
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	4193      	sbcs	r3, r2
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d001      	beq.n	8005822 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e06a      	b.n	80058f8 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d104      	bne.n	8005832 <HAL_TIM_PWM_Start+0x7a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	223e      	movs	r2, #62	@ 0x3e
 800582c:	2102      	movs	r1, #2
 800582e:	5499      	strb	r1, [r3, r2]
 8005830:	e013      	b.n	800585a <HAL_TIM_PWM_Start+0xa2>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b04      	cmp	r3, #4
 8005836:	d104      	bne.n	8005842 <HAL_TIM_PWM_Start+0x8a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	223f      	movs	r2, #63	@ 0x3f
 800583c:	2102      	movs	r1, #2
 800583e:	5499      	strb	r1, [r3, r2]
 8005840:	e00b      	b.n	800585a <HAL_TIM_PWM_Start+0xa2>
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b08      	cmp	r3, #8
 8005846:	d104      	bne.n	8005852 <HAL_TIM_PWM_Start+0x9a>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2240      	movs	r2, #64	@ 0x40
 800584c:	2102      	movs	r1, #2
 800584e:	5499      	strb	r1, [r3, r2]
 8005850:	e003      	b.n	800585a <HAL_TIM_PWM_Start+0xa2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2241      	movs	r2, #65	@ 0x41
 8005856:	2102      	movs	r1, #2
 8005858:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	2201      	movs	r2, #1
 8005862:	0018      	movs	r0, r3
 8005864:	f000 fce4 	bl	8006230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a24      	ldr	r2, [pc, #144]	@ (8005900 <HAL_TIM_PWM_Start+0x148>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d009      	beq.n	8005886 <HAL_TIM_PWM_Start+0xce>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a23      	ldr	r2, [pc, #140]	@ (8005904 <HAL_TIM_PWM_Start+0x14c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d004      	beq.n	8005886 <HAL_TIM_PWM_Start+0xce>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a21      	ldr	r2, [pc, #132]	@ (8005908 <HAL_TIM_PWM_Start+0x150>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_TIM_PWM_Start+0xd2>
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_TIM_PWM_Start+0xd4>
 800588a:	2300      	movs	r3, #0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2180      	movs	r1, #128	@ 0x80
 800589c:	0209      	lsls	r1, r1, #8
 800589e:	430a      	orrs	r2, r1
 80058a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a16      	ldr	r2, [pc, #88]	@ (8005900 <HAL_TIM_PWM_Start+0x148>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00a      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x10a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	2380      	movs	r3, #128	@ 0x80
 80058b2:	05db      	lsls	r3, r3, #23
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d004      	beq.n	80058c2 <HAL_TIM_PWM_Start+0x10a>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a13      	ldr	r2, [pc, #76]	@ (800590c <HAL_TIM_PWM_Start+0x154>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d111      	bne.n	80058e6 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2207      	movs	r2, #7
 80058ca:	4013      	ands	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b06      	cmp	r3, #6
 80058d2:	d010      	beq.n	80058f6 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2101      	movs	r1, #1
 80058e0:	430a      	orrs	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e4:	e007      	b.n	80058f6 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2101      	movs	r1, #1
 80058f2:	430a      	orrs	r2, r1
 80058f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	0018      	movs	r0, r3
 80058fa:	46bd      	mov	sp, r7
 80058fc:	b004      	add	sp, #16
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40014400 	.word	0x40014400
 8005908:	40014800 	.word	0x40014800
 800590c:	40000400 	.word	0x40000400

08005910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2202      	movs	r2, #2
 800592c:	4013      	ands	r3, r2
 800592e:	d021      	beq.n	8005974 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2202      	movs	r2, #2
 8005934:	4013      	ands	r3, r2
 8005936:	d01d      	beq.n	8005974 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2203      	movs	r2, #3
 800593e:	4252      	negs	r2, r2
 8005940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	2203      	movs	r2, #3
 8005950:	4013      	ands	r3, r2
 8005952:	d004      	beq.n	800595e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	0018      	movs	r0, r3
 8005958:	f000 f9ee 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 800595c:	e007      	b.n	800596e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	0018      	movs	r0, r3
 8005962:	f000 f9e1 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	0018      	movs	r0, r3
 800596a:	f000 f9ed 	bl	8005d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2204      	movs	r2, #4
 8005978:	4013      	ands	r3, r2
 800597a:	d022      	beq.n	80059c2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2204      	movs	r2, #4
 8005980:	4013      	ands	r3, r2
 8005982:	d01e      	beq.n	80059c2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2205      	movs	r2, #5
 800598a:	4252      	negs	r2, r2
 800598c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2202      	movs	r2, #2
 8005992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	23c0      	movs	r3, #192	@ 0xc0
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4013      	ands	r3, r2
 80059a0:	d004      	beq.n	80059ac <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	0018      	movs	r0, r3
 80059a6:	f000 f9c7 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 80059aa:	e007      	b.n	80059bc <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	0018      	movs	r0, r3
 80059b0:	f000 f9ba 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	0018      	movs	r0, r3
 80059b8:	f000 f9c6 	bl	8005d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	2208      	movs	r2, #8
 80059c6:	4013      	ands	r3, r2
 80059c8:	d021      	beq.n	8005a0e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2208      	movs	r2, #8
 80059ce:	4013      	ands	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2209      	movs	r2, #9
 80059d8:	4252      	negs	r2, r2
 80059da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2204      	movs	r2, #4
 80059e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	2203      	movs	r2, #3
 80059ea:	4013      	ands	r3, r2
 80059ec:	d004      	beq.n	80059f8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	0018      	movs	r0, r3
 80059f2:	f000 f9a1 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 80059f6:	e007      	b.n	8005a08 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	0018      	movs	r0, r3
 80059fc:	f000 f994 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	0018      	movs	r0, r3
 8005a04:	f000 f9a0 	bl	8005d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2210      	movs	r2, #16
 8005a12:	4013      	ands	r3, r2
 8005a14:	d022      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2210      	movs	r2, #16
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	d01e      	beq.n	8005a5c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2211      	movs	r2, #17
 8005a24:	4252      	negs	r2, r2
 8005a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2208      	movs	r2, #8
 8005a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	23c0      	movs	r3, #192	@ 0xc0
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d004      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f000 f97a 	bl	8005d38 <HAL_TIM_IC_CaptureCallback>
 8005a44:	e007      	b.n	8005a56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	0018      	movs	r0, r3
 8005a4a:	f000 f96d 	bl	8005d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f000 f979 	bl	8005d48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4013      	ands	r3, r2
 8005a62:	d00c      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2201      	movs	r2, #1
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d008      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2202      	movs	r2, #2
 8005a72:	4252      	negs	r2, r2
 8005a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7fc f8bb 	bl	8001bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	2280      	movs	r2, #128	@ 0x80
 8005a82:	4013      	ands	r3, r2
 8005a84:	d00c      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2280      	movs	r2, #128	@ 0x80
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	d008      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2281      	movs	r2, #129	@ 0x81
 8005a94:	4252      	negs	r2, r2
 8005a96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f000 fcaa 	bl	80063f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2240      	movs	r2, #64	@ 0x40
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d00c      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2240      	movs	r2, #64	@ 0x40
 8005aac:	4013      	ands	r3, r2
 8005aae:	d008      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2241      	movs	r2, #65	@ 0x41
 8005ab6:	4252      	negs	r2, r2
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	0018      	movs	r0, r3
 8005abe:	f000 f94b 	bl	8005d58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2220      	movs	r2, #32
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2220      	movs	r2, #32
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d008      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2221      	movs	r2, #33	@ 0x21
 8005ad8:	4252      	negs	r2, r2
 8005ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	0018      	movs	r0, r3
 8005ae0:	f000 fc80 	bl	80063e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ae4:	46c0      	nop			@ (mov r8, r8)
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	b004      	add	sp, #16
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2317      	movs	r3, #23
 8005afa:	18fb      	adds	r3, r7, r3
 8005afc:	2200      	movs	r2, #0
 8005afe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	223c      	movs	r2, #60	@ 0x3c
 8005b04:	5c9b      	ldrb	r3, [r3, r2]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_TIM_OC_ConfigChannel+0x22>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e042      	b.n	8005b94 <HAL_TIM_OC_ConfigChannel+0xa8>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	223c      	movs	r2, #60	@ 0x3c
 8005b12:	2101      	movs	r1, #1
 8005b14:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b0c      	cmp	r3, #12
 8005b1a:	d027      	beq.n	8005b6c <HAL_TIM_OC_ConfigChannel+0x80>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d82c      	bhi.n	8005b7c <HAL_TIM_OC_ConfigChannel+0x90>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d019      	beq.n	8005b5c <HAL_TIM_OC_ConfigChannel+0x70>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d826      	bhi.n	8005b7c <HAL_TIM_OC_ConfigChannel+0x90>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d003      	beq.n	8005b3c <HAL_TIM_OC_ConfigChannel+0x50>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	d008      	beq.n	8005b4c <HAL_TIM_OC_ConfigChannel+0x60>
 8005b3a:	e01f      	b.n	8005b7c <HAL_TIM_OC_ConfigChannel+0x90>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	0011      	movs	r1, r2
 8005b44:	0018      	movs	r0, r3
 8005b46:	f000 f993 	bl	8005e70 <TIM_OC1_SetConfig>
      break;
 8005b4a:	e01c      	b.n	8005b86 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68ba      	ldr	r2, [r7, #8]
 8005b52:	0011      	movs	r1, r2
 8005b54:	0018      	movs	r0, r3
 8005b56:	f000 fa09 	bl	8005f6c <TIM_OC2_SetConfig>
      break;
 8005b5a:	e014      	b.n	8005b86 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68ba      	ldr	r2, [r7, #8]
 8005b62:	0011      	movs	r1, r2
 8005b64:	0018      	movs	r0, r3
 8005b66:	f000 fa7f 	bl	8006068 <TIM_OC3_SetConfig>
      break;
 8005b6a:	e00c      	b.n	8005b86 <HAL_TIM_OC_ConfigChannel+0x9a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	0011      	movs	r1, r2
 8005b74:	0018      	movs	r0, r3
 8005b76:	f000 faf7 	bl	8006168 <TIM_OC4_SetConfig>
      break;
 8005b7a:	e004      	b.n	8005b86 <HAL_TIM_OC_ConfigChannel+0x9a>
    }

    default:
      status = HAL_ERROR;
 8005b7c:	2317      	movs	r3, #23
 8005b7e:	18fb      	adds	r3, r7, r3
 8005b80:	2201      	movs	r2, #1
 8005b82:	701a      	strb	r2, [r3, #0]
      break;
 8005b84:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	223c      	movs	r2, #60	@ 0x3c
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]

  return status;
 8005b8e:	2317      	movs	r3, #23
 8005b90:	18fb      	adds	r3, r7, r3
 8005b92:	781b      	ldrb	r3, [r3, #0]
}
 8005b94:	0018      	movs	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	b006      	add	sp, #24
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ba8:	2317      	movs	r3, #23
 8005baa:	18fb      	adds	r3, r7, r3
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	223c      	movs	r2, #60	@ 0x3c
 8005bb4:	5c9b      	ldrb	r3, [r3, r2]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_PWM_ConfigChannel+0x22>
 8005bba:	2302      	movs	r3, #2
 8005bbc:	e0ad      	b.n	8005d1a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	223c      	movs	r2, #60	@ 0x3c
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b0c      	cmp	r3, #12
 8005bca:	d100      	bne.n	8005bce <HAL_TIM_PWM_ConfigChannel+0x32>
 8005bcc:	e076      	b.n	8005cbc <HAL_TIM_PWM_ConfigChannel+0x120>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2b0c      	cmp	r3, #12
 8005bd2:	d900      	bls.n	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8005bd4:	e095      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d04e      	beq.n	8005c7a <HAL_TIM_PWM_ConfigChannel+0xde>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	d900      	bls.n	8005be4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8005be2:	e08e      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x166>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d021      	beq.n	8005c34 <HAL_TIM_PWM_ConfigChannel+0x98>
 8005bf0:	e087      	b.n	8005d02 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	0011      	movs	r1, r2
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	f000 f938 	bl	8005e70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699a      	ldr	r2, [r3, #24]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2108      	movs	r1, #8
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	438a      	bics	r2, r1
 8005c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6999      	ldr	r1, [r3, #24]
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691a      	ldr	r2, [r3, #16]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	430a      	orrs	r2, r1
 8005c30:	619a      	str	r2, [r3, #24]
      break;
 8005c32:	e06b      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	0011      	movs	r1, r2
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	f000 f995 	bl	8005f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699a      	ldr	r2, [r3, #24]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2180      	movs	r1, #128	@ 0x80
 8005c4e:	0109      	lsls	r1, r1, #4
 8005c50:	430a      	orrs	r2, r1
 8005c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	699a      	ldr	r2, [r3, #24]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4931      	ldr	r1, [pc, #196]	@ (8005d24 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005c60:	400a      	ands	r2, r1
 8005c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6999      	ldr	r1, [r3, #24]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	619a      	str	r2, [r3, #24]
      break;
 8005c78:	e048      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68ba      	ldr	r2, [r7, #8]
 8005c80:	0011      	movs	r1, r2
 8005c82:	0018      	movs	r0, r3
 8005c84:	f000 f9f0 	bl	8006068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2108      	movs	r1, #8
 8005c94:	430a      	orrs	r2, r1
 8005c96:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	69da      	ldr	r2, [r3, #28]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	2104      	movs	r1, #4
 8005ca4:	438a      	bics	r2, r1
 8005ca6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69d9      	ldr	r1, [r3, #28]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	691a      	ldr	r2, [r3, #16]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	61da      	str	r2, [r3, #28]
      break;
 8005cba:	e027      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	0011      	movs	r1, r2
 8005cc4:	0018      	movs	r0, r3
 8005cc6:	f000 fa4f 	bl	8006168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2180      	movs	r1, #128	@ 0x80
 8005cd6:	0109      	lsls	r1, r1, #4
 8005cd8:	430a      	orrs	r2, r1
 8005cda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69da      	ldr	r2, [r3, #28]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	490f      	ldr	r1, [pc, #60]	@ (8005d24 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8005ce8:	400a      	ands	r2, r1
 8005cea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	69d9      	ldr	r1, [r3, #28]
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	021a      	lsls	r2, r3, #8
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	61da      	str	r2, [r3, #28]
      break;
 8005d00:	e004      	b.n	8005d0c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8005d02:	2317      	movs	r3, #23
 8005d04:	18fb      	adds	r3, r7, r3
 8005d06:	2201      	movs	r2, #1
 8005d08:	701a      	strb	r2, [r3, #0]
      break;
 8005d0a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	223c      	movs	r2, #60	@ 0x3c
 8005d10:	2100      	movs	r1, #0
 8005d12:	5499      	strb	r1, [r3, r2]

  return status;
 8005d14:	2317      	movs	r3, #23
 8005d16:	18fb      	adds	r3, r7, r3
 8005d18:	781b      	ldrb	r3, [r3, #0]
}
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	b006      	add	sp, #24
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	46c0      	nop			@ (mov r8, r8)
 8005d24:	fffffbff 	.word	0xfffffbff

08005d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d30:	46c0      	nop			@ (mov r8, r8)
 8005d32:	46bd      	mov	sp, r7
 8005d34:	b002      	add	sp, #8
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d40:	46c0      	nop			@ (mov r8, r8)
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b002      	add	sp, #8
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d50:	46c0      	nop			@ (mov r8, r8)
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b002      	add	sp, #8
 8005d56:	bd80      	pop	{r7, pc}

08005d58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d60:	46c0      	nop			@ (mov r8, r8)
 8005d62:	46bd      	mov	sp, r7
 8005d64:	b002      	add	sp, #8
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a37      	ldr	r2, [pc, #220]	@ (8005e58 <TIM_Base_SetConfig+0xf0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d008      	beq.n	8005d92 <TIM_Base_SetConfig+0x2a>
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	2380      	movs	r3, #128	@ 0x80
 8005d84:	05db      	lsls	r3, r3, #23
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d003      	beq.n	8005d92 <TIM_Base_SetConfig+0x2a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a33      	ldr	r2, [pc, #204]	@ (8005e5c <TIM_Base_SetConfig+0xf4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d108      	bne.n	8005da4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2270      	movs	r2, #112	@ 0x70
 8005d96:	4393      	bics	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4a2c      	ldr	r2, [pc, #176]	@ (8005e58 <TIM_Base_SetConfig+0xf0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d014      	beq.n	8005dd6 <TIM_Base_SetConfig+0x6e>
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	2380      	movs	r3, #128	@ 0x80
 8005db0:	05db      	lsls	r3, r3, #23
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d00f      	beq.n	8005dd6 <TIM_Base_SetConfig+0x6e>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a28      	ldr	r2, [pc, #160]	@ (8005e5c <TIM_Base_SetConfig+0xf4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00b      	beq.n	8005dd6 <TIM_Base_SetConfig+0x6e>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a27      	ldr	r2, [pc, #156]	@ (8005e60 <TIM_Base_SetConfig+0xf8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d007      	beq.n	8005dd6 <TIM_Base_SetConfig+0x6e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a26      	ldr	r2, [pc, #152]	@ (8005e64 <TIM_Base_SetConfig+0xfc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_Base_SetConfig+0x6e>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a25      	ldr	r2, [pc, #148]	@ (8005e68 <TIM_Base_SetConfig+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d108      	bne.n	8005de8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4a24      	ldr	r2, [pc, #144]	@ (8005e6c <TIM_Base_SetConfig+0x104>)
 8005dda:	4013      	ands	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2280      	movs	r2, #128	@ 0x80
 8005dec:	4393      	bics	r3, r2
 8005dee:	001a      	movs	r2, r3
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a11      	ldr	r2, [pc, #68]	@ (8005e58 <TIM_Base_SetConfig+0xf0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d007      	beq.n	8005e26 <TIM_Base_SetConfig+0xbe>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a12      	ldr	r2, [pc, #72]	@ (8005e64 <TIM_Base_SetConfig+0xfc>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d003      	beq.n	8005e26 <TIM_Base_SetConfig+0xbe>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a11      	ldr	r2, [pc, #68]	@ (8005e68 <TIM_Base_SetConfig+0x100>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d103      	bne.n	8005e2e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d106      	bne.n	8005e4e <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2201      	movs	r2, #1
 8005e46:	4393      	bics	r3, r2
 8005e48:	001a      	movs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	611a      	str	r2, [r3, #16]
  }
}
 8005e4e:	46c0      	nop			@ (mov r8, r8)
 8005e50:	46bd      	mov	sp, r7
 8005e52:	b004      	add	sp, #16
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	46c0      	nop			@ (mov r8, r8)
 8005e58:	40012c00 	.word	0x40012c00
 8005e5c:	40000400 	.word	0x40000400
 8005e60:	40002000 	.word	0x40002000
 8005e64:	40014400 	.word	0x40014400
 8005e68:	40014800 	.word	0x40014800
 8005e6c:	fffffcff 	.word	0xfffffcff

08005e70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	2201      	movs	r2, #1
 8005e86:	4393      	bics	r3, r2
 8005e88:	001a      	movs	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2270      	movs	r2, #112	@ 0x70
 8005e9e:	4393      	bics	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2203      	movs	r2, #3
 8005ea6:	4393      	bics	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2202      	movs	r2, #2
 8005eb8:	4393      	bics	r3, r2
 8005eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a23      	ldr	r2, [pc, #140]	@ (8005f58 <TIM_OC1_SetConfig+0xe8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d007      	beq.n	8005ede <TIM_OC1_SetConfig+0x6e>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	@ (8005f5c <TIM_OC1_SetConfig+0xec>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_OC1_SetConfig+0x6e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a21      	ldr	r2, [pc, #132]	@ (8005f60 <TIM_OC1_SetConfig+0xf0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d10c      	bne.n	8005ef8 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	4393      	bics	r3, r2
 8005ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	4393      	bics	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a17      	ldr	r2, [pc, #92]	@ (8005f58 <TIM_OC1_SetConfig+0xe8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_OC1_SetConfig+0xa0>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a16      	ldr	r2, [pc, #88]	@ (8005f5c <TIM_OC1_SetConfig+0xec>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC1_SetConfig+0xa0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a15      	ldr	r2, [pc, #84]	@ (8005f60 <TIM_OC1_SetConfig+0xf0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d111      	bne.n	8005f34 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4a14      	ldr	r2, [pc, #80]	@ (8005f64 <TIM_OC1_SetConfig+0xf4>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4a13      	ldr	r2, [pc, #76]	@ (8005f68 <TIM_OC1_SetConfig+0xf8>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	697a      	ldr	r2, [r7, #20]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	46c0      	nop			@ (mov r8, r8)
 8005f50:	46bd      	mov	sp, r7
 8005f52:	b006      	add	sp, #24
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	46c0      	nop			@ (mov r8, r8)
 8005f58:	40012c00 	.word	0x40012c00
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800
 8005f64:	fffffeff 	.word	0xfffffeff
 8005f68:	fffffdff 	.word	0xfffffdff

08005f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	2210      	movs	r2, #16
 8005f82:	4393      	bics	r3, r2
 8005f84:	001a      	movs	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a2c      	ldr	r2, [pc, #176]	@ (800604c <TIM_OC2_SetConfig+0xe0>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8006050 <TIM_OC2_SetConfig+0xe4>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	021b      	lsls	r3, r3, #8
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	4393      	bics	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	011b      	lsls	r3, r3, #4
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a22      	ldr	r2, [pc, #136]	@ (8006054 <TIM_OC2_SetConfig+0xe8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d10d      	bne.n	8005fea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2280      	movs	r2, #128	@ 0x80
 8005fd2:	4393      	bics	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2240      	movs	r2, #64	@ 0x40
 8005fe6:	4393      	bics	r3, r2
 8005fe8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a19      	ldr	r2, [pc, #100]	@ (8006054 <TIM_OC2_SetConfig+0xe8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_OC2_SetConfig+0x96>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a18      	ldr	r2, [pc, #96]	@ (8006058 <TIM_OC2_SetConfig+0xec>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_OC2_SetConfig+0x96>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a17      	ldr	r2, [pc, #92]	@ (800605c <TIM_OC2_SetConfig+0xf0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d113      	bne.n	800602a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	4a16      	ldr	r2, [pc, #88]	@ (8006060 <TIM_OC2_SetConfig+0xf4>)
 8006006:	4013      	ands	r3, r2
 8006008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4a15      	ldr	r2, [pc, #84]	@ (8006064 <TIM_OC2_SetConfig+0xf8>)
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	699b      	ldr	r3, [r3, #24]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	46c0      	nop			@ (mov r8, r8)
 8006046:	46bd      	mov	sp, r7
 8006048:	b006      	add	sp, #24
 800604a:	bd80      	pop	{r7, pc}
 800604c:	ffff8fff 	.word	0xffff8fff
 8006050:	fffffcff 	.word	0xfffffcff
 8006054:	40012c00 	.word	0x40012c00
 8006058:	40014400 	.word	0x40014400
 800605c:	40014800 	.word	0x40014800
 8006060:	fffffbff 	.word	0xfffffbff
 8006064:	fffff7ff 	.word	0xfffff7ff

08006068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	4a31      	ldr	r2, [pc, #196]	@ (8006144 <TIM_OC3_SetConfig+0xdc>)
 800607e:	401a      	ands	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2270      	movs	r2, #112	@ 0x70
 8006094:	4393      	bics	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2203      	movs	r2, #3
 800609c:	4393      	bics	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4a26      	ldr	r2, [pc, #152]	@ (8006148 <TIM_OC3_SetConfig+0xe0>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a22      	ldr	r2, [pc, #136]	@ (800614c <TIM_OC3_SetConfig+0xe4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d10d      	bne.n	80060e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	4a21      	ldr	r2, [pc, #132]	@ (8006150 <TIM_OC3_SetConfig+0xe8>)
 80060ca:	4013      	ands	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006154 <TIM_OC3_SetConfig+0xec>)
 80060de:	4013      	ands	r3, r2
 80060e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a19      	ldr	r2, [pc, #100]	@ (800614c <TIM_OC3_SetConfig+0xe4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <TIM_OC3_SetConfig+0x92>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006158 <TIM_OC3_SetConfig+0xf0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_OC3_SetConfig+0x92>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a19      	ldr	r2, [pc, #100]	@ (800615c <TIM_OC3_SetConfig+0xf4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d113      	bne.n	8006122 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	4a18      	ldr	r2, [pc, #96]	@ (8006160 <TIM_OC3_SetConfig+0xf8>)
 80060fe:	4013      	ands	r3, r2
 8006100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4a17      	ldr	r2, [pc, #92]	@ (8006164 <TIM_OC3_SetConfig+0xfc>)
 8006106:	4013      	ands	r3, r2
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	46c0      	nop			@ (mov r8, r8)
 800613e:	46bd      	mov	sp, r7
 8006140:	b006      	add	sp, #24
 8006142:	bd80      	pop	{r7, pc}
 8006144:	fffffeff 	.word	0xfffffeff
 8006148:	fffffdff 	.word	0xfffffdff
 800614c:	40012c00 	.word	0x40012c00
 8006150:	fffff7ff 	.word	0xfffff7ff
 8006154:	fffffbff 	.word	0xfffffbff
 8006158:	40014400 	.word	0x40014400
 800615c:	40014800 	.word	0x40014800
 8006160:	ffffefff 	.word	0xffffefff
 8006164:	ffffdfff 	.word	0xffffdfff

08006168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a1b      	ldr	r3, [r3, #32]
 8006176:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	4a24      	ldr	r2, [pc, #144]	@ (8006210 <TIM_OC4_SetConfig+0xa8>)
 800617e:	401a      	ands	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a20      	ldr	r2, [pc, #128]	@ (8006214 <TIM_OC4_SetConfig+0xac>)
 8006194:	4013      	ands	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a1f      	ldr	r2, [pc, #124]	@ (8006218 <TIM_OC4_SetConfig+0xb0>)
 800619c:	4013      	ands	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	021b      	lsls	r3, r3, #8
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4a1b      	ldr	r2, [pc, #108]	@ (800621c <TIM_OC4_SetConfig+0xb4>)
 80061b0:	4013      	ands	r3, r2
 80061b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	031b      	lsls	r3, r3, #12
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a17      	ldr	r2, [pc, #92]	@ (8006220 <TIM_OC4_SetConfig+0xb8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d007      	beq.n	80061d8 <TIM_OC4_SetConfig+0x70>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a16      	ldr	r2, [pc, #88]	@ (8006224 <TIM_OC4_SetConfig+0xbc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC4_SetConfig+0x70>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a15      	ldr	r2, [pc, #84]	@ (8006228 <TIM_OC4_SetConfig+0xc0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d109      	bne.n	80061ec <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	4a14      	ldr	r2, [pc, #80]	@ (800622c <TIM_OC4_SetConfig+0xc4>)
 80061dc:	4013      	ands	r3, r2
 80061de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	019b      	lsls	r3, r3, #6
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	621a      	str	r2, [r3, #32]
}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	46bd      	mov	sp, r7
 800620a:	b006      	add	sp, #24
 800620c:	bd80      	pop	{r7, pc}
 800620e:	46c0      	nop			@ (mov r8, r8)
 8006210:	ffffefff 	.word	0xffffefff
 8006214:	ffff8fff 	.word	0xffff8fff
 8006218:	fffffcff 	.word	0xfffffcff
 800621c:	ffffdfff 	.word	0xffffdfff
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40014400 	.word	0x40014400
 8006228:	40014800 	.word	0x40014800
 800622c:	ffffbfff 	.word	0xffffbfff

08006230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	221f      	movs	r2, #31
 8006240:	4013      	ands	r3, r2
 8006242:	2201      	movs	r2, #1
 8006244:	409a      	lsls	r2, r3
 8006246:	0013      	movs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	43d2      	mvns	r2, r2
 8006252:	401a      	ands	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	211f      	movs	r1, #31
 8006260:	400b      	ands	r3, r1
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	4099      	lsls	r1, r3
 8006266:	000b      	movs	r3, r1
 8006268:	431a      	orrs	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	46c0      	nop			@ (mov r8, r8)
 8006270:	46bd      	mov	sp, r7
 8006272:	b006      	add	sp, #24
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	223c      	movs	r2, #60	@ 0x3c
 8006286:	5c9b      	ldrb	r3, [r3, r2]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800628c:	2302      	movs	r3, #2
 800628e:	e042      	b.n	8006316 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	223c      	movs	r2, #60	@ 0x3c
 8006294:	2101      	movs	r1, #1
 8006296:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	223d      	movs	r2, #61	@ 0x3d
 800629c:	2102      	movs	r1, #2
 800629e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2270      	movs	r2, #112	@ 0x70
 80062b4:	4393      	bics	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a14      	ldr	r2, [pc, #80]	@ (8006320 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00a      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	2380      	movs	r3, #128	@ 0x80
 80062da:	05db      	lsls	r3, r3, #23
 80062dc:	429a      	cmp	r2, r3
 80062de:	d004      	beq.n	80062ea <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a0f      	ldr	r2, [pc, #60]	@ (8006324 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10c      	bne.n	8006304 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2280      	movs	r2, #128	@ 0x80
 80062ee:	4393      	bics	r3, r2
 80062f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	223d      	movs	r2, #61	@ 0x3d
 8006308:	2101      	movs	r1, #1
 800630a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	223c      	movs	r2, #60	@ 0x3c
 8006310:	2100      	movs	r1, #0
 8006312:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	0018      	movs	r0, r3
 8006318:	46bd      	mov	sp, r7
 800631a:	b004      	add	sp, #16
 800631c:	bd80      	pop	{r7, pc}
 800631e:	46c0      	nop			@ (mov r8, r8)
 8006320:	40012c00 	.word	0x40012c00
 8006324:	40000400 	.word	0x40000400

08006328 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	223c      	movs	r2, #60	@ 0x3c
 800633a:	5c9b      	ldrb	r3, [r3, r2]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006340:	2302      	movs	r3, #2
 8006342:	e03e      	b.n	80063c2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	223c      	movs	r2, #60	@ 0x3c
 8006348:	2101      	movs	r1, #1
 800634a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	22ff      	movs	r2, #255	@ 0xff
 8006350:	4393      	bics	r3, r2
 8006352:	001a      	movs	r2, r3
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4313      	orrs	r3, r2
 800635a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a1b      	ldr	r2, [pc, #108]	@ (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006360:	401a      	ands	r2, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	4313      	orrs	r3, r2
 8006368:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4a18      	ldr	r2, [pc, #96]	@ (80063d0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800636e:	401a      	ands	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a16      	ldr	r2, [pc, #88]	@ (80063d4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800637c:	401a      	ands	r2, r3
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4313      	orrs	r3, r2
 8006384:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4a13      	ldr	r2, [pc, #76]	@ (80063d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800638a:	401a      	ands	r2, r3
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	691b      	ldr	r3, [r3, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4a11      	ldr	r2, [pc, #68]	@ (80063dc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006398:	401a      	ands	r2, r3
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4a0e      	ldr	r2, [pc, #56]	@ (80063e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80063a6:	401a      	ands	r2, r3
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	69db      	ldr	r3, [r3, #28]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	223c      	movs	r2, #60	@ 0x3c
 80063bc:	2100      	movs	r1, #0
 80063be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	0018      	movs	r0, r3
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b004      	add	sp, #16
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	fffffcff 	.word	0xfffffcff
 80063d0:	fffffbff 	.word	0xfffffbff
 80063d4:	fffff7ff 	.word	0xfffff7ff
 80063d8:	ffffefff 	.word	0xffffefff
 80063dc:	ffffdfff 	.word	0xffffdfff
 80063e0:	ffffbfff 	.word	0xffffbfff

080063e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063ec:	46c0      	nop			@ (mov r8, r8)
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b002      	add	sp, #8
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063fc:	46c0      	nop			@ (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	b002      	add	sp, #8
 8006402:	bd80      	pop	{r7, pc}

08006404 <memset>:
 8006404:	0003      	movs	r3, r0
 8006406:	1882      	adds	r2, r0, r2
 8006408:	4293      	cmp	r3, r2
 800640a:	d100      	bne.n	800640e <memset+0xa>
 800640c:	4770      	bx	lr
 800640e:	7019      	strb	r1, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	e7f9      	b.n	8006408 <memset+0x4>

08006414 <__libc_init_array>:
 8006414:	b570      	push	{r4, r5, r6, lr}
 8006416:	2600      	movs	r6, #0
 8006418:	4c0c      	ldr	r4, [pc, #48]	@ (800644c <__libc_init_array+0x38>)
 800641a:	4d0d      	ldr	r5, [pc, #52]	@ (8006450 <__libc_init_array+0x3c>)
 800641c:	1b64      	subs	r4, r4, r5
 800641e:	10a4      	asrs	r4, r4, #2
 8006420:	42a6      	cmp	r6, r4
 8006422:	d109      	bne.n	8006438 <__libc_init_array+0x24>
 8006424:	2600      	movs	r6, #0
 8006426:	f000 f819 	bl	800645c <_init>
 800642a:	4c0a      	ldr	r4, [pc, #40]	@ (8006454 <__libc_init_array+0x40>)
 800642c:	4d0a      	ldr	r5, [pc, #40]	@ (8006458 <__libc_init_array+0x44>)
 800642e:	1b64      	subs	r4, r4, r5
 8006430:	10a4      	asrs	r4, r4, #2
 8006432:	42a6      	cmp	r6, r4
 8006434:	d105      	bne.n	8006442 <__libc_init_array+0x2e>
 8006436:	bd70      	pop	{r4, r5, r6, pc}
 8006438:	00b3      	lsls	r3, r6, #2
 800643a:	58eb      	ldr	r3, [r5, r3]
 800643c:	4798      	blx	r3
 800643e:	3601      	adds	r6, #1
 8006440:	e7ee      	b.n	8006420 <__libc_init_array+0xc>
 8006442:	00b3      	lsls	r3, r6, #2
 8006444:	58eb      	ldr	r3, [r5, r3]
 8006446:	4798      	blx	r3
 8006448:	3601      	adds	r6, #1
 800644a:	e7f2      	b.n	8006432 <__libc_init_array+0x1e>
 800644c:	080064a4 	.word	0x080064a4
 8006450:	080064a4 	.word	0x080064a4
 8006454:	080064a8 	.word	0x080064a8
 8006458:	080064a4 	.word	0x080064a4

0800645c <_init>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	46c0      	nop			@ (mov r8, r8)
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr

08006468 <_fini>:
 8006468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800646a:	46c0      	nop			@ (mov r8, r8)
 800646c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800646e:	bc08      	pop	{r3}
 8006470:	469e      	mov	lr, r3
 8006472:	4770      	bx	lr
